:: Countable Sets and Hessenberg's Theorem
::  by Grzegorz Bancerek
::
:: Received September 5, 1990
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies ORDINAL1, CARD_1, FUNCT_1, FINSET_1, TARSKI, ORDINAL2, BOOLE,
      RELAT_1, CARD_2, ZFMISC_1, GROUP_1, ARYTM_3, MCART_1, FINSEQ_2, FINSEQ_1,
      PROB_1, RLVECT_1, FUNCOP_1, FUNCT_2, PARTFUN1, FUNCT_4, CARD_4, HAHNBAN,
      FINSUB_1, ARYTM, SUPINF_2;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, CARD_1, NUMBERS, XCMPLX_0,
      REAL_1, NAT_1, NAT_D, RELAT_1, FUNCT_1, FINSEQ_1, FINSET_1, ORDINAL1,
      WELLORD2, ORDINAL2, MCART_1, DOMAIN_1, CARD_2, FINSUB_1, FINSEQ_2,
      RELSET_1, FUNCT_2, BINOP_1, FUNCT_4, FUNCOP_1, PARTFUN1, NEWTON, CARD_3,
      XXREAL_0;
 constructors PARTFUN1, WELLORD2, BINOP_1, DOMAIN_1, FUNCOP_1, FUNCT_4,
      ORDINAL3, XXREAL_0, NAT_1, NAT_D, MEMBERED, CARD_2, CARD_3, NEWTON,
      FINSUB_1;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, ORDINAL1, FINSET_1,
      XXREAL_0, NAT_1, CARD_1, MEMBERED, FINSEQ_1, FINSEQ_2, CARD_3, FINSUB_1,
      XCMPLX_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;


begin

reserve X,Y,Z,x,y,y1,y2 for set,
  D for non empty set,
  k,m,n,n1,n2,n3,m2,m1 for Nat,
  A,B for Ordinal,
  L,K,M,N for Cardinal,
  f,g for Function;

theorem :: CARD_4:1
  X is finite iff Card X is finite;

theorem :: CARD_4:2
  X is finite iff Card X in omega;

canceled 5;

theorem :: CARD_4:8
  A is infinite iff omega c= A;

canceled 4;

theorem :: CARD_4:13
  N is finite & not M is finite implies N in M & N c= M;

theorem :: CARD_4:14
  not X is finite iff ex Y st Y c= X & Card Y = omega;

theorem :: CARD_4:15
  NAT is infinite;

canceled;

theorem :: CARD_4:17
  X = {} iff Card X = 0;

canceled 2;

theorem :: CARD_4:20
  Card X = Card Y iff nextcard X = nextcard Y;

theorem :: CARD_4:21
  M = N iff nextcard N = nextcard M;

theorem :: CARD_4:22
  N in M iff nextcard N c= M;

theorem :: CARD_4:23
  N in nextcard M iff N c= M;

theorem :: CARD_4:24
  0 in M iff 1 c= M;

theorem :: CARD_4:25
  1 in M iff 2 c= M;

theorem :: CARD_4:26
  M is finite & (N c= M or N in M) implies N is finite;

theorem :: CARD_4:27
  A is_limit_ordinal iff for B,n st B in A holds B+^ n in A;

theorem :: CARD_4:28
  A+^succ n = succ A +^ n & A +^ (n+1) = succ A +^ n;

theorem :: CARD_4:29
  ex n st A*^succ 1 = A +^ n;

theorem :: CARD_4:30
  A is_limit_ordinal implies A *^ succ 1 = A;

theorem :: CARD_4:31
  omega c= A implies 1+^A = A;

theorem :: CARD_4:32
  M is infinite implies M is_limit_ordinal;

theorem :: CARD_4:33
  not M is finite implies M+`M = M;

theorem :: CARD_4:34
  not M is finite & (N c= M or N in M) implies M+`N = M & N+`M = M;

theorem :: CARD_4:35
  not X is finite & (X,Y are_equipotent or Y,X are_equipotent) implies
  X \/ Y,X are_equipotent & Card (X \/ Y) = Card X;

theorem :: CARD_4:36
  not X is finite & Y is finite implies
  X \/ Y,X are_equipotent & Card (X \/ Y) = Card X;

theorem :: CARD_4:37
  not X is finite & (Card Y in Card X or Card Y c= Card X) implies
  X \/ Y,X are_equipotent & Card (X \/ Y) = Card X;

theorem :: CARD_4:38
  for M,N being finite Cardinal holds M+`N is finite;

theorem :: CARD_4:39
  not M is finite implies not M+`N is finite & not N+`M is finite;

theorem :: CARD_4:40
  for M,N being finite Cardinal holds M*`N is finite;

theorem :: CARD_4:41
  K in L & M in N or K c= L & M in N or K in L & M c= N or K c= L & M c= N
  implies K+`M c= L+`N & M+`K c= L+`N;

theorem :: CARD_4:42
  M in N or M c= N implies K+`M c= K+`N & K+`M c= N+`K &
  M+`K c= K+`N & M+`K c= N+`K;

definition
  let X;
  attr X is countable means
:: CARD_4:def 1

  Card X c= omega;
  attr X is denumerable means
:: CARD_4:def 2
  Card X = omega;
end;

registration
 cluster denumerable -> countable infinite set;
 cluster countable infinite -> denumerable set;
end;

registration
  cluster finite -> countable set;
end;

theorem :: CARD_4:43
  X is finite implies X is countable;

registration
  cluster omega -> denumerable;
end;

registration
 cluster denumerable set;
end;

theorem :: CARD_4:44
  omega is countable;

theorem :: CARD_4:45
  X is countable iff ex f st dom f = NAT & X c= rng f;

theorem :: CARD_4:46
  Y c= X & X is countable implies Y is countable;

theorem :: CARD_4:47
  X is countable & Y is countable implies X \/ Y is countable;

theorem :: CARD_4:48
  X is countable implies X /\ Y is countable & Y /\ X is countable;

theorem :: CARD_4:49
  X is countable implies X \ Y is countable;

theorem :: CARD_4:50
  X is countable & Y is countable implies X \+\ Y is countable;

reserve r for Real;

theorem :: CARD_4:51
  r <> 0 or n = 0 iff r|^n <> 0;

theorem :: CARD_4:52
  (2|^n1)*(2*m1+1) = (2|^n2)*(2*m2+1) implies n1 = n2 & m1 = m2;

theorem :: CARD_4:53
  [:NAT,NAT:],NAT are_equipotent & Card NAT = Card [:NAT,NAT:];

theorem :: CARD_4:54
  (omega)*`(omega) = omega;

theorem :: CARD_4:55
  X is countable & Y is countable implies [:X,Y:] is countable;

theorem :: CARD_4:56
  1-tuples_on D,D are_equipotent & Card (1-tuples_on D) = Card D;

reserve p,q for FinSequence,
        k,m,n,n1,n2,n3,m2,m1 for Element of NAT;


theorem :: CARD_4:57
  [:n-tuples_on D, m-tuples_on D:],(n+m)-tuples_on D are_equipotent &
  Card [:n-tuples_on D, m-tuples_on D:] = Card ((n+m)-tuples_on D);

theorem :: CARD_4:58
  D is countable implies n-tuples_on D is countable;

theorem :: CARD_4:59
  (Card dom f c= M & for x st x in dom f holds Card (f.x) c= N) implies
  Card Union f c= M*`N;

theorem :: CARD_4:60
  (Card X c= M & for Y st Y in X holds Card Y c= N) implies Card union X c=
  M*`N;

theorem :: CARD_4:61
  for f st dom f is countable &
  for x st x in dom f holds f.x is countable holds Union f is countable;

theorem :: CARD_4:62
  (X is countable & for Y st Y in X holds Y is countable) implies
  union X is countable;

theorem :: CARD_4:63
  for f st dom f is finite &
  for x st x in dom f holds f.x is finite holds Union f is finite;

canceled;

theorem :: CARD_4:65
  D is countable implies D* is countable;

theorem :: CARD_4:66
  omega c= Card (D*);

scheme :: CARD_4:sch 1
 FraenCoun1 { f(set)->set, P[set] } : { f(n) : P[n] } is countable;

scheme :: CARD_4:sch 2
 FraenCoun2 { f(set,set)->set, P[set,set] } :
  { f(n1,n2) : P[n1,n2] } is countable;

scheme :: CARD_4:sch 3
 FraenCoun3 { f(set,set,set)->set, P[set,set,set] } :
  { f(n1,n2,n3) : P[n1,n2,n3] } is countable;

theorem :: CARD_4:67
  (omega)*`(Card n) c= omega & (Card n)*`(omega) c= omega;

theorem :: CARD_4:68
  K in L & M in N or K c= L & M in N or K in L & M c= N or K c= L & M c= N
  implies K*`M c= L*`N & M*`K c= L*`N;

theorem :: CARD_4:69
  M in N or M c= N implies
  K*`M c= K*`N & K*`M c= N*`K & M*`K c= K*`N & M*`K c= N*`K;

theorem :: CARD_4:70
  K in L & M in N or K c= L & M in N or K in L & M c= N or K c= L & M c= N
  implies K = 0 or exp(K,M) c= exp(L,N);

theorem :: CARD_4:71
  M in N or M c= N implies K = 0 or
  exp(K,M) c= exp(K,N) & exp(M,K) c= exp(N,K);

theorem :: CARD_4:72
  M c= M+`N & N c= M+`N;

theorem :: CARD_4:73
  N <> 0 implies M c= M*`N & M c= N*`M;

theorem :: CARD_4:74
  K in L & M in N implies K+`M in L+`N & M+`K in L+`N;

theorem :: CARD_4:75
  K+`M in K+`N implies M in N;

theorem :: CARD_4:76
  Card X +` Card Y = Card X & Card Y in Card X implies Card (X \ Y) = Card X;

reserve f,f1,f2 for Function,
  X1,X2 for set;

:: Hessenberg's theorem

theorem :: CARD_4:77
  not M is finite implies M*`M = M;

theorem :: CARD_4:78
  not M is finite & 0 in N & (N c= M or N in M) implies M*`N = M & N*`M = M;

theorem :: CARD_4:79
  not M is finite & (N c= M or N in M) implies M*`N c= M & N*`M c= M;

theorem :: CARD_4:80
  not X is finite implies [:X,X:],X are_equipotent & Card [:X,X:] = Card X;

theorem :: CARD_4:81
  not X is finite & Y is finite & Y <> {} implies
  [:X,Y:],X are_equipotent & Card [:X,Y:] = Card X;

theorem :: CARD_4:82
  K in L & M in N implies K*`M in L*`N & M*`K in L*`N;

theorem :: CARD_4:83
  K*`M in K*`N implies M in N;

theorem :: CARD_4:84
  not X is finite implies Card X = (omega)*`Card X;

theorem :: CARD_4:85
  X <> {} & X is finite & not Y is finite implies Card Y *` Card X = Card Y;

theorem :: CARD_4:86
  not D is finite & n <> 0 implies n-tuples_on D,D are_equipotent &
  Card (n-tuples_on D) = Card D;

theorem :: CARD_4:87
  not D is finite implies Card D = Card (D*);

begin :: Addenda

:: from SF_MASTR, 2007.07.25, A.T.

registration
  let A be finite set, B be set, f be Function of A, Fin B;
  cluster Union f -> finite;
end;

registration
 cluster non empty finite set;
end;

:: from WAYBEL12 (proof form SUPINF_2), 2008.07.07, A.T.

theorem :: CARD_4:88
  for A being non empty countable set
  ex f being Function of NAT, A st rng f = A;
