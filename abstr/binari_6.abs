:: On the Calculus of Binary Arithmetics, Part {II}
::  by Shunichi Kobayashi
:: 
:: Received November 23, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies MARGREL1, ZF_LANG, BINARITH, BVFUNC_1, BINARI_5;
 notations MARGREL1, BINARITH, BVFUNC_1, BINARI_5;
 constructors BINARITH, XREAL_0, BVFUNC_1, BINARI_5;
 registrations MARGREL1, BINARITH, BVFUNC_1, BINARI_5;


begin

 reserve x,y,z,w for boolean set;

theorem :: BINARI_6:1
  TRUE 'imp' x = x;

theorem :: BINARI_6:2
  FALSE 'imp' x = TRUE;

theorem :: BINARI_6:3
  x 'imp' x = TRUE &
   'not' (x 'imp' x) = FALSE;

theorem :: BINARI_6:4
  'not' (x 'imp' y) = x '&' 'not' y;

theorem :: BINARI_6:5
  x 'imp' 'not' x = 'not' x &
    'not' (x 'imp' 'not' x) = x;

theorem :: BINARI_6:6
  'not' x 'imp' x = x;

theorem :: BINARI_6:7
  TRUE 'eqv' x = x;

theorem :: BINARI_6:8
  FALSE 'eqv' x = 'not' x;

theorem :: BINARI_6:9
  x 'eqv' x = TRUE &
    'not' (x 'eqv' x) = FALSE;

theorem :: BINARI_6:10
  'not' x 'eqv' x = FALSE;

theorem :: BINARI_6:11
  x '&' (y 'eqv' z) = x '&' ('not' y 'or' z) '&' ('not' z 'or' y);

theorem :: BINARI_6:12
  x '&' (y 'nand' z) = x '&' 'not' y 'or' x '&' 'not' z;

theorem :: BINARI_6:13
  x '&' (y 'nor' z) = x '&' 'not' y '&' 'not' z;

theorem :: BINARI_6:14
  x '&' (x '&' y) = x '&' y;

theorem :: BINARI_6:15
  x '&' (x 'or' y) = x 'or' (x '&' y);

theorem :: BINARI_6:16
  x '&' (x 'xor' y) = x '&' 'not' y;

theorem :: BINARI_6:17
  x '&' (x 'imp' y) = x '&' y;

theorem :: BINARI_6:18
  x '&' (x 'eqv' y) = x '&' y;

theorem :: BINARI_6:19
  x '&' (x 'nand' y) = x '&' 'not' y;

theorem :: BINARI_6:20
  x '&' (x 'nor' y) = FALSE;

theorem :: BINARI_6:21
  x 'or' (y 'xor' z) = x 'or' ('not' y '&' z) 'or' (y '&' 'not' z);

theorem :: BINARI_6:22
  x 'or' (y 'eqv' z) = (x 'or' 'not' y 'or' z) '&' (x 'or' 'not' z 'or' y);

theorem :: BINARI_6:23
  x 'or' (y 'nand' z) = x 'or' 'not' y 'or' 'not' z;

theorem :: BINARI_6:24
  x 'or' (y 'nor' z) = (x 'or' 'not' y) '&' (x 'or' 'not' z) &
    x 'or' (y 'nor' z) = (y 'imp' x) '&' (z 'imp' x);

theorem :: BINARI_6:25
  x 'or' (x 'or' y) = x 'or' y;

theorem :: BINARI_6:26
  x 'or' (x 'imp' y) = TRUE;

theorem :: BINARI_6:27
  x 'or' (x 'eqv' y) = y 'imp' x;

theorem :: BINARI_6:28
  x 'or' (x 'nand' y) = TRUE;

theorem :: BINARI_6:29
  x 'or' (x 'nor' y) = y 'imp' x;

theorem :: BINARI_6:30
  x 'imp' (y 'xor' z) = 'not' x 'or' ('not' y '&' z) 'or' (y '&' 'not' z);

theorem :: BINARI_6:31
  x 'imp' (y 'eqv' z) =
    ('not' x 'or' 'not' y 'or' z) '&' ('not' x 'or' y 'or' 'not' z);

theorem :: BINARI_6:32
  x 'imp' (y 'nand' z) = 'not' x 'or' 'not' y 'or' 'not' z;

theorem :: BINARI_6:33
  x 'imp' (y 'nor' z) = ('not' x 'or' 'not' y) '&' ('not' x 'or' 'not' z) &
    x 'imp' (y 'nor' z) = (x 'imp' 'not' y) '&' (x 'imp' 'not' z);

theorem :: BINARI_6:34
  x 'imp' (x '&' y) = x 'imp' y;

theorem :: BINARI_6:35
  x 'imp' (x 'or' y) = TRUE;

theorem :: BINARI_6:36
  x 'imp' (x 'xor' y) = 'not' x 'or' 'not' y;

theorem :: BINARI_6:37
  x 'imp' (x 'imp' y) = x 'imp' y;

theorem :: BINARI_6:38
  x 'imp' (x 'eqv' y) = x 'imp' y &
    x 'imp' (x 'eqv' y) = x 'imp' (x 'imp' y);

theorem :: BINARI_6:39
  x 'imp' (x 'nand' y) = 'not' (x '&' y);

theorem :: BINARI_6:40
  x 'imp' (x 'nor' y) = 'not' x;

theorem :: BINARI_6:41
  x 'nand' (y 'imp' z) = ('not' x 'or' y) '&' ('not' x 'or' 'not' z) &
    x 'nand' (y 'imp' z) = (x 'imp' y) '&' (x 'imp' 'not' z);

theorem :: BINARI_6:42
  x 'nand' (y 'eqv' z) =
    'not' ((x '&' ('not' y 'or' z)) '&' ('not' z 'or' y));

theorem :: BINARI_6:43
  x 'nand' (y 'nand' z) = ('not' x 'or' y) '&' ('not' x 'or' z) &
    x 'nand' (y 'nand' z) = (x 'imp' y) '&' (x 'imp' z);

theorem :: BINARI_6:44
  x 'nand' (y 'nor' z) = 'not' x 'or' y 'or' z;

theorem :: BINARI_6:45
  x 'nand' (x '&' y) = 'not' (x '&' y);

theorem :: BINARI_6:46
  x 'nand' (x 'xor' y) = x 'imp' y;

theorem :: BINARI_6:47
  x 'nand' (x 'imp' y) = 'not' (x '&' y);

theorem :: BINARI_6:48
  x 'nand' (x 'eqv' y) = 'not' (x '&' y);

theorem :: BINARI_6:49
  x 'nand' (x 'nand' y) = x 'imp' y;

theorem :: BINARI_6:50
  x 'nand' (x 'nor' y) = TRUE;

theorem :: BINARI_6:51
  x 'nor' (y 'xor' z) = 'not' (x 'or' ('not' y '&' z) 'or' (y '&' 'not' z));

theorem :: BINARI_6:52
  x 'nor' (y 'eqv' z) =
    'not' ((x 'or' 'not' y 'or' z) '&' (x 'or' 'not' z 'or' y));

theorem :: BINARI_6:53
  x 'nor' (y 'nand' z) = 'not' x '&' y '&' z;

theorem :: BINARI_6:54
  x 'nor' (y 'nor' z) = 'not' x '&' y 'or' 'not' x '&' z;

theorem :: BINARI_6:55
  x 'nor' (x '&' y) = 'not' x;

theorem :: BINARI_6:56
  x 'nor' (x 'or' y) = 'not' x '&' 'not' y;

theorem :: BINARI_6:57
  x 'nor' (x 'xor' y) = 'not' x '&' 'not' y;

theorem :: BINARI_6:58
  x 'nor' (x 'imp' y) = FALSE;

theorem :: BINARI_6:59
  x 'nor' (x 'eqv' y) = 'not' x '&' y;

theorem :: BINARI_6:60
  x 'nor' (x 'nand' y) = FALSE;

theorem :: BINARI_6:61
  x 'nor' (x 'nor' y) = 'not' x '&' y;

theorem :: BINARI_6:62
  x 'xor' (y '&' z) = (x 'or' (y '&' z)) '&' ('not' x 'or' 'not' (y '&' z));

theorem :: BINARI_6:63
  x 'xor' (x '&' y) = x '&' 'not' y;

theorem :: BINARI_6:64
  x 'xor' (x 'or' y) = 'not' x '&' y;

theorem :: BINARI_6:65
  'not' x '&' (x 'xor' y) = 'not' x '&' y;

theorem :: BINARI_6:66
  x '&' 'not' (x 'xor' y) = x '&' y;

theorem :: BINARI_6:67
  x 'xor' (x 'xor' y) = y;

theorem :: BINARI_6:68
  x '&' 'not' (x 'imp' y) = x '&' 'not' y;

theorem :: BINARI_6:69
  x 'xor' (x 'imp' y) = 'not' x 'or' 'not' y;

theorem :: BINARI_6:70
  'not' x '&' (x 'eqv' y) = 'not' x '&' 'not' y;

theorem :: BINARI_6:71
  x '&' 'not' (x 'eqv' y) = x '&' 'not' y;

theorem :: BINARI_6:72
  x 'xor' (x 'eqv' y) = 'not' y;

theorem :: BINARI_6:73
  x 'xor' (x 'nand' y) = x 'imp' y;

theorem :: BINARI_6:74
  x 'xor' (x 'nor' y) = y 'imp' x;

theorem :: BINARI_6:75
  'not' x '&' (x 'imp' y) = 'not' x 'or' 'not' x '&' y;

theorem :: BINARI_6:76
  'not' x '&' (y 'eqv' z) = 'not' x '&' ('not' y 'or' z) '&' ('not' z 'or' y);

theorem :: BINARI_6:77
  'not' x '&' (x 'eqv' y) = ('not' x '&' 'not' y) '&' ('not' x 'or' y);

theorem :: BINARI_6:78
  'not' x '&' (x 'nand' y) = 'not' x 'or' 'not' x '&' 'not' y;

theorem :: BINARI_6:79
  'not' x '&' (x 'nor' y) = 'not' x '&' 'not' y;

theorem :: BINARI_6:80
  'not' x 'or' (x 'imp' y) = 'not' x 'or' y;

theorem :: BINARI_6:81
  'not' x 'or' (x 'eqv' y) = 'not' x 'or' y;

theorem :: BINARI_6:82
  'not' x 'or' (x 'nand' y) = 'not' x 'or' 'not' y;

theorem :: BINARI_6:83
  'not' x 'xor' (x 'imp' y) = x '&' y;

theorem :: BINARI_6:84
  'not' x 'xor' (y 'imp' x) = (x '&' (x 'or' 'not' y)) 'or' ('not' x '&' y);

theorem :: BINARI_6:85
  'not' (x 'imp' y) = x '&' 'not' y;

theorem :: BINARI_6:86
  'not' (x 'eqv' y) = (x '&' 'not' y) 'or' (y '&' 'not' x);

theorem :: BINARI_6:87
  'not' x 'xor' (x 'eqv' y) = y;
