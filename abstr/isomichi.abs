:: The Properties of Supercondensed Sets, Subcondensed Sets and Condensed Sets
::  by Magdalena Jastrz\c{e}bska and Adam Grabowski
:: 
:: Received March 31, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies BOOLE, SUBSET_1, PRE_TOPC, TOPS_1, ZFMISC_1, TDLAT_3, REALSET1,
      COLLSP, BORSUK_5, RAT_1, ARYTM, LIMFUNC1, TOPMETR, RCOMP_1, TEX_1,
      IRRAT_1, DECOMP_1, ISOMICHI;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, XREAL_0, LIMFUNC1, RCOMP_1,
      RCOMP_2, NUMBERS, STRUCT_0, PRE_TOPC, TOPS_1, TDLAT_3, REALSET1,
      REALSET2, TEX_1, TEX_2, TOPMETR, BORSUK_5, DECOMP_1, IRRAT_1, SEQ_4;
 constructors TOPS_1, TDLAT_3, PSCOMP_1, REALSET2, TEX_2, RCOMP_1, LIMFUNC1,
      BORSUK_5, PROB_1, RCOMP_2, TEX_1, TREAL_1, DECOMP_1, TOPGEN_1, RAT_1;
 registrations STRUCT_0, MEMBERED, TOPS_1, TEX_2, XREAL_0, TOPMETR, TEX_1,
      REALSET1, TOPREAL6;
 requirements BOOLE, SUBSET, NUMERALS, REAL;


begin :: Preliminaries

 reserve T for TopSpace,
         A, B for Subset of T;

registration let D be non trivial set;
  cluster ADTS D -> non trivial;
end;

registration
  cluster anti-discrete non trivial non empty strict TopSpace;
end;

theorem :: ISOMICHI:1
  Int Cl Int A /\ Int Cl Int B = Int Cl Int (A /\ B);

theorem :: ISOMICHI:2
  Cl Int Cl (A \/ B) = Cl Int Cl A \/ Cl Int Cl B;

begin :: Connections between Supercondensed, Condensed and Subcondensed Sets

definition let T be TopStruct, A be Subset of T;
  attr A is supercondensed means
:: ISOMICHI:def 1
    Int Cl A = Int A;
  attr A is subcondensed means
:: ISOMICHI:def 2
    Cl Int A = Cl A;
end;

theorem :: ISOMICHI:3  :: Remark 1
  A is closed implies A is supercondensed;

theorem :: ISOMICHI:4  :: Remark 1
  A is open implies A is subcondensed;

definition let T be TopSpace, A be Subset of T;
  redefine attr A is condensed means
:: ISOMICHI:def 3
    Cl Int A = Cl A & Int Cl A = Int A;
end;

theorem :: ISOMICHI:5  :: Remark 2
  A is condensed iff A is subcondensed & A is supercondensed;

registration let T be TopSpace;
  cluster condensed -> subcondensed supercondensed Subset of T;
  cluster subcondensed supercondensed -> condensed Subset of T;
end;

registration let T be TopSpace;
  cluster condensed subcondensed supercondensed Subset of T;
end;

theorem :: ISOMICHI:6 :: Theorem 1
  A is supercondensed implies A` is subcondensed;

theorem :: ISOMICHI:7 :: Theorem 1
  A is subcondensed implies A` is supercondensed;

:: Corollary to Theorem 1
::  A is condensed implies A` is condensed = TDLAT_1:16;

theorem :: ISOMICHI:8  :: Theorem 2
  A is supercondensed iff Int Cl A c= A;

theorem :: ISOMICHI:9  :: Theorem 2
  A is subcondensed iff A c= Cl Int A;

registration let T be TopSpace;
  cluster subcondensed -> semi-open Subset of T;
  cluster semi-open -> subcondensed Subset of T;
end;

theorem :: ISOMICHI:10  :: Corollary to Theorem 2
  A is condensed iff (Int Cl A c= A & A c= Cl Int A);

begin :: Regular Open and Regular Closed Sets

notation let T be TopStruct, A be Subset of T;
  synonym A is regular_open for A is open_condensed;
end;

notation let T be TopStruct, A be Subset of T;
  synonym A is regular_closed for A is closed_condensed;
end;

theorem :: ISOMICHI:11  :: Remark 1
  for T being TopSpace holds
    [#]T is regular_open & [#]T is regular_closed;

registration let T be TopSpace;
  cluster [#]T -> regular_open regular_closed;
end;

theorem :: ISOMICHI:12  :: Remark 1
  for X being TopSpace holds
    {}X is regular_open & {}X is regular_closed;

registration let T be TopSpace;
  cluster {}T -> regular_open regular_closed;
end;

theorem :: ISOMICHI:13
  Cl Int {}T = {}T;

theorem :: ISOMICHI:14
  Int Cl {}T = {}T;

theorem :: ISOMICHI:15  :: Remark 2
  A is regular_open implies A` is regular_closed;

registration let T be TopSpace;
  cluster regular_open regular_closed Subset of T;
end;

registration let T be TopSpace;
  let A be regular_open Subset of T;
  cluster A` -> regular_closed;
end;

theorem :: ISOMICHI:16  :: Remark 2
  A is regular_closed implies A` is regular_open;

registration let T be TopSpace;
  let A be regular_closed Subset of T;
  cluster A` -> regular_open;
end;

registration let T be TopSpace;
  cluster regular_open -> open Subset of T;
  cluster regular_closed -> closed Subset of T;
end;

:: Remark 3
:: (A is regular_open & B is regular_open) implies
::   A /\ B is regular_open by TOPS_1:109;
:: A is regular_closed & B is regular_closed implies
::   A \/ B is regular_closed by TOPS_1:108;

theorem :: ISOMICHI:17  :: Remark 4
  Int Cl A is regular_open & Cl Int A is regular_closed;

registration let T be TopSpace, A be Subset of T;
  cluster Int Cl A -> regular_open;
  cluster Cl Int A -> regular_closed;
end;

theorem :: ISOMICHI:18 :: Theorem 3
  A is regular_open iff (A is supercondensed & A is open);

theorem :: ISOMICHI:19 :: Theorem 3
  A is regular_closed iff (A is subcondensed & A is closed);

registration let T be TopSpace; :: Corollary to Theorem 3
  cluster regular_open -> condensed open Subset of T;
  cluster condensed open -> regular_open Subset of T;
  cluster regular_closed -> condensed closed Subset of T;
  cluster condensed closed -> regular_closed Subset of T;
end;

theorem :: ISOMICHI:20 :: Theorem 4
  A is condensed iff (ex B st B is regular_open & B c= A & A c= Cl B);

theorem :: ISOMICHI:21 :: Theorem 4
  A is condensed iff (ex B st B is regular_closed & Int B c= A & A c= B);

begin :: Boundaries and Borders

notation let T be TopStruct, A be Subset of T;
  synonym Bound A for Fr A;
end;

definition let T be TopStruct, A be Subset of T;
  redefine func Fr A equals
:: ISOMICHI:def 4
    Cl A \ Int A;
end;

:: Remark
::   Fr A = Cl A /\ Cl A` by TOPS_1:def 2;

theorem :: ISOMICHI:22
  Fr A is closed;

registration let T be TopSpace, A be Subset of T;
  cluster Fr A -> closed;
end;

theorem :: ISOMICHI:23 :: Theorem 5
  A is condensed iff
    Fr A = Cl Int A \ Int Cl A &
      Fr A = Cl Int A /\ Cl Int A`;

definition let T be TopStruct, A be Subset of T;
  func Border A -> Subset of T equals
:: ISOMICHI:def 5
    Int Fr A;
end;

theorem :: ISOMICHI:24  :: Theorem 6
  Border A is regular_open &
    Border A = (Int Cl A) \ (Cl Int A) &
      Border A = Int Cl A /\ (Int Cl A`);

registration let T be TopSpace, A be Subset of T;
  cluster Border A -> regular_open;
end;

theorem :: ISOMICHI:25  :: Theorem 7
  A is supercondensed iff (Int A is regular_open & Border A is empty);

theorem :: ISOMICHI:26  :: Theorem 7
  A is subcondensed iff (Cl A is regular_closed & Border A is empty);

registration let T be TopSpace, A be Subset of T; :: Remark
  cluster Border Border A -> empty;
end;

theorem :: ISOMICHI:27 :: Corollary to Theorem 7
  A is condensed iff
    Int A is regular_open & Cl A is regular_closed & Border A is empty;

begin :: Auxiliary Theorems

theorem :: ISOMICHI:28
  for A being Subset of R^1,
      a being real number st A = ].-infty, a.] holds
    Int A = ].-infty, a.[;

theorem :: ISOMICHI:29
  for A being Subset of R^1,
      a being real number st A = [.a,+infty.[ holds
    Int A = ].a,+infty.[;

theorem :: ISOMICHI:30
  for A being Subset of R^1,
      a, b being real number st
    A = ].-infty,a.] \/ IRRAT (a,b) \/ [.b,+infty.[ holds
    Cl A = the carrier of R^1;

theorem :: ISOMICHI:31
  for A being Subset of R^1,
      a, b being real number st A = RAT (a,b) holds
    Int A = {};

theorem :: ISOMICHI:32
  for A being Subset of R^1,
      a, b being real number st A = IRRAT (a,b) holds
    Int A = {};

theorem :: ISOMICHI:33
  for a,b being real number holds
    ].-infty,a.] \ ].-infty,b.[ = [.b,a.];

theorem :: ISOMICHI:34
  for a,b being real number st a < b holds
    [.b,+infty.[ misses ].-infty,a.[;

theorem :: ISOMICHI:35
  for a,b being real number st a >= b holds
    IRRAT (a,b) = {};

theorem :: ISOMICHI:36
  for a,b being real number holds
    IRRAT (a,b) c= [.a,+infty.[;

theorem :: ISOMICHI:37
  for A being Subset of R^1,
      a, b, c being real number st
    A = ].-infty, a .[ \/ RAT (b,c) & a < b & b < c holds
     Int A = ].-infty, a .[;

theorem :: ISOMICHI:38
  for a,b being real number holds
    [.a,b.] misses ].b,+infty.[;

theorem :: ISOMICHI:39
  for b being real number holds
    [.b,+infty.[ \ ].b,+infty.[ = {b};

theorem :: ISOMICHI:40
  for a,b being real number st a < b holds
    [.a,b.] = [.a,+infty.[ \ ].b,+infty.[;

theorem :: ISOMICHI:41
  for a,b being real number st a < b holds
    REAL = ].-infty,a.[ \/ [.a,b.] \/ ].b,+infty.[;

theorem :: ISOMICHI:42
  for a,b being real number holds
    ].a,b.[ = ].a,+infty.[ \ [.b,+infty.[;

theorem :: ISOMICHI:43
  for a,b,c being real number st b < c & c < a holds
    ].-infty,a.[ \ [.b,c.] = ].-infty, b .[ \/ ].c,a.[;

theorem :: ISOMICHI:44
  for A being Subset of R^1,
      a, b, c being real number st
    A = ].-infty, a .] \/ [.b,c.] & a < b & b < c holds
    Int A = ].-infty, a .[ \/ ].b,c.[;

begin :: Classification of Subsets

notation let A, B be set;
  antonym A, B are_c=-incomparable for A, B are_c=-comparable;
end;

theorem :: ISOMICHI:45
  for A, B being set holds
    A, B are_c=-incomparable or A c= B or B c< A;

definition let T, A;
  attr A is 1st_class means
:: ISOMICHI:def 6
    Int Cl A c= Cl Int A;
  attr A is 2nd_class means
:: ISOMICHI:def 7
    Cl Int A c< Int Cl A;
  attr A is 3rd_class means
:: ISOMICHI:def 8
    Cl Int A, Int Cl A are_c=-incomparable;
end;

theorem :: ISOMICHI:46
  A is 1st_class or A is 2nd_class or A is 3rd_class;

registration let T be TopSpace;
  cluster 1st_class -> non 2nd_class non 3rd_class Subset of T;
  cluster 2nd_class -> non 1st_class non 3rd_class Subset of T;
  cluster 3rd_class -> non 1st_class non 2nd_class Subset of T;
end;

theorem :: ISOMICHI:47  :: Remark 1
  A is 1st_class iff Border A is empty;

registration let T be TopSpace;
  cluster supercondensed -> 1st_class Subset of T;
  cluster subcondensed -> 1st_class Subset of T;
end;

definition let T be TopSpace;
  attr T is with_1st_class_subsets means
:: ISOMICHI:def 9
    ex A being Subset of T st A is 1st_class;
  attr T is with_2nd_class_subsets means
:: ISOMICHI:def 10
    ex A being Subset of T st A is 2nd_class;
  attr T is with_3rd_class_subsets means
:: ISOMICHI:def 11
    ex A being Subset of T st A is 3rd_class;
end;

registration let T be anti-discrete non empty TopSpace;
  cluster proper non empty -> 2nd_class Subset of T;
end;

registration let T be anti-discrete non trivial non empty strict TopSpace;
  cluster 2nd_class Subset of T;
end;

registration
  cluster with_1st_class_subsets with_2nd_class_subsets
    non empty strict non trivial TopSpace;
  cluster with_3rd_class_subsets non empty strict TopSpace;
end;

registration let T;
  cluster 1st_class Subset of T;
end;

registration let T be with_2nd_class_subsets TopSpace;
  cluster 2nd_class Subset of T;
end;

registration let T be with_3rd_class_subsets TopSpace;
  cluster 3rd_class Subset of T;
end;

theorem :: ISOMICHI:48  :: Theorem 8
  A is 1st_class iff A` is 1st_class;

theorem :: ISOMICHI:49  :: Theorem 8
  A is 2nd_class iff A` is 2nd_class;

theorem :: ISOMICHI:50  :: Theorem 8
  A is 3rd_class iff A` is 3rd_class;

registration let T; let A be 1st_class Subset of T;
  cluster A` -> 1st_class;
end;

registration let T be with_2nd_class_subsets TopSpace;
             let A be 2nd_class Subset of T;
  cluster A` -> 2nd_class;
end;

registration let T be with_3rd_class_subsets TopSpace;
             let A be 3rd_class Subset of T;
  cluster A` -> 3rd_class;
end;

theorem :: ISOMICHI:51  :: Theorem 9
  A is 1st_class implies Int Cl A = Int Cl Int A & Cl Int A = Cl Int Cl A;

theorem :: ISOMICHI:52  :: Theorem 9
  (Int Cl A = Int Cl Int A or Cl Int A = Cl Int Cl A) implies A is 1st_class;

theorem :: ISOMICHI:53  :: Theorem 10
  A is 1st_class & B is 1st_class implies
    Int Cl A /\ Int Cl B =
      Int Cl (A /\ B) & Cl Int A \/ Cl Int B = Cl Int (A \/ B);

theorem :: ISOMICHI:54 :: Theorem 11
  A is 1st_class & B is 1st_class implies
    A \/ B is 1st_class & A /\ B is 1st_class;

:: TODO: Remark 2 from Isomichi's paper
:: condensed = domain    Int Cl A c= Cl Int A
:: closed domain:   A = Cl Int A:  regular_closed = closed_condensed
:: open domain:     A = Int Cl A:  regular_open = open_condensed

