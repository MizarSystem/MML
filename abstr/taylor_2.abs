:: The {M}aclaurin Expansions
::  by Akira Nishino and Yasunari Shidama
::
:: Received July 6, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies PRE_TOPC, BOOLE, RLVECT_1, FUNCT_1, ARYTM, ARYTM_1, ARYTM_3,
      RELAT_1, ABSVALUE, SUBSET_1, ORDINAL2, QC_LANG1, PARTFUN1, SEQ_1, SEQ_2,
      RCOMP_1, SIN_COS, FDIFF_1, SERIES_1, GROUP_1, SUPINF_2, TAYLOR_1,
      TAYLOR_2, RFUNCT_2, MATRIX_2;
 notations SUBSET_1, RELAT_1, PARTFUN1, RFUNCT_2, RCOMP_1, XXREAL_0, XREAL_0,
      ORDINAL1, NUMBERS, COMPLEX1, REAL_1, NAT_1, FUNCT_2, VALUED_1, SEQ_1,
      SEQ_2, SERIES_1, FDIFF_1, SEQFUNC, NEWTON, SIN_COS, TAYLOR_1, ABIAN;
 constructors ARYTM_0, REAL_1, NAT_1, SEQ_2, RCOMP_1, RFUNCT_2, LIMFUNC1,
      FDIFF_1, COMSEQ_3, SIN_COS, ABIAN, TAYLOR_1, SEQ_1;
 registrations RELSET_1, NUMBERS, XXREAL_0, XREAL_0, NAT_1, MEMBERED, RCOMP_1,
      XBOOLE_0, VALUED_0, VALUED_1, FUNCT_2;
 requirements SUBSET, REAL, BOOLE, NUMERALS, ARITHM;


begin

 reserve Z for open Subset of REAL;

theorem :: TAYLOR_2:1
  for x be Real, n be Element of NAT holds abs(x |^ n) = abs(x) |^ n;

definition
  let f be PartFunc of REAL,REAL, Z be Subset of REAL, a be real number;
  func Maclaurin(f,Z,a) -> Real_Sequence equals
:: TAYLOR_2:def 1

  Taylor(f,Z,0,a);
end;

theorem :: TAYLOR_2:2
  for n be Element of NAT, f be PartFunc of REAL,REAL, r be Real st
  ( 0 < r & f is_differentiable_on n+1, ].-r,r.[ )
  for x be Real st x in ].-r, r.[ holds ex s be Real st 0 < s & s < 1 &
  f.x = Partial_Sums(Maclaurin(f,].-r,r.[,x)).n
  + (diff(f,].-r,r.[).(n+1)).(s*x) * x |^ (n+1) / ((n+1)!);

theorem :: TAYLOR_2:3
  for n be Element of NAT, f be PartFunc of REAL,REAL, x0, r be Real st
  ( 0 < r & f is_differentiable_on n+1, ].x0-r,x0+r.[ )
  for x be Real st x in ].x0-r, x0+r.[ holds ex s be Real st 0 < s & s < 1 &
  abs(f.x-Partial_Sums(Taylor(f, ].x0-r,x0+r.[,x0,x)).n)
  = abs( (diff(f,].x0-r,x0+r.[).(n+1)).(x0+s*(x-x0))
  * (x-x0) |^ (n+1) / ((n+1)!) );

theorem :: TAYLOR_2:4
  for n be Element of NAT, f be PartFunc of REAL,REAL, r be Real st
  ( 0 < r & f is_differentiable_on n+1, ].-r,r.[ )
  for x be Real st x in ].-r, r.[ holds ex s be Real st 0 < s & s < 1 &
  abs(f.x-Partial_Sums(Maclaurin(f,].-r,r.[,x)).n)
  = abs( (diff(f,].-r,r.[).(n+1)).(s*x) * x |^ (n+1) / ((n+1)!) );

theorem :: TAYLOR_2:5
  exp_R `| Z = exp_R | Z & dom(exp_R | Z) = Z;

theorem :: TAYLOR_2:6
  for n be Element of NAT
  holds diff(exp_R,Z).n=exp_R | Z;

theorem :: TAYLOR_2:7
  for n be Element of NAT, x be Real st x in Z holds
  (diff(exp_R,Z).n).x = exp_R.x;

theorem :: TAYLOR_2:8
  for n be Element of NAT, r,x be Real st 0 < r holds
  Maclaurin(exp_R, ].-r,r.[,x).n = x |^ n / (n!);

theorem :: TAYLOR_2:9
  for n be Element of NAT, r,x,s be Real st
  x in ].-r,r.[ & 0 < s & s < 1 holds
  abs((diff(exp_R,].-r,r.[).(n+1)).(s*x) * x |^ (n+1) / ((n+1)!) )
  <= abs(exp_R.(s*x)) * abs(x) |^ (n+1) / ((n+1)!);

theorem :: TAYLOR_2:10
  for n be Element of NAT holds
  exp_R is_differentiable_on n, Z;

theorem :: TAYLOR_2:11
  for r be Real st 0 < r ex M,L be Real st 0 <= M & 0 <= L &
  for n be Element of NAT holds
  for x,s be Real st x in ].-r,r.[ & 0 < s & s < 1 holds
  abs((diff(exp_R,].-r,r.[).n).(s*x) * x |^ n /(n!)) <= M * L |^ n / (n!);

theorem :: TAYLOR_2:12
  for M,L be Real st M >= 0 & L >= 0 for e be Real st e > 0 holds
  ex n be Element of NAT st for m be Element of NAT st n <= m holds
  (M*L |^ m / (m!)) < e;

theorem :: TAYLOR_2:13
  for r, e be Real st 0 < r & 0 < e holds ex n be Element of NAT st
  for m be Element of NAT st n <= m holds
  for x,s be Real st x in ].-r,r.[ & 0 < s & s < 1 holds
  abs((diff(exp_R,].-r,r.[).m).(s*x) * x |^ m / (m!))< e;

theorem :: TAYLOR_2:14
  for r, e be Real st 0 < r & 0 < e holds
  ex n be Element of NAT st for m be Element of NAT st n <= m holds
  for x being real number st x in ].-r,r.[ holds
  abs(exp_R.x-Partial_Sums(Maclaurin(exp_R,].-r,r.[,x)).m) < e;

theorem :: TAYLOR_2:15
  for x be Real holds x ExpSeq is absolutely_summable;

theorem :: TAYLOR_2:16
  for r, x be Real st 0 < r holds Maclaurin(exp_R,].-r,r.[,x) = (x ExpSeq)
  & Maclaurin(exp_R,].-r,r.[,x) is absolutely_summable
  & exp_R.x=Sum(Maclaurin(exp_R,].-r,r.[,x));

theorem :: TAYLOR_2:17
  sin `| Z = cos | Z & cos `| Z = (-sin) | Z &
  dom(sin | Z) = Z & dom(cos | Z) = Z;

theorem :: TAYLOR_2:18
  for f be PartFunc of REAL,REAL,
  Z be Subset of REAL st f is_differentiable_on Z holds (-f) `| Z = -f `| Z;

theorem :: TAYLOR_2:19
  for n be Element of NAT holds
  diff(sin,Z).(2*n) = (-1) |^ n (#) sin | Z &
  diff(sin,Z).(2*n+1) = (-1) |^ n (#) cos | Z &
  diff(cos,Z).(2*n) = (-1) |^ n (#)cos | Z &
  diff(cos,Z).(2*n+1) = (-1) |^ (n+1) (#)sin | Z;

theorem :: TAYLOR_2:20
  for n be Element of NAT, r,x be Real st r > 0 holds
  Maclaurin(sin, ].-r,r.[,x).(2*n) = 0 &
  Maclaurin(sin, ].-r,r.[,x).(2*n+1) = (-1) |^ n * x |^ (2*n+1) / ((2*n+1)!) &
  Maclaurin(cos, ].-r,r.[,x).(2*n) = (-1) |^ n * x |^ (2*n) / ((2*n)!) &
  Maclaurin(cos, ].-r,r.[,x).(2*n+1) = 0;

theorem :: TAYLOR_2:21
  for n be Element of NAT holds
  sin is_differentiable_on n, Z & cos is_differentiable_on n, Z;

theorem :: TAYLOR_2:22
  for r be Real st r > 0 ex r1,r2 be Real st r1 >= 0 & r2 >= 0 &
  for n be Element of NAT holds
  for x,s be Real st x in ].-r,r.[ & 0 < s & s < 1 holds
  abs((diff(sin,].-r,r.[).n).(s*x) * x |^ n / (n!)) <= r1 * r2 |^ n / (n!) &
  abs((diff(cos,].-r,r.[).n).(s*x) * x |^ n / (n!)) <= r1 * r2 |^ n / (n!);

theorem :: TAYLOR_2:23
  for r, e be Real st 0 < r & 0 < e holds
  ex n be Element of NAT st for m be Element of NAT st n <= m holds
  for x,s be Real st x in ].-r,r.[ & 0 < s & s < 1 holds
  abs((diff(sin,].-r,r.[).m).(s*x) * x |^ m / (m!)) < e &
  abs((diff(cos,].-r,r.[).m).(s*x) * x |^ m / (m!)) < e;

theorem :: TAYLOR_2:24
  for r, e be Real st 0 < r & 0 < e holds
  ex n be Element of NAT st for m be Element of NAT st n <= m holds
  for x being real number st x in ].-r,r.[ holds
  abs(sin.x-Partial_Sums(Maclaurin(sin,].-r,r.[,x)).m) < e &
  abs(cos.x-Partial_Sums(Maclaurin(cos,].-r,r.[,x)).m) < e;

theorem :: TAYLOR_2:25
  for r, x be Real, m be Element of NAT st 0 < r holds
  Partial_Sums(Maclaurin(sin,].-r,r.[,x)).(2*m+1) = Partial_Sums(x P_sin).m &
  Partial_Sums(Maclaurin(cos,].-r,r.[,x)).(2*m+1) = Partial_Sums(x P_cos).m;

theorem :: TAYLOR_2:26
  for r, x be Real, m being Element of NAT st 0 < r & m > 0 holds
  Partial_Sums(Maclaurin(sin,].-r,r.[,x)).(2*m)
  = Partial_Sums(x P_sin).(m-1) &
  Partial_Sums(Maclaurin(cos,].-r,r.[,x)).(2*m) = Partial_Sums(x P_cos).m;

theorem :: TAYLOR_2:27
  for r, x be Real, m be Element of NAT st 0 < r holds
  Partial_Sums(Maclaurin(cos,].-r,r.[,x)).(2*m) = Partial_Sums(x P_cos).m;

theorem :: TAYLOR_2:28
  for r, x be Real st r > 0 holds
  Partial_Sums(Maclaurin(sin,].-r,r.[,x)) is convergent &
  sin.x = Sum(Maclaurin(sin,].-r,r.[,x)) &
  Partial_Sums(Maclaurin(cos,].-r,r.[,x)) is convergent &
  cos.x = Sum(Maclaurin(cos,].-r,r.[,x));

