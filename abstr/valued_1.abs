:: Properties of Number-Valued Functions
::  by Library Committee
::
:: Received December 18, 2007
:: Copyright (c) 2007-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, FINSEQ_1, FUNCT_1, RELAT_1, XBOOLE_0, ORDINAL1,
      XXREAL_0, VALUED_0, RAT_1, COMPLEX1, ARYTM_1, ARYTM_3, MEMBERED,
      PARTFUN1, TARSKI, SUBSET_1, CARD_1, XCMPLX_0, XREAL_0, INT_1, SQUARE_1,
      FUNCT_4, FINSET_1, NAT_1, ORDINAL2, VALUED_1, AMISTD_1, FUNCOP_1,
      AMISTD_2, CAT_1, AMISTD_3, ZFMISC_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, FINSET_1, CARD_1, XCMPLX_0,
      NUMBERS, ZFMISC_1, COMPLEX1, XXREAL_0, XXREAL_2, FUNCOP_1, XREAL_0,
      RAT_1, INT_1, INT_2, SQUARE_1, RELAT_1, FUNCT_1, RELSET_1, PARTFUN1,
      FUNCT_2, FUNCT_4, FINSEQ_1, MEMBERED, NAT_1, VALUED_0;
 constructors PARTFUN1, RAT_1, VALUED_0, SQUARE_1, MEMBERED, INT_2, FINSEQ_1,
      NAT_1, FUNCT_4, NAT_D, RELSET_1, XXREAL_2, FUNCOP_1, DOMAIN_1, WELLORD2;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FUNCT_2, NUMBERS, XREAL_0,
      MEMBERED, VALUED_0, RAT_1, INT_1, NAT_1, FUNCT_1, FINSET_1, XXREAL_0,
      RELAT_1, XXREAL_2, FUNCOP_1, REALSET1, FUNCT_4, CARD_1;
 requirements NUMERALS, SUBSET, BOOLE, ARITHM, REAL;


begin

registration
  cluster complex-valued for FinSequence;
end;
:: move somewhere

registration
  let r be rational number;
  cluster |. r .| -> rational;
end;

definition
  let f1,f2 be complex-valued Function;
  func f1 + f2 -> Function means
:: VALUED_1:def 1

  dom it = dom f1 /\ dom f2 &
  for c being set st c in dom it holds it.c = f1.c + f2.c;
  commutativity;
end;

registration
  let f1,f2 be complex-valued Function;
  cluster f1+f2 -> complex-valued;
end;

registration
  let f1,f2 be real-valued Function;
  cluster f1+f2 -> real-valued;
end;

registration
  let f1,f2 be rational-valued Function;
  cluster f1+f2 -> rational-valued;
end;

registration
  let f1,f2 be integer-valued Function;
  cluster f1+f2 -> integer-valued;
end;

registration
  let f1,f2 be natural-valued Function;
  cluster f1+f2 -> natural-valued;
end;

definition
  let C be set;
  let D1,D2 be complex-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1+f2 -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D1,D2 be real-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1+f2 -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D1,D2 be rational-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1+f2 -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D1,D2 be integer-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1+f2 -> PartFunc of C,INT;
end;

definition
  let C be set;
  let D1,D2 be natural-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1+f2 -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D1,D2 be complex-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1+f2 -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D1,D2 be real-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1+f2 -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D1,D2 be rational-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1+f2 -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D1,D2 be integer-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1+f2 -> total for PartFunc of C,INT;
end;

registration
  let C be set;
  let D1,D2 be natural-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1+f2 -> total for PartFunc of C,NAT;
end;

theorem :: VALUED_1:1
  for C being set, D1,D2 being complex-membered non empty set for f1
  being Function of C,D1, f2 being Function of C,D2 for c being Element of C
  holds (f1+f2).c = f1.c + f2.c;

registration
  let f1, f2 be complex-valued FinSequence;
  cluster f1+f2 -> FinSequence-like;
end;

begin :: r + f

definition
  let f be complex-valued Function, r be complex number;
  func r + f -> Function means
:: VALUED_1:def 2

  dom it = dom f &
  for c being set st c in dom it holds it.c = r + f.c;
end;

notation
  let f be complex-valued Function, r be complex number;
  synonym f + r for r + f;
end;

registration
  let f be complex-valued Function, r be complex number;
  cluster r+f -> complex-valued;
end;

registration
  let f be real-valued Function, r be real number;
  cluster r+f -> real-valued;
end;

registration
  let f be rational-valued Function, r be rational number;
  cluster r+f -> rational-valued;
end;

registration
  let f be integer-valued Function, r be integer number;
  cluster r+f -> integer-valued;
end;

registration
  let f be natural-valued Function, r be natural number;
  cluster r+f -> natural-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  let r be complex number;
  redefine func r+f -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  let r be real number;
  redefine func r+f -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  let r be rational number;
  redefine func r+f -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  let r be integer number;
  redefine func r+f -> PartFunc of C,INT;
end;

definition
  let C be set;
  let D be natural-membered set;
  let f be PartFunc of C,D;
  let r be natural number;
  redefine func r+f -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  let r be complex number;
  cluster r+f -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  let r be real number;
  cluster r+f -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  let r be rational number;
  cluster r+f -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  let r be integer number;
  cluster r+f -> total for PartFunc of C,INT;
end;

registration
  let C be set;
  let D be natural-membered non empty set;
  let f be Function of C,D;
  let r be natural number;
  cluster r+f -> total for PartFunc of C,NAT;
end;

theorem :: VALUED_1:2
  for C being non empty set, D being complex-membered non empty set
  for f being Function of C,D, r being complex number
  for c being Element of C holds
  (r+f).c = r + f.c;

registration
  let f be complex-valued FinSequence, r be complex number;
  cluster r+f -> FinSequence-like;
end;

begin :: f - r

definition
  let f be complex-valued Function, r be complex number;
  func f - r -> Function equals
:: VALUED_1:def 3
  -r + f;
end;

theorem :: VALUED_1:3
  for f being complex-valued Function, r being complex number holds dom
  (f-r) = dom f & for c being set st c in dom f holds (f-r).c = f.c - r;

registration
  let f be complex-valued Function, r be complex number;
  cluster f-r -> complex-valued;
end;

registration
  let f be real-valued Function, r be real number;
  cluster f-r -> real-valued;
end;

registration
  let f be rational-valued Function, r be rational number;
  cluster f-r -> rational-valued;
end;

registration
  let f be integer-valued Function, r be integer number;
  cluster f-r -> integer-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  let r be complex number;
  redefine func f-r -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  let r be real number;
  redefine func f-r -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  let r be rational number;
  redefine func f-r -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  let r be integer number;
  redefine func f-r -> PartFunc of C,INT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  let r be complex number;
  cluster f-r -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  let r be real number;
  cluster f-r -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  let r be rational number;
  cluster f-r -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  let r be integer number;
  cluster f-r -> total for PartFunc of C,INT;
end;

theorem :: VALUED_1:4
  for C being non empty set, D being complex-membered non empty set for
f being Function of C,D, r being complex number for c being Element of C holds
  (f-r).c = f.c - r;

registration
  let f be complex-valued FinSequence, r be complex number;
  cluster f-r -> FinSequence-like;
end;

begin :: f1 (#) f2

definition
  let f1,f2 be complex-valued Function;
  func f1 (#) f2 -> Function means
:: VALUED_1:def 4

  dom it = dom f1 /\ dom f2 & for c
  being set st c in dom it holds it.c = f1.c * f2.c;
  commutativity;
end;

theorem :: VALUED_1:5
  for f1,f2 being complex-valued Function for c being set holds (f1(#)f2
  ).c = f1.c * f2.c;

registration
  let f1,f2 be complex-valued Function;
  cluster f1(#)f2 -> complex-valued;
end;

registration
  let f1,f2 be real-valued Function;
  cluster f1(#)f2 -> real-valued;
end;

registration
  let f1,f2 be rational-valued Function;
  cluster f1(#)f2 -> rational-valued;
end;

registration
  let f1,f2 be integer-valued Function;
  cluster f1(#)f2 -> integer-valued;
end;

registration
  let f1,f2 be natural-valued Function;
  cluster f1(#)f2 -> natural-valued;
end;

definition
  let C be set;
  let D1,D2 be complex-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1(#)f2 -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D1,D2 be real-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1(#)f2 -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D1,D2 be rational-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1(#)f2 -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D1,D2 be integer-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1(#)f2 -> PartFunc of C,INT;
end;

definition
  let C be set;
  let D1,D2 be natural-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1(#)f2 -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D1,D2 be complex-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1(#)f2 -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D1,D2 be real-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1(#)f2 -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D1,D2 be rational-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1(#)f2 -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D1,D2 be integer-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1(#)f2 -> total for PartFunc of C,INT;
end;

registration
  let C be set;
  let D1,D2 be natural-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1(#)f2 -> total for PartFunc of C,NAT;
end;

registration
  let f1, f2 be complex-valued FinSequence;
  cluster f1(#)f2 -> FinSequence-like;
end;

begin :: r (#) f

definition
  let f be complex-valued Function, r be complex number;
  func r (#) f -> Function means
:: VALUED_1:def 5

  dom it = dom f & for c being set st c
  in dom it holds it.c = r * f.c;
end;

notation
  let f be complex-valued Function, r be complex number;
  synonym f (#) r for r (#) f;
end;

theorem :: VALUED_1:6
  for f being complex-valued Function, r being complex number for c
  being set holds (r(#)f).c = r * f.c;

registration
  let f be complex-valued Function, r be complex number;
  cluster r(#)f -> complex-valued;
end;

registration
  let f be real-valued Function, r be real number;
  cluster r(#)f -> real-valued;
end;

registration
  let f be rational-valued Function, r be rational number;
  cluster r(#)f -> rational-valued;
end;

registration
  let f be integer-valued Function, r be integer number;
  cluster r(#)f -> integer-valued;
end;

registration
  let f be natural-valued Function, r be natural number;
  cluster r(#)f -> natural-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  let r be complex number;
  redefine func r(#)f -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  let r be real number;
  redefine func r(#)f -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  let r be rational number;
  redefine func r(#)f -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  let r be integer number;
  redefine func r(#)f -> PartFunc of C,INT;
end;

definition
  let C be set;
  let D be natural-membered set;
  let f be PartFunc of C,D;
  let r be natural number;
  redefine func r(#)f -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  let r be complex number;
  cluster r(#)f -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  let r be real number;
  cluster r(#)f -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  let r be rational number;
  cluster r(#)f -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  let r be integer number;
  cluster r(#)f -> total for PartFunc of C,INT;
end;

registration
  let C be set;
  let D be natural-membered non empty set;
  let f be Function of C,D;
  let r be natural number;
  cluster r(#)f -> total for PartFunc of C,NAT;
end;

theorem :: VALUED_1:7
  for C being non empty set, D being complex-membered non empty set for
  f being Function of C,D, r being complex number for g being Function of C,
  COMPLEX st for c being Element of C holds g.c = r * f.c holds g = r(#)f;

registration
  let f be complex-valued FinSequence, r be complex number;
  cluster r(#)f -> FinSequence-like;
end;

begin :: -f

definition
  let f be complex-valued Function;
  func -f -> complex-valued Function equals
:: VALUED_1:def 6
  (-1) (#) f;
  involutiveness;
end;

theorem :: VALUED_1:8
  for f being complex-valued Function holds dom -f = dom f & for c
  being set holds (-f).c = -(f.c);

theorem :: VALUED_1:9
  for f being complex-valued Function, g being Function st dom f = dom g
  & for c being set st c in dom f holds g.c = -(f.c) holds g = -f;

registration
  let f be complex-valued Function;
  cluster -f -> complex-valued;
end;

registration
  let f be real-valued Function;
  cluster -f -> real-valued;
end;

registration
  let f be rational-valued Function;
  cluster -f -> rational-valued;
end;

registration
  let f be integer-valued Function;
  cluster -f -> integer-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  redefine func -f -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  redefine func -f -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  redefine func -f -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  redefine func -f -> PartFunc of C,INT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  cluster -f -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  cluster -f -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  cluster -f -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  cluster -f -> total for PartFunc of C,INT;
end;

registration
  let f be complex-valued FinSequence;
  cluster -f -> FinSequence-like;
end;

begin :: f"

definition
  let f be complex-valued Function;
  func f" -> complex-valued Function means
:: VALUED_1:def 7

  dom it = dom f & for c being
  set st c in dom it holds it.c = (f.c)";
  involutiveness;
end;
::better name

theorem :: VALUED_1:10
  for f being complex-valued Function holds for c being set holds
  f".c = (f.c)";

registration
  let f be real-valued Function;
  cluster f" -> real-valued;
end;

registration
  let f be rational-valued Function;
  cluster f" -> rational-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  redefine func f" -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  redefine func f" -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  redefine func f" -> PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  cluster f" -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  cluster f" -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  cluster f" -> total for PartFunc of C,RAT;
end;

registration
  let f be complex-valued FinSequence;
  cluster f" -> FinSequence-like;
end;

begin :: f^2

definition
  let f be complex-valued Function;
  func f^2 -> Function equals
:: VALUED_1:def 8
  f (#) f;
end;

theorem :: VALUED_1:11
  for f being complex-valued Function holds dom (f^2) = dom f &
  for c being set holds f^2.c = (f.c)^2;

registration
  let f be complex-valued Function;
  cluster f^2 -> complex-valued;
end;

registration
  let f be real-valued Function;
  cluster f^2 -> real-valued;
end;

registration
  let f be rational-valued Function;
  cluster f^2 -> rational-valued;
end;

registration
  let f be integer-valued Function;
  cluster f^2 -> integer-valued;
end;

registration
  let f be natural-valued Function;
  cluster f^2 -> natural-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  redefine func f^2 -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D be real-membered set;
  let f be PartFunc of C,D;
  redefine func f^2 -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  redefine func f^2 -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  redefine func f^2 -> PartFunc of C,INT;
end;

definition
  let C be set;
  let D be natural-membered set;
  let f be PartFunc of C,D;
  redefine func f^2 -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  cluster f^2 -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D be real-membered non empty set;
  let f be Function of C,D;
  cluster f^2 -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  cluster f^2 -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  cluster f^2 -> total for PartFunc of C,INT;
end;

registration
  let C be set;
  let D be natural-membered non empty set;
  let f be Function of C,D;
  cluster f^2 -> total for PartFunc of C,NAT;
end;

registration
  let f be complex-valued FinSequence;
  cluster f^2 -> FinSequence-like;
end;

begin :: f1 - f2

definition
  let f1,f2 be complex-valued Function;
  func f1 - f2 -> Function equals
:: VALUED_1:def 9
  f1 + - f2;
end;

registration
  let f1,f2 be complex-valued Function;
  cluster f1-f2 -> complex-valued;
end;

registration
  let f1,f2 be real-valued Function;
  cluster f1-f2 -> real-valued;
end;

registration
  let f1,f2 be rational-valued Function;
  cluster f1-f2 -> rational-valued;
end;

registration
  let f1,f2 be integer-valued Function;
  cluster f1-f2 -> integer-valued;
end;

theorem :: VALUED_1:12
  for f1,f2 being complex-valued Function holds dom (f1-f2) = dom
  f1 /\ dom f2;

theorem :: VALUED_1:13
  for f1,f2 being complex-valued Function for c being set st c in dom (
  f1-f2) holds (f1-f2).c = f1.c - f2.c;

theorem :: VALUED_1:14
  for f1,f2 being complex-valued Function, f being Function st dom f =
  dom (f1-f2) & for c being set st c in dom f holds f.c = f1.c - f2.c holds f =
  f1-f2;

definition
  let C be set;
  let D1,D2 be complex-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1-f2 -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D1,D2 be real-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1-f2 -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D1,D2 be rational-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1-f2 -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D1,D2 be integer-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1-f2 -> PartFunc of C,INT;
end;

registration
  let C be set;
  let D1,D2 be complex-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1-f2 -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D1,D2 be real-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1-f2 -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D1,D2 be rational-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1-f2 -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D1,D2 be integer-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1-f2 -> total for PartFunc of C,INT;
end;

theorem :: VALUED_1:15
  for C being set, D1,D2 being complex-membered non empty set for f1
  being Function of C,D1, f2 being Function of C,D2 for c being Element of C
  holds (f1-f2).c = f1.c - f2.c;

registration
  let f1, f2 be complex-valued FinSequence;
  cluster f1-f2 -> FinSequence-like;
end;

begin :: f1 /" f2

definition
  let f1,f2 be complex-valued Function;
  func f1 /" f2 -> Function equals
:: VALUED_1:def 10
  f1 (#) (f2");
end;

theorem :: VALUED_1:16
  for f1,f2 being complex-valued Function holds dom (f1/"f2) = dom
  f1 /\ dom f2;

theorem :: VALUED_1:17
  for f1,f2 being complex-valued Function for c being set holds (f1/"f2)
  .c = f1.c / f2.c;

registration
  let f1,f2 be complex-valued Function;
  cluster f1/"f2 -> complex-valued;
end;

registration
  let f1,f2 be real-valued Function;
  cluster f1/"f2 -> real-valued;
end;

registration
  let f1,f2 be rational-valued Function;
  cluster f1/"f2 -> rational-valued;
end;

definition
  let C be set;
  let D1,D2 be complex-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1/"f2 -> PartFunc of C,COMPLEX;
end;

definition
  let C be set;
  let D1,D2 be real-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1/"f2 -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D1,D2 be rational-membered set;
  let f1 be PartFunc of C,D1;
  let f2 be PartFunc of C,D2;
  redefine func f1/"f2 -> PartFunc of C,RAT;
end;

registration
  let C be set;
  let D1,D2 be complex-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1/"f2 -> total for PartFunc of C,COMPLEX;
end;

registration
  let C be set;
  let D1,D2 be real-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1/"f2 -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D1,D2 be rational-membered non empty set;
  let f1 be Function of C,D1;
  let f2 be Function of C,D2;
  cluster f1/"f2 -> total for PartFunc of C,RAT;
end;

registration
  let f1, f2 be complex-valued FinSequence;
  cluster f1/"f2 -> FinSequence-like;
end;

begin :: abs f

definition
  let f be complex-valued Function;
  func |. f .| -> real-valued Function means
:: VALUED_1:def 11

  dom it = dom f & for c
  being set st c in dom it holds it.c = |. f.c .|;
  projectivity;
end;

notation
  let f be complex-valued Function;
  synonym abs f for |. f .|;
end;

theorem :: VALUED_1:18
  for f being complex-valued Function holds for c being set holds |.f.|.
  c = |.f.c.|;

registration
  let f be rational-valued Function;
  cluster |.f.| -> rational-valued;
end;

registration
  let f be integer-valued Function;
  cluster |.f.| -> natural-valued;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  redefine func |.f.| -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be complex-membered set;
  let f be PartFunc of C,D;
  redefine func abs(f) -> PartFunc of C,REAL;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  redefine func |.f.| -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be rational-membered set;
  let f be PartFunc of C,D;
  redefine func abs(f) -> PartFunc of C,RAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  redefine func |.f.| -> PartFunc of C,NAT;
end;

definition
  let C be set;
  let D be integer-membered set;
  let f be PartFunc of C,D;
  redefine func abs(f) -> PartFunc of C,NAT;
end;

registration
  let C be set;
  let D be complex-membered non empty set;
  let f be Function of C,D;
  cluster |.f.| -> total for PartFunc of C,REAL;
end;

registration
  let C be set;
  let D be rational-membered non empty set;
  let f be Function of C,D;
  cluster |.f.| -> total for PartFunc of C,RAT;
end;

registration
  let C be set;
  let D be integer-membered non empty set;
  let f be Function of C,D;
  cluster |.f.| -> total for PartFunc of C,NAT;
end;

registration
  let f be complex-valued FinSequence;
  cluster |.f.| -> FinSequence-like;
end;

theorem :: VALUED_1:19
  for f, g being FinSequence, h being Function st dom h = dom f /\ dom g
  holds h is FinSequence;

begin :: Addenda

:: from RELOC, 2008.02.14, A.T.

reserve m,j,p,q,n,l for Element of NAT;

definition
  let p be Function, k be Nat;
  func Shift(p,k) -> Function means
:: VALUED_1:def 12

  dom it = { m+k:m in dom p } & for
  m st m in dom p holds it.(m+k) = p.m;
end;

registration
  let p be Function, k be Nat;
  cluster Shift(p,k) -> NAT-defined;
end;

theorem :: VALUED_1:20 :: SCMFSA8C:11
  for P,Q being Function, k being Nat st P c= Q holds Shift(P
  ,k) c= Shift(Q,k);

theorem :: VALUED_1:21 :: SCMFSA_4:32
  for n,m being Nat
  for I being Function holds Shift(Shift(I,m),n) = Shift(I,m+n);

theorem :: VALUED_1:22 :: SCMFSA_4:33
  for s,f be Function for n being Nat holds Shift(f*s,n) = f*Shift(s,n);

theorem :: VALUED_1:23 :: SCMFSA_4:34
  for I,J being Function, n being Nat
   holds Shift(I +* J, n) = Shift(I,n) +* Shift(J,n);

:: from SCMPDS_4, 2008.03.16, A.T.

theorem :: VALUED_1:24
  for p being Function,k,il being Nat st il in dom p
  holds il+k in dom Shift(p,k);

:: missing, 2008.03.16, A.T.

theorem :: VALUED_1:25
  for p being Function, k being Nat holds rng Shift(p,k) c= rng p;

theorem :: VALUED_1:26
  for p being Function st dom p c= NAT for k being Nat holds
  rng Shift(p,k) = rng p;

registration
  let p be finite Function, k be Nat;
  cluster Shift(p,k) -> finite;
end;

reserve e1,e2 for ext-real number;

definition
  let X be non empty ext-real-membered set, s be sequence of X;
  redefine attr s is increasing means
:: VALUED_1:def 13
  for n being Nat holds s.n < s.(n+1);
  redefine attr s is decreasing means
:: VALUED_1:def 14
  for n being Nat holds s.n > s.(n+1);
  redefine attr s is non-decreasing means
:: VALUED_1:def 15
  for n being Nat holds s.n <= s.(n+1);
  redefine attr s is non-increasing means
:: VALUED_1:def 16
  for n being Nat holds s.n >= s.(n+1);
end;

:: from KURATO_2, 2008.09.05, A.T.

scheme :: VALUED_1:sch 1

  SubSeqChoice { X() -> non empty set, S() -> sequence of X(), P[set]} :
   ex S1 being subsequence of S() st for n being Element of NAT holds P[S1.n]
provided
 for n being Element of NAT ex m being Element of NAT st n <= m & P[S
().m];

:: from AMISTD_2, 2010.02.05, A.T.

theorem :: VALUED_1:27
  for k being Nat
  for F being NAT-defined Function
  holds dom F,dom Shift(F,k) are_equipotent;

theorem :: VALUED_1:28
  for F being NAT-defined Function holds Shift(F,0) = F;

registration
  let X be non empty set;
  let F be X-valued Function, k be Nat;
  cluster Shift(F,k) -> X-valued;
end;

registration  :: move somewhere !!!
 cluster non empty NAT-defined for Function;
end;

registration
  let F be empty Function, k be Nat;
  cluster Shift(F,k) -> empty;
end;

registration
  let F be non empty NAT-defined Function, k be Nat;
  cluster Shift(F,k) -> non empty;
end;

theorem :: VALUED_1:29
  for F being Function, k being Nat st k > 0
  holds not 0 in dom Shift(F,k);

registration
 cluster NAT-defined finite non empty for Function;
end;

registration
  let F be NAT-defined Relation;
  cluster dom F -> natural-membered;
end;

definition
  let F be non empty NAT-defined finite Function;
  func LastLoc F -> Element of NAT equals
:: VALUED_1:def 17
   max dom F;
end;

definition
  let F be non empty NAT-defined finite Function;
  func CutLastLoc F -> Function equals
:: VALUED_1:def 18
  F \ ( LastLoc F .--> F.LastLoc F );
end;

registration
 let F be non empty NAT-defined finite Function;
 cluster CutLastLoc F -> NAT-defined finite;
end;

theorem :: VALUED_1:30
  for F being non empty NAT-defined finite Function holds
  LastLoc F in dom F;

theorem :: VALUED_1:31
  for F, G being non empty NAT-defined finite Function st F c= G holds
  LastLoc F <= LastLoc G;

theorem :: VALUED_1:32
  for F being non empty NAT-defined finite Function, l being
  Element of NAT st l in dom F holds l <= LastLoc F;

definition
  let F be non empty NAT-defined Function;
  func FirstLoc F -> Element of NAT equals
:: VALUED_1:def 19
   min dom F;
end;

theorem :: VALUED_1:33
  for F being non empty NAT-defined finite Function holds
  FirstLoc F in dom F;

theorem :: VALUED_1:34
  for F, G being non empty NAT-defined finite Function st F c= G holds
  FirstLoc G <= FirstLoc F;

theorem :: VALUED_1:35
  for l1 being Element of NAT
  for F being non empty NAT-defined finite Function st l1 in dom
  F holds FirstLoc F <= l1;

theorem :: VALUED_1:36
  for F being non empty NAT-defined finite Function
  holds dom CutLastLoc F = (dom F) \ {LastLoc F};

theorem :: VALUED_1:37
  for F being non empty NAT-defined finite Function
  holds dom F = dom CutLastLoc F \/ {LastLoc F};

registration
 cluster 1-element NAT-defined finite for Function;
end;

registration
  let F be 1-element NAT-defined finite Function;
  cluster CutLastLoc F -> empty;
end;

theorem :: VALUED_1:38
  for F being non empty NAT-defined finite Function
  holds card CutLastLoc F = card F - 1;

begin :: 2011.04.20, A.T.

registration let X be set, f be X-defined complex-valued Function;
 cluster -f -> X-defined;
 cluster f" -> X-defined;
 cluster f^2 -> X-defined;
 cluster |.f.| -> X-defined;
end;

registration let X be set;
 cluster total for X-defined natural-valued Function;
end;

registration let X be set,
   f be total X-defined complex-valued Function;
 cluster -f -> total;
 cluster f" -> total;
 cluster f^2 -> total;
 cluster |.f.| -> total;
end;

registration
 let X be set, f be X-defined complex-valued Function,
     r be complex number;
 cluster r+f -> X-defined;
 cluster f-r -> X-defined;
 cluster r(#)f -> X-defined;
end;

registration let X be set,
   f be total X-defined complex-valued Function,
     r be complex number;
 cluster r+f -> total;
 cluster f-r -> total;
 cluster r(#)f -> total;
end;

registration
 let X be set, f1 be complex-valued Function;
 let f2 be X-defined complex-valued Function;
 cluster f1 + f2 -> X-defined;
 cluster f1 - f2 -> X-defined;
 cluster f1(#)f2 -> X-defined;
 cluster f1/"f2 -> X-defined;
end;

registration let X be set;
 let f1,f2 be total X-defined complex-valued Function;
 cluster f1 + f2 -> total;
 cluster f1 - f2 -> total;
 cluster f1(#)f2 -> total;
 cluster f1/"f2 -> total;
end;
