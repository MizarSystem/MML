:: On the {K}uratowski Closure-Complement Problem
::  by Lilla Krystyna Bagi\'nska and Adam Grabowski
::
:: Received June 12, 2003
:: Copyright (c) 2003 Association of Mizar Users

environ

 vocabulary BOOLE, KURATO_1, FINSET_1, TOPS_1, PRE_TOPC, CARD_1, SUBSET_1,
      RCOMP_1, PROB_1, INCPROJ, SETFAM_1, AMI_1, TOPMETR, RAT_1, BORSUK_5;
 notation XBOOLE_0, TARSKI, SUBSET_1, STRUCT_0, NUMBERS, XREAL_0, PRE_TOPC,
      TOPS_1, ENUMSET1, CARD_1, FINSET_1, RCOMP_1, INCPROJ, NAT_1, SEQ_4,
      RCOMP_2, PCOMPS_1, TOPMETR, AMI_1, BORSUK_5;
 constructors TOPS_1, NAT_1, INCPROJ, RCOMP_2, PSCOMP_1, INTEGRA1, COMPTS_1,
      LIMFUNC1, TOPGRP_1, TREAL_1, DOMAIN_1, RAT_1, PROB_1, AMI_1, BORSUK_5,
      MEMBERED;
 clusters FINSET_1, TOPS_1, TOPREAL6, AMI_1, XBOOLE_0, BORSUK_5, MEMBERED,
      ZFMISC_1;
 requirements SUBSET, BOOLE, NUMERALS, REAL, ARITHM;


begin :: Fourteen Kuratowski Sets

 reserve T for non empty TopSpace;
 reserve A for Subset of T;

theorem :: KURATO_1:1
  Cl (Cl (Cl (Cl A)`)`)` = Cl (Cl A)`;

definition let T, A;
  func Kurat14Part A equals
:: KURATO_1:def 1
    { A, Cl A, (Cl A)`, Cl (Cl A)`, (Cl (Cl A)`)`,
      Cl (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)` };
end;


registration let T, A;
  cluster Kurat14Part A -> finite;
  coherence
  proof
     Kurat14Part A = { A, Cl A, (Cl A)`, Cl (Cl A)`, (Cl (Cl A)`)`,
         Cl (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)` } by Def1;
    hence thesis;
  end;
end;


definition let T, A;
  func Kurat14Set A -> Subset-Family of T equals
:: KURATO_1:def 2
    { A, Cl A, (Cl A)`, Cl (Cl A)`, (Cl (Cl A)`)`,
         Cl (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)` } \/
    { A`, Cl A`, (Cl A`)`, Cl (Cl A`)`, (Cl (Cl A`)`)`,
          Cl (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` };
end;


theorem :: KURATO_1:2
  Kurat14Set A = Kurat14Part A \/ Kurat14Part A`;

theorem :: KURATO_1:3
  A in Kurat14Set A & Cl A in Kurat14Set A & (Cl A)` in Kurat14Set A &
    Cl (Cl A)` in Kurat14Set A & (Cl (Cl A)`)` in Kurat14Set A &
      Cl (Cl (Cl A)`)` in Kurat14Set A & (Cl (Cl (Cl A)`)`)` in Kurat14Set A;

theorem :: KURATO_1:4
  A` in Kurat14Set A & Cl A` in Kurat14Set A &
    (Cl A`)` in Kurat14Set A & Cl (Cl A`)` in Kurat14Set A &
      (Cl (Cl A`)`)` in Kurat14Set A & Cl (Cl (Cl A`)`)` in Kurat14Set A &
        (Cl (Cl (Cl A`)`)`)` in Kurat14Set A;

definition let T, A;
  func Kurat14ClPart A -> Subset-Family of T equals
:: KURATO_1:def 3
    { Cl A, Cl (Cl A)`, Cl (Cl (Cl A)`)`,
            Cl A`, Cl (Cl A`)`, Cl (Cl (Cl A`)`)` };
  func Kurat14OpPart A -> Subset-Family of T equals
:: KURATO_1:def 4
    { (Cl A)`, (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)`,
             (Cl A`)`, (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` };
end;

theorem :: KURATO_1:5
  Kurat14Set A = { A, A` } \/ Kurat14ClPart A \/ Kurat14OpPart A;

registration let T, A;
  cluster Kurat14Set A -> finite;
  coherence
  proof
    set X = { A, Cl A, (Cl A)`, Cl (Cl A)`, (Cl (Cl A)`)`,
           Cl (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)` },
        Y = { A`, Cl A`, (Cl A`)`, Cl (Cl A`)`, (Cl (Cl A`)`)`,
           Cl (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` };
     X \/ Y is finite;
    hence thesis by Def2;
  end;
end;


theorem :: KURATO_1:6
  for Q being Subset of T holds
    Q in Kurat14Set A implies Q` in Kurat14Set A & Cl Q in Kurat14Set A;

theorem :: KURATO_1:7
   card Kurat14Set A <= 14;

begin :: Seven Kuratowski Sets

definition let T, A;
  func Kurat7Set A -> Subset-Family of T equals
:: KURATO_1:def 5
     { A, Int A, Cl A, Int Cl A, Cl Int A, Cl Int Cl A, Int Cl Int A };
end;


theorem :: KURATO_1:8
  A in Kurat7Set A & Int A in Kurat7Set A &
    Cl A in Kurat7Set A & Int Cl A in Kurat7Set A & Cl Int A in Kurat7Set A &
      Cl Int Cl A in Kurat7Set A & Int Cl Int A in Kurat7Set A;

theorem :: KURATO_1:9
   Kurat7Set A = { A } \/ { Int A, Int Cl A, Int Cl Int A } \/
    { Cl A, Cl Int A, Cl Int Cl A };

registration let T, A;
  cluster Kurat7Set A -> finite;
  coherence
  proof
    set X = { A, Int A, Cl A, Int Cl A, Cl Int A, Cl Int Cl A, Int Cl Int A };
     X is finite;
    hence thesis by Def5;
  end;
end;


theorem :: KURATO_1:10
  for Q being Subset of T holds
    Q in Kurat7Set A implies Int Q in Kurat7Set A & Cl Q in Kurat7Set A;

theorem :: KURATO_1:11
   card Kurat7Set A <= 7;

begin :: The Set Generating Exactly Fourteen Kuratowski Sets

definition
  func KurExSet -> Subset of R^1 equals
:: KURATO_1:def 6
    {1} \/ RAT (2,3) \/ ]. 3, 4 .[ \/ ]. 4,+infty.[;
end;


theorem :: KURATO_1:12
  Cl KurExSet = {1} \/ [. 2,+infty.[;

theorem :: KURATO_1:13
  (Cl KurExSet)` = ].-infty, 1 .[ \/ ]. 1, 2 .[;

theorem :: KURATO_1:14
  Cl (Cl KurExSet)` = ].-infty, 2 .];

theorem :: KURATO_1:15
  (Cl (Cl KurExSet)`)` = ]. 2,+infty.[;

theorem :: KURATO_1:16
  Cl (Cl (Cl KurExSet)`)` = [. 2,+infty.[;

theorem :: KURATO_1:17
  (Cl (Cl (Cl KurExSet)`)`)` = ].-infty, 2 .[;

theorem :: KURATO_1:18
  KurExSet` = ].-infty, 1 .[ \/ ]. 1, 2 .] \/ IRRAT(2,3) \/ {3} \/ {4};

theorem :: KURATO_1:19
  Cl KurExSet` = ].-infty, 3 .] \/ {4};

theorem :: KURATO_1:20
  (Cl KurExSet`)` = ]. 3, 4 .[ \/ ]. 4,+infty.[;

theorem :: KURATO_1:21
  Cl (Cl KurExSet`)` = [. 3,+infty.[;

theorem :: KURATO_1:22
  (Cl (Cl KurExSet`)`)` = ].-infty, 3 .[;

theorem :: KURATO_1:23
  Cl (Cl (Cl KurExSet`)`)` = ].-infty, 3 .];

theorem :: KURATO_1:24
  (Cl (Cl (Cl KurExSet`)`)`)` = ]. 3,+infty.[;

begin :: The Set Generating Exactly Seven Kuratowski Sets

theorem :: KURATO_1:25
  Int KurExSet = ]. 3, 4 .[ \/ ]. 4,+infty.[;

theorem :: KURATO_1:26
  Cl Int KurExSet = [. 3,+infty.[;

theorem :: KURATO_1:27
  Int Cl Int KurExSet = ]. 3,+infty.[;

theorem :: KURATO_1:28
  Int Cl KurExSet = ]. 2,+infty.[;

theorem :: KURATO_1:29
  Cl Int Cl KurExSet = [. 2,+infty.[;

begin :: The Difference Between Chosen Kuratowski Sets

theorem :: KURATO_1:30
   Cl Int Cl KurExSet <> Int Cl KurExSet;

theorem :: KURATO_1:31
  Cl Int Cl KurExSet <> Cl KurExSet;

theorem :: KURATO_1:32
   Cl Int Cl KurExSet <> Int Cl Int KurExSet;

theorem :: KURATO_1:33
  Cl Int Cl KurExSet <> Cl Int KurExSet;

theorem :: KURATO_1:34
   Cl Int Cl KurExSet <> Int KurExSet;

theorem :: KURATO_1:35
   Int Cl KurExSet <> Cl KurExSet;

theorem :: KURATO_1:36
   Int Cl KurExSet <> Int Cl Int KurExSet;

theorem :: KURATO_1:37
   Int Cl KurExSet <> Cl Int KurExSet;

theorem :: KURATO_1:38
  Int Cl KurExSet <> Int KurExSet;

theorem :: KURATO_1:39
   Int Cl Int KurExSet <> Cl KurExSet;

theorem :: KURATO_1:40
  Cl Int KurExSet <> Cl KurExSet;

theorem :: KURATO_1:41
   Int KurExSet <> Cl KurExSet;

theorem :: KURATO_1:42
  Cl KurExSet <> KurExSet;

theorem :: KURATO_1:43
  KurExSet <> Int KurExSet;

theorem :: KURATO_1:44
   Cl Int KurExSet <> Int Cl Int KurExSet;

theorem :: KURATO_1:45
  Int Cl Int KurExSet <> Int KurExSet;

theorem :: KURATO_1:46
   Cl Int KurExSet <> Int KurExSet;

begin :: Final Proofs For Seven

theorem :: KURATO_1:47
  Int Cl Int KurExSet <> Int Cl KurExSet;

theorem :: KURATO_1:48
  Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet are_mutually_different;

theorem :: KURATO_1:49
  Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet are_mutually_different;

theorem :: KURATO_1:50
  for X being set st X in
    { Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet } holds
   X is open non empty Subset of R^1;

theorem :: KURATO_1:51
   for X being set st X in
    { Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet } holds
   X is closed Subset of R^1;

theorem :: KURATO_1:52
  for X being set st X in
    { Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet } holds
   X <> REAL;

theorem :: KURATO_1:53
    for X being set st X in
    { Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet } holds
   X <> REAL;

theorem :: KURATO_1:54
  { Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet } misses
    { Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet };

theorem :: KURATO_1:55
  Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet,
    Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet
      are_mutually_different;

registration
  cluster KurExSet -> non closed non open;
  coherence by Th42,Th43,PRE_TOPC:52,TOPS_1:55;
end;


theorem :: KURATO_1:56
  { Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet,
    Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet } misses { KurExSet };

theorem :: KURATO_1:57
  KurExSet, Int KurExSet, Int Cl KurExSet, Int Cl Int KurExSet,
    Cl KurExSet, Cl Int KurExSet, Cl Int Cl KurExSet are_mutually_different;

theorem :: KURATO_1:58
   card Kurat7Set KurExSet = 7;

begin :: Final Proofs For Fourteen

registration
  cluster Kurat14ClPart KurExSet -> with_proper_subsets;
  coherence
  proof
    set A = KurExSet;
    assume the carrier of R^1 in Kurat14ClPart KurExSet;
then A1: REAL in { Cl A, Cl (Cl A)`, Cl (Cl (Cl A)`)`,
         Cl A`, Cl (Cl A`)`, Cl (Cl (Cl A`)`)` } by Def3,TOPMETR:24;
    per cases by A1,ENUMSET1:28;
    suppose REAL = Cl A;
    hence thesis by Th12,BORSUK_5:103;
    end;
    suppose REAL = Cl (Cl A)`;
    hence thesis by Th14,BORSUK_5:73;
    end;
    suppose REAL = Cl (Cl (Cl A)`)`;
    hence thesis by Th16,BORSUK_5:72;
    end;
    suppose REAL = Cl A`;
    hence thesis by Th19,BORSUK_5:104;
    end;
    suppose REAL = Cl (Cl A`)`;
    hence thesis by Th21,BORSUK_5:72;
    end;
    suppose REAL = Cl (Cl (Cl A`)`)`;
    hence thesis by Th23,BORSUK_5:73;
  end;
  end;
  cluster Kurat14OpPart KurExSet -> with_proper_subsets;
  coherence
  proof
    set A = KurExSet;
    assume the carrier of R^1 in Kurat14OpPart KurExSet;
then A2: REAL in { (Cl A)`, (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)`,
         (Cl A`)`, (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` } by Def4,TOPMETR:24;
    per cases by A2,ENUMSET1:28;
    suppose REAL = (Cl A)`;
    hence thesis by Th12,BORSUK_5:106;
    end;
    suppose REAL = (Cl (Cl A)`)`;
    hence thesis by Th14,BORSUK_5:106;
    end;
    suppose REAL = (Cl (Cl (Cl A)`)`)`;
    hence thesis by Th16,BORSUK_5:106;
    end;
    suppose REAL = (Cl A`)`;
    hence thesis by Th19,BORSUK_5:106;
    end;
    suppose REAL = (Cl (Cl A`)`)`;
    hence thesis by Th21,BORSUK_5:106;
    end;
    suppose REAL = (Cl (Cl (Cl A`)`)`)`;
    hence thesis by Th23,BORSUK_5:106;
  end;
  end;
end;


registration
  cluster Kurat14Set KurExSet -> with_proper_subsets;
  coherence
  proof
     { KurExSet, KurExSet` } is Subset-Family of R^1
      by MEASURE1:7;
    then reconsider AA = { KurExSet, KurExSet` } as Subset-Family of R^1
     ;
     AA is with_proper_subsets
    proof
      assume
A1:   the carrier of R^1 in AA;
      per cases by A1,TARSKI:def 2,TOPMETR:24;
      suppose REAL = KurExSet;
      then [#]R^1 = KurExSet by PRE_TOPC:12,TOPMETR:24;
      hence thesis;
      end;
      suppose REAL = KurExSet`;
      then [#]R^1 = KurExSet` by PRE_TOPC:12,TOPMETR:24;
      hence thesis by TOPS_1:29;
    end;
    end;
then A2: AA \/ Kurat14ClPart KurExSet is with_proper_subsets by BORSUK_5:115;
     Kurat14Set KurExSet =
      AA \/ Kurat14ClPart KurExSet \/ Kurat14OpPart KurExSet by Th5;
    hence thesis by A2,BORSUK_5:115;
  end;
end;


registration
  cluster Kurat14Set KurExSet -> with_non-empty_elements;
  coherence
  proof
    reconsider E = {}R^1 as Subset of R^1;
    assume {} in Kurat14Set KurExSet;
    then E` in Kurat14Set KurExSet by Th6;
    then [#]R^1 in Kurat14Set KurExSet by PRE_TOPC:27;
    then the carrier of R^1 in Kurat14Set KurExSet by PRE_TOPC:12;
    hence thesis by BORSUK_5:def 6;
  end;
end;


theorem :: KURATO_1:59
  for A being with_non-empty_elements set,
      B being set st B c= A holds
    B is with_non-empty_elements;

registration
  cluster Kurat14ClPart KurExSet -> with_non-empty_elements;
  coherence
  proof
     Kurat14Set KurExSet = { KurExSet, KurExSet`} \/ Kurat14ClPart KurExSet \/
      Kurat14OpPart KurExSet by Th5;
then A1: { KurExSet, KurExSet`} \/ Kurat14ClPart KurExSet c= Kurat14Set
KurExSet
      by XBOOLE_1:7;
     Kurat14ClPart KurExSet c= { KurExSet, KurExSet`} \/ Kurat14ClPart KurExSet
      by XBOOLE_1:7;
    then Kurat14ClPart KurExSet c= Kurat14Set KurExSet by A1,XBOOLE_1:1;
    hence thesis by Th59;
  end;
  cluster Kurat14OpPart KurExSet -> with_non-empty_elements;
  coherence
  proof
     Kurat14Set KurExSet = { KurExSet, KurExSet`} \/ Kurat14ClPart KurExSet \/
      Kurat14OpPart KurExSet by Th5;
    then Kurat14OpPart KurExSet c= Kurat14Set KurExSet by XBOOLE_1:7;
    hence thesis by Th59;
  end;
end;


registration
  cluster with_proper_subsets with_non-empty_elements Subset-Family of R^1;
  existence
  proof
    take Kurat14Set KurExSet;
    thus thesis;
  end;
end;


theorem :: KURATO_1:60
  for F, G being with_proper_subsets with_non-empty_elements
    Subset-Family of R^1 st
      F is open & G is closed holds F misses G;

registration
  cluster Kurat14ClPart KurExSet -> closed;
  coherence
  proof
    set A = KurExSet;
    let P be Subset of R^1;
    assume P in Kurat14ClPart KurExSet;
    then P in { Cl A, Cl (Cl A)`, Cl (Cl (Cl A)`)`,
         Cl A`, Cl (Cl A`)`, Cl (Cl (Cl A`)`)` } by Def3;
    hence thesis by ENUMSET1:28;
  end;
  cluster Kurat14OpPart KurExSet -> open;
  coherence
  proof
    set A = KurExSet;
    let P be Subset of R^1;
    assume P in Kurat14OpPart KurExSet;
    then P in { (Cl A)`, (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)`,
           (Cl A`)`, (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` } by Def4;
    hence thesis by ENUMSET1:28;
  end;
end;


theorem :: KURATO_1:61
  Kurat14ClPart KurExSet misses Kurat14OpPart KurExSet;

registration let T, A;
  cluster Kurat14ClPart A -> finite;
  coherence
  proof
     Kurat14ClPart A = { Cl A, Cl (Cl A)`, Cl (Cl (Cl A)`)`,
           Cl A`, Cl (Cl A`)`, Cl (Cl (Cl A`)`)` } by Def3;
    hence thesis;
  end;
  cluster Kurat14OpPart A -> finite;
  coherence
  proof
      Kurat14OpPart A = { (Cl A)`, (Cl (Cl A)`)`, (Cl (Cl (Cl A)`)`)`,
           (Cl A`)`, (Cl (Cl A`)`)`, (Cl (Cl (Cl A`)`)`)` } by Def4;
    hence thesis;
  end;
end;


theorem :: KURATO_1:62
  card (Kurat14ClPart KurExSet) = 6;

theorem :: KURATO_1:63
  card (Kurat14OpPart KurExSet) = 6;

theorem :: KURATO_1:64
  { KurExSet, KurExSet` } misses Kurat14ClPart KurExSet;

registration
  cluster KurExSet -> non empty;
  coherence by Def6;
end;


theorem :: KURATO_1:65
  KurExSet <> KurExSet`;

theorem :: KURATO_1:66
  { KurExSet, KurExSet` } misses Kurat14OpPart KurExSet;

theorem :: KURATO_1:67
    card Kurat14Set KurExSet = 14;

begin :: Properties of Kuratowski Sets

definition let T be TopStruct, A be Subset-Family of T;
  attr A is Cl-closed means
:: KURATO_1:def 7
     for P being Subset of T st
      P in A holds Cl P in A;
  attr A is Int-closed means
:: KURATO_1:def 8
     for P being Subset of T st
      P in A holds Int P in A;
end;


definition let T be 1-sorted, A be Subset-Family of T;
  attr A is compl-closed means
:: KURATO_1:def 9
      for P being Subset of T st
      P in A holds P` in A;
end;


registration let T, A;
  cluster Kurat14Set A -> non empty;
  coherence by Th3;
  cluster Kurat14Set A -> Cl-closed;
  coherence
  proof
    let P be Subset of T;
    assume P in Kurat14Set A;
    hence thesis by Th6;
  end;
  cluster Kurat14Set A -> compl-closed;
  coherence
  proof
    let P be Subset of T;
    assume P in Kurat14Set A;
    hence thesis by Th6;
  end;
end;


registration let T, A;
  cluster Kurat7Set A -> non empty;
  coherence by Th8;
  cluster Kurat7Set A -> Int-closed;
  coherence
  proof
    let P be Subset of T;
    assume P in Kurat7Set A;
    hence thesis by Th10;
  end;
  cluster Kurat7Set A -> Cl-closed;
  coherence
  proof
    let P be Subset of T;
    assume P in Kurat7Set A;
    hence thesis by Th10;
  end;
end;


registration let T;
  cluster Int-closed Cl-closed non empty Subset-Family of T;
  existence
  proof
    consider A being Subset of T;
    take Kurat7Set A;
    thus thesis;
  end;
  cluster compl-closed Cl-closed non empty Subset-Family of T;
  existence
  proof
    consider A being Subset of T;
    take Kurat14Set A;
    thus thesis;
  end;
end;

