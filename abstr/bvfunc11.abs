:: Predicate Calculus for Boolean Valued Functions, III
::  by Shunichi Kobayashi and Yatsuka Nakamura
::
:: Received July 14, 1999
:: Copyright (c) 1999 Association of Mizar Users

environ

 vocabularies EQREL_1, PARTIT1, T_1TOPSP, BOOLE, BVFUNC_2, FUNCOP_1, SETFAM_1,
      RELAT_1, FUNCT_1, CANTOR_1, CAT_1, FUNCT_2, MARGREL1, ZF_LANG, BVFUNC_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, MARGREL1, RELAT_1, SETFAM_1,
      FUNCT_1, FUNCT_2, EQREL_1, FUNCOP_1, PARTIT1, BVFUNC_1, BVFUNC_2,
      FUNCT_4;
 constructors SETFAM_1, FUNCT_4, XCMPLX_0, BVFUNC_1, BVFUNC_2, RELSET_1;
 registrations XBOOLE_0, FUNCOP_1, FUNCT_4, EQREL_1, MARGREL1, FUNCT_1,
      FUNCT_2;
 requirements SUBSET, BOOLE, ARITHM;


begin :: Chap. 1  Preliminaries

reserve Y for non empty set,
  a, b for Element of Funcs(Y,BOOLEAN),
  G for Subset of PARTITIONS(Y),
  A, B for a_partition of Y;

theorem :: BVFUNC11:1
  for z being Element of Y, PA,PB being a_partition of Y
  st PA '<' PB holds EqClass(z,PA) c= EqClass(z,PB);

theorem :: BVFUNC11:2
  for z being Element of Y, PA,PB being a_partition of Y
  holds EqClass(z,PA) c= EqClass(z,PA '\/' PB);

theorem :: BVFUNC11:3
  for z being Element of Y, PA,PB being a_partition of Y
  holds EqClass(z,PA '/\' PB) c= EqClass(z,PA);

theorem :: BVFUNC11:4
  for z being Element of Y, PA being a_partition of Y holds
  EqClass(z,PA) c= EqClass(z,%O(Y)) & EqClass(z,%I(Y)) c= EqClass(z,PA);

theorem :: BVFUNC11:5
  for G being Subset of PARTITIONS(Y), A,B being a_partition of Y
  st G is independent & G={A,B} & A<>B holds
  for a,b being set st a in A & b in B holds a meets b;

theorem :: BVFUNC11:6
  for G being Subset of PARTITIONS(Y), A,B being a_partition of Y
  st G is independent & G={A,B} & A <> B holds '/\' G = A '/\' B;

theorem :: BVFUNC11:7
  for G being Subset of PARTITIONS(Y), A,B being a_partition of Y
  st G={A,B} & A<>B holds CompF(A,G) = B;

begin

theorem :: BVFUNC11:8
  a '<' b implies All(a,A,G) '<' Ex(b,A,G);

canceled 2;

theorem :: BVFUNC11:11
  G is independent implies All(All(a,A,G),B,G) '<' Ex(All(a,B,G),A,G);

theorem :: BVFUNC11:12
  All(All(a,A,G),B,G) '<' Ex(Ex(a,B,G),A,G);

theorem :: BVFUNC11:13
  G is independent implies All(All(a,A,G),B,G) '<' All(Ex(a,B,G),A,G);

theorem :: BVFUNC11:14
  All(Ex(a,A,G),B,G) '<' Ex(Ex(a,B,G),A,G);

theorem :: BVFUNC11:15
  'not' Ex(All(a,A,G),B,G) '<' Ex(Ex('not' a,B,G),A,G);

theorem :: BVFUNC11:16
  G is independent implies
  Ex('not' All(a,A,G),B,G) '<' Ex(Ex('not' a,B,G),A,G);

theorem :: BVFUNC11:17
  G is independent implies
  'not' All(All(a,A,G),B,G) = Ex('not' All(a,B,G),A,G);

theorem :: BVFUNC11:18
  G is independent implies
  All('not' All(a,A,G),B,G) '<' Ex(Ex('not' a,B,G),A,G);

theorem :: BVFUNC11:19
  G is independent implies 'not' All(All(a,A,G),B,G) = Ex(Ex('not' a,B,G),A,G);

theorem :: BVFUNC11:20
  G is independent implies
  'not' All(All(a,A,G),B,G) '<' Ex(Ex('not' a,A,G),B,G);

:: from BVFUNC12

theorem :: BVFUNC11:21
  'not' All(Ex(a,A,G),B,G) = Ex(All('not' a,A,G),B,G);

theorem :: BVFUNC11:22
  'not' Ex(All(a,A,G),B,G) = All(Ex('not' a,A,G),B,G);

theorem :: BVFUNC11:23
  'not' All(All(a,A,G),B,G) = Ex(Ex('not' a,A,G),B,G);

theorem :: BVFUNC11:24
  G is independent implies Ex(All(a,A,G),B,G) '<' Ex(Ex(a,B,G),A,G);

theorem :: BVFUNC11:25
  All(All(a,A,G),B,G) '<' All(Ex(a,A,G),B,G);

theorem :: BVFUNC11:26
  All(All(a,A,G),B,G) '<' Ex(Ex(a,A,G),B,G);

theorem :: BVFUNC11:27
  Ex(All(a,A,G),B,G) '<' Ex(Ex(a,A,G),B,G);

