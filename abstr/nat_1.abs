:: The Fundamental Properties of Natural Numbers
::  by Grzegorz Bancerek
::
:: Received January 11, 1989
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies ORDINAL2, ARYTM, ARYTM_1, ORDINAL1, XREAL_0, ZF_LANG, HENMODEL;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, NUMBERS, XCMPLX_0, XREAL_0,
      REAL_1, XXREAL_0;
 constructors NUMBERS, XCMPLX_0, XXREAL_0, XREAL_0, ORDINAL2;
 registrations REAL_1, NUMBERS, ORDINAL2, XREAL_0, ARYTM_3, ZFMISC_1, XBOOLE_0,
      XXREAL_0, ORDINAL1, SUBSET_1;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

definition
  mode Nat is natural number;
end;

 reserve x for Real,
         p,k,l,m,n,s,h,i,j,k1,t,t1 for Nat,
         X for Subset of REAL;

:: The results of axioms of natural numbers

theorem :: NAT_1:1                       :: axiom of induction
  for X st 0 in X & for x st x in X holds x + 1 in X
  for n holds n in X;

:: Addition and multiplication

:: The natural numbers are real numbers therefore some theorems of real
:: numbers are translated for natural numbers.

definition let n,k be Element of NAT;
  redefine func n + k -> Element of NAT;
 end;

registration let n,k be Nat;
  cluster n + k -> natural;
end;

:: Now we can form and prove the scheme of induction.

scheme :: NAT_1:sch 1
 Ind { P[Nat] } :
 for k being Element of NAT holds P[k]
   provided
   P[0] and
   for k being Element of NAT st P[k] holds P[k + 1];

scheme :: NAT_1:sch 2
 NatInd { P[Nat] } :
 for k being Nat holds P[k]
   provided
   P[0] and
   for k be Nat st P[k] holds P[k + 1];

:: Like addition, the result of multiplication of two natural numbers is
:: a natural number.

definition let n,k be Element of NAT;
  redefine func n * k -> Element of NAT;
end;

registration let n,k be Nat;
  cluster n * k -> natural;
end;

                ::::::::::::::::::::
                :: Order relation ::
                ::::::::::::::::::::

:: Some theorems of not great relation "<=" in real numbers are translated
:: to natural number easy and it is necessary to have them here.

theorem :: NAT_1:2
  0 <= i;

theorem :: NAT_1:3
  0 <> i implies 0 < i;

theorem :: NAT_1:4
  i <= j implies i * h <= j * h;

theorem :: NAT_1:5
  0 < i + 1;

theorem :: NAT_1:6
  i = 0 or ex k st i = k + 1;

theorem :: NAT_1:7
  i + j = 0 implies i = 0 & j = 0;

registration
  cluster non zero Nat;
end;

registration let m be Nat, n be non zero Nat;
  cluster m + n -> non zero;
  cluster n + m -> non zero;
end;

scheme :: NAT_1:sch 3
 DefbyInd { N()->Nat, F(Nat,Nat)->Nat, P[Nat,Nat] } :
  (for k being Element of NAT ex n being Element of NAT st P[k,n]) &
    for k,n,m being Element of NAT st P[k,n] & P[k,m] holds n = m
     provided
    for k,n being Element of NAT holds P[k,n] iff
       k = 0 & n = N() or
       ex m,l being Element of NAT st k = m + 1 & P[m,l] & n = F(k,l);

theorem :: NAT_1:8
  i <= j + 1 implies i <= j or i = j + 1;

theorem :: NAT_1:9
  i <= j & j <= i + 1 implies i = j or j = i + 1;

theorem :: NAT_1:10
  i <= j implies ex k st j = i + k;

theorem :: NAT_1:11
  i <= i + j;

scheme :: NAT_1:sch 4
 CompInd { P[Nat] } :
  for k being Element of NAT holds P[k]
   provided
   for k being Element of NAT st
      for n being Element of NAT st n < k holds P[n] holds P[k];

:: Principle of minimum

scheme :: NAT_1:sch 5
 Min { P[Nat] } :
 ex k being Element of NAT st P[k] &
 for n being Element of NAT st P[n] holds k <= n
  provided
  ex k being Element of NAT st P[k];

:: Principle of maximum

scheme :: NAT_1:sch 6
 Max { P[Nat], N()->Nat } :
  ex k being Element of NAT st P[k] &
  for n being Element of NAT st P[n] holds n <= k
   provided
   for k being Element of NAT st P[k] holds k <= N() and
   ex k being Element of NAT st P[k];

theorem :: NAT_1:12
  i <= j implies i <= j + h;

theorem :: NAT_1:13
  i < j + 1 iff i <= j;

theorem :: NAT_1:14
  j < 1 implies j = 0;

theorem :: NAT_1:15
  i * j = 1 implies i = 1 & j = 1;

theorem :: NAT_1:16
  k <> 0 implies n < n + k;

scheme :: NAT_1:sch 7
 Regr { P[Nat] } :
  P[0]
  provided
  ex k being Element of NAT st P[k] and
  for k being Element of NAT st k <> 0 & P[k]
     ex n being Element of NAT st n < k & P[n];

:: Exact division and rest of division

theorem :: NAT_1:17
  0 < m implies for n ex k,t st n = (m*k)+t & t < m;

theorem :: NAT_1:18
  n = m*k+t & t < m & n = m*k1+t1 & t1 < m implies k = k1 & t = t1;

registration
  cluster -> ordinal Nat;
end;

registration
  cluster non empty ordinal Subset of REAL;
end;

theorem :: NAT_1:19
  k < k + n iff 1 <= n;

theorem :: NAT_1:20
  k < n implies n - 1 is Element of NAT;

theorem :: NAT_1:21
  k <= n implies n - k is Element of NAT;

begin :: Addenda

:: from ALGSEQ_1

theorem :: NAT_1:22
  m < n+1 implies m < n or m = n;

theorem :: NAT_1:23
  k < 2 implies k = 0 or k = 1;

registration
  cluster non zero Element of NAT;
end;

registration
  cluster -> non negative Element of NAT;
end;

registration
  cluster -> non negative Nat;
end;

:: from JORDAN4

theorem :: NAT_1:24
 i <> 0 & h = j*i implies j <= h;

:: from SCMFSA_7, 2006.03.15, A.T.

theorem :: NAT_1:25
  k < n iff 1 <= k + 1 & k + 1 <= n;

:: from BINOM, 2006.05.28, A.T.

scheme :: NAT_1:sch 8
 Ind1{M() -> Nat, P[Nat]} :
  for i being Element of NAT st M() <= i holds P[i]
provided
  P[M()] and
  for j being Element of NAT st M() <= j holds P[j] implies P[j+1];

:: from INT_2, 2006.05.30, AG

scheme :: NAT_1:sch 9
 CompInd1 { a() -> Nat, P[Nat] } :
  for k being Element of NAT st k>=a() holds P[k]
  provided
   for k being Element of NAT st k>=a() &
  (for n being Element of NAT st n>=a() & n<k holds P[n]) holds P[k];

:: Moved from CQC_THE1 on 07.07.2006 by AK

theorem :: NAT_1:26
  n <= 1 implies n = 0 or n = 1;

theorem :: NAT_1:27
  n <= 2 implies n = 0 or n = 1 or n = 2;

theorem :: NAT_1:28
  n <= 3 implies n = 0 or n = 1 or n = 2 or n = 3;

theorem :: NAT_1:29
  n <= 4 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4;

theorem :: NAT_1:30
  n <= 5 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5;

theorem :: NAT_1:31
  n <= 6 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5 or n = 6;

theorem :: NAT_1:32
  n <= 7 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5 or n = 6
  or n = 7;

theorem :: NAT_1:33
  n <= 8 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8;

theorem :: NAT_1:34
  n <= 9 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9;

:: compare BINARITH:sch 1, 2006.07.19, A.T.

scheme :: NAT_1:sch 10
 Indfrom1 { P[Nat] } :
  for k being non empty Nat holds P[k]
  provided
 P[1] and
 for k being non empty Nat st P[k] holds P[k + 1];

:: from HENMODEL, 2007.03.15, A.T.

reserve i,k,n for Element of NAT;

definition let A be set;
  func min* A -> Element of NAT means
:: NAT_1:def 1
   (it in A & for k st k in A holds it <= k) if
                                   A is non empty Subset of NAT
          otherwise it = 0;
end;

