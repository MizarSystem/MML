:: The Fundamental Properties of Natural Numbers
::  by Grzegorz Bancerek
::
:: Received January 11, 1989
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies ORDINAL2, ARYTM, ARYTM_1, ORDINAL1, XREAL_0, ZF_LANG, HENMODEL,
      FINSET_1, CARD_1, BOOLE, GR_CY_1, RELAT_1, FUNCT_1, SQUARE_1, NORMSP_1,
      SEQM_3;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, FINSET_1, CARD_1, NUMBERS,
      XCMPLX_0, XREAL_0, REAL_1, XXREAL_0, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2;
 constructors NUMBERS, XCMPLX_0, XXREAL_0, XREAL_0, CARD_1, WELLORD2, FUNCT_2,
      PARTFUN1;
 registrations SUBSET_1, ORDINAL1, NUMBERS, XXREAL_0, XREAL_0, REAL_1,
      XBOOLE_0, CARD_1, RELSET_1, FUNCT_2;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

definition
  mode Nat is natural number;
end;

reserve x for Real,
  p,k,l,m,n,s,h,i,j,k1,t,t1 for Nat,
  X for Subset of REAL;

:: The results of axioms of natural numbers

theorem :: NAT_1:1
  for X st 0 in X & for x st x in X holds x + 1 in X for n holds n in X;

:: Addition and multiplication
:: The natural numbers are real numbers therefore some theorems of real
:: numbers are translated for natural numbers.

registration
  let n,k be Nat;
  cluster n + k -> natural;
end;

definition
  let n be Nat, k be Element of NAT;
  redefine func n + k -> Element of NAT;
end;

definition
  let n be Element of NAT, k be Nat;
  redefine func n + k -> Element of NAT;
end;

:: Now we can form and prove the scheme of induction.

scheme :: NAT_1:sch 1
 Ind { P[Nat] } : for k being Element of NAT holds P[k]
provided
 P[0]
and
 for k being Element of NAT st P[k] holds P[k + 1];

scheme :: NAT_1:sch 2
 NatInd { P[Nat] } : for k being Nat holds P[k]
provided
 P[0]
and
 for k be Nat st P[k] holds P[k + 1];

:: Like addition, the result of multiplication of two natural numbers is
:: a natural number.

registration
  let n,k be Nat;
  cluster n * k -> natural;
end;

definition
  let n be Nat, k be Element of NAT;
  redefine func n * k -> Element of NAT;
end;

definition
  let n be Element of NAT, k be Nat;
  redefine func n * k -> Element of NAT;
end;

::::::::::::::::::::
:: Order relation ::
::::::::::::::::::::
:: Some theorems of not great relation "<=" in real numbers are translated
:: to natural number easy and it is necessary to have them here.

theorem :: NAT_1:2
  0 <= i;

theorem :: NAT_1:3
  0 <> i implies 0 < i;

theorem :: NAT_1:4
  i <= j implies i * h <= j * h;

theorem :: NAT_1:5
  0 < i + 1;

theorem :: NAT_1:6
  i = 0 or ex k st i = k + 1;

theorem :: NAT_1:7
  i + j = 0 implies i = 0 & j = 0;

registration
  cluster non zero Nat;
end;

registration
  let m be Nat, n be non zero Nat;
  cluster m + n -> non zero;
  cluster n + m -> non zero;
end;

scheme :: NAT_1:sch 3
 DefbyInd { N()->Nat, F(Nat,Nat)->Nat, P[Nat,Nat] } :
  (for k being Nat ex n being Nat st P[k,n]) &
  for k,n,m being Nat st P[k,n] & P[k,m] holds n = m
provided
 for k,n being Nat holds P[k,n] iff k = 0 & n = N() or
ex m,l being Nat st k = m + 1 & P[m,l] & n = F(k,l);

theorem :: NAT_1:8
  i <= j + 1 implies i <= j or i = j + 1;

theorem :: NAT_1:9
  i <= j & j <= i + 1 implies i = j or j = i + 1;

theorem :: NAT_1:10
  i <= j implies ex k st j = i + k;

theorem :: NAT_1:11
  i <= i + j;

scheme :: NAT_1:sch 4
 CompInd { P[Nat] } : for k being Nat holds P[k]
provided
 for k being Nat st for n being Nat st n < k holds P[n] holds P[k];

:: Principle of minimum

scheme :: NAT_1:sch 5
 Min { P[Nat] } : ex k being Nat st P[k] &
  for n being Nat st P[n] holds k <= n
provided
 ex k being Nat st P[k];

:: Principle of maximum

scheme :: NAT_1:sch 6
 Max { P[Nat], N()->Nat } : ex k being Nat st P[k] &
  for n being Nat st P[n] holds n <= k
provided
 for k being Nat st P[k] holds k <= N()
and
 ex k being Nat st P[k];

theorem :: NAT_1:12
  i <= j implies i <= j + h;

theorem :: NAT_1:13
  i < j + 1 iff i <= j;

theorem :: NAT_1:14
  j < 1 implies j = 0;

theorem :: NAT_1:15
  i * j = 1 implies i = 1;

theorem :: NAT_1:16
  k <> 0 implies n < n + k;

scheme :: NAT_1:sch 7
 Regr { P[Nat] } : P[0]
provided
 ex k being Nat st P[k]
and
 for k being Nat st k <> 0 & P[k] ex n being Nat st n < k & P[n];

:: Exact division and rest of division

theorem :: NAT_1:17
  0 < m implies for n ex k,t st n = (m*k)+t & t < m;

theorem :: NAT_1:18
  n = m*k+t & t < m & n = m*k1+t1 & t1 < m implies k = k1 & t = t1;

registration
  cluster -> ordinal Nat;
end;

registration
  cluster non empty ordinal Subset of REAL;
end;

theorem :: NAT_1:19
  k < k + n iff 1 <= n;

theorem :: NAT_1:20
  k < n implies n - 1 is Element of NAT;

theorem :: NAT_1:21
  k <= n implies n - k is Element of NAT;

begin :: Addenda

:: from ALGSEQ_1

theorem :: NAT_1:22
  m < n+1 implies m < n or m = n;

theorem :: NAT_1:23
  k < 2 implies k = 0 or k = 1;

registration
  cluster non zero Element of NAT;
end;

registration
  cluster -> non negative Element of NAT;
end;

registration
  cluster -> non negative Nat;
end;

:: from JORDAN4

theorem :: NAT_1:24
  i <> 0 & h = j*i implies j <= h;

:: from SCMFSA_7, 2006.03.15, A.T.

canceled; :: Th25 - refer to Th11 and Th13

:: from BINOM, 2006.05.28, A.T.

scheme :: NAT_1:sch 8
 Ind1{M() -> Nat, P[Nat]} : for i being Nat st M() <= i holds P[i]
provided
 P[M()]
and
 for j being Nat st M() <= j holds P[j] implies P[j+1];

:: from INT_2, 2006.05.30, AG

scheme :: NAT_1:sch 9
 CompInd1 { a() -> Nat, P[Nat] } :
  for k being Nat st k >= a() holds P[k]
provided
 for k being Nat st k>=a() &
(for n being Nat st n>=a() & n<k holds P[n]) holds P[k];

:: Moved from CQC_THE1 on 07.07.2006 by AK

theorem :: NAT_1:26
  n <= 1 implies n = 0 or n = 1;

theorem :: NAT_1:27
  n <= 2 implies n = 0 or n = 1 or n = 2;

theorem :: NAT_1:28
  n <= 3 implies n = 0 or n = 1 or n = 2 or n = 3;

theorem :: NAT_1:29
  n <= 4 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4;

theorem :: NAT_1:30
  n <= 5 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5;

theorem :: NAT_1:31
  n <= 6 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5 or n = 6;

theorem :: NAT_1:32
  n <= 7 implies n = 0 or n = 1 or n = 2 or n = 3 or n = 4 or n = 5 or n = 6
  or n = 7;

theorem :: NAT_1:33
  n <= 8 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8;

theorem :: NAT_1:34
  n <= 9 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9;

theorem :: NAT_1:35
  n <= 10 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9 or n = 10;

theorem :: NAT_1:36
  n <= 11 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9 or n = 10 or n = 11;

theorem :: NAT_1:37
  n <= 12 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9 or n = 10
  or n = 11 or n = 12;

theorem :: NAT_1:38
  n <= 13 implies n = 0 or n = 1 or n = 2 or n = 3
  or n = 4 or n = 5 or n = 6 or n = 7 or n = 8 or n = 9 or n = 10
  or n = 11 or n = 12 or n = 13;

:: compare BINARITH:sch 1, 2006.07.19, A.T.

scheme :: NAT_1:sch 10
 Indfrom1 { P[Nat] } : for k being non empty Nat holds P[k]
provided
 P[1]
and
 for k being non empty Nat st P[k] holds P[k + 1];

:: from HENMODEL, 2007.03.15, A.T.

definition
  let A be set;
  func min* A -> Element of NAT means
:: NAT_1:def 1
  (it in A & for k st k in A holds it <= k) if A is non empty Subset of NAT
  otherwise it = 0;
end;

:: from CARD_1, 2007.10.28,A.T.

reserve x,X,Y,Z for set;

theorem :: NAT_1:39
  for n being natural number holds succ n = n + 1;

theorem :: NAT_1:40
  n <= m iff n c= m;

theorem :: NAT_1:41
  Card n c= Card m iff n <= m;

theorem :: NAT_1:42
  Card n in Card m iff n < m;

reserve M,N for Cardinal;

theorem :: NAT_1:43
  nextcard Card n = Card(n+1);

definition
  let n be natural number;
  redefine func succ n equals
:: NAT_1:def 2

  n+1;
end;

theorem :: NAT_1:44
  for X,Y being finite set holds X c= Y implies card X <= card Y;

reserve l for Element of NAT;

theorem :: NAT_1:45
  k in n iff k < n;

theorem :: NAT_1:46
  n in n+1;

theorem :: NAT_1:47
  k <= n implies k = k /\ n;

:: from RECDEF_1, 2008.02.21, A.T.

scheme :: NAT_1:sch 11
 LambdaRecEx{A() -> set,G(set,set) -> set}:
  ex f being Function st dom f = NAT &
  f.0 = A() & for n being Nat holds f.(n+1) = G(n,f.n);

scheme :: NAT_1:sch 12
 LambdaRecExD{D() -> non empty set, A() -> Element of D(),
  G(set,set) -> Element of D()}: ex f being Function of NAT,D() st
  f.0 = A() & for n being Nat holds f.(n+1) = G(n,f.n);

scheme :: NAT_1:sch 13
 RecUn{A() -> set, F, G() -> Function, P[set,set,set]}: F() = G()
provided
 dom F() = NAT and
 F().0 = A() and
 for n holds P[n,F().n,F().(n+1)] and
 dom G() = NAT and
 G().0 = A() and
 for n holds P[n,G().n,G().(n+1)] and
 for n for x,y1,y2 being set st P[n,x,y1] & P[n,x,y2] holds y1 = y2;

scheme :: NAT_1:sch 14
 RecUnD{D() -> non empty set,A() -> Element of D(),
  P[set,set,set], F, G() -> Function of NAT,D()} : F() = G()
provided
 F().0 = A() and
 for n holds P[n,F().n,F().(n+1)] and
 G().0 = A() and
 for n holds P[n,G().n,G().(n+1)] and
 for n being Nat,x,y1,y2 being Element of D()
st P[n,x,y1] & P[n,x,y2] holds y1=y2;

scheme :: NAT_1:sch 15
 LambdaRecUn{A() -> set, RecFun(set,set) -> set, F, G() -> Function}:
  F() = G()
provided
 dom F() = NAT and
 F().0 = A() and
 for n holds F().(n+1) = RecFun(n,F().n) and
 dom G() = NAT and
 G().0 = A() and
 for n holds G().(n+1) = RecFun(n,G().n);

scheme :: NAT_1:sch 16
 LambdaRecUnD{D() -> non empty set,A() -> Element of D(),
  RecFun(set,set) -> Element of D(), F, G() -> Function of NAT,D()}: F() = G()
provided
 F().0 = A() and
 for n holds F().(n+1) = RecFun(n,F().n) and
 G().0 = A() and
 for n holds G().(n+1) = RecFun(n,G().n);

:: missing, 2008.02.22, A.T.

registration let x,y be Nat;
 cluster min(x,y) -> natural;
 cluster max(x,y) -> natural;
end;

:: from SCMFSA_9, 2008.02.25, A.T.

scheme :: NAT_1:sch 17
 MinIndex { F(Nat)->Nat} :
  ex k st F(k)=0 & for n st F(n)=0 holds k <= n
 provided
 for k holds (F(k+1) < F(k) or F(k) = 0);

:: Added by AK, 2007.10.09

definition
  let D be set, f be Function of NAT,D;
  let n be Nat;
  redefine func f.n -> Element of D;
end;

:: from MODELC_2, 2008.08.18, A.T.

definition let X be set;
 mode sequence of X is Function of NAT,X;
end;

:: from SEQM_3, BHSP_3, COMSEQ_3, KURATO_2, LOPBAN_3, CLVECT_2, CLOPBAN3
::      (generalized), 2008.08.23, A.T.

definition let X be non empty set, s be sequence of X, k be Nat;
 func s ^\ k -> sequence of X means
:: NAT_1:def 3
  for n being Nat holds it.n=s.(n+k);
end;

 reserve X for non empty set, s for sequence of X, k,m for Nat;

 theorem :: NAT_1:48
  s^\0 =s;

theorem :: NAT_1:49
  s ^\k^\m = s^\(k+m);

theorem :: NAT_1:50
  s^\k^\m = s^\m^\k;

theorem :: NAT_1:51
 for N being sequence of NAT
  holds (s * N) ^\k = s * (N ^\k);

