:: The Sylow Theorems
::  by Marco Riccardi
::
:: Received August 13, 2007
:: Copyright (c) 2007 Association of Mizar Users

environ

 vocabularies ARYTM_1, ARYTM_3, FINSEQ_1, RELAT_1, FUNCT_1, RLVECT_1, BOOLE,
      FINSEQ_2, FINSEQ_4, COMPLEX1, BINOP_1, VECTSP_1, GROUP_1, REALSET1,
      NAT_1, TARSKI, CARD_1, GROUP_2, FUNCOP_1, FUNCT_2, FINSET_1, RLSUB_1,
      SETFAM_1, EQREL_1, GROUP_3, GRAPH_1, ARYTM, ORDINAL2, GROUP_4, NEWTON,
      GR_CY_1, CARD_FIN, FILTER_0, NAT_3, GROUP_9, GROUP_10;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, NUMBERS, XCMPLX_0, ZFMISC_1,
      XXREAL_0, INT_2, NAT_1, NAT_D, FINSET_1, RELAT_1, REALSET1, FUNCT_1,
      RELSET_1, FUNCT_2, FINSEQ_1, BINARITH, RVSUM_1, CARD_1, STRUCT_0,
      GROUP_1, GROUP_2, GROUP_3, EQREL_1, FUNCOP_1, WSIERP_1, NEWTON, DOMAIN_1,
      BINOP_2, GR_CY_1, ORDINAL1, XREAL_0, GROUP_4, CARD_FIN, PARTFUN1, NAT_3,
      GROUP_9, TOPGRP_1;
 constructors SETFAM_1, WELLORD2, XXREAL_0, REAL_1, NAT_D, EQREL_1, BINARITH,
      WSIERP_1, REALSET2, UPROOTS, GR_CY_1, GROUP_4, CARD_FIN, NAT_3, TOPGRP_1;
 registrations XBOOLE_0, SUBSET_1, FUNCT_1, ORDINAL1, RELSET_1, FINSET_1,
      XXREAL_0, XREAL_0, NAT_1, INT_1, CARD_1, FINSEQ_1, SEQ_1, NEWTON,
      STRUCT_0, GROUP_2, FSM_1, DYNKIN, GROUP_1, GROUP_3, GR_CY_1, FUNCT_2,
      CIRCCMB3, GROUP_6, FRAENKEL, NAT_3, REALSET1;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;


begin :: Group Operating on a Set

notation
  let S be non empty 1-sorted;
  let E be set;
  let A be Action of (the carrier of S), E;
  let s be Element of S;
  synonym A^s for A.s;
end;

definition
  let S be non empty 1-sorted;
  let E be set;
  let A be Action of (the carrier of S), E;
  let s be Element of S;
  redefine func A^s -> Function of E, E;
end;

definition
  let S be unital (non empty HGrStr);
  let E be set;
  let A be Action of (the carrier of S), E;
  attr A is being_left_operation means
:: GROUP_10:def 1
  A^(1_S) = id E &
    for s1,s2 being Element of S holds A^(s1*s2) = A^s1 * (A^s2);
end;

registration
  let S be unital (non empty HGrStr);
  let E be set;
  cluster being_left_operation Action of (the carrier of S), E;
end;

:: ALG I.5.1 DEF 1
definition
  let S be unital (non empty HGrStr);
  let E be set;
  mode LeftOperation of S, E is
    being_left_operation Action of (the carrier of S), E;
end;

scheme :: GROUP_10:sch 1
 ExLeftOperation {E()->set, S()->Group-like (non empty HGrStr),
                        f(Element of S())->Function of E(),E()}:
  ex T being LeftOperation of S(), E()
    st for s being Element of S() holds T.s = f(s)
provided
 f(1_S()) = id E() and
 for s1,s2 being Element of S() holds f(s1*s2) = f(s1) * f(s2);

theorem :: GROUP_10:1
  for E being non empty set, S being Group-like (non empty HGrStr),
      s being Element of S, LO being LeftOperation of S, E
  holds LO^s is one-to-one;

:: left translation
:: ALG I.3.1
notation
  let S be non empty HGrStr;
  let s be Element of S;
  synonym the_left_translation_of s for s*;
end;

definition
  let S be Group-like associative (non empty HGrStr);
  func the_left_operation_of S -> LeftOperation of S, the carrier of S
    means
:: GROUP_10:def 2
    for s being Element of S holds it.s = the_left_translation_of s;
end;

definition
  let E be set;
  let n be set;
  func the_subsets_of_card(n, E) -> Subset-Family of E equals
:: GROUP_10:def 3
  {X where X is Subset of E: Card X = n};
end;

registration
  let E be finite set;
  let n be set;
  cluster the_subsets_of_card(n, E) -> finite;
end;

theorem :: GROUP_10:2
  for n being natural number, E being non empty set
  st Card n <=` Card E holds the_subsets_of_card(n, E) is non empty;

theorem :: GROUP_10:3
  for E being non empty finite set, k being Element of NAT,
      x1,x2 being set st x1<>x2 holds
  card Choose(E,k,x1,x2) = card the_subsets_of_card(k,E);

definition
  let E be non empty set;
  let n be natural number;
  let S be Group-like (non empty HGrStr);
  let s be Element of S;
  let LO be LeftOperation of S, E;
  assume  Card n <=` Card E;
  func the_extension_of_left_translation_of(n,s,LO) ->
    Function of the_subsets_of_card(n, E), the_subsets_of_card(n, E)
  means
:: GROUP_10:def 4
    for X being Element of the_subsets_of_card(n, E) holds it.X = (LO^s) .: X;
end;

definition
  let E be non empty set;
  let n be natural number;
  let S be Group-like (non empty HGrStr);
  let LO be LeftOperation of S, E;
  assume  Card n <=` Card E;
  func the_extension_of_left_operation_of(n,LO) ->
    LeftOperation of S, the_subsets_of_card(n, E) means
:: GROUP_10:def 5
    for s being Element of S
      holds it.s = the_extension_of_left_translation_of(n,s,LO);
end;

definition
  let S be non empty HGrStr;
  let s be Element of S;
  let Z be non empty set;
  func the_left_translation_of(s,Z) ->
    Function of [:the carrier of S,Z:],[:the carrier of S,Z:]
    means
:: GROUP_10:def 6
    for z1 being Element of [:the carrier of S,Z:] holds
      ex z2 being Element of [:the carrier of S,Z:], s1,s2 being Element of S,
         z being Element of Z
      st z2 = it.z1 & s2 = s * s1 & z1=[s1,z] & z2=[s2,z];
end;

definition
  let S be Group-like associative (non empty HGrStr);
  let Z be non empty set;
  func the_left_operation_of(S,Z) -> LeftOperation of S,[:the carrier of S,Z:]
    means
:: GROUP_10:def 7
    for s being Element of S holds it.s = the_left_translation_of(s,Z);
end;

definition
  let G be Group;
  let H,P be Subgroup of G;
  let h be Element of H;
  func the_left_translation_of(h,P) -> Function of Left_Cosets P, Left_Cosets P
  means
:: GROUP_10:def 8
    for P1 being Element of Left_Cosets P holds
      ex P2 being Element of Left_Cosets P, A1,A2 being Subset of G,
         g being Element of G
      st P2 = it.P1 & A2 = g * A1 & A1=P1 & A2=P2 & g=h;
end;

definition
  let G be Group;
  let H,P be Subgroup of G;
  func the_left_operation_of(H,P) -> LeftOperation of H, Left_Cosets P
    means
:: GROUP_10:def 9
    for h being Element of H holds it.h = the_left_translation_of(h,P);
end;

begin :: Stabilizer and Orbits

:: stabilizer
:: ALG I.5.2 Definition 3
definition
  let G be Group;
  let E be non empty set;
  let T be LeftOperation of G,E;
  let A be Subset of E;
  func the_strict_stabilizer_of(A,T) -> strict Subgroup of G means
:: GROUP_10:def 10
  the carrier of it = {g where g is Element of G: (T^g) .: A = A};
end;

definition
  let G be Group;
  let E be non empty set;
  let T be LeftOperation of G,E;
  let x be Element of E;
  func the_strict_stabilizer_of(x,T) -> strict Subgroup of G equals
:: GROUP_10:def 11
  the_strict_stabilizer_of({x},T);
end;

definition
  let S be unital (non empty HGrStr);
  let E be set;
  let T be LeftOperation of S, E;
  let x be Element of E;
  pred x is_fixed_under T means
:: GROUP_10:def 12
  for s being Element of S holds x = (T^s).x;
end;

definition
  let S be unital (non empty HGrStr);
  let E be set;
  let T be LeftOperation of S, E;
  func the_fixed_points_of T -> Subset of E equals
:: GROUP_10:def 13
    {x where x is Element of E: x is_fixed_under T} if E is non empty
    otherwise {}E;
end;

:: ALG I.5.4 Definition 5
definition
  let S be unital (non empty HGrStr);
  let E be set;
  let T be LeftOperation of S, E;
  let x,y be Element of E;
  pred x,y are_conjugated_under T means
:: GROUP_10:def 14
  ex s being Element of S st y = (T^s).x;
end;

theorem :: GROUP_10:4
  for S being unital (non empty HGrStr),
      E being non empty set, x being Element of E,
      T being LeftOperation of S, E
  holds x,x are_conjugated_under T;

theorem :: GROUP_10:5
  for G being Group,
      E being non empty set, x,y being Element of E,
      T being LeftOperation of G, E
  st x,y are_conjugated_under T holds y,x are_conjugated_under T;

theorem :: GROUP_10:6
  for S being unital (non empty HGrStr),
      E being non empty set, x,y,z being Element of E,
      T being LeftOperation of S, E
  st x,y are_conjugated_under T & y,z are_conjugated_under T
  holds x,z are_conjugated_under T;

definition
  let S be unital (non empty HGrStr);
  let E be non empty set;
  let T be LeftOperation of S, E;
  let x be Element of E;
  func the_orbit_of(x,T) -> Subset of E equals
:: GROUP_10:def 15
  {y where y is Element of E: x,y are_conjugated_under T};
end;

theorem :: GROUP_10:7
  for S being unital (non empty HGrStr),
      E being non empty set, x being Element of E,
      T being LeftOperation of S, E holds
  the_orbit_of(x,T) is non empty;

theorem :: GROUP_10:8
  for G being Group,
      E being non empty set, x,y being Element of E,
      T being LeftOperation of G, E holds
  the_orbit_of(x,T) misses the_orbit_of(y,T) or
  the_orbit_of(x,T)=the_orbit_of(y,T);

theorem :: GROUP_10:9
  for S being unital (non empty HGrStr),
      E being non empty finite set, x being Element of E,
      T being LeftOperation of S, E
  st x is_fixed_under T holds the_orbit_of(x,T) = {x};

:: the orbit-stabilizer theorem
theorem :: GROUP_10:10
  for G being Group, E being non empty set, a being Element of E,
      T being LeftOperation of G, E holds
  Card the_orbit_of(a,T) = Index the_strict_stabilizer_of(a,T);

definition
  let G be Group;
  let E be non empty set;
  let T be LeftOperation of G, E;
  func the_orbits_of T -> a_partition of E equals
:: GROUP_10:def 16
  {X where X is Subset of E: ex x being Element of E st X = the_orbit_of(x,T)};
end;

begin :: p-groups

:: ALG I.6.5 Definition 9
definition
  let p be prime (natural number);
  let G be Group;
  pred G is_p-group_of_prime p means
:: GROUP_10:def 17
  ex r being natural number st ord G = p |^ r;
end;

definition
  let p be prime (natural number);
  let G be Group;
  let P be Subgroup of G;
  pred P is_p-group_of_prime p means
:: GROUP_10:def 18
  ex H being finite Group st P = H & H is_p-group_of_prime p;
end;

:: like WEDDWITT:39
:: ALG I.6.5 PRO 11
theorem :: GROUP_10:11
  for E being non empty finite set, G being finite Group,
      p being prime (natural number), T being LeftOperation of G, E
  st G is_p-group_of_prime p
  holds card the_fixed_points_of T mod p = card E mod p;

begin :: The Sylow Theorems

:: ALG I.6.6 Definition 10
definition
  let p be prime (natural number);
  let G be Group;
  let P be Subgroup of G;
  pred P is_Sylow_p-subgroup_of_prime p means
:: GROUP_10:def 19
  P is_p-group_of_prime p & not p divides index P;
end;

:: ALG I.6.6 Theorem 2
:: The first Sylow theorem
theorem :: GROUP_10:12
  for G being finite Group, p being prime (natural number)
  holds ex P being Subgroup of G st P is_Sylow_p-subgroup_of_prime p;

:: ALG I.6.6 Corollary
:: The Cauchy theorem
theorem :: GROUP_10:13
  for G being finite Group, p being prime (natural number) st p divides ord G
  holds ex g being Element of G st ord g = p;

:: ALG I.6.6 Theorem 3
:: The second Sylow theorem
theorem :: GROUP_10:14
  for G being finite Group, p being prime (natural number) holds
    (for H being Subgroup of G st H is_p-group_of_prime p holds
      ex P being Subgroup of G st
      P is_Sylow_p-subgroup_of_prime p & H is Subgroup of P) &
    (for P1,P2 being Subgroup of G
      st P1 is_Sylow_p-subgroup_of_prime p & P2 is_Sylow_p-subgroup_of_prime p
      holds P1,P2 are_conjugated);

definition
  let G be Group;
  let p be prime (natural number);
  func the_sylow_p-subgroups_of_prime(p,G) -> Subset of Subgroups G
  equals
:: GROUP_10:def 20
{H where H is Element of Subgroups G: ex P being strict Subgroup of G
    st P = H & P is_Sylow_p-subgroup_of_prime p};
end;

registration
  let G be finite Group;
  let p be prime (natural number);
  cluster the_sylow_p-subgroups_of_prime(p,G) -> non empty finite;
end;

definition
  let G be finite Group;
  let p be prime (natural number);
  let H be Subgroup of G;
  let h be Element of H;
  func the_left_translation_of(h,p) ->
  Function of the_sylow_p-subgroups_of_prime(p,G),
              the_sylow_p-subgroups_of_prime(p,G)
    means
:: GROUP_10:def 21
    for P1 being Element of the_sylow_p-subgroups_of_prime(p,G) holds
      ex P2 being Element of the_sylow_p-subgroups_of_prime(p,G),
         H1,H2 being strict Subgroup of G, g being Element of G st
      P2 = it.P1 & P1=H1 & P2=H2 & h"=g & H2 = H1 |^ g;
end;

definition
  let G be finite Group;
  let p be prime (natural number);
  let H be Subgroup of G;
  func the_left_operation_of(H,p) ->
    LeftOperation of H, the_sylow_p-subgroups_of_prime(p,G)
  means
:: GROUP_10:def 22
  for h being Element of H holds it.h = the_left_translation_of(h,p);
end;

:: ALG I.6.6 Theorem 3
:: The third Sylow theorem
theorem :: GROUP_10:15
  for G being finite Group, p being prime (natural number) holds
    card the_sylow_p-subgroups_of_prime(p,G) mod p = 1 &
    card the_sylow_p-subgroups_of_prime(p,G) divides ord G;

begin :: Appendix

theorem :: GROUP_10:16
  for X,Y being non empty set holds
  Card {[:X,{y}:] where y is Element of Y: not contradiction} = Card Y;

theorem :: GROUP_10:17
  for n,m,r being natural number, p being prime (natural number)
  st n = p |^ r * m & not p divides m
  holds (n choose p|^r) mod p <> 0;

theorem :: GROUP_10:18
  for n being natural number st n > 0 holds ord INT.Group(n) = n;

theorem :: GROUP_10:19
  for G being Group, A being non empty Subset of G, g being Element of G holds
  Card A = Card (A * g);
