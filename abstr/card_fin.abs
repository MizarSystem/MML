:: Cardinal Numbers and Finite Sets
::  by Karol P\c{a}k
::
:: Received May 24, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies FUNCT_1, BOOLE, FINSEQ_1, FINSET_1, RELAT_1, CARD_1, TARSKI,
      ALGSEQ_1, ARYTM_1, AFINSQ_1, FUNCT_2, FUNCT_4, FUNCOP_1, HENMODEL, INT_1,
      STIRL2_1, SGRAPH1, BINOP_1, RLVECT_1, MONOID_0, SETWISEO, FINSOP_1,
      ARYTM_3, GROUP_1, NEWTON, QC_LANG1, CARD_FIN, CANTOR_1, PROB_1, PRGCOR_2,
      GR_CY_1, CAT_1, NAT_1, COMPLEX1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, RELAT_1, FUNCT_1,
      RELSET_1, PARTFUN1, FINSET_1, CARD_1, AFINSQ_1, DOMAIN_1, XCMPLX_0,
      NAT_1, FUNCT_2, FUNCT_4, FUNCOP_1, INT_1, ENUMSET1, BINOP_1, BINOP_2,
      NEWTON, SETWISEO, STIRL2_1, BINARITH, PRGCOR_2, YELLOW20, FINSOP_1,
      FINSEQ_1, XXREAL_0;
 constructors PARTFUN1, WELLORD2, DOMAIN_1, SETWISEO, XXREAL_0, REAL_1, NAT_1,
      MEMBERED, FINSOP_1, NEWTON, BINARITH, STIRL2_1, YELLOW20, PRGCOR_2;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, ORDINAL1, FUNCT_2,
      FUNCOP_1, FUNCT_4, FINSET_1, FRAENKEL, NUMBERS, XXREAL_0, XREAL_0, NAT_1,
      INT_1, BINOP_2, CARD_1, MEMBERED, FINSEQ_1, WSIERP_1, AFINSQ_1, STIRL2_1,
      NAT_3;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

 reserve x, x1, x2, y, z, X' for set,
         X, Y for finite set,
         n, k, m for Element of NAT,
         f for Function;

theorem :: CARD_FIN:1  :: TREES_1:19
  X c= Y & card X=card Y implies X=Y;

theorem :: CARD_FIN:2
  for X,Y,x,y st (Y={} implies X={}) & not x in X holds
  card Funcs(X,Y) =
    Card{F where F is Function of X\/{x},Y\/{y}:rng (F|X) c=Y & F.x=y};

theorem :: CARD_FIN:3
  for X,Y,x,y st not x in X & y in Y holds
  card Funcs(X,Y) = Card{F where F is Function of X\/{x},Y:F.x=y};

:: card Funcs(X,Y)

theorem :: CARD_FIN:4  :: WEDDWITT:4
  (Y={} implies X={}) implies card Funcs(X,Y) = card Y |^ card X;

theorem :: CARD_FIN:5
  for X,Y,x,y st (Y is empty implies X is empty) & not x in X & not y in Y
    holds
      Card{F where F is Function of X,Y:F is one-to-one}=
      Card{F where F is Function of X\/{x},Y\/{y}:F is one-to-one & F.x=y};

theorem :: CARD_FIN:6
  n!/((n-'k)!) is Element of NAT;

:: one-to-one

theorem :: CARD_FIN:7
  card X <= card Y implies
    Card {F where F is Function of X,Y:F is one-to-one} =
    card Y!/((card Y-'card X)!);

:: Permutation of X

theorem :: CARD_FIN:8
  Card{F where F is Function of X,X:F is Permutation of X}=card X!;

definition let X,k,x1,x2;
  func Choose(X,k,x1,x2) -> Subset of Funcs(X,{x1,x2}) means
:: CARD_FIN:def 1
  x in it iff ex f be Function of X,{x1,x2} st f = x & Card (f"{x1})=k;
end;

theorem :: CARD_FIN:9
  card X<>k implies Choose(X,k,x1,x1) is empty;

theorem :: CARD_FIN:10
  card X < k implies Choose(X,k,x1,x2) is empty;

theorem :: CARD_FIN:11
  x1<>x2 implies card Choose(X,0,x1,x2)=1;

theorem :: CARD_FIN:12
  card Choose(X,card X,x1,x2)=1;

theorem :: CARD_FIN:13
  f.y=x & y in dom f implies {y}\/(f|(dom f\{y}))"{x}=f"{x};

theorem :: CARD_FIN:14
  not z in X implies
    card Choose(X,k,x,y)=
    Card{f where f is Function of X\/{z},{x,y}:Card (f"{x})=k+1 & f.z=x};

theorem :: CARD_FIN:15
  f.y<>x implies (f|(dom f\{y}))"{x}=f"{x};

theorem :: CARD_FIN:16
  not z in X & x<>y implies
    card Choose(X,k,x,y)=
    Card{f where f is Function of X\/{z},{x,y}:Card (f"{x})=k & f.z=y};

theorem :: CARD_FIN:17
  x<>y & not z in X implies card Choose(X\/{z},k+1,x,y)=
    card Choose(X,k+1,x,y)+ card Choose(X,k,x,y);

:: n choose k

theorem :: CARD_FIN:18
  x<>y implies card Choose(X,k,x,y)=card X choose k;

theorem :: CARD_FIN:19
  x<>y implies (Y-->y)+*(X-->x) in Choose(X\/Y,card X,x,y);

theorem :: CARD_FIN:20
  x<>y & X misses Y implies
  (X-->x)+*(Y-->y) in Choose(X\/Y,card X,x,y);

definition
  let F,Ch be Function,y be set;
  func Intersection(F,Ch,y) -> Subset of union rng F means
:: CARD_FIN:def 2
  z in it iff z in union rng F &
              for x st x in dom Ch & Ch.x=y holds z in F.x;
end;

reserve F,Ch for Function;

theorem :: CARD_FIN:21
  for F,Ch st dom F/\Ch"{x} is non empty holds
    y in Intersection(F,Ch,x) iff
      for z st z in dom Ch & Ch.z=x holds y in F.z;

theorem :: CARD_FIN:22
  Intersection(F,Ch,y) is non empty implies Ch"{y} c= dom F;

theorem :: CARD_FIN:23
  Intersection(F,Ch,y) is non empty implies
    for x1,x2 st x1 in Ch"{y} & x2 in Ch"{y} holds F.x1 meets F.x2;

theorem :: CARD_FIN:24
  z in Intersection(F,Ch,y) & y in rng Ch implies
    ex x st x in dom Ch & Ch.x=y & z in F.x;

theorem :: CARD_FIN:25
  F is empty or union rng F is empty implies
    Intersection(F,Ch,y)=union rng F;

theorem :: CARD_FIN:26
  F|Ch"{y}=(Ch"{y}-->union rng F) implies Intersection(F,Ch,y) = union rng F;

theorem :: CARD_FIN:27
  union rng F is non empty & Intersection(F,Ch,y)=union rng F
    implies F|Ch"{y}=(Ch"{y}-->union rng F);

theorem :: CARD_FIN:28
  Intersection(F,{},y)=union rng F;

theorem :: CARD_FIN:29
  Intersection(F,Ch,y) c= Intersection(F,Ch|X',y);

theorem :: CARD_FIN:30
  Ch"{y}=(Ch|X')"{y} implies Intersection(F,Ch,y)=Intersection(F,Ch|X',y);

theorem :: CARD_FIN:31
  Intersection(F|X',Ch,y) c= Intersection(F,Ch,y);

theorem :: CARD_FIN:32
  y in rng Ch & Ch"{y} c= X' implies
    Intersection(F|X',Ch,y) = Intersection(F,Ch,y);

theorem :: CARD_FIN:33
  x in Ch"{y} implies Intersection(F,Ch,y) c= F.x;

theorem :: CARD_FIN:34
  x in Ch"{y} implies
    Intersection(F,Ch|(dom Ch\{x}),y)/\F.x=Intersection(F,Ch,y);

theorem :: CARD_FIN:35
  for Ch1,Ch2 be Function st Ch1"{x1}=Ch2"{x2} holds
  Intersection(F,Ch1,x1)=Intersection(F,Ch2,x2);

theorem :: CARD_FIN:36
  Ch"{y}={} implies Intersection(F,Ch,y)=union rng F;

theorem :: CARD_FIN:37
  {x}=Ch"{y} implies Intersection(F,Ch,y)=F.x;

theorem :: CARD_FIN:38
  {x1,x2}=Ch"{y} implies Intersection(F,Ch,y)=F.x1 /\ F.x2;

theorem :: CARD_FIN:39
  for F st F is non empty holds
    y in Intersection(F,(dom F-->x),x) iff
      for z st z in dom F holds y in F.z;

definition
  let F be Function;
 redefine
  attr F is finite-yielding means
:: CARD_FIN:def 3
    for x holds F.x is finite;
end;

registration
  cluster non empty finite-yielding Function;
  cluster empty finite-yielding Function;
end;

registration
  let F be finite-yielding Function,x be set;
  cluster F.x -> finite;
end;

registration
  let F be finite-yielding Function,X be set;
  cluster F|X -> finite-yielding;
end;

registration
  let F be finite-yielding Function,G be Function;
  cluster F*G -> finite-yielding;
  cluster Intersect(F,G) -> finite-yielding;
end;

 reserve Fy for finite-yielding Function;

theorem :: CARD_FIN:40
  y in rng Ch implies Intersection(Fy,Ch,y) is finite;

theorem :: CARD_FIN:41
  dom Fy is finite implies union rng Fy is finite;

definition
  let F be XFinSequence,n;
  redefine func F|n -> XFinSequence;
end;

definition
  let D be set,F be XFinSequence of D,n;
  redefine func F|n -> XFinSequence of D;
end;

reserve D for non empty set,
        b for BinOp of D;

theorem :: CARD_FIN:42
  for F be XFinSequence of D,b,n st
      n in dom F & ( b has_a_unity or n <> 0 ) holds
    b.(b "**" F|n, F.n) = b "**" F|(n+1);

theorem :: CARD_FIN:43
  for F be XFinSequence of D,n st len F=n+1 holds
    F=(F|n)^<%F.n%>;

theorem :: CARD_FIN:44
  for F be XFinSequence of NAT,n st n in dom F holds
    Sum (F|n) + F.n = Sum (F|(n+1));

theorem :: CARD_FIN:45
  for F be XFinSequence of NAT,n st rng F c= {0,n}
    holds Sum F = n * card (F"{n});

theorem :: CARD_FIN:46
  x in Choose(n,k,1,0) iff ex F be XFinSequence of NAT st
    F = x & dom F = n & rng F c= {0,1} & Sum F=k;

theorem :: CARD_FIN:47
  for F be XFinSequence of D,b st b has_a_unity or len F >= 1
    holds b "**" F = b "**" (XFS2FS F);

theorem :: CARD_FIN:48
  for F,G be XFinSequence of D,P be Permutation of dom F st
    b is commutative associative &
    (b has_a_unity or len F >= 1) &
    G = F * P holds b "**" F = b "**" G;

definition
  let k;let F be finite-yielding Function;
  assume dom F is finite;
  func Card_Intersection(F,k) -> Element of NAT means
:: CARD_FIN:def 4
  for x,y be set,X be finite set,
        P be Function of card Choose(X,k,x,y),Choose(X,k,x,y)
      st dom F=X & P is one-to-one & x<>y
    ex XFS be XFinSequence of NAT st
       dom XFS=dom P &
       (for z,f st z in dom XFS & f=P.z holds
           XFS.z=Card(Intersection(F,f,x))) &
    it=Sum XFS;
end;

theorem :: CARD_FIN:49
  for x,y be set,X be finite set,
      P be Function of card Choose(X,k,x,y),Choose(X,k,x,y)
     st dom Fy=X & P is one-to-one & x<>y
  for XFS be XFinSequence of NAT st
      dom XFS=dom P &
      (for z,f st z in dom XFS & f=P.z holds
          XFS.z=Card(Intersection(Fy,f,x)))
    holds Card_Intersection(Fy,k)=Sum XFS;

theorem :: CARD_FIN:50
  dom Fy is finite & k=0 implies Card_Intersection(Fy,k)=Card (union rng Fy);

theorem :: CARD_FIN:51
  dom Fy=X & k > card X implies Card_Intersection(Fy,k)=0;

theorem :: CARD_FIN:52
  for Fy,X st dom Fy=X
    for P be Function of card X,X st P is one-to-one holds
      ex XFS be XFinSequence of NAT st
       dom XFS=card X &
       (for z st z in dom XFS holds XFS.z=card ((Fy*P).z))&
       Card_Intersection(Fy,1)=Sum XFS;

theorem :: CARD_FIN:53
  dom Fy=X implies
    Card_Intersection(Fy,card X)=Card Intersection(Fy,X-->x,x);

theorem :: CARD_FIN:54
  Fy=x.-->X implies Card_Intersection(Fy,1)=card X;

theorem :: CARD_FIN:55
  x<>y & Fy=(x,y)-->(X,Y) implies
    Card_Intersection(Fy,1)=card X + card Y &
    Card_Intersection(Fy,2)=card (X/\Y);

theorem :: CARD_FIN:56
  for Fy,x st dom Fy is finite & x in dom Fy holds
    Card_Intersection(Fy,1)=Card_Intersection(Fy|(dom Fy\{x}),1)+ card (Fy.x);

theorem :: CARD_FIN:57
  dom Intersect(F,dom F-->X')=dom F &
    for x st x in dom F holds Intersect(F,dom F-->X').x = F.x /\ X';

theorem :: CARD_FIN:58
  (union rng F)/\X'=union rng Intersect(F,dom F-->X');

theorem :: CARD_FIN:59
  Intersection(F,Ch,y)/\X'=
     Intersection(Intersect(F,dom F-->X'),Ch,y);

theorem :: CARD_FIN:60
  for F, G be XFinSequence st
    F is one-to-one & G is one-to-one & rng F misses rng G holds
    F^G is one-to-one;

theorem :: CARD_FIN:61
  for Fy,X,x,n st dom Fy = X & x in dom Fy & k>0 holds
    Card_Intersection(Fy,k+1)=
      Card_Intersection(Fy|(dom Fy\{x}),k+1)+
      Card_Intersection(Intersect(Fy|(dom Fy\{x}),(dom Fy\{x})-->Fy.x),k);

theorem :: CARD_FIN:62
  for F, G, bFG be XFinSequence of D st
      b is commutative associative &
      (b has_a_unity or len F >= 1) &
      len F=len G & len F=len bFG &
      (for n st n in dom bFG holds bFG.n=b.(F.n,G.n))
    holds b "**" F^G = b "**" bFG;

definition let Fi be XFinSequence of INT;
  func Sum(Fi) -> Integer equals
:: CARD_FIN:def 5
    addint "**" Fi;
end;

definition let Fi be XFinSequence of INT,x;
  redefine func Fi.x -> Integer;
  end;

theorem :: CARD_FIN:63
  for Fn be XFinSequence of NAT,Fi be XFinSequence of INT st Fi=Fn holds
    Sum Fi=Sum Fn;

theorem :: CARD_FIN:64
  for F,Fi be XFinSequence of INT, i be Integer st
      dom F=dom Fi & for n st n in dom F holds i*F.n=Fi.n holds
    i * Sum F = Sum Fi;

theorem :: CARD_FIN:65
  x in dom F implies union rng F=union rng (F|(dom F\{x}))\/F.x;

theorem :: CARD_FIN:66
  for Fy be finite-yielding Function,X
    ex XFS be XFinSequence of INT st
         dom XFS = card X &
         for n st n in dom XFS holds XFS.n=((-1)|^n)*Card_Intersection(Fy,n+1);

:: The principle of inclusions and the disconnections

theorem :: CARD_FIN:67
  for Fy be finite-yielding Function,X st dom Fy=X
    for XFS be XFinSequence of INT st
          dom XFS= card X &
          for n st n in dom XFS holds XFS.n=((-1)|^n)*Card_Intersection(Fy,n+1)
      holds
  Card union rng Fy=Sum XFS;

theorem :: CARD_FIN:68
  for Fy,X,n,k st dom Fy=X holds
    (ex x,y st x<>y &
           for f st f in Choose(X,k,x,y) holds Card(Intersection(Fy,f,x))=n)
  implies
    Card_Intersection(Fy,k)=n*(card X choose k);

theorem :: CARD_FIN:69
  for Fy,X st dom Fy=X
    for XF be XFinSequence of NAT st
      dom XF=card X &
      for n st n in dom XF holds ex x,y st x<>y &
        for f st f in Choose(X,n+1,x,y) holds Card(Intersection(Fy,f,x))=XF.n
    holds
  ex F be XFinSequence of INT st
     dom F=card X &
     Card union rng Fy = Sum F &
     for n st n in dom F holds F.n=((-1)|^n)*XF.n*(card X choose (n+1));

:: onto

theorem :: CARD_FIN:70
  for X,Y be finite set st X is non empty & Y is non empty
    ex F be XFinSequence of INT st
      dom F = card Y+1 &
      Sum F = Card {f where f is Function of X,Y:f is onto} &
      for n st n in dom F holds
        F.n=((-1)|^n)*(card Y choose n)*((card Y-n) |^ card X);

:: n block k

theorem :: CARD_FIN:71
  for n,k st k <= n ex F be XFinSequence of INT st
    n block k = 1/(k!) * Sum F &
    dom F = k+1 &
    for m st m in dom F holds F.m=((-1)|^m)*(k choose m)*((k-m) |^ n);

theorem :: CARD_FIN:72
  for X1,Y1,X be finite set st (Y1 is empty implies X1 is empty) & X c= X1
     for F be Function of X1,Y1 st F is one-to-one & card X1=card Y1
     holds
       (card X1-'card X)!=
       Card{f where f is Function of X1,Y1:
                           f is one-to-one & rng(f|(X1\X)) c= F.:(X1\X) &
                           for x st x in X holds f.x=F.x};

theorem :: CARD_FIN:73
  for F be Function st dom F=X & F is one-to-one
    ex XF be XFinSequence of INT st
      Sum XF=Card {h where h is Function of X,rng F:
                   h is one-to-one & for x st x in X holds h.x<>F.x}&
      dom XF = card X +1 &
      for n st n in dom XF holds XF.n=((-1)|^n)*(card X!)/(n!);

:: disorders

theorem :: CARD_FIN:74
  ex XF be XFinSequence of INT st
    Sum XF=Card {h where h is Function of X,X:
                  h is one-to-one & for x st x in X holds h.x<>x}&
    dom XF = card X+1 &
    for n st n in dom XF holds XF.n=((-1)|^n)*(card X!)/(n!);
