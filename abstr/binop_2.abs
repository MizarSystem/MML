:: Binary Operations on Numbers
::  by Library Committee
::
:: Received June 21, 2004
:: Copyright (c) 2004 Association of Mizar Users

environ

 vocabularies BINOP_2, VECTSP_1, BINOP_1, FUNCT_1, ARYTM_1, COMPLEX1, COMPLSP1,
      INT_1, RAT_1, RELAT_1, ARYTM_3, RVSUM_1, GR_CY_1, INT_3, MONOID_0,
      SETWISEO;
 notations XBOOLE_0, SUBSET_1, FUNCT_2, BINOP_1, SETWISEO, XCMPLX_0, NUMBERS,
      RAT_1;
 constructors BINOP_1, SETWISEO, XCMPLX_0, RAT_1;
 registrations ORDINAL1, NUMBERS, XCMPLX_0, XREAL_0, REAL_1, NAT_1, INT_1,
      RAT_1;
 requirements BOOLE, SUBSET, ARITHM, NUMERALS;


begin

scheme :: BINOP_2:sch 1
 FuncDefUniq{C, D()->non empty set,
                   F(Element of C())->set}:
 for f1,f2 being Function of C(),D() st
   (for x being Element of C() holds f1.x = F(x)) &
   (for x being Element of C() holds f2.x = F(x))
  holds f1 = f2;

scheme :: BINOP_2:sch 2
 BinOpDefuniq{A()->non empty set,
                   O(Element of A(),Element of A())->set}:
  for o1,o2 being BinOp of A() st
    (for a,b being Element of A() holds o1.(a,b) = O(a,b)) &
    (for a,b being Element of A() holds o2.(a,b) = O(a,b))
  holds o1 = o2;

reserve c,c1,c2,c3 for Element of COMPLEX;

registration
  cluster -> rational Element of RAT;
end;

definition let c1;
 redefine func -c1 -> Element of COMPLEX;
 redefine func c1" -> Element of COMPLEX;
 let c2;
 redefine func c1+c2 -> Element of COMPLEX;
 redefine func c1-c2 -> Element of COMPLEX;
 redefine func c1*c2 -> Element of COMPLEX;
 redefine func c1/c2 -> Element of COMPLEX;
end;

reserve r,r1,r2,r3 for Element of REAL;

definition let r1;
 redefine func -r1 -> Element of REAL;
 redefine func r1" -> Element of REAL;
 let r2;
 redefine func r1+r2 -> Element of REAL;
 redefine func r1-r2 -> Element of REAL;
 redefine func r1*r2 -> Element of REAL;
 redefine func r1/r2 -> Element of REAL;
end;

reserve w,w1,w2,w3 for Element of RAT;

definition let w1;
 redefine func -w1 -> Element of RAT;
 redefine func w1" -> Element of RAT;
 let w2;
 redefine func w1+w2 -> Element of RAT;
 redefine func w1-w2 -> Element of RAT;
 redefine func w1*w2 -> Element of RAT;
 redefine func w1/w2 -> Element of RAT;
end;

reserve i,i1,i2,i3 for Element of INT;

definition let i1;
 redefine func -i1 -> Element of INT;
 let i2;
 redefine func i1+i2 -> Element of INT;
 redefine func i1-i2 -> Element of INT;
 redefine func i1*i2 -> Element of INT;
end;

reserve n,n1,n2,n3 for Element of NAT;

definition let n1,n2;
 redefine func n1+n2 -> Element of NAT;
 redefine func n1*n2 -> Element of NAT;
end;

definition
 func compcomplex -> UnOp of COMPLEX means
:: BINOP_2:def 1
    for c holds it.c = -c;
 func invcomplex -> UnOp of COMPLEX means
:: BINOP_2:def 2
    for c holds it.c = c";
 func addcomplex -> BinOp of COMPLEX means
:: BINOP_2:def 3
 for c1,c2 holds it.(c1,c2) = c1 + c2;
 func diffcomplex -> BinOp of COMPLEX means
:: BINOP_2:def 4
    for c1,c2 holds it.(c1,c2) = c1 - c2;
 func multcomplex -> BinOp of COMPLEX means
:: BINOP_2:def 5
 for c1,c2 holds it.(c1,c2) = c1 * c2;
 func divcomplex -> BinOp of COMPLEX means
:: BINOP_2:def 6
    for c1,c2 holds it.(c1,c2) = c1 / c2;
end;

definition
 func compreal -> UnOp of REAL means
:: BINOP_2:def 7
    for r holds it.r = -r;
 func invreal -> UnOp of REAL means
:: BINOP_2:def 8
    for r holds it.r = r";
 func addreal -> BinOp of REAL means
:: BINOP_2:def 9
 for r1,r2 holds it.(r1,r2) = r1 + r2;
 func diffreal -> BinOp of REAL means
:: BINOP_2:def 10
    for r1,r2 holds it.(r1,r2) = r1 - r2;
 func multreal -> BinOp of REAL means
:: BINOP_2:def 11
 for r1,r2 holds it.(r1,r2) = r1 * r2;
 func divreal -> BinOp of REAL means
:: BINOP_2:def 12
    for r1,r2 holds it.(r1,r2) = r1 / r2;
end;

definition
 func comprat -> UnOp of RAT means
:: BINOP_2:def 13
    for w holds it.w = -w;
 func invrat -> UnOp of RAT means
:: BINOP_2:def 14
    for w holds it.w = w";
 func addrat -> BinOp of RAT means
:: BINOP_2:def 15
 for w1,w2 holds it.(w1,w2) = w1 + w2;
 func diffrat -> BinOp of RAT means
:: BINOP_2:def 16
    for w1,w2 holds it.(w1,w2) = w1 - w2;
 func multrat -> BinOp of RAT means
:: BINOP_2:def 17
 for w1,w2 holds it.(w1,w2) = w1 * w2;
 func divrat -> BinOp of RAT means
:: BINOP_2:def 18
    for w1,w2 holds it.(w1,w2) = w1 / w2;
end;

definition
 func compint -> UnOp of INT means
:: BINOP_2:def 19
    for i holds it.i = -i;
 func addint -> BinOp of INT means
:: BINOP_2:def 20
 for i1,i2 holds it.(i1,i2) = i1 + i2;
 func diffint -> BinOp of INT means
:: BINOP_2:def 21
    for i1,i2 holds it.(i1,i2) = i1 - i2;
 func multint -> BinOp of INT means
:: BINOP_2:def 22
 for i1,i2 holds it.(i1,i2) = i1 * i2;
end;

definition
 func addnat -> BinOp of NAT means
:: BINOP_2:def 23
 for n1,n2 holds it.(n1,n2) = n1 + n2;
 func multnat -> BinOp of NAT means
:: BINOP_2:def 24
 for n1,n2 holds it.(n1,n2) = n1 * n2;
end;

registration
 cluster addcomplex -> commutative associative;
 cluster multcomplex -> commutative associative;
 cluster addreal -> commutative associative;
 cluster multreal -> commutative associative;
 cluster addrat -> commutative associative;
 cluster multrat -> commutative associative;
 cluster addint -> commutative associative;
 cluster multint -> commutative associative;
 cluster addnat -> commutative associative;
 cluster multnat -> commutative associative;
end;

registration
 cluster addcomplex -> having_a_unity;
 cluster addreal -> having_a_unity;
 cluster addrat -> having_a_unity;
 cluster addint -> having_a_unity;
 cluster addnat -> having_a_unity;
 cluster multcomplex -> having_a_unity;
 cluster multreal -> having_a_unity;
 cluster multrat -> having_a_unity;
 cluster multint -> having_a_unity;
 cluster multnat -> having_a_unity;
end;

theorem :: BINOP_2:1
  the_unity_wrt addcomplex = 0;

theorem :: BINOP_2:2
  the_unity_wrt addreal = 0;

theorem :: BINOP_2:3
  the_unity_wrt addrat = 0;

theorem :: BINOP_2:4
  the_unity_wrt addint = 0;

theorem :: BINOP_2:5
  the_unity_wrt addnat = 0;

theorem :: BINOP_2:6
  the_unity_wrt multcomplex = 1;

theorem :: BINOP_2:7
  the_unity_wrt multreal = 1;

theorem :: BINOP_2:8
  the_unity_wrt multrat = 1;

theorem :: BINOP_2:9
  the_unity_wrt multint = 1;

theorem :: BINOP_2:10
  the_unity_wrt multnat = 1;

