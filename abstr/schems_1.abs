:: Schemes
::  by Stanis\l aw T. Czuba
::
:: Received December 17, 1990
:: Copyright (c) 1990 Association of Mizar Users

environ

 constructors XBOOLE_0;
 clusters XBOOLE_0;


begin

reserve a,b,d for set;

scheme :: SCHEMS_1:sch 1
 Schemat0 {P[set]} :
   ex a st P[a]
    provided
 for a holds P[a];

scheme :: SCHEMS_1:sch 2
 Schemat1a {P[set],T[]} :
   (for a holds P[a]) & T[]
    provided
 for a holds (P[a] & T[]);

scheme :: SCHEMS_1:sch 3
 Schemat1b {P[set],T[]} :
   for a holds (P[a] & T[])
    provided
 (for a holds P[a]) & T[];

scheme :: SCHEMS_1:sch 4
 Schemat2a {P[set], T[]} :
   (ex a st P[a]) or T[]
    provided
 ex a st (P[a] or T[]);

scheme :: SCHEMS_1:sch 5
 Schemat2b {P[set], T[]} :
   ex a st (P[a] or T[])
    provided
 (ex a st P[a]) or T[];

scheme :: SCHEMS_1:sch 6
 Schemat3 {S[set,set]} :
   for b ex a st S[a,b]
    provided
 ex a st for b holds S[a,b];

scheme :: SCHEMS_1:sch 7
 Schemat4a {P[set],Q[set]} :
   (ex a st P[a]) or (ex a st Q[a])
    provided
 ex a st (P[a] or Q[a]);

scheme :: SCHEMS_1:sch 8
 Schemat4b {P[set],Q[set]} :
   ex a st (P[a] or Q[a])
    provided
 (ex a st P[a]) or (ex a st Q[a]);

scheme :: SCHEMS_1:sch 9
 Schemat5 {P[set],Q[set]} :
(ex a st P[a]) & (ex a st Q[a])
    provided
 ex a st (P[a] & Q[a]);

scheme :: SCHEMS_1:sch 10
 Schemat6a {P[set],Q[set]} :
   (for a holds P[a]) & (for a holds Q[a])
    provided
 for a holds (P[a] & Q[a]);

scheme :: SCHEMS_1:sch 11
 Schemat6b {P[set],Q[set]} :
   for a holds (P[a] & Q[a])
    provided
 (for a holds P[a]) & (for a holds Q[a]);

scheme :: SCHEMS_1:sch 12
 Schemat7 {P[set],Q[set]} :
   for a holds (P[a] or Q[a])
    provided
 (for a holds P[a]) or (for a holds Q[a]);

scheme :: SCHEMS_1:sch 13
 Schemat8 {P[set],Q[set]} :
   (for a holds P[a]) implies (for a holds Q[a])
    provided
 for a holds P[a] implies Q[a];

scheme :: SCHEMS_1:sch 14
 Schemat9 {P[set],Q[set]} :
   (for a holds P[a]) iff (for a holds Q[a])
    provided
 for a holds (P[a] iff Q[a]);

scheme :: SCHEMS_1:sch 15
 Schemat10b {T[]} :
   for a holds T[]
    provided
 T[];

scheme :: SCHEMS_1:sch 16
 Schemat11a {P[set],T[]} :
   (for a holds P[a]) or T[]
    provided
 for a holds (P[a] or T[]);

scheme :: SCHEMS_1:sch 17
 Schemat11b {P[set],T[]} :
   for a holds (P[a] or T[])
    provided
 (for a holds P[a]) or T[];

scheme :: SCHEMS_1:sch 18
 Schemat12a {P[set],T[]} :
   ex a st (T[] & P[a])
    provided
 T[] & (ex a st P[a]);

scheme :: SCHEMS_1:sch 19
 Schemat12b {P[set],T[]} :
   T[] & (ex a st P[a])
    provided
 ex a st (T[] & P[a]);

scheme :: SCHEMS_1:sch 20
 Schemat13a {P[set],T[]} :
   for a holds (T[] implies P[a])
    provided
 T[] implies (for a holds P[a]);

scheme :: SCHEMS_1:sch 21
 Schemat13b {P[set],T[]} :
   T[] implies (for a holds P[a])
    provided
 for a holds (T[] implies P[a]);

scheme :: SCHEMS_1:sch 22
 Schemat14 {P[set],T[]} :
   ex a st (T[] implies P[a])
    provided
 T[] implies (ex a st P[a]);

scheme :: SCHEMS_1:sch 23
 Schemat17 {P[set],T[]} :
   (for a holds P[a]) implies T[]
    provided
 for a holds (P[a] implies T[]);

scheme :: SCHEMS_1:sch 24
 Schemat18a {P[set],Q[set]} :
   ex a st (for b holds (P[a] or Q[b]))
    provided
 (ex a st P[a]) or (for b holds Q[b]);

scheme :: SCHEMS_1:sch 25
 Schemat18b {P[set],Q[set]} :
   (ex a st P[a]) or (for b holds Q[b])
    provided
 ex a st for b holds (P[a] or Q[b]);

scheme :: SCHEMS_1:sch 26
 Schemat19a {P[set],Q[set]} :
   for b holds (ex a st (P[a] or Q[b]))
    provided
 (ex a st P[a]) or (for b holds Q[b]);

scheme :: SCHEMS_1:sch 27
 Schemat19b {P[set],Q[set]} :
   (ex a st P[a]) or (for b holds Q[b])
    provided
 for b holds (ex a st (P[a] or Q[b]));

scheme :: SCHEMS_1:sch 28
 Schemat20b {P[set],Q[set]} :
   ex a st (for b holds (P[a] or Q[b]))
    provided
 for b ex a st (P[a] or Q[b]);

scheme :: SCHEMS_1:sch 29
 Schemat21a {P[set],Q[set]} :
   ex a st for b holds P[a] & Q[b]
    provided
 (ex a st P[a]) & (for b holds Q[b]);

scheme :: SCHEMS_1:sch 30
 Schemat21b {P[set],Q[set]} :
   (ex a st P[a]) & (for b holds Q[b])
    provided
 ex a st for b holds P[a] & Q[b];

scheme :: SCHEMS_1:sch 31
 Schemat22a {P[set],Q[set]} :
   for b ex a st (P[a] & Q[b])
    provided
 (ex a st P[a]) & (for b holds Q[b]);

scheme :: SCHEMS_1:sch 32
 Schemat22b {P[set],Q[set]} :
   (ex a st P[a]) & (for b holds Q[b])
    provided
 for b ex a st P[a] & Q[b];

scheme :: SCHEMS_1:sch 33
 Schemat23b {P[set],Q[set]} :
   ex a st for b holds P[a] & Q[b]
    provided
 for b ex a st P[a] & Q[b];

scheme :: SCHEMS_1:sch 34
 Schemat24a {S[set,set],Q[set]} :
   for a ex b st (S[a,b] implies Q[a])
    provided
 for a holds ((for b holds S[a,b]) implies Q[a]);

scheme :: SCHEMS_1:sch 35
 Schemat24b {S[set,set],Q[set]} :
   for a holds ((for b holds S[a,b]) implies Q[a])
    provided
 for a ex b st (S[a,b] implies Q[a]);

scheme :: SCHEMS_1:sch 36
 Schemat25a {S[set,set],Q[set]} :
   for a,b holds (S[a,b] implies Q[a])
    provided
 for a holds ((ex b st S[a,b]) implies Q[a]);

scheme :: SCHEMS_1:sch 37
 Schemat25b {S[set,set],Q[set]} :
   for a holds ((ex b st S[a,b]) implies Q[a])
    provided
 for a,b holds (S[a,b] implies Q[a]);

scheme :: SCHEMS_1:sch 38
 Schemat27 {S[set,set]} :
   for a holds S[a,a]
    provided
 for a,b holds S[a,b];

scheme :: SCHEMS_1:sch 39
 Schemat28 {S[set,set]} :
   ex b st for a holds S[a,b]
    provided
 for a,b holds S[a,b];

scheme :: SCHEMS_1:sch 40
 Schemat30 {S[set,set]} :
   ex a st S[a,a]
    provided
 ex a st for b holds S[a,b];

scheme :: SCHEMS_1:sch 41
 Schemat31 {S[set,set]} :
   for a ex b st S[b,a]
    provided
 for a holds S[a,a];

scheme :: SCHEMS_1:sch 42
 Schemat33 {S[set,set]} :
   for a ex b st S[a,b]
    provided
 for a holds S[a,a];

scheme :: SCHEMS_1:sch 43
 Schemat36 {S[set,set]} :
   ex a,b st S[a,b]
    provided
 for b ex a st S[a,b];

scheme :: SCHEMS_1:sch 44
 Schemat37 {S[set,set]} :
   ex a,b st S[a,b]
    provided
 ex a st S[a,a];

