:: Substitution in First-Order Formulas: Elementary Properties
::  by Patrick Braselmann and Peter Koepke
::
:: Received September 25, 2004
:: Copyright (c) 2004 Association of Mizar Users

environ

 vocabularies CQC_LANG, QC_LANG1, FINSEQ_1, RELAT_1, ZF_LANG, BOOLE, FUNCT_1,
      SQUARE_1, PARTFUN1, FINSET_1, MCART_1, CARD_1, SUBSTUT1, FRAENKEL, NAT_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1, NUMBERS,
      CARD_1, FRAENKEL, FINSEQ_1, NAT_1, NAT_D, QC_LANG1, QC_LANG3, PARTFUN1,
      CQC_LANG, FINSET_1, RELSET_1, FUNCT_2, CQC_SIM1, DOMAIN_1, MCART_1,
      XXREAL_0;
 constructors PARTFUN1, DOMAIN_1, XXREAL_0, XREAL_0, NAT_1, QC_LANG3, CQC_SIM1,
      NAT_D;
 registrations FINSEQ_1, RELSET_1, CQC_LANG, ARYTM_3, ORDINAL1, SUBSET_1,
      QC_LANG1, FUNCT_1, FINSET_1, RFINSEQ, FRAENKEL, XREAL_0, PARTFUN1,
      MEMBERED;
 requirements REAL, NUMERALS, SUBSET, BOOLE;


begin :: Preliminaries

 reserve a,b,b1,b2,c,d for set,
         i,j,k,n for Element of NAT,
         x,y,x1,x2 for bound_QC-variable,
         P for QC-pred_symbol of k,
         ll for CQC-variable_list of k,
         l1,l2 for FinSequence of QC-variables,
         p for QC-formula;

definition
  func vSUB equals
:: SUBSTUT1:def 1
    PFuncs(bound_QC-variables,bound_QC-variables);
end;

registration
  cluster vSUB -> non empty;
end;

definition
  mode CQC_Substitution is Element of vSUB;
end;

registration
  cluster vSUB -> functional;
end;

 reserve Sub for CQC_Substitution;

definition let Sub;
  func @Sub -> PartFunc of bound_QC-variables,bound_QC-variables equals
:: SUBSTUT1:def 2
   Sub;
end;

theorem :: SUBSTUT1:1
  a in dom Sub implies Sub.a in bound_QC-variables;

definition let l be FinSequence of QC-variables; let Sub;
  func CQC_Subst(l,Sub) -> FinSequence of QC-variables means
:: SUBSTUT1:def 3
   len it = len l &
  for k st 1 <= k & k <= len l holds
  (l.k in dom Sub implies it.k = Sub.(l.k)) &
  (not l.k in dom Sub implies it.k = l.k);
end;

definition let l be FinSequence of bound_QC-variables;
  func @l -> FinSequence of QC-variables equals
:: SUBSTUT1:def 4
   l;
end;

definition let l be FinSequence of bound_QC-variables; let Sub;
  func CQC_Subst(l,Sub) -> FinSequence of bound_QC-variables equals
:: SUBSTUT1:def 5
   CQC_Subst(@l,Sub);
end;

definition let Sub; let X be set;
  redefine func Sub|X -> CQC_Substitution;
end;

registration
  cluster finite CQC_Substitution;
end;

definition let x, p, Sub;
  func RestrictSub(x,p,Sub) -> finite CQC_Substitution equals
:: SUBSTUT1:def 6
   Sub|{y : y in still_not-bound_in p & y is Element of dom Sub &
                y <> x & y <> Sub.y};
end;

definition let l1;
  func Bound_Vars(l1) -> Subset of bound_QC-variables equals
:: SUBSTUT1:def 7
   { l1.k : 1 <= k & k <= len l1 & l1.k in bound_QC-variables};
end;

definition let p;
  func Bound_Vars(p) -> Subset of bound_QC-variables means
:: SUBSTUT1:def 8
   ex F being Function of QC-WFF, bool bound_QC-variables st
    it = F.p &
    for p being Element of QC-WFF
     for d1,d2 being Subset of bound_QC-variables holds
      (p = VERUM implies F.p = {}(bound_QC-variables))   &
      (p is atomic implies F.p = Bound_Vars(the_arguments_of p)) &
      (p is negative & d1 = F.the_argument_of p implies F.p = d1) &
      (p is conjunctive & d1 = F.the_left_argument_of p &
        d2 = F.the_right_argument_of p implies F.p = d1 \/ d2) &
      (p is universal & d1 = F.the_scope_of p implies
                   F.p = (d1 \/ {bound_in p}));
end;

theorem :: SUBSTUT1:2
  Bound_Vars(VERUM) = {};

theorem :: SUBSTUT1:3
  for p being QC-formula st p is atomic holds
                 Bound_Vars(p) = Bound_Vars(the_arguments_of p);

theorem :: SUBSTUT1:4
  for p being QC-formula st p is negative holds
                 Bound_Vars(p) = Bound_Vars(the_argument_of p);

theorem :: SUBSTUT1:5
  for p being QC-formula st p is conjunctive holds
                 Bound_Vars(p) = ( Bound_Vars(the_left_argument_of p)) \/
                              ( Bound_Vars(the_right_argument_of p));

theorem :: SUBSTUT1:6
  for p being QC-formula st p is universal holds
     Bound_Vars(p) = Bound_Vars(the_scope_of p) \/ {bound_in p};

registration let p;
  cluster Bound_Vars(p) -> finite;
end;

definition let p;
  func Dom_Bound_Vars(p) -> finite Subset of NAT equals
:: SUBSTUT1:def 9
    {i : x.i in Bound_Vars(p)};
end;

 reserve finSub for finite CQC_Substitution;

definition let finSub;
  func Sub_Var(finSub) -> finite Subset of NAT equals
:: SUBSTUT1:def 10
    {i : x.i in rng finSub};
end;

definition let p, finSub;
  func NSub(p,finSub) -> non empty Subset of NAT equals
:: SUBSTUT1:def 11
    NAT\(Dom_Bound_Vars(p) \/ Sub_Var(finSub));
end;

definition let finSub, p;
  func upVar(finSub,p) -> Element of NAT equals
:: SUBSTUT1:def 12
    min NSub(p,finSub);
end;

definition let x, p, finSub;
  assume  ex Sub st finSub = RestrictSub(x,All(x,p),Sub);
  func ExpandSub(x,p,finSub) -> CQC_Substitution equals
:: SUBSTUT1:def 13
    finSub \/ {[x,x.upVar(finSub,p)]} if x in rng finSub
       otherwise finSub \/ {[x,x]};
 end;

definition let p, Sub, b;
  pred p,Sub PQSub b means
:: SUBSTUT1:def 14
    (p is universal implies b =
    ExpandSub(bound_in p,the_scope_of p, RestrictSub(bound_in p,p,Sub))) &
    (not p is universal implies b = {});
end;

definition
  func QSub -> Function means
:: SUBSTUT1:def 15
    a in it iff ex p,Sub,b st a = [[p,Sub],b] & p,Sub PQSub b;
end;

begin :: Definition and Properties of the
      :: Formula - Substitution - Construction

 reserve e for Element of vSUB;

theorem :: SUBSTUT1:7
  [:QC-WFF,vSUB:] is Subset of [:[:NAT, NAT:]*,vSUB:] &
     (for k being Element of NAT, p being (QC-pred_symbol of k),
          ll being QC-variable_list of k, e being Element of vSUB
          holds [<*p*>^ll,e] in [:QC-WFF,vSUB:]) &
     (for e being Element of vSUB holds [<*[0, 0]*>,e] in [:QC-WFF,vSUB:]) &
     (for p being FinSequence of [:NAT,NAT:], e being Element of vSUB
      st [p,e] in [:QC-WFF,vSUB:] holds [<*[1, 0]*>^p,e] in [:QC-WFF,vSUB:]) &
     (for p, q being FinSequence of [:NAT, NAT:], e being Element of vSUB st
      [p,e] in [:QC-WFF,vSUB:] & [q,e] in [:QC-WFF,vSUB:]
           holds [<*[2, 0]*>^p^q,e] in [:QC-WFF,vSUB:]) &
     (for x being bound_QC-variable,
          p being FinSequence of [:NAT, NAT:], e being Element of vSUB
           st [p,QSub.[<*[3, 0]*>^<*x*>^p,e]] in [:QC-WFF,vSUB:] holds
                             [<*[3, 0]*>^<*x*>^p,e] in [:QC-WFF,vSUB:]);

definition let IT be set;
  attr IT is QC-Sub-closed means
:: SUBSTUT1:def 16
    IT is Subset of [:[:NAT, NAT:]*,vSUB:] &
     (for k being Element of NAT, p being (QC-pred_symbol of k),
          ll being QC-variable_list of k, e being Element of vSUB
          holds [<*p*>^ll,e] in IT) &
     (for e being Element of vSUB holds [<*[0, 0]*>,e] in IT) &
     (for p being FinSequence of [:NAT,NAT:], e being Element of vSUB
      st [p,e] in IT holds [<*[1, 0]*>^p,e] in IT) &
     (for p, q being FinSequence of [:NAT, NAT:], e being Element of vSUB st
      [p,e] in IT & [q,e] in IT
           holds [<*[2, 0]*>^p^q,e] in IT) &
     (for x being bound_QC-variable,
          p being FinSequence of [:NAT, NAT:], e being Element of vSUB
           st [p,QSub.[<*[3, 0]*>^<*x*>^p,e]] in IT holds
                             [<*[3, 0]*>^<*x*>^p,e] in IT);
 end;

registration
  cluster QC-Sub-closed non empty set;
end;

definition
  func QC-Sub-WFF -> non empty set means
:: SUBSTUT1:def 17
    it is QC-Sub-closed &
   for D being non empty set st D is QC-Sub-closed holds it c= D;
end;

 reserve S,S',S1,S2,S1',S2',T1,T2 for Element of QC-Sub-WFF;

theorem :: SUBSTUT1:8
    ex p,e st S = [p,e];

registration
  cluster QC-Sub-WFF -> QC-Sub-closed;
end;

definition let P be QC-pred_symbol, l be FinSequence of QC-variables; let e;
  assume  the_arity_of P = len l;
  func Sub_P(P,l,e) -> Element of QC-Sub-WFF equals
:: SUBSTUT1:def 18
   [P!l,e];
end;

theorem :: SUBSTUT1:9
  for k being Element of NAT, P being QC-pred_symbol of k,
      ll being QC-variable_list of k holds Sub_P(P,ll,e) = [P!ll,e];

definition let S;
  attr S is Sub_VERUM means
:: SUBSTUT1:def 19
   ex e st S = [VERUM,e];
end;

definition let S;
  redefine func S`1 -> Element of QC-WFF;
  redefine func S`2 -> Element of vSUB;
end;

theorem :: SUBSTUT1:10
  S = [S`1,S`2];

definition let S;
  func Sub_not S -> Element of QC-Sub-WFF equals
:: SUBSTUT1:def 20
   ['not' S`1,S`2];
end;

definition let S, S';
  assume  S`2 = (S')`2;
  func Sub_&(S,S') -> Element of QC-Sub-WFF equals
:: SUBSTUT1:def 21
   [(S`1) '&' ((S')`1),S`2];
end;

 reserve B for Element of [:QC-Sub-WFF,bound_QC-variables:];

definition let B;
  redefine func B`1 -> Element of QC-Sub-WFF;
  redefine func B`2 -> Element of bound_QC-variables;
end;

definition let B;
  attr B is quantifiable means
:: SUBSTUT1:def 22
   ex e st (B`1)`2 = QSub.[All((B)`2,(B`1)`1),e];
end;

definition let B;
  assume  B is quantifiable;
  mode second_Q_comp of B -> Element of vSUB means
:: SUBSTUT1:def 23
   (B`1)`2 = QSub.[All(B`2,(B`1)`1),it];
end;

 reserve SQ for second_Q_comp of B;

definition let B, SQ;
  assume  B is quantifiable;
  func Sub_All(B,SQ) -> Element of QC-Sub-WFF equals
:: SUBSTUT1:def 24
    [All(B`2,(B`1)`1),SQ];
end;

definition let S, x;
  redefine func [S,x] -> Element of [:QC-Sub-WFF,bound_QC-variables:];
end;

scheme :: SUBSTUT1:sch 1
 SubQCInd { Pro[Element of QC-Sub-WFF]}:
        for S being Element of QC-Sub-WFF holds Pro[S]
  provided
         for k being Element of NAT, P being (QC-pred_symbol of k),
                ll being QC-variable_list of k, e being Element of vSUB
              holds Pro[Sub_P(P,ll,e)] and
         for S being Element of QC-Sub-WFF st
                       S is Sub_VERUM holds Pro[S] and
         for S being Element of QC-Sub-WFF st Pro[S]
                                                      holds Pro[Sub_not S] and
         for S,S' being Element of QC-Sub-WFF
                 st S`2 = (S')`2 & Pro[S] & Pro[S'] holds Pro[Sub_&(S,S')] and
         for x being bound_QC-variable, S being Element of QC-Sub-WFF,
                        SQ being second_Q_comp of [S,x] st
            [S,x] is quantifiable & Pro[S] holds Pro[Sub_All([S,x], SQ)];

definition let S;
  attr S is Sub_atomic means
:: SUBSTUT1:def 25
   ex k being Element of NAT, P being QC-pred_symbol of k,
        ll being QC-variable_list of k, e being Element of vSUB st
                                                          S = Sub_P(P,ll,e);
end;

theorem :: SUBSTUT1:11
  S is Sub_atomic implies S`1 is atomic;

registration let k be Element of NAT; let P be (QC-pred_symbol of k),
                 ll be QC-variable_list of k;
             let e be Element of vSUB;
  cluster Sub_P(P,ll,e) -> Sub_atomic;
end;

definition let S;
  attr S is Sub_negative means
:: SUBSTUT1:def 26
   ex S' st S = Sub_not S';
  attr S is Sub_conjunctive means
:: SUBSTUT1:def 27
   ex S1,S2 st S = Sub_&(S1,S2) & S1`2 = S2`2;
end;

definition let A be set;
  attr A is Sub_universal means
:: SUBSTUT1:def 28
   ex B,SQ st A = Sub_All(B,SQ) & B is quantifiable;
end;

theorem :: SUBSTUT1:12
  for S holds S is Sub_VERUM or
      S is Sub_atomic or S is Sub_negative or
      S is Sub_conjunctive or S is Sub_universal;

definition let S such that  S is Sub_atomic;
  func Sub_the_arguments_of S -> FinSequence of QC-variables means
:: SUBSTUT1:def 29
   ex k being Element of NAT, P being (QC-pred_symbol of k),
               ll being QC-variable_list of k, e being Element of vSUB
                  st it = ll & S = Sub_P(P,ll,e);
 end;

definition let S such that  S is Sub_negative;
  func Sub_the_argument_of S -> Element of  QC-Sub-WFF means
:: SUBSTUT1:def 30
   S = Sub_not it;
end;

definition let S such that  S is Sub_conjunctive;
  func Sub_the_left_argument_of S -> Element of QC-Sub-WFF means
:: SUBSTUT1:def 31
   ex S' st S = Sub_&(it,S') & it`2 = (S')`2;
end;

definition let S such that  S is Sub_conjunctive;
  func Sub_the_right_argument_of S -> Element of QC-Sub-WFF means
:: SUBSTUT1:def 32
   ex S' st S = Sub_&(S',it) & (S')`2 = it`2;
end;

definition let A be set such that  A is Sub_universal;
  func Sub_the_bound_of A -> bound_QC-variable means
:: SUBSTUT1:def 33
    ex B,SQ st A = Sub_All(B,SQ) & B`2 = it & B is quantifiable;
end;

definition let A be set such that  A is Sub_universal;
  func Sub_the_scope_of A -> Element of QC-Sub-WFF means
:: SUBSTUT1:def 34
   ex B,SQ st A = Sub_All(B,SQ) & B`1 = it & B is quantifiable;
end;

registration let S;
  cluster Sub_not S -> Sub_negative;
end;

theorem :: SUBSTUT1:13
  S1`2 = S2`2 implies Sub_&(S1,S2) is Sub_conjunctive;

theorem :: SUBSTUT1:14
  B is quantifiable implies Sub_All(B,SQ) is Sub_universal;

theorem :: SUBSTUT1:15
  Sub_not(S) = Sub_not(S') implies S = S';

theorem :: SUBSTUT1:16
  Sub_the_argument_of(Sub_not(S)) = S;

theorem :: SUBSTUT1:17
  (S1`2 = S2`2 & (S1')`2 = (S2')`2 &
     Sub_&(S1,S2) = Sub_&(S1',S2')) implies S1 = S1' & S2 = S2';

theorem :: SUBSTUT1:18
  S1`2 = S2`2 implies Sub_the_left_argument_of(Sub_&(S1,S2)) = S1;

theorem :: SUBSTUT1:19
  S1`2 = S2`2 implies Sub_the_right_argument_of(Sub_&(S1,S2)) = S2;

theorem :: SUBSTUT1:20
  for B1,B2 being Element of [:QC-Sub-WFF,bound_QC-variables:],
        SQ1 being second_Q_comp of B1, SQ2 being second_Q_comp of B2 st
      B1 is quantifiable & B2 is quantifiable &
        Sub_All(B1,SQ1) = Sub_All(B2,SQ2) holds B1 = B2;

theorem :: SUBSTUT1:21
  B is quantifiable implies Sub_the_scope_of(Sub_All(B,SQ)) = B`1;

scheme :: SUBSTUT1:sch 2

  SubQCInd2 {Pro[Element of QC-Sub-WFF]}:
  for S being Element of QC-Sub-WFF holds Pro[S]
  provided
       for S being Element of QC-Sub-WFF holds
         (S is Sub_atomic implies Pro[S]) &
         (S is Sub_VERUM implies Pro[S]) &
         (S is Sub_negative & Pro[Sub_the_argument_of S] implies
                                                       Pro[S]) &
         (S is Sub_conjunctive & Pro[Sub_the_left_argument_of S] &
                Pro[Sub_the_right_argument_of S] implies Pro[S]) &
         (S is Sub_universal & Pro[Sub_the_scope_of S] implies Pro[S]);

theorem :: SUBSTUT1:22
  S is Sub_negative implies len @((Sub_the_argument_of(S))`1) < len @(S`1);

theorem :: SUBSTUT1:23
  S is Sub_conjunctive implies
      len @((Sub_the_left_argument_of(S))`1) < len @(S`1) &
      len @((Sub_the_right_argument_of(S))`1) < len @(S`1);

theorem :: SUBSTUT1:24
  S is Sub_universal implies len@((Sub_the_scope_of(S))`1) < len @(S`1);

theorem :: SUBSTUT1:25
  (S is Sub_VERUM implies ((@S`1).1)`1 = 0) &
        (S is Sub_atomic implies ex k being Element of NAT st (@S`1).1 is
                                         QC-pred_symbol of k) &
        (S is Sub_negative implies ((@S`1).1)`1 = 1) &
        (S is Sub_conjunctive implies ((@S`1).1)`1 = 2) &
        (S is Sub_universal implies ((@S`1).1)`1 = 3);

theorem :: SUBSTUT1:26
  S is Sub_atomic implies
            ((@S`1).1)`1 <> 0 & ((@S`1).1)`1 <> 1 &
            ((@S`1).1)`1 <> 2 & ((@S`1).1)`1 <> 3;

theorem :: SUBSTUT1:27
  not (ex S st S is Sub_atomic Sub_negative or
          S is Sub_atomic Sub_conjunctive or
          S is Sub_atomic Sub_universal or
          S is Sub_negative Sub_conjunctive or
          S is Sub_negative Sub_universal or
          S is Sub_conjunctive Sub_universal or
          S is Sub_VERUM Sub_atomic or
          S is Sub_VERUM Sub_negative or
          S is Sub_VERUM Sub_conjunctive or
          S is Sub_VERUM Sub_universal );

scheme :: SUBSTUT1:sch 3

  SubFuncEx { D()-> non empty set,
                    V() -> (Element of D()),
                    A(Element of QC-Sub-WFF)  -> (Element of D()),
                    N(Element of D()) -> (Element of D()),
                    C((Element of D()), (Element of D())) -> (Element of D()),
                    R(Element of QC-Sub-WFF, Element of D()) ->
                           Element of D()} :
 ex F being Function of QC-Sub-WFF, D() st
        for S being Element of QC-Sub-WFF
        for d1,d2 being Element of D() holds
        (S is Sub_VERUM implies F.S = V()) &
        (S is Sub_atomic implies F.S = A(S)) &
        (S is Sub_negative & d1 = F.Sub_the_argument_of S implies F.S = N(d1))
     &  (S is Sub_conjunctive & d1 = F.Sub_the_left_argument_of S &
                d2 = F.Sub_the_right_argument_of S
            implies F.S = C(d1, d2)) &
        (S is Sub_universal & d1 = F.Sub_the_scope_of S
                                               implies F.S = R(S,d1));

scheme :: SUBSTUT1:sch 4

  SubQCFuncUniq { D() -> non empty set,
                F1() -> (Function of QC-Sub-WFF, D()),
                F2() -> (Function of QC-Sub-WFF, D()),
                V() -> (Element of D()),
                A(set) -> (Element of D()),
                N(set) -> (Element of D()),
                C(set,set) -> (Element of D()),
                R(set,set) -> Element of D()} :
 F1() = F2() provided
 for S being Element of QC-Sub-WFF
    for d1,d2 being Element of D() holds
      (S is Sub_VERUM implies F1().S = V()) &
      (S is Sub_atomic implies F1().S = A(S)) &
      (S is Sub_negative &
         d1 = F1().Sub_the_argument_of S implies F1().S = N(d1)) &
      (S is Sub_conjunctive &
         d1 = F1().Sub_the_left_argument_of S &
         d2 = F1().Sub_the_right_argument_of S
            implies F1().S = C(d1, d2)) &
      (S is Sub_universal & d1 = F1().Sub_the_scope_of S implies
                                                        F1().S = R(S, d1)) and
  for S being Element of QC-Sub-WFF
     for d1,d2 being Element of D() holds
      (S is Sub_VERUM implies F2().S = V()) &
      (S is Sub_atomic implies F2().S = A(S)) &
      (S is Sub_negative &
         d1 = F2().Sub_the_argument_of S implies F2().S = N(d1)) &
      (S is Sub_conjunctive &
         d1 = F2().Sub_the_left_argument_of S &
         d2 = F2().Sub_the_right_argument_of S
            implies F2().S = C(d1, d2)) &
      (S is Sub_universal &
      d1 = F2().Sub_the_scope_of S implies F2().S = R(S, d1));

definition let S;
  func @S -> Element of [:QC-WFF,vSUB:] equals
:: SUBSTUT1:def 35
    S;
end;

 reserve Z for Element of [:QC-WFF,vSUB:];

definition let Z;
  redefine func Z`1 -> Element of QC-WFF;
  redefine func Z`2 -> CQC_Substitution;
end;

definition let Z;
  func S_Bound(Z) -> bound_QC-variable equals
:: SUBSTUT1:def 36
     x.upVar(RestrictSub(bound_in Z`1,Z`1,Z`2),(the_scope_of Z`1)) if
   bound_in(Z`1) in rng(RestrictSub(bound_in Z`1,Z`1,Z`2))
          otherwise bound_in(Z`1);
end;

definition let S, p;
  func Quant(S,p) -> Element of QC-WFF equals
:: SUBSTUT1:def 37
    All(S_Bound(@S),p);
end;

begin :: Definition and Properties of Substitution
      :: (Ebb et al, Chapter III, Definition 8.1/8.2)

definition let S be Element of QC-Sub-WFF;
  func CQC_Sub(S) -> Element of QC-WFF means
:: SUBSTUT1:def 38
 ex F being Function of QC-Sub-WFF,QC-WFF
     st it = F.S & for S' being Element of QC-Sub-WFF holds
       (S' is Sub_VERUM implies F.S' = VERUM) &
     ( S' is Sub_atomic implies
       F.S' = (the_pred_symbol_of ((S')`1))!
       CQC_Subst(Sub_the_arguments_of S',(S')`2)) &
     (S' is Sub_negative implies
         F.S' = 'not' (F.(Sub_the_argument_of S'))) &
     (S' is Sub_conjunctive implies
       F.S' = (F.Sub_the_left_argument_of S') '&'
              (F.Sub_the_right_argument_of S')) &
     (S' is Sub_universal implies
     F.S' = Quant(S',F.Sub_the_scope_of S'));
end;

theorem :: SUBSTUT1:28
  S is Sub_negative implies CQC_Sub(S) = 'not' CQC_Sub(Sub_the_argument_of S);

theorem :: SUBSTUT1:29
  CQC_Sub(Sub_not S) = 'not' CQC_Sub(S);

theorem :: SUBSTUT1:30
  S is Sub_conjunctive implies
     CQC_Sub(S) = (CQC_Sub(Sub_the_left_argument_of S)) '&'
                         (CQC_Sub(Sub_the_right_argument_of S));

theorem :: SUBSTUT1:31
  S1`2 = S2`2 implies
         CQC_Sub(Sub_&(S1,S2)) = (CQC_Sub(S1)) '&' (CQC_Sub(S2));

theorem :: SUBSTUT1:32
  S is Sub_universal implies
    CQC_Sub(S) = Quant(S,CQC_Sub(Sub_the_scope_of S));

definition
  func CQC-Sub-WFF -> Subset of QC-Sub-WFF equals
:: SUBSTUT1:def 39
   {S : S`1 is Element of CQC-WFF};
end;

registration
  cluster CQC-Sub-WFF -> non empty;
end;

theorem :: SUBSTUT1:33
  S is Sub_VERUM implies CQC_Sub(S) is Element of CQC-WFF;

theorem :: SUBSTUT1:34
  for h being FinSequence holds
     h is CQC-variable_list of k iff
       (h is FinSequence of bound_QC-variables & len h = k);

theorem :: SUBSTUT1:35
  CQC_Sub(Sub_P(P,ll,e)) is Element of CQC-WFF;

theorem :: SUBSTUT1:36
  CQC_Sub(S) is Element of CQC-WFF implies
                     CQC_Sub(Sub_not S) is Element of CQC-WFF;

theorem :: SUBSTUT1:37
  (S1`2 = S2`2 &
   CQC_Sub(S1) is Element of CQC-WFF & CQC_Sub(S2) is Element of CQC-WFF)
             implies CQC_Sub(Sub_&(S1,S2)) is Element of CQC-WFF;

 reserve xSQ for second_Q_comp of [S,x];

theorem :: SUBSTUT1:38
  CQC_Sub(S) is Element of CQC-WFF & [S,x] is quantifiable implies
               CQC_Sub(Sub_All([S,x],xSQ)) is Element of CQC-WFF;

 reserve S for Element of CQC-Sub-WFF;

scheme :: SUBSTUT1:sch 5
 SubCQCInd { Pro[set] } :
  for S holds Pro[S]
  provided
 for S,S' being Element of CQC-Sub-WFF,
        x being bound_QC-variable,SQ be second_Q_comp of [S,x],
          k being Element of NAT,ll being CQC-variable_list of k,
      P being (QC-pred_symbol of k), e being Element of vSUB
             holds Pro[Sub_P(P,ll,e)] &
           (S is Sub_VERUM implies Pro[S]) &
           (Pro[S] implies Pro[Sub_not S]) &
           (S`2 = (S')`2 & Pro[S] & Pro[S']
                                       implies Pro[Sub_&(S,S')]) &
      ([S,x] is quantifiable & Pro[S] implies Pro[Sub_All([S,x], SQ)]);

definition let S;
  redefine func CQC_Sub(S) -> Element of CQC-WFF;
end;
