:: On same equivalents of well-foundedness
::  by Piotr Rudnicki and Andrzej Trybulec
::
:: Received February 25, 1997
:: Copyright (c) 1997 Association of Mizar Users

environ

 vocabulary PARTFUN1, FRAENKEL, FUNCT_1, RELAT_1, BOOLE, TARSKI, CARD_1,
      CARD_5, ORDINAL2, ORDERS_1, WELLORD1, WAYBEL_0, SETFAM_1, CAT_1, FUNCT_4,
      CARD_2, FINSET_1, ORDINAL1, REALSET1, FUNCOP_1, NEWTON, NORMSP_1,
      WELLFND1;
 notation TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, NAT_1, RELAT_1,
      FUNCT_1, SETFAM_1, STRUCT_0, RELSET_1, PARTFUN1, FUNCT_2, FUNCT_4,
      FUNCOP_1, ORDINAL1, WELLORD1, ORDINAL2, FINSET_1, CARD_1, CARD_2,
      ORDERS_1, FRAENKEL, REALSET1, CQC_LANG, NORMSP_1, CARD_5, RFUNCT_3,
      WAYBEL_0;
 constructors NAT_1, WELLORD1, DOMAIN_1, CARD_2, REALSET1, FUNCT_4, CQC_LANG,
      NORMSP_1, CARD_5, RFUNCT_3, WAYBEL_0, FRAENKEL, MEMBERED;
 clusters SUBSET_1, STRUCT_0, RELSET_1, ORDERS_1, FRAENKEL, REALSET1, NORMSP_1,
      CARD_5, ALTCAT_1, WAYBEL_0, FUNCOP_1, CQC_LANG, PARTFUN1, CARD_1,
      MEMBERED, NUMBERS, ORDINAL2;
 requirements NUMERALS, SUBSET, BOOLE;


begin :: Preliminaries

:: General preliminaries :::::::::::::::::::::::::::::::::::::::::::::

registration let A, B be set;
  cluster PFuncs(A,B) -> functional;
  coherence
   proof
    let x be set;
    assume x in PFuncs(A,B);
     then ex f being Function st x = f & dom f c= A & rng f c= B
      by PARTFUN1:def 5;
    hence x is Function;
   end;
end;


definition
 let R be 1-sorted, X be set,
     p be PartFunc of the carrier of R, X;
 redefine func dom p -> Subset of R;
end;


theorem :: WELLFND1:1
 for X being set, f, g being Function
  st f c= g & X c= dom f holds f|X = g|X;

theorem :: WELLFND1:2
 for X being functional set
  st for f, g being Function st f in X & g in X holds f tolerates g
   holds union X is Function;

scheme :: WELLFND1:sch 1
 PFSeparation {X, Y() -> set, P[set]}:
 ex PFS being Subset of PFuncs(X(), Y()) st
  for pfs being PartFunc of X(), Y() holds pfs in PFS iff P[pfs]
proof defpred p[set] means P[$1];
     consider fs being Subset of PFuncs (X(), Y()) such that
A1: for f being set holds f in fs iff f in PFuncs(X(), Y()) & p[f]
                                            from SUBSET_1:sch 1;
 take fs;
 let pfs be PartFunc of X(), Y();
       pfs in PFuncs(X(), Y()) by PARTFUN1:119;
 hence thesis by A1;
end;

:: Cardinals ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

registration
 let X be set;
 cluster nextcard X -> non empty;
 coherence by CARD_1:def 6;
end;


registration
 cluster regular Aleph;
 existence by CARD_5:42;
end;


theorem :: WELLFND1:3
 for M being regular Aleph, X being set
  st X c= M & Card X in M holds sup X in M;

:: Relational structures ::::::::::::::::::::::::::::::::::::::::::::::

theorem :: WELLFND1:4
 for R being RelStr, x being set
  holds (the InternalRel of R)-Seg x c= the carrier of R;

definition
 let R be RelStr, X be Subset of R;
 redefine
 attr X is lower means
:: WELLFND1:def 1
  for x, y being set
   st x in X & [y, x] in the InternalRel of R holds y in X;
end;


theorem :: WELLFND1:5
 for R being RelStr, X being Subset of R, x being set
  st X is lower & x in X holds (the InternalRel of R)-Seg x c= X;

theorem :: WELLFND1:6
 for R being RelStr, X being lower Subset of R,
     Y being Subset of R, x being set
  st Y = X \/ {x} & (the InternalRel of R)-Seg x c= X
   holds Y is lower;

begin :: Well-founded relational structures

definition
 let R be RelStr;
 attr R is well_founded means
:: WELLFND1:def 2
 the InternalRel of R is_well_founded_in the carrier of R;
end;


registration
 cluster non empty well_founded RelStr;
 existence proof
     reconsider er = {} as Relation of {{}} by RELSET_1:25;
  take R = RelStr(#{{}}, er#);
  thus R is non empty;
  let Y be set;
  assume Y c= the carrier of R & Y <> {};
then A1: Y = {{}} by ZFMISC_1:39;
  take e = {};
  thus e in Y by A1,TARSKI:def 1;
  assume (the InternalRel of R)-Seg e /\ Y <> {};
   then consider x being set such that
A2: x in (the InternalRel of R)-Seg e /\ Y by XBOOLE_0:def 1;
       x in (the InternalRel of R)-Seg e & x in Y by A2,XBOOLE_0:def 3;
  hence contradiction by WELLORD1:def 1;
 end;
end;


definition
 let R be RelStr, X be Subset of R;
 attr X is well_founded means
:: WELLFND1:def 3
 the InternalRel of R is_well_founded_in X;
end;


registration
 let R be RelStr;
 cluster well_founded Subset of R;
 existence proof {} c= the carrier of R by XBOOLE_1:2;
  then reconsider e = {} as Subset of R;
  take e; let Y be set; assume Y c= e & Y <> {};
  hence thesis by XBOOLE_1:3;
 end;
end;


definition
 let R be RelStr;
 func well_founded-Part R -> Subset of R means
:: WELLFND1:def 4
  it = union {S where S is Subset of R : S is well_founded lower};
end;


registration
 let R be RelStr;
 cluster well_founded-Part R -> lower well_founded;
 coherence proof
   set wfp = well_founded-Part R,
       r = the InternalRel of R,
       IT = {S where S is Subset of R : S is well_founded lower};
A1: wfp = union IT by Def4;
  hereby let x, y be set; assume
  A2: x in wfp & [y, x] in r;
       then consider Y being set such that
  A3: x in Y & Y in IT by A1,TARSKI:def 4;
       consider S being Subset of R such that
  A4: Y = S & S is well_founded lower by A3;
         y in S by A2,A3,A4,Def1;
   hence y in wfp by A1,A3,A4,TARSKI:def 4;
  end;
  let Y be set; assume
A5: Y c= wfp & Y <> {};
     then consider y being set such that
A6: y in Y by XBOOLE_0:def 1;
     consider YY being set such that
A7: y in YY & YY in IT by A1,A5,A6,TARSKI:def 4;
     consider S being Subset of R such that
A8: YY = S & S is well_founded lower by A7;
A9: r is_well_founded_in S by A8,Def3;
   set YS = Y /\ S;
       YS c= S & YS <> {} by A6,A7,A8,XBOOLE_0:def 3,XBOOLE_1:17;
     then consider a being set such that
A10: a in YS & r-Seg a misses YS by A9,WELLORD1:def 3;
A11: a in Y & a in S by A10,XBOOLE_0:def 3;
     then r-Seg a c= S by A8,Th5;
then A12:   r-Seg a /\ Y = r-Seg a /\ S /\ Y by XBOOLE_1:28
                 .= r-Seg a /\ YS by XBOOLE_1:16;
       r-Seg a /\ YS = {} by A10,XBOOLE_0:def 7;
     then r-Seg a misses Y by A12,XBOOLE_0:def 7;
  hence thesis by A11;
 end;
end;


theorem :: WELLFND1:7
 for R being non empty RelStr, x be Element of R
  holds {x} is well_founded Subset of R;

theorem :: WELLFND1:8
 for R being RelStr, X, Y being well_founded Subset of R
  st X is lower holds X \/ Y is well_founded Subset of R;

theorem :: WELLFND1:9
 for R being RelStr
  holds R is well_founded iff well_founded-Part R = the carrier of R;

theorem :: WELLFND1:10
 for R being non empty RelStr,
     x being Element of R
  st (the InternalRel of R)-Seg x c= well_founded-Part R
   holds x in well_founded-Part R;

:: Well-founded induction :::::::::::::::::::::::::::::::::::::::::::::

scheme :: WELLFND1:sch 2
 WFMin {R() -> non empty RelStr,
              x() -> Element of R(),
              P[set]}:
 ex x being Element of R() st P[x] &
   not ex y being Element of R()
        st x <> y & P[y] & [y,x] in the InternalRel of R()
provided
 P[x()] and
 R() is well_founded
proof defpred p[set] means P[$1];
   set c = the carrier of R(),
       r = the InternalRel of R(),
       Z = {x where x is Element of c: p[x]};
A3: Z is Subset of c from DOMAIN_1:sch 7;
       x() in Z by A1;
     then reconsider Z as non empty Subset of c by A3;
       r is_well_founded_in c by A2,Def2;
     then consider a being set such that
A4: a in Z & r-Seg a misses Z by WELLORD1:def 3;
     reconsider a as Element of R() by A4;
 take a;
       ex a' being Element of c st a' = a & P[a'] by A4;
 hence P[a];
 given y being Element of R() such that
A5: a <> y & P[y] & [y,a] in r;
       y in Z & y in r-Seg a by A5,WELLORD1:def 1;
 hence contradiction by A4,XBOOLE_0:3;
end;

theorem :: WELLFND1:11  :: WF iff WFInduction
for R being non empty RelStr holds
 R is well_founded iff
 for S being set
  st for x being Element of R
      st (the InternalRel of R)-Seg x c= S holds x in S
   holds the carrier of R c= S;

scheme :: WELLFND1:sch 3
 WFInduction {R() -> non empty RelStr, P[set]}:
 for x being Element of R() holds P[x]
provided
 for x being Element of R()
      st for y being Element of R()
          st y <> x & [y,x] in the InternalRel of R() holds P[y]
       holds P[x]
    and
 R() is well_founded
proof
   set c = the carrier of R(),
       r = the InternalRel of R(),
       Z = {x where x is Element of c: P[x]};
       now let x be Element of c such that
     A3: r-Seg x c= Z;
          reconsider x' = x as Element of R();
            now let y' be Element of R(); assume
                 y' <> x' & [y',x'] in r;
               then y' in r-Seg x' by WELLORD1:def 1; then y' in Z by A3;
               then consider y being Element of c such that
          A4: y = y' & P[y];
           thus P[y'] by A4;
          end; then P[x'] by A1;
      hence x in Z;
     end;
then A5: c c= Z by A2,Th11;
 let x be Element of R();
       x in c; then x in Z by A5;
     then consider x' being Element of c such that
A6: x = x' & P[x'];
 thus thesis by A6;
end;

:: Well-foundedness and recursive definitions :::::::::::::::::::::::::

definition
 let R be non empty RelStr, V be non empty set,
     H be Function of
       [:the carrier of R, PFuncs(the carrier of R, V):], V,
     F be Function;
 pred F is_recursively_expressed_by H means
:: WELLFND1:def 5
  for x being Element of R
   holds F.x = H.[x, F|(the InternalRel of R)-Seg x];
end;


theorem :: WELLFND1:12 :: Well foundedness and existence
  for R being non empty RelStr holds
 R is well_founded iff
 for V being non empty set,
     H being Function of
       [:the carrier of R, PFuncs(the carrier of R, V):], V
  ex F being Function of the carrier of R, V
   st F is_recursively_expressed_by H;

theorem :: WELLFND1:13 :: Uniqueness implies well-foundedness
  for R being non empty RelStr,
    V being non trivial set
 st for H being Function of
                [:the carrier of R, PFuncs(the carrier of R, V):], V,
        F1, F2 being Function of the carrier of R, V
     st F1 is_recursively_expressed_by H &
        F2 is_recursively_expressed_by H
      holds F1 = F2
  holds R is well_founded;

theorem :: WELLFND1:14 :: Well-foundedness implies uniqueness
   for R being non empty well_founded RelStr,
     V being non empty set,
     H being Function of
             [:the carrier of R, PFuncs(the carrier of R, V):], V,
     F1, F2 being Function of the carrier of R, V
   st F1 is_recursively_expressed_by H &
      F2 is_recursively_expressed_by H
    holds F1 = F2;

:: Well-foundedness and omega chains  :::::::::::::::::::::::::::::::::

definition
  let R be RelStr, f be sequence of R;
 canceled;
 attr f is descending means
:: WELLFND1:def 7
 for n being Nat
  holds f.(n+1) <> f.n & [f.(n+1), f.n] in the InternalRel of R;
end;


theorem :: WELLFND1:15 :: omega chains
   for R being non empty RelStr holds
  R is well_founded iff not ex f being sequence of R st f is descending;

