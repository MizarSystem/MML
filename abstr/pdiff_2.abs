:: Partial Differentiation of Real Binary Functions
::  by Bing Xie , Xiquan Liang , Hongwei Li and Yanping Zhuang
::
:: Received August 5, 2008
:: Copyright (c) 2008 Association of Mizar Users

environ

 vocabularies FUNCT_1, ARYTM, ARYTM_1, FINSEQ_1, FINSEQ_2, RELAT_1, ABSVALUE,
      ORDINAL2, SEQ_1, SEQ_2, RCOMP_1, BOOLE, PARTFUN1, FDIFF_1, PDIFF_1,
      BORSUK_1, PDIFF_2, ARYTM_3, SEQM_3, FCONT_1, FRECHET2, ANPROJ_1,
      OPPCAT_1;
 notations TARSKI, SUBSET_1, FUNCT_1, RELSET_1, PARTFUN1, FUNCT_2, RFUNCT_2,
      XCMPLX_0, XREAL_0, COMPLEX1, ORDINAL1, NUMBERS, REAL_1, NAT_1, VALUED_0,
      VALUED_1, SEQ_1, SEQ_2, FINSEQ_1, FINSEQ_2, RCOMP_1, EUCLID, FDIFF_1,
      XXREAL_0, SEQM_3, FCONT_1, PDIFF_1;
 constructors REAL_1, SEQ_2, PARTFUN1, RFUNCT_2, COMPLEX1, RCOMP_1, FDIFF_1,
      SEQ_1, NAT_1, FCONT_1, PDIFF_1, BHSP_3, VFUNCT_1, SEQM_3;
 registrations RELSET_1, XREAL_0, MEMBERED, FDIFF_1, FUNCT_2, NAT_1, NUMBERS,
      XBOOLE_0, XXREAL_0, FINSEQ_1, VALUED_0, VALUED_1, ORDINAL1, SEQ_4;
 requirements SUBSET, REAL, BOOLE, NUMERALS, ARITHM;


begin :: Preliminaries

reserve Z for set;
reserve X,Y for Subset of REAL;
reserve x,x0,x1,x2,y,y0,y1,y2,g,g1,g2,r,r1,s,p,p1,p2 for Real;
reserve z,z0 for Element of REAL 2;
reserve n,m,k for Element of NAT;
reserve Z,Z1 for Subset of REAL 2;
reserve s1,s3 for Real_Sequence;
reserve f,f1,f2,g for PartFunc of REAL 2,REAL;
reserve R,R1,R2 for REST;
reserve L,L1,L2 for LINEAR;

theorem :: PDIFF_2:1
  dom proj(1,2) = REAL 2 & rng proj(1,2) = REAL &
  for x,y be Element of REAL holds proj(1,2).<*x,y*> = x;

theorem :: PDIFF_2:2
  dom proj(2,2) = REAL 2 & rng proj(2,2) = REAL &
  for x,y be Element of REAL holds proj(2,2).<*x,y*> = y;

begin :: Partial Differentiation of Real Binary Functions

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  func SVF1(f,z) -> PartFunc of REAL,REAL equals
:: PDIFF_2:def 1
  f*reproj(1,z);
  func SVF2(f,z) -> PartFunc of REAL,REAL equals
:: PDIFF_2:def 2
  f*reproj(2,z);
end;

theorem :: PDIFF_2:3
  z = <*x,y*> & f is_partial_differentiable_in z,1 implies
  SVF1(f,z) is_differentiable_in x;

theorem :: PDIFF_2:4
  z = <*x,y*> & f is_partial_differentiable_in z,2 implies
  SVF2(f,z) is_differentiable_in y;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  pred f is_partial_differentiable`1_in z means
:: PDIFF_2:def 3
  ex x0,y0 being Real st z = <*x0,y0*> &
  SVF1(f,z) is_differentiable_in x0;

  pred f is_partial_differentiable`2_in z means
:: PDIFF_2:def 4
  ex x0,y0 being Real st z = <*x0,y0*> &
  SVF2(f,z) is_differentiable_in y0;
end;

theorem :: PDIFF_2:5
  z = <*x0,y0*> & f is_partial_differentiable`1_in z implies
  ex N being Neighbourhood of x0 st N c= dom SVF1(f,z) &
  ex L,R st for x st x in N holds
  SVF1(f,z).x - SVF1(f,z).x0 = L.(x-x0) + R.(x-x0);

theorem :: PDIFF_2:6
  z = <*x0,y0*> & f is_partial_differentiable`2_in z implies
  ex N being Neighbourhood of y0 st N c= dom SVF2(f,z) &
  ex L,R st for y st y in N holds
  SVF2(f,z).y - SVF2(f,z).y0 = L.(y-y0) + R.(y-y0);

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  redefine pred f is_partial_differentiable`1_in z means
:: PDIFF_2:def 5
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(f,z) &
  ex L,R st for x st x in N holds
  SVF1(f,z).x - SVF1(f,z).x0 = L.(x-x0) + R.(x-x0);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  redefine pred f is_partial_differentiable`2_in z means
:: PDIFF_2:def 6
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(f,z) &
  ex L,R st for y st y in N holds
  SVF2(f,z).y - SVF2(f,z).y0 = L.(y-y0) + R.(y-y0);
end;

theorem :: PDIFF_2:7
  for f be PartFunc of REAL 2,REAL
  for z be Element of REAL 2 holds
  f is_partial_differentiable`1_in z iff f is_partial_differentiable_in z,1;

theorem :: PDIFF_2:8
  for f be PartFunc of REAL 2,REAL
  for z be Element of REAL 2 holds
  f is_partial_differentiable`2_in z iff f is_partial_differentiable_in z,2;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  func partdiff1(f,z) -> Real equals
:: PDIFF_2:def 7
  partdiff(f,z,1);
  func partdiff2(f,z) -> Real equals
:: PDIFF_2:def 8
  partdiff(f,z,2);
end;

theorem :: PDIFF_2:9
  z = <*x0,y0*> & f is_partial_differentiable`1_in z implies
  (r = partdiff1(f,z) iff
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(f,z) &
  ex L,R st r = L.1 & for x st x in N holds
  SVF1(f,z).x - SVF1(f,z).x0 = L.(x-x0) + R.(x-x0));

theorem :: PDIFF_2:10
  z = <*x0,y0*> & f is_partial_differentiable`2_in z implies
  (r = partdiff2(f,z) iff
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(f,z) &
  ex L,R st r = L.1 & for y st y in N holds
  SVF2(f,z).y - SVF2(f,z).y0 = L.(y-y0) + R.(y-y0));

theorem :: PDIFF_2:11
  z = <*x0,y0*> & f is_partial_differentiable`1_in z implies
  partdiff1(f,z) = diff(SVF1(f,z),x0);

theorem :: PDIFF_2:12
  z = <*x0,y0*> & f is_partial_differentiable`2_in z implies
  partdiff2(f,z) = diff(SVF2(f,z),y0);

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  pred f is_partial_differentiable`1_on Z means
:: PDIFF_2:def 9
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_partial_differentiable`1_in z;

  pred f is_partial_differentiable`2_on Z means
:: PDIFF_2:def 10
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_partial_differentiable`2_in z;
end;

theorem :: PDIFF_2:13
  f is_partial_differentiable`1_on Z implies
  Z c= dom f & for z st z in Z holds f is_partial_differentiable`1_in z;

theorem :: PDIFF_2:14
  f is_partial_differentiable`2_on Z implies
  Z c= dom f & for z st z in Z holds f is_partial_differentiable`2_in z;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_partial_differentiable`1_on Z;
  func f`partial1|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_2:def 11
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = partdiff1(f,z);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_partial_differentiable`2_on Z;
  func f`partial2|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_2:def 12
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = partdiff2(f,z);
end;

begin :: Main Properties of Partial Differentiation of Real Binary Functions

theorem :: PDIFF_2:15
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(1,2).z0 st
  f is_partial_differentiable`1_in z0 & N c= dom SVF1(f,z0) holds
  for h be convergent_to_0 Real_Sequence,
  c be constant Real_Sequence st rng c = {proj(1,2).z0} & rng (h+c) c= N
  holds h"(#)(SVF1(f,z0)/*(h+c) - SVF1(f,z0)/*c) is convergent &
  partdiff1(f,z0) = lim (h"(#)(SVF1(f,z0)/*(h+c) - SVF1(f,z0)/*c));

theorem :: PDIFF_2:16
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(2,2).z0 st
  f is_partial_differentiable`2_in z0 & N c= dom SVF2(f,z0) holds
  for h be convergent_to_0 Real_Sequence,
  c be constant Real_Sequence st rng c = {proj(2,2).z0} & rng (h+c) c= N
  holds h"(#)(SVF2(f,z0)/*(h+c) - SVF2(f,z0)/*c) is convergent &
  partdiff2(f,z0) = lim (h"(#)(SVF2(f,z0)/*(h+c) - SVF2(f,z0)/*c));

theorem :: PDIFF_2:17
  f1 is_partial_differentiable`1_in z0 &
  f2 is_partial_differentiable`1_in z0 implies
  f1+f2 is_partial_differentiable`1_in z0 &
  partdiff1(f1+f2,z0) = partdiff1(f1,z0) + partdiff1(f2,z0);

theorem :: PDIFF_2:18
  f1 is_partial_differentiable`2_in z0 &
  f2 is_partial_differentiable`2_in z0 implies
  f1+f2 is_partial_differentiable`2_in z0 &
  partdiff2(f1+f2,z0) = partdiff2(f1,z0) + partdiff2(f2,z0);

theorem :: PDIFF_2:19
  f1 is_partial_differentiable`1_in z0 &
  f2 is_partial_differentiable`1_in z0 implies
  f1-f2 is_partial_differentiable`1_in z0 &
  partdiff1(f1-f2,z0) = partdiff1(f1,z0) - partdiff1(f2,z0);

theorem :: PDIFF_2:20
  f1 is_partial_differentiable`2_in z0 &
  f2 is_partial_differentiable`2_in z0 implies
  f1-f2 is_partial_differentiable`2_in z0 &
  partdiff2(f1-f2,z0) = partdiff2(f1,z0) - partdiff2(f2,z0);

theorem :: PDIFF_2:21
  f is_partial_differentiable`1_in z0 implies
  r(#)f is_partial_differentiable`1_in z0 &
  partdiff1((r(#)f),z0) = r*partdiff1(f,z0);

theorem :: PDIFF_2:22
  f is_partial_differentiable`2_in z0 implies
  r(#)f is_partial_differentiable`2_in z0 &
  partdiff2((r(#)f),z0) = r*partdiff2(f,z0);

theorem :: PDIFF_2:23
  f1 is_partial_differentiable`1_in z0 &
  f2 is_partial_differentiable`1_in z0 implies
  f1(#)f2 is_partial_differentiable`1_in z0;

theorem :: PDIFF_2:24
  f1 is_partial_differentiable`2_in z0 &
  f2 is_partial_differentiable`2_in z0 implies
  f1(#)f2 is_partial_differentiable`2_in z0;

theorem :: PDIFF_2:25
  for z0 being Element of REAL 2 holds
  f is_partial_differentiable`1_in z0
  implies SVF1(f,z0) is_continuous_in proj(1,2).z0;

theorem :: PDIFF_2:26
  for z0 being Element of REAL 2 holds
  f is_partial_differentiable`2_in z0
  implies SVF2(f,z0) is_continuous_in proj(2,2).z0;

theorem :: PDIFF_2:27
  f is_partial_differentiable`1_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;

theorem :: PDIFF_2:28
  f is_partial_differentiable`2_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;
