:: Propositional Calculus for Boolean Valued Functions, { V }
::  by Shunichi Kobayashi
::
:: Received May 5, 1999
:: Copyright (c) 1999-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, SUBSET_1, FUNCT_2, MARGREL1, XBOOLEAN, PARTIT1,
      FUNCT_1, BVFUNC_1;
 notations XBOOLE_0, SUBSET_1, XBOOLEAN, MARGREL1, FUNCT_2, BVFUNC_1;
 constructors BINARITH, BVFUNC_1;
 registrations XBOOLE_0, XBOOLEAN, MARGREL1;
 requirements ARITHM, BOOLE;


begin :: Chap. 1  Propositional Calculus

reserve Y for non empty set,
  a,b,c,d,e,f,g for Function of Y,BOOLEAN;

theorem :: BVFUNC_9:1
  (a 'or' b) '&' (b 'imp' c) '<' a 'or' c;

theorem :: BVFUNC_9:2
  a '&' (a 'imp' b) '<' b;

theorem :: BVFUNC_9:3
  (a 'imp' b) '&' 'not' b '<' 'not' a;

theorem :: BVFUNC_9:4
  (a 'or' b) '&' 'not' a '<' b;

theorem :: BVFUNC_9:5
  (a 'imp' b) '&' ('not' a 'imp' b) '<' b;

theorem :: BVFUNC_9:6
  (a 'imp' b) '&' (a 'imp' 'not' b) '<' 'not' a;

theorem :: BVFUNC_9:7
  a 'imp' (b '&' c) '<' a 'imp' b;

theorem :: BVFUNC_9:8
  (a 'or' b) 'imp' c '<' a 'imp' c;

theorem :: BVFUNC_9:9
  a 'imp' b '<' (a '&' c) 'imp' b;

theorem :: BVFUNC_9:10
  a 'imp' b '<' (a '&' c) 'imp' (b '&' c);

theorem :: BVFUNC_9:11
  a 'imp' b '<' a 'imp' (b 'or' c);

theorem :: BVFUNC_9:12
  a 'imp' b '<' (a 'or' c) 'imp' (b 'or' c);

theorem :: BVFUNC_9:13
  a '&' b 'or' c '<' a 'or' c;

theorem :: BVFUNC_9:14
  (a '&' b) 'or' (c '&' d) '<' a 'or' c;

theorem :: BVFUNC_9:15
  (a 'or' b) '&' (b 'imp' c) '<' a 'or' c;

theorem :: BVFUNC_9:16
  (a 'imp' b) '&' ('not' a 'imp' c) '<' b 'or' c;

theorem :: BVFUNC_9:17
  (a 'imp' c) '&' (b 'imp' 'not' c) '<' 'not' a 'or' 'not' b;

theorem :: BVFUNC_9:18
  (a 'or' b) '&' ('not' a 'or' c) '<' b 'or' c;

theorem :: BVFUNC_9:19
  (a 'imp' b) '&' (c 'imp' d) '<' (a '&' c) 'imp' (b '&' d);

theorem :: BVFUNC_9:20
  (a 'imp' b) '&' (a 'imp' c) '<' a 'imp' (b '&' c);

theorem :: BVFUNC_9:21
  ((a 'imp' c) '&' (b 'imp' c)) '<' (a 'or' b) 'imp' c;

theorem :: BVFUNC_9:22
  (a 'imp' b) '&' (c 'imp' d) '<' (a 'or' c) 'imp' (b 'or' d);

theorem :: BVFUNC_9:23
  (a 'imp' b) '&' (a 'imp' c) '<' a 'imp' (b 'or' c);

theorem :: BVFUNC_9:24
  for a1,b1,c1,a2,b2,c2 being Function of Y,BOOLEAN holds (
  b1 'imp' b2) '&' (c1 'imp' c2) '&' (a1 'or' b1 'or' c1) '&' 'not'( a2 '&' b2)
  '&' 'not'( a2 '&' c2) '<' (a2 'imp' a1);

theorem :: BVFUNC_9:25
  for a1,b1,c1,a2,b2,c2 being Function of Y,BOOLEAN holds (a1
  'imp' a2) '&' (b1 'imp' b2) '&' (c1 'imp' c2) '&' (a1 'or' b1 'or' c1) '&'
'not'( a2 '&' b2) '&' 'not'( a2 '&' c2) '&' 'not'( b2 '&' c2) '<' (a2 'imp' a1)
  '&' (b2 'imp' b1) '&' (c2 'imp' c1);

theorem :: BVFUNC_9:26
  for a1,b1,a2,b2 being Function of Y,BOOLEAN holds ((a1
'imp' a2) '&' (b1 'imp' b2) '&' 'not'(a2 '&' b2)) 'imp' 'not' (a1 '&' b1)=I_el(
  Y);

theorem :: BVFUNC_9:27
  for a1,b1,c1,a2,b2,c2 being Function of Y,BOOLEAN holds (a1
'imp' a2) '&' (b1 'imp' b2) '&' (c1 'imp' c2) '&' 'not'( a2 '&' b2) '&' 'not'(
  a2 '&' c2) '&' 'not'( b2 '&' c2) '<' 'not'( a1 '&' b1) '&' 'not'( a1 '&' c1)
  '&' 'not'( b1 '&' c1);

theorem :: BVFUNC_9:28
  a '&' b '<' a;

theorem :: BVFUNC_9:29
  a '&' b '&' c '<' a & a '&' b '&' c '<' b;

theorem :: BVFUNC_9:30
  a '&' b '&' c '&' d '<' a & a '&' b '&' c '&' d '<' b;

theorem :: BVFUNC_9:31
  a '&' b '&' c '&' d '&' e '<' a & a '&' b '&' c '&' d '&' e '<' b;

theorem :: BVFUNC_9:32
  a '&' b '&' c '&' d '&' e '&' f '<' a & a '&' b '&' c '&' d '&' e '&'
  f '<' b;

theorem :: BVFUNC_9:33
  a '&' b '&' c '&' d '&' e '&' f '&' g '<' a & a '&' b '&' c '&' d '&'
  e '&' f '&' g '<' b;

theorem :: BVFUNC_9:34
  a '<' b & c '<' d implies a '&' c '<' b '&' d;

theorem :: BVFUNC_9:35
  a '&' b '<' c implies a '&' 'not' c '<' 'not' b;

theorem :: BVFUNC_9:36
  (a 'imp' c) '&' (b 'imp' c) '&' (a 'or' b) '<' c;

theorem :: BVFUNC_9:37
  ((a 'imp' c) 'or' (b 'imp' c)) '&' (a '&' b) '<' c;

theorem :: BVFUNC_9:38
  a '<' b & c '<' d implies a 'or' c '<' b 'or' d;

theorem :: BVFUNC_9:39
  a '<' a 'or' b;

theorem :: BVFUNC_9:40
  a '&' b '<' a 'or' b;
