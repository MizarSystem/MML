:: Introduction to Arithmetic of Real Numbers
::  by Library Committee
::
:: Received February 11, 2003
:: Copyright (c) 2003 Association of Mizar Users

environ

 vocabularies XREAL_0, ARYTM_2, BOOLE, ARYTM_1, ARYTM_3, ORDINAL2, ARYTM,
      RELAT_1, ASYMPT_0, ZF_LANG, XCMPLX_0, COMPLEX1, FUNCOP_1, OPPCAT_1,
      SUPINF_1, SQUARE_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, FUNCT_4, ORDINAL1, ARYTM_2,
      ARYTM_1, NUMBERS, ARYTM_0, XCMPLX_0, XXREAL_0;
 constructors FUNCT_4, ARYTM_1, ARYTM_0, XCMPLX_0, XXREAL_0;
 registrations ARYTM_2, NUMBERS, XCMPLX_0, XXREAL_0, ORDINAL1, XBOOLE_0;
 requirements NUMERALS, BOOLE, SUBSET, ARITHM;


begin

definition
  let r be number;
  attr r is real means
:: XREAL_0:def 1

  r in REAL;
end;

registration
  cluster -infty -> non real;
  cluster +infty -> non real;
end;

registration
  cluster natural -> real number;
  cluster real -> complex number;
end;

registration
  cluster real number;
  cluster real -> ext-real number;
end;

registration
  let x be real number;
  cluster -x -> real;
  cluster x" -> real;
  let y be real number;
  cluster x + y -> real;
  cluster x * y -> real;
end;

registration
  let x,y be real number;
  cluster x-y -> real;
  cluster x/y -> real;
end;

begin

reserve r,s,t for real number;

registration
  cluster positive (real number);
  cluster negative (real number);
  cluster zero (real number);
end;

registration
  let r,s be non negative (real number);
  cluster r + s -> non negative;
end;

registration
  let r,s be non positive (real number);
  cluster r + s -> non positive;
end;

registration
  let r be positive (real number);
  let s be non negative (real number);
  cluster r + s -> positive;
  cluster s + r -> positive;
end;

registration
  let r be negative (real number);
  let s be non positive (real number);
  cluster r + s -> negative;
  cluster s + r -> negative;
end;

registration
  let r be non positive (real number);
  cluster -r -> non negative;
end;

registration
  let r be non negative (real number);
  cluster -r -> non positive;
end;

registration
  let r be non negative (real number), s be non positive (real number);
  cluster r - s -> non negative;
  cluster s - r -> non positive;
end;

registration
  let r be positive (real number);
  let s be non positive (real number);
  cluster r - s -> positive;
  cluster s - r -> negative;
end;

registration
  let r be negative (real number);
  let s be non negative (real number);
  cluster r - s -> negative;
  cluster s - r -> positive;
end;

registration
  let r be non positive (real number), s be non negative (real number);
  cluster r*s -> non positive;
  cluster s*r -> non positive;
end;

registration
  let r,s be non positive (real number);
  cluster r*s -> non negative;
end;

registration
  let r,s be non negative (real number);
  cluster r*s -> non negative;
end;

registration
  let r be positive (real number);
  cluster r" -> positive;
end;

registration
  let r be non positive (real number);
  cluster r" -> non positive;
end;

registration
  let r be negative (real number);
  cluster r" -> negative;
end;

registration
  let r be non negative (real number);
  cluster r" -> non negative;
end;

registration
  let r be non negative (real number), s be non positive (real number);
  cluster r/s -> non positive;
  cluster s/r -> non positive;
end;

registration
  let r,s be non negative (real number);
  cluster r/s -> non negative;
end;

registration
  let r,s be non positive (real number);
  cluster r/s -> non negative;
end;

begin :: min & max

registration
  let r,s;
  cluster min(r,s) -> real;
  cluster max(r,s) -> real;
end;

begin

definition let r,s be real number;
 func r -' s equals
:: XREAL_0:def 2
 r - s if r -s >= 0
     otherwise 0;
end;

registration let r,s be real number;
 cluster r -' s -> real;
end;

registration let r,s be real number;
 cluster r -' s -> non negative (real number);
end;

