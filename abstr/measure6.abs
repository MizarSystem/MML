:: Some Properties of the Intervals
::  by J\'ozef Bia\las
::
:: Received February 5, 1994
:: Copyright (c) 1994 Association of Mizar Users

environ

 vocabularies FUNCT_1, RELAT_1, SUPINF_1, SUPINF_2, RLVECT_1, ORDINAL2,
      ARYTM_1, FINSEQ_1, MEASURE5, RCOMP_1, BOOLE, MEASURE6, ARYTM, MEMBERED,
      FUZZY_2, XXREAL_2, SQUARE_1, SUBSET_1, RELAT_2, TBSP_1;
 notations XBOOLE_0, ZFMISC_1, SUBSET_1, ORDINAL1, NUMBERS, XCMPLX_0, MEMBERED,
      DOMAIN_1, XREAL_0, RELAT_1, FUNCT_1, RELSET_1, FUNCT_2, REAL_1, NAT_1,
      XXREAL_0, XXREAL_1, XXREAL_2, SUPINF_1, SUPINF_2, MEASURE5;
 constructors WELLORD2, DOMAIN_1, REAL_1, NAT_1, CARD_1, SUPINF_2, MEASURE5,
      SUPINF_1, RCOMP_1, RCOMP_2;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, ORDINAL1, NUMBERS, XXREAL_0,
      XREAL_0, MEMBERED, XXREAL_1, XXREAL_2;
 requirements NUMERALS, BOOLE, SUBSET, ARITHM;


begin

::
::                   Some theorems about R_eal numbers
::

theorem :: MEASURE6:1
  ex F being Function of NAT,[:NAT,NAT:] st F is one-to-one &
  dom F = NAT & rng F = [:NAT,NAT:];

theorem :: MEASURE6:2
  for F being Function of NAT,ExtREAL holds
  F is nonnegative implies 0. <= SUM(F);

theorem :: MEASURE6:3
  for F being Function of NAT,ExtREAL holds for x being R_eal holds
  ((ex n being Element of NAT st x <= F.n) &
  F is nonnegative) implies x <= SUM(F);

canceled 4;

theorem :: MEASURE6:8
  for x,y being R_eal holds x is Real implies y - x + x = y & y + x - x = y;

canceled;

theorem :: MEASURE6:10
  for x,y,z being R_eal holds
  z in REAL implies (z + x) - (z + y) = x - y;

theorem :: MEASURE6:11
  for x,y,z being R_eal holds z in REAL & x <= y implies
  z + x <= z + y & x + z <= y + z & x - z <= y - z;

theorem :: MEASURE6:12
  for x,y,z being R_eal holds z in REAL & x < y implies
  z + x < z + y & x + z < y + z & x - z < y - z;

definition
  let x be ext-real number;
  func R_EAL x -> R_eal equals
:: MEASURE6:def 1
  x;
end;

canceled 6;

theorem :: MEASURE6:19
  for x,y being R_eal st 0. < x & x < y holds 0. < y - x;

theorem :: MEASURE6:20
  for x,y,z being R_eal holds
  0. <= x & 0. <= z & z + x < y implies z < y - x;

theorem :: MEASURE6:21
  for x being R_eal holds x - 0. = x;

theorem :: MEASURE6:22
  for x,y,z being R_eal st 0. <= x & 0. <= z & z + x < y holds z <= y;

theorem :: MEASURE6:23
  for x being R_eal st 0. < x holds ex y being R_eal st 0. < y & y < x;

theorem :: MEASURE6:24
  for x,z being R_eal st 0. < x & x < z holds
  ex y being R_eal st 0. < y & x + y < z & y in REAL;

theorem :: MEASURE6:25
  for x,z being R_eal st 0. <= x & x < z holds ex y being R_eal st
  0. < y & x + y < z & y in REAL;

theorem :: MEASURE6:26
  for x being R_eal st 0. < x holds ex y being R_eal st 0. < y & y + y < x;

definition
  let x be R_eal;
  assume
 0. < x;
  func Seg(x) -> non empty Subset of ExtREAL means
:: MEASURE6:def 2

  for y being R_eal holds y in it iff (0. < y & y + y < x);
end;

definition
  let x be R_eal;
  func len(x) -> R_eal equals
:: MEASURE6:def 3

  sup Seg(x);
end;

theorem :: MEASURE6:27
  for x being R_eal st 0. < x holds 0. < len(x);

theorem :: MEASURE6:28
  for x being R_eal st 0. < x holds len(x) <= x;

theorem :: MEASURE6:29
  for x being R_eal st 0. < x & x < +infty holds len(x) is Real;

theorem :: MEASURE6:30
  for x being R_eal st 0. < x holds len(x) + len(x) <= x;

theorem :: MEASURE6:31
  for eps being R_eal st 0. < eps ex F being Function of NAT,ExtREAL st
  (for n being Element of NAT holds 0. < F.n) & SUM(F) < eps;

theorem :: MEASURE6:32
  for eps being R_eal holds for X being non empty Subset of ExtREAL holds
  0. < eps & inf X is Real implies
  ex x being ext-real number st x in X & x < inf X + eps;

theorem :: MEASURE6:33
  for eps being R_eal holds for X being non empty Subset of ExtREAL holds
  0. < eps & sup X is Real implies
  ex x being ext-real number st x in X & sup X - eps < x;

theorem :: MEASURE6:34
  for F being Function of NAT,ExtREAL holds
  F is nonnegative & SUM(F) < +infty implies
  for n being Element of NAT holds F.n in REAL;

::
::                      PROPERTIES OF THE INTERVALS
::

registration
 cluster non empty connected Subset of REAL;
end;

canceled 3;

theorem :: MEASURE6:38
 for A being non empty Interval, a being R_eal st
  ex b being R_eal st a <= b & A = ].a,b.[
   holds a = inf A;

theorem :: MEASURE6:39
 for A being non empty Interval, a being R_eal st
  ex b being R_eal st a <= b & A = ].a,b.]
   holds a = inf A;

theorem :: MEASURE6:40
 for A being non empty Interval, a being R_eal st
  ex b being R_eal st a <= b & A = [.a,b.]
   holds a = inf A;

theorem :: MEASURE6:41
 for A being non empty Interval, a being R_eal st
  ex b being R_eal st a <= b & A = [.a,b.[
   holds a = inf A;

canceled 2;

theorem :: MEASURE6:44
 for A being non empty Interval, b being R_eal st
  ex a being R_eal st a <= b & A = ].a,b.[
  holds b = sup A;

theorem :: MEASURE6:45
 for A being non empty Interval, b being R_eal st
  ex a being R_eal st a <= b & A = ].a,b.]
  holds b = sup A;

theorem :: MEASURE6:46
 for A being non empty Interval, b being R_eal st
  ex a being R_eal st a <= b & A = [.a,b.]
  holds b = sup A;

theorem :: MEASURE6:47
 for A being non empty Interval, b being R_eal st
  ex a being R_eal st a <= b & A = [.a,b.[
  holds b = sup A;

theorem :: MEASURE6:48
  for A being non empty Interval holds
  A is open_interval implies A = ].inf A,sup A.[;

theorem :: MEASURE6:49
  for A being non empty Interval holds
  A is closed_interval implies A = [.inf A,sup A.];

theorem :: MEASURE6:50
  for A being non empty Interval holds
  A is right_open_interval implies A = [.inf A,sup A.[;

theorem :: MEASURE6:51
  for A being non empty Interval holds
  A is left_open_interval implies A = ].inf A,sup A.];

canceled 3;

theorem :: MEASURE6:55
  for A,B being non empty Interval holds
  for a,b being real number st a in A & b in B
   holds sup A <= inf B implies a <= b;

canceled 2;

theorem :: MEASURE6:58
  for A,B being non empty Interval holds
  sup A = inf B & (sup A in A or inf B in B) implies A \/ B is Interval;

definition
 canceled 2;
  let A be real-membered set;
  let x be real number;
  func x ++ A -> Subset of REAL means
:: MEASURE6:def 6

  for y being Real holds
  y in it iff ex z being Real st z in A & y = x + z;
end;

theorem :: MEASURE6:59
  for A being Subset of REAL holds for x being real number holds
  -x ++ (x ++ A) = A;

theorem :: MEASURE6:60
  for x being real number holds for A being Subset of REAL holds
  A = REAL implies x ++ A = A;

theorem :: MEASURE6:61
  for x being real number holds x ++ {} = {};

theorem :: MEASURE6:62
  for A being Interval holds for x being real number holds
  A is open_interval iff x ++ A is open_interval;

theorem :: MEASURE6:63
  for A being Interval holds for x being real number holds
  A is closed_interval iff x ++ A is closed_interval;

theorem :: MEASURE6:64
  for A being Interval holds for x being real number holds
  A is right_open_interval iff x ++ A is right_open_interval;

theorem :: MEASURE6:65
  for A being Interval holds for x being real number holds
  A is left_open_interval iff x ++ A is left_open_interval;

theorem :: MEASURE6:66
  for A being Interval holds for x being real number holds x ++ A is Interval;

registration
  let A be Interval;
  let x be real number;
  cluster x ++ A -> interval;
end;

theorem :: MEASURE6:67
 for A being real-membered set, x being real number, y being R_eal
   st x = y
  holds sup(x ++ A) = y + sup A;

theorem :: MEASURE6:68
 for A being real-membered set, x being real number, y being R_eal
  st x = y
  holds inf(x ++ A) = y + inf A;

theorem :: MEASURE6:69
  for A being Interval holds for x being real number holds
  diameter(A) = diameter(x ++ A);

