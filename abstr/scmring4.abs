:: Relocability for { \bf SCM } over Ring
::  by Artur Korni{\l}owicz and Yasunari Shidama
::
:: Received February 6, 2004
:: Copyright (c) 2004 Association of Mizar Users

environ

 vocabularies AMI_3, SCMFSA7B, FUNCSDOM, AMI_1, FINSET_1, ORDINAL2, CARD_5,
      AMI_2, GR_CY_1, BOOLE, FUNCT_1, FUNCOP_1, CAT_1, ARYTM, GOBOARD5,
      RELAT_1, AMI_5, MCART_1, FUNCT_4, SGRAPH1, TARSKI, FUNCT_7, AMISTD_2,
      REALSET1, RLVECT_1, ARYTM_1, AMISTD_1, CARD_3, RELOC, PARTFUN1;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, DOMAIN_1, ORDINAL1, FINSET_1,
      RELAT_1, NUMBERS, FUNCT_1, PARTFUN1, FUNCT_2, STRUCT_0, FUNCSDOM,
      REALSET2, FUNCOP_1, XCMPLX_0, NAT_1, RLVECT_1, CQC_LANG, FUNCT_4,
      GR_CY_1, CARD_3, FUNCT_7, GROUP_1, BINARITH, AMI_1, AMI_2, AMI_3, AMI_5,
      SCMRING1, SCMRING2, AMISTD_1, AMISTD_2, SCMRING3, XXREAL_0;
 constructors WELLORD2, DOMAIN_1, XXREAL_0, NAT_1, MEMBERED, BINARITH, FUNCT_7,
      REALSET2, AMI_5, AMISTD_2, SCMRING3;
 registrations AMI_1, RELSET_1, SCMRING1, STRUCT_0, AMISTD_2, FUNCT_1,
      FINSEQ_1, XBOOLE_0, AMI_3, NAT_1, FRAENKEL, SCMRING3, AMI_5, FUNCOP_1,
      SCMFSA_4, AMISTD_1, SETFAM_1, FINSET_1, CARD_4, CARD_3, CQC_LANG;
 requirements NUMERALS, REAL, BOOLE, SUBSET, ARITHM;


begin :: On the standard computers

reserve
  i, j, k for natural number,
  n for Element of NAT,
  N for with_non-empty_elements set,
  S for standard (IC-Ins-separated definite
        (non empty non void AMI-Struct over N)),
  l for Instruction-Location of S,
  f for FinPartState of S;

theorem :: SCMRING4:1
  NAT,the Instruction-Locations of S are_equipotent;

registration
   let N,S;
 cluster the Instruction-Locations of S -> infinite;
end;

theorem :: SCMRING4:2
  il.(S,i) + j = il.(S,i+j);

definition
  let N be with_non-empty_elements set,
      S be standard (IC-Ins-separated definite
           (non empty non void AMI-Struct over N)),
      loc be Instruction-Location of S,
      k be natural number;
 func loc -' k -> Instruction-Location of S equals
:: SCMRING4:def 1
  il.(S, (locnum loc) -' k);
end;

theorem :: SCMRING4:3
   l -' 0 = l;

theorem :: SCMRING4:4
   (locnum l) -' k = locnum (l -' k);

theorem :: SCMRING4:5
  l + k -' k = l;

theorem :: SCMRING4:6
   il.(S,i) -' j = il.(S,i-'j);

theorem :: SCMRING4:7
  for S being IC-Ins-separated definite (non empty non void AMI-Struct over N),
      p being FinPartState of S holds
  dom DataPart p c=
    (the carrier of S) \ ({IC S} \/ the Instruction-Locations of S);

theorem :: SCMRING4:8
  for S being IC-Ins-separated definite realistic
              (non empty non void AMI-Struct over N),
      p being FinPartState of S holds
  p is data-only iff
   dom p c= (the carrier of S) \ ({IC S} \/ the Instruction-Locations of S);

theorem :: SCMRING4:9
  for l1, l2 being Instruction-Location of S holds
   Start-At(l1+k) = Start-At(l2+k) iff Start-At l1 = Start-At l2;

theorem :: SCMRING4:10
  for l1, l2 being Instruction-Location of S
    st Start-At l1 = Start-At l2 holds
  Start-At(l1 -' k) = Start-At(l2 -' k);

theorem :: SCMRING4:11
  l in dom f implies Shift(f,k).(l + k) = f.l;

theorem :: SCMRING4:12
   dom Shift(f,k) =
    { il+k where il is Instruction-Location of S: il in dom f};

theorem :: SCMRING4:13
  for S being Exec-preserving IC-Ins-separated definite realistic
              steady-programmed (non empty non void AMI-Struct over N),
      s being State of S,
      i being Instruction of S,
      p being programmed FinPartState of S
   holds Exec (i, s +* p) = Exec (i,s) +* p;

begin :: SCM R

reserve
  R for good Ring,
  a, b for Data-Location of R,

  loc for Instruction-Location of SCM R,
  I for Instruction of SCM R,
  p for FinPartState of SCM R,
  s, s1, s2 for State of SCM R,
  q for FinPartState of SCM;

theorem :: SCMRING4:14
  the carrier of SCM R = {IC SCM R} \/ SCM-Data-Loc \/ SCM-Instr-Loc;

theorem :: SCMRING4:15
   ObjectKind loc = SCM-Instr R;

theorem :: SCMRING4:16
  dl.(R,n) = 2*n + 1;

theorem :: SCMRING4:17
   il.(SCM R,k) = 2*k + 2;

theorem :: SCMRING4:18
   for dl being Data-Location of R ex i being Element of NAT st dl = dl.(R,i);

theorem :: SCMRING4:19
   for i,j being Element of NAT holds i <> j implies dl.(R,i) <> dl.(R,j);

theorem :: SCMRING4:20
  a <> loc;

theorem :: SCMRING4:21
  SCM-Data-Loc c= dom s;

theorem :: SCMRING4:22
  dom (s|SCM-Data-Loc) = SCM-Data-Loc;

theorem :: SCMRING4:23
   p = q implies DataPart p = DataPart q;

theorem :: SCMRING4:24
  DataPart p = p | SCM-Data-Loc;

theorem :: SCMRING4:25
   p is data-only iff dom p c= SCM-Data-Loc;

theorem :: SCMRING4:26
  dom DataPart p c= SCM-Data-Loc;

theorem :: SCMRING4:27
   SCM-Instr-Loc c= dom s;

theorem :: SCMRING4:28
   p = q implies ProgramPart p = ProgramPart q;

theorem :: SCMRING4:29
  dom ProgramPart p c= SCM-Instr-Loc;

registration
  let R; let I be Element of the Instructions of SCM R;
  cluster InsCode I -> natural;
end;

theorem :: SCMRING4:30
  InsCode(I) <= 7;

theorem :: SCMRING4:31
  IncAddr(goto loc,k) = goto (loc + k);

theorem :: SCMRING4:32
  IncAddr(a=0_goto loc,k) = a=0_goto (loc + k);

theorem :: SCMRING4:33
  s.a = (s +* Start-At loc).a;

theorem :: SCMRING4:34
  IC(s1) = IC(s2) &
  (for a being Data-Location of R holds s1.a = s2.a) &
  (for i being Instruction-Location of SCM R holds s1.i = s2.i)
  implies s1 = s2;

theorem :: SCMRING4:35
  Exec(IncAddr(CurInstr s,k),s +* Start-At (IC s + k))
     = Following(s) +* Start-At (IC Following(s) + k);

theorem :: SCMRING4:36
  IC s = il.(SCM R,j+k) implies
   Exec(I, s +* Start-At (IC s -' k))
     = Exec(IncAddr(I, k), s) +* Start-At (IC Exec(IncAddr(I,k), s) -' k);

registration let R;
 cluster autonomic non programmed FinPartState of SCM R;
end;

definition let R;
           let a be Data-Location of R;
           let r be Element of R;
 redefine func a .--> r -> FinPartState of SCM R;
end;

theorem :: SCMRING4:37
  R is non trivial implies
  for p being autonomic FinPartState of SCM R st DataPart p <> {} holds
   IC SCM R in dom p;

theorem :: SCMRING4:38
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R holds
   IC SCM R in dom p;

theorem :: SCMRING4:39
   for p being autonomic FinPartState of SCM R st IC SCM R in dom p holds
   IC p in dom p;

theorem :: SCMRING4:40
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R st p c= s
   holds IC (Computation s).n in dom ProgramPart(p);

theorem :: SCMRING4:41
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 holds
  IC (Computation s1).n = IC (Computation s2).n &
  CurInstr ((Computation s1).n) = CurInstr ((Computation s2).n);

theorem :: SCMRING4:42
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 & CurInstr ((Computation s1).n) = a := b & a in dom p
  holds (Computation s1).n.b = (Computation s2).n.b;

theorem :: SCMRING4:43
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 &
      CurInstr ((Computation s1).n) = AddTo(a,b) & a in dom p
  holds (Computation s1).n.a + (Computation s1).n.b
      = (Computation s2).n.a + (Computation s2).n.b;

theorem :: SCMRING4:44
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 &
      CurInstr ((Computation s1).n) = SubFrom(a, b) & a in dom p
  holds (Computation s1).n.a - (Computation s1).n.b
      = (Computation s2).n.a - (Computation s2).n.b;

theorem :: SCMRING4:45
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 &
      CurInstr ((Computation s1).n) = MultBy(a, b) & a in dom p
  holds (Computation s1).n.a * (Computation s1).n.b
      = (Computation s2).n.a * (Computation s2).n.b;

theorem :: SCMRING4:46
  R is non trivial implies
  for p being autonomic non programmed FinPartState of SCM R
   st p c= s1 & p c= s2 &
      CurInstr ((Computation s1).n) = a=0_goto loc &
      loc <> Next (IC (Computation s1).n) holds
  (Computation s1).n.a = 0.R iff (Computation s2).n.a = 0.R;

begin :: Relocability

definition
  let N be with_non-empty_elements set,
      S be regular standard (IC-Ins-separated definite
           (non empty non void AMI-Struct over N)),
      k be natural number,
      p be FinPartState of S;
 func Relocated (p,k) -> FinPartState of S equals
:: SCMRING4:def 2
  Start-At ((IC p)+k) +* IncAddr(Shift(ProgramPart(p),k),k) +* DataPart p;
end;

reserve
  S for regular standard (IC-Ins-separated definite
              (non empty non void AMI-Struct over N)),
  g for FinPartState of S,
  il for Instruction-Location of S;

theorem :: SCMRING4:47
  DataPart(Relocated(g,k)) = DataPart(g);

theorem :: SCMRING4:48
  S is realistic implies
  ProgramPart(Relocated(g,k)) = IncAddr(Shift(ProgramPart(g),k),k);

theorem :: SCMRING4:49
  S is realistic implies
  dom ProgramPart(Relocated(g,k))
     = { il.(S,j+k) where j is Element of NAT :
     il.(S,j) in dom ProgramPart(g) };

theorem :: SCMRING4:50
  S is realistic implies
  (il in dom g iff il+k in dom Relocated(g,k));

theorem :: SCMRING4:51
  IC S in dom Relocated (g,k);

theorem :: SCMRING4:52
  S is realistic implies
  IC Relocated (g,k) = (IC g) + k;

theorem :: SCMRING4:53
  for p being programmed FinPartState of S,
      l being Instruction-Location of S st l in dom p holds
   IncAddr(p,k).l = IncAddr(pi(p,l),k);

theorem :: SCMRING4:54
  for p being programmed FinPartState of S holds
   Shift(IncAddr(p,i),i) = IncAddr(Shift(p,i),i);

theorem :: SCMRING4:55
  S is realistic implies
  for I being Instruction of S holds
  il in dom ProgramPart g & I = g.il implies
   IncAddr(I, k) = (Relocated (g, k)).(il + k);

theorem :: SCMRING4:56
  S is realistic implies
  Start-At (IC g + k) c= Relocated (g,k);

theorem :: SCMRING4:57
  S is realistic implies
  for q being data-only FinPartState of S st IC S in dom g holds
   Relocated((g +* q), k) = Relocated (g,k) +* q;

theorem :: SCMRING4:58
  for p being autonomic FinPartState of SCM R
   st p c= s1 & Relocated (p,k) c= s2 holds
  p c= s1 +* s2|SCM-Data-Loc;

theorem :: SCMRING4:59
  R is non trivial implies
  for p being autonomic FinPartState of SCM R
    st IC SCM R in dom p & p c= s1 & Relocated (p,k) c= s2 &
       s = s1 +* s2|SCM-Data-Loc
    holds for i being Element of NAT holds
     IC (Computation s1).i + k = IC (Computation s2).i &
     IncAddr(CurInstr((Computation s1).i), k) = CurInstr((Computation s2).i) &
     (Computation s1).i|dom (DataPart p)
          = (Computation s2).i|dom (DataPart (Relocated (p,k))) &
     (Computation s).i|SCM-Data-Loc = (Computation s2).i|SCM-Data-Loc;

theorem :: SCMRING4:60
  R is non trivial implies
  for p being autonomic FinPartState of SCM R st IC SCM R in dom p holds
   p is halting iff Relocated (p,k) is halting;

theorem :: SCMRING4:61
   R is non trivial implies
  for p being autonomic FinPartState of SCM R st IC SCM R in dom p & p c= s
  for i being Element of NAT holds
    (Computation (s +* Relocated (p,k))).i
       = (Computation s).i +* Start-At (IC (Computation s ).i + k)
        +* ProgramPart (Relocated (p,k));

theorem :: SCMRING4:62
  R is non trivial implies
  for p being autonomic FinPartState of SCM R st
   IC SCM R in dom p & Relocated(p,k) c= s holds
  for i being Element of NAT holds
    (Computation s).i
     = (Computation(s +* p)).i +* Start-At (IC(Computation(s +* p)).i + k)
       +* s|dom ProgramPart p +* ProgramPart (Relocated (p,k));

theorem :: SCMRING4:63
  R is non trivial & IC SCM R in dom p & p c= s & Relocated(p,k) is autonomic
  implies
  for i being Element of NAT holds
   (Computation s).i
    = (Computation(s +* Relocated(p,k))).i
      +* Start-At (IC(Computation(s +* Relocated(p,k))).i -' k)
      +* s|dom ProgramPart Relocated(p,k) +* ProgramPart (p);

theorem :: SCMRING4:64
  R is non trivial & IC SCM R in dom p
  implies
  (p is autonomic iff Relocated (p,k) is autonomic);

theorem :: SCMRING4:65
  R is non trivial implies
  for p being halting autonomic FinPartState of SCM R st IC SCM R in dom p
   holds
  DataPart Result p = DataPart Result Relocated(p,k);

theorem :: SCMRING4:66
   R is non trivial implies
  for F being PartFunc of FinPartSt SCM R, FinPartSt SCM R
   st IC SCM R in dom p & F is data-only holds
  p computes F iff Relocated (p,k) computes F;
