:: Normal Computers
::  by Andrzej Trybulec
::
:: Received March 3, 2008
:: Copyright (c) 2008 Association of Mizar Users

environ

 vocabularies ORDINAL2, AMI_1, ARYTM_1, ORDINAL1, AMI_2, RELOC, FUNCT_1,
      RELAT_1, FINSET_1, AMI_3;
 notations TARSKI, SETFAM_1, ORDINAL1, FINSET_1, SUBSET_1, RELAT_1, FUNCT_1,
      NUMBERS, VALUED_1, XCMPLX_0, NAT_1, BINARITH, STRUCT_0, AMI_1;
 constructors NAT_1, BINARITH, AMI_1, VALUED_1;
 registrations ORDINAL1, XREAL_0, CARD_3, FRAENKEL, AMI_1, RELSET_1, XBOOLE_0,
      SETFAM_1;
 requirements BOOLE, SUBSET, ARITHM;


begin :: The instruction locations equal to NAT, 2008.02.06, A.T.

registration let N be set, S be AMI-Struct over NAT,N;
 cluster -> natural Instruction-Location of S;
end;

notation let N be set, S be AMI-Struct over NAT,N;
 let l be Instruction-Location of S;
 synonym Next l for succ l;
end;

definition let N be set, S be AMI-Struct over NAT,N;
  let l be Instruction-Location of S;
  redefine func Next l -> Instruction-Location of S;
end;

definition let N be set, S be AMI-Struct over NAT,N;
  let l be Instruction-Location of S, k be Nat;
  redefine func l + k -> Instruction-Location of S;
  func l -' k -> Instruction-Location of S;
end;

reserve m,j for Element of NAT;

definition
 let N be with_non-empty_elements set,
 S be definite (stored-program non empty AMI-Struct over NAT,N);
  let p be FinPartState of S , k be Element of NAT;
  redefine func Shift(p,k) -> FinPartState of S;
end;

registration
 let N be with_non-empty_elements set,
 S be definite (stored-program non empty AMI-Struct over NAT,N);
  let p be programmed FinPartState of S , k be Element of NAT;
  cluster Shift(p,k) -> programmed FinPartState of S;
end;
