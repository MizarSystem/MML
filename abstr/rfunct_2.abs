:: Properties of Real Functions
::  by Jaros{\l}aw Kotowicz
::
:: Received June 18, 1990
:: Copyright (c) 1990-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, SEQ_1, ORDINAL2, NAT_1, PARTFUN1, ARYTM_1,
      FUNCT_1, ARYTM_3, RELAT_1, VALUED_1, COMPLEX1, SEQ_2, XXREAL_0, CARD_1,
      REAL_1, TARSKI, XBOOLE_0, FUNCT_2, XREAL_0, ORDINAL1, ORDINAL4, VALUED_0,
      XXREAL_2, SEQ_4, SEQM_3, ZFMISC_1, XXREAL_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, NUMBERS, XREAL_0, COMPLEX1,
      REAL_1, NAT_1, RELAT_1, FUNCT_1, FUNCT_2, ZFMISC_1, RELSET_1, PARTFUN1,
      VALUED_0, VALUED_1, SEQ_1, SEQ_2, SEQ_4, PARTFUN2, RCOMP_1, RFUNCT_1,
      XXREAL_0, XXREAL_2, RECDEF_1;
 constructors PARTFUN1, REAL_1, NAT_1, COMPLEX1, SEQ_2, SEQM_3, SEQ_4, RCOMP_1,
      PARTFUN2, RFUNCT_1, VALUED_1, SEQ_1, RECDEF_1, XXREAL_2, ZFMISC_1,
      RELSET_1;
 registrations FUNCT_1, ORDINAL1, RELSET_1, NUMBERS, XREAL_0, MEMBERED,
      VALUED_0, VALUED_1, FUNCT_2, ZFMISC_1;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

reserve x,X,Y for set;
reserve g,r,r1,r2,p,p1,p2 for Element of REAL;
reserve R for Subset of REAL;
reserve seq,seq1,seq2,seq3 for Real_Sequence;
reserve Ns for increasing sequence of NAT;
reserve n for Element of NAT;
reserve h,h1,h2 for PartFunc of REAL,REAL;

::
:: REAL SEQUENCES
::

theorem :: RFUNCT_2:1
  seq1=seq2-seq3 iff for n holds seq1.n=seq2.n-seq3.n;

theorem :: RFUNCT_2:2
  (seq1 + seq2)*Ns = (seq1*Ns) + (seq2*Ns) & (seq1 - seq2)*Ns = (
  seq1*Ns) - (seq2*Ns) & (seq1 (#) seq2)*Ns = (seq1*Ns) (#) (seq2*Ns);

theorem :: RFUNCT_2:3
  (p(#)seq)*Ns = p(#)(seq*Ns);

theorem :: RFUNCT_2:4
  (-seq)*Ns = -(seq*Ns) & (abs(seq))*Ns = abs((seq*Ns));

theorem :: RFUNCT_2:5
  (seq*Ns)" = (seq")*Ns;

theorem :: RFUNCT_2:6
  (seq1/"seq)*Ns = (seq1*Ns)/"(seq*Ns);

theorem :: RFUNCT_2:7
  seq is convergent & (for n holds seq.n<=0) implies lim seq <= 0;

theorem :: RFUNCT_2:8
  rng seq c= dom h1 /\ dom h2 implies (h1+h2)/*seq=h1/*seq+h2/*seq
  & (h1-h2)/*seq=h1/*seq-h2/*seq & (h1(#)h2)/*seq=(h1/*seq)(#)(h2/*seq);

theorem :: RFUNCT_2:9
  for r being real number holds rng seq c= dom h implies (r(#)h)/*
  seq = r(#) (h/*seq);

theorem :: RFUNCT_2:10
  rng seq c= dom h implies abs(h/*seq) = (abs(h))/*seq & -(h/*seq) = (-h )/*seq
;

theorem :: RFUNCT_2:11
  rng seq c= dom (h^) implies h/*seq is non-zero;

theorem :: RFUNCT_2:12
  rng seq c= dom (h^) implies (h^)/*seq =(h/*seq)";

theorem :: RFUNCT_2:13
  h1 is total & h2 is total implies (h1+h2)/*seq = h1/*seq + h2/*seq & (
  h1-h2)/*seq = h1/*seq - h2/*seq & (h1(#)h2)/*seq = (h1/*seq) (#) (h2/*seq);

theorem :: RFUNCT_2:14
  h is total implies (r(#)h)/*seq = r(#)(h/*seq);

theorem :: RFUNCT_2:15
  rng seq c= dom (h|X) implies abs((h|X)/*seq) = ((abs(h))|X)/*seq;

theorem :: RFUNCT_2:16
  rng seq c= dom (h|X) & h"{0}={} implies ((h^)|X)/*seq = ((h|X)/*seq)";

::
:: MONOTONE FUNCTIONS
::

registration
  let Z be set;
  let f be one-to-one Function;
  cluster f|Z -> one-to-one;
end;

theorem :: RFUNCT_2:17
  for h being one-to-one Function holds (h|X)" = (h")|(h.:X);

theorem :: RFUNCT_2:18
  rng h is bounded & upper_bound (rng h) = lower_bound (rng h)
  implies h is constant;

theorem :: RFUNCT_2:19
  h.:Y is bounded & upper_bound(h.:Y) = lower_bound(h.:Y) implies h|Y is
  constant;

reserve e1,e2 for ext-real number;

definition

  let h;
  redefine attr h is increasing means
:: RFUNCT_2:def 1

  for r1,r2 st r1 in dom h & r2 in dom h & r1<r2 holds h.r1 < h.r2;
  redefine attr h is decreasing means
:: RFUNCT_2:def 2

  for r1,r2 st r1 in dom h & r2 in dom h & r1<r2 holds h.r2 < h.r1;
  redefine attr h is non-decreasing means
:: RFUNCT_2:def 3

  for r1,r2 st r1 in dom h & r2 in dom h & r1<r2 holds h.r1 <= h.r2;
  redefine attr h is non-increasing means
:: RFUNCT_2:def 4

  for r1,r2 st r1 in dom h & r2 in dom h & r1<r2 holds h.r2 <= h.r1;
end;

theorem :: RFUNCT_2:20
  h|Y is increasing iff for r1,r2 st r1 in Y /\ dom h & r2 in Y /\
  dom h & r1<r2 holds h.r1 < h.r2;

theorem :: RFUNCT_2:21
  h|Y is decreasing iff for r1,r2 st r1 in Y /\ dom h & r2 in Y /\
  dom h & r1<r2 holds h.r2 < h.r1;

theorem :: RFUNCT_2:22
  h|Y is non-decreasing iff for r1,r2 st r1 in Y /\ dom h & r2 in
  Y /\ dom h & r1<r2 holds h.r1 <= h.r2;

theorem :: RFUNCT_2:23
  h|Y is non-increasing iff for r1,r2 st r1 in Y /\ dom h & r2 in
  Y /\ dom h & r1<r2 holds h.r2 <= h.r1;

definition
  let h;
  attr h is monotone means
:: RFUNCT_2:def 5

  h is non-decreasing or h is non-increasing;
end;

registration
  cluster non-decreasing -> monotone for PartFunc of REAL,REAL;
  cluster non-increasing -> monotone for PartFunc of REAL,REAL;
  cluster non monotone -> non non-decreasing non non-increasing for PartFunc of
    REAL,REAL;
end;

theorem :: RFUNCT_2:24
  h|Y is non-decreasing iff for r1,r2 st r1 in Y /\ dom h & r2 in
  Y /\ dom h & r1<=r2 holds h.r1 <= h.r2;

theorem :: RFUNCT_2:25
  h|Y is non-increasing iff for r1,r2 st r1 in Y /\ dom h & r2 in
  Y /\ dom h & r1<=r2 holds h.r2 <= h.r1;

registration
  cluster non-decreasing non-increasing -> constant for PartFunc of REAL,REAL;
end;

registration
  cluster constant -> non-increasing non-decreasing for PartFunc of REAL,REAL;
end;

registration
  cluster trivial for PartFunc of REAL,REAL;
end;

registration
  let h be increasing PartFunc of REAL,REAL, X be set;
  cluster h|X -> increasing for PartFunc of REAL,REAL;
end;

registration
  let h be decreasing PartFunc of REAL,REAL, X be set;
  cluster h|X -> decreasing for PartFunc of REAL,REAL;
end;

registration
  let h be non-decreasing PartFunc of REAL,REAL, X be set;
  cluster h|X -> non-decreasing for PartFunc of REAL,REAL;
end;

theorem :: RFUNCT_2:26
  Y misses dom h implies h|Y is increasing & h|Y is decreasing & h|Y is
  non-decreasing & h|Y is non-increasing & h|Y is monotone;

theorem :: RFUNCT_2:27
  h|Y is non-decreasing & h|X is non-increasing implies h|(Y /\ X) is constant;

theorem :: RFUNCT_2:28
  X c= Y & h|Y is increasing implies h|X is increasing;

theorem :: RFUNCT_2:29
  X c= Y & h|Y is decreasing implies h|X is decreasing;

theorem :: RFUNCT_2:30
  X c= Y & h|Y is non-decreasing implies h|X is non-decreasing;

theorem :: RFUNCT_2:31
  X c= Y & h|Y is non-increasing implies h|X is non-increasing;

theorem :: RFUNCT_2:32
  (h|Y is increasing & 0<r implies (r(#)h)|Y is increasing) & (r =
  0 implies (r(#)h)|Y is constant) & (h|Y is increasing & r<0 implies (r(#)h)|Y
  is decreasing);

theorem :: RFUNCT_2:33
  (h|Y is decreasing & 0<r implies (r(#)h)|Y is decreasing) & (h|Y is
  decreasing & r<0 implies (r(#)h)|Y is increasing);

theorem :: RFUNCT_2:34
  (h|Y is non-decreasing & 0<=r implies (r(#)h)|Y is
  non-decreasing) & (h|Y is non-decreasing & r<=0 implies (r(#)h)|Y is
  non-increasing);

theorem :: RFUNCT_2:35
  (h|Y is non-increasing & 0<=r implies (r(#)h)|Y is non-increasing) & (
  h|Y is non-increasing & r<=0 implies (r(#)h)|Y is non-decreasing);

theorem :: RFUNCT_2:36
  r in X /\ Y /\ dom (h1+h2) implies r in X /\ dom h1 & r in Y /\ dom h2;

theorem :: RFUNCT_2:37
  (h1|X is increasing & h2|Y is increasing implies (h1+h2)|(X /\ Y) is
increasing) & (h1|X is decreasing & h2|Y is decreasing implies (h1+h2)|(X /\ Y)
is decreasing) & (h1|X is non-decreasing & h2|Y is non-decreasing implies (h1+
  h2)|(X /\ Y) is non-decreasing) & (h1|X is non-increasing & h2|Y is
  non-increasing implies (h1+h2)|(X /\ Y) is non-increasing);

theorem :: RFUNCT_2:38
  (h1|X is increasing & h2|Y is constant implies (h1+h2)|(X /\ Y) is
  increasing) & (h1|X is decreasing & h2|Y is constant implies (h1+h2)|(X /\ Y)
  is decreasing);

theorem :: RFUNCT_2:39
  h1|X is increasing & h2|Y is non-decreasing implies (h1+h2)|(X /\ Y)
  is increasing;

theorem :: RFUNCT_2:40
  h1|X is non-increasing & h2|Y is constant implies (h1+h2)|(X /\ Y) is
  non-increasing;

theorem :: RFUNCT_2:41
  h1|X is decreasing & h2|Y is non-increasing implies (h1+h2)|(X /\ Y)
  is decreasing;

theorem :: RFUNCT_2:42
  h1|X is non-decreasing & h2|Y is constant implies (h1+h2)|(X /\ Y) is
  non-decreasing;

theorem :: RFUNCT_2:43
  h|{x} is non-increasing;

theorem :: RFUNCT_2:44
  h|{x} is decreasing;

theorem :: RFUNCT_2:45
  h|{x} is non-decreasing;

theorem :: RFUNCT_2:46
  h|{x} is non-increasing;

theorem :: RFUNCT_2:47
  (id R)|R is increasing;

theorem :: RFUNCT_2:48
  h|X is increasing implies (-h)|X is decreasing;

theorem :: RFUNCT_2:49
  h|X is non-decreasing implies (-h)|X is non-increasing;

theorem :: RFUNCT_2:50
  (h|[.p,g.] is increasing or h|[.p,g.] is decreasing) implies h|[.p,g.]
  is one-to-one;

theorem :: RFUNCT_2:51
  for h being one-to-one PartFunc of REAL, REAL st h|[.p,g.] is
  increasing holds (h|[.p,g.])"|(h.:[.p,g.]) is increasing;

theorem :: RFUNCT_2:52
  for h being one-to-one PartFunc of REAL, REAL st h|[.p,g.] is
  decreasing holds (h|[.p,g.])"|(h.:[.p,g.]) is decreasing;
