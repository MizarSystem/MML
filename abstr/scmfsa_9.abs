:: While Macro Instructions of SCM+FSA
::  by Jing-Chao Chen
::
:: Received December 10, 1997
:: Copyright (c) 1997 Association of Mizar Users

environ

 vocabularies NUMBERS, AMI_1, SCMFSA_2, CARD_1, SCMFSA8B, TURING_1, SCMFSA8A,
      AMISTD_2, ARYTM_3, SUBSET_1, FUNCT_4, FUNCOP_1, AMI_3, RELAT_1, TARSKI,
      XBOOLE_0, CAT_1, NAT_1, SCMFSA6A, FUNCT_1, XXREAL_0, VALUED_1, CARD_3,
      ARYTM_1, FSM_1, SF_MASTR, SCMFSA7B, UNIALG_2, CIRCUIT2, GRAPHSP,
      SCMFSA6B, SCMFSA_9, PBOOLE, ORDINAL1, PARTFUN1, SCMNORM, RELOC;
 notations TARSKI, XBOOLE_0, SUBSET_1, CARD_1, NUMBERS, XCMPLX_0, RELAT_1,
      FUNCT_1, FUNCT_2, PARTFUN1, AFINSQ_1, FUNCT_4, CARD_3, AMI_1, VALUED_1,
      NAT_1, PBOOLE, SCMNORM, SCMFSA_2, SCMFSA_4, SCMFSA_5, SCMFSA6A, SF_MASTR,
      SCMFSA6B, SCMFSA7B, SCMFSA8A, SCMFSA8B, XXREAL_0;
 constructors XXREAL_0, NAT_1, SEQ_1, SCMFSA_5, SCMFSA6A, SF_MASTR, SCMFSA6B,
      SCMFSA8A, SCMFSA8B, SCMNORM, SCMFSA_4, RELSET_1, PRE_POLY, SCMFSA_7,
      COMPLEX1, PBOOLE, AFINSQ_1;
 registrations SETFAM_1, FUNCT_1, RELSET_1, NUMBERS, XREAL_0, NAT_1, INT_1,
      CARD_3, SCMFSA_2, SF_MASTR, SCMFSA6B, SCMFSA7B, SCMFSA8A, ORDINAL1,
      XBOOLE_0, SCMNORM, FINSET_1, VALUED_1, AMI_1, FUNCT_4, RELAT_1, GRFUNC_1,
      PBOOLE, FRAENKEL, FUNCT_2, XXREAL_0, VALUED_0, AFINSQ_1, FUNCOP_1;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

theorem :: SCMFSA_9:1
  for I being Program of SCM+FSA, a being Int-Location holds card
  if=0(a, I ';' Goto  0, Stop SCM+FSA) = card I + 6;

theorem :: SCMFSA_9:2
  for I being Program of SCM+FSA, a being Int-Location holds card
  if>0(a, I ';' Goto  0, Stop SCM+FSA) = card I + 6;

:: WHILE  Statement

reserve m, n for Element of NAT;

definition
  let a be Int-Location;
  let I be Program of SCM+FSA;
  func while=0(a,I) -> Program of SCM+FSA equals
:: SCMFSA_9:def 1
  if=0(a, I ';' Goto  0,
  Stop SCM+FSA) +* (  (card I +4) .--> goto  0 );
  func while>0(a,I) -> Program of SCM+FSA equals
:: SCMFSA_9:def 2
  if>0(a, I ';' Goto  0,
  Stop SCM+FSA) +* (  (card I +4) .--> goto  0 );
end;

theorem :: SCMFSA_9:3
  for I being Program of SCM+FSA, a being Int-Location holds card
  if=0(a,Stop SCM+FSA,if>0(a,Stop SCM+FSA,I ';' Goto  0)) = card I + 11;

definition
  let a be Int-Location;
  let I be Program of SCM+FSA;
  func while<0(a,I) -> Program of SCM+FSA equals
:: SCMFSA_9:def 3
  if=0(a,Stop SCM+FSA,if>0(a,
Stop SCM+FSA,I ';' Goto  0)) +* (  (card I +4) .--> goto  0 )
  ;
end;

theorem :: SCMFSA_9:4
  for I being Program of SCM+FSA, a being Int-Location holds card
  while=0(a,I) = card I + 6;

theorem :: SCMFSA_9:5
  for I being Program of SCM+FSA, a being Int-Location holds card
  while>0(a,I) = card I + 6;

theorem :: SCMFSA_9:6
  for I being Program of SCM+FSA, a being Int-Location holds card
  while<0(a,I) = card I + 11;

theorem :: SCMFSA_9:7
  for a being Int-Location, l being Element of NAT
  holds a =0_goto l <> halt SCM+FSA;

theorem :: SCMFSA_9:8
  for a being Int-Location, l being Element of NAT
  holds a >0_goto l <> halt SCM+FSA;

theorem :: SCMFSA_9:9
  for l being Element of NAT holds goto l <> halt
  SCM+FSA;

theorem :: SCMFSA_9:10
  for a being Int-Location, I being Program of SCM+FSA holds
   0 in dom while=0(a,I) &  1 in dom while=0(a,I) &  0 in dom
  while>0(a,I) &  1 in dom while>0(a,I);

theorem :: SCMFSA_9:11
  for a being Int-Location, I being Program of SCM+FSA holds
  while=0(a,I). 0 = a =0_goto  4 & while=0(a,I). 1 = goto
 2 & while>0(a,I). 0 = a >0_goto  4 & while>0(a,I). 1 =
  goto  2;

theorem :: SCMFSA_9:12
  for a being Int-Location, I being Program of SCM+FSA, k being
  Element of NAT st k < 6 holds  k in dom while=0(a,I);

theorem :: SCMFSA_9:13
  for a being Int-Location, I being Program of SCM+FSA, k being
  Element of NAT st k < 6 holds card I +k in dom while=0(a,I);

theorem :: SCMFSA_9:14
  for a being Int-Location, I being Program of SCM+FSA holds
  while=0(a,I).(card I +5) = halt SCM+FSA;

theorem :: SCMFSA_9:15
  for a being Int-Location, I being Program of SCM+FSA holds
  while=0(a,I). 3 = goto  (card I +5);

theorem :: SCMFSA_9:16
  for a being Int-Location, I being Program of SCM+FSA holds
  while=0(a,I). 2 = goto  3;

theorem :: SCMFSA_9:17
  for a being Int-Location, I being Program of SCM+FSA,k being Element
  of NAT st k < card I +6 holds  k in dom while=0(a,I);

theorem :: SCMFSA_9:18
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being read-write Int-Location st s.a <> 0 holds while=0(a,I) is_halting_on s &
  while=0(a,I) is_closed_on s;

theorem :: SCMFSA_9:19
  for a being Int-Location, I being Program of SCM+FSA, s being
State of SCM+FSA,k being Element of NAT st I is_closed_on s & I is_halting_on s
& k < LifeSpan(ProgramPart(s +* (I +* Start-At( 0,SCM+FSA))),s +* (I +*
Start-At( 0,SCM+FSA))) &
IC Comput(ProgramPart( (s +* (while=0
  (a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while=0
  (a,I) +* Start-At( 0,SCM+FSA))),1+k) = IC Comput(ProgramPart( (s +* (
  I +* Start-At(
   0,SCM+FSA)))), (s +* (
  I +* Start-At(
   0,SCM+FSA))),k) + 4 & DataPart Comput(ProgramPart( (s +* (while=0(a,I) +*
  Start-At(
   0,SCM+FSA)))), (s +* (while=0(a,I) +*
  Start-At(
   0,SCM+FSA))),1+k) = DataPart Comput(ProgramPart( (s +* ( I +*
  Start-At( 0,SCM+FSA)))), (s +* ( I +*
  Start-At( 0,SCM+FSA))),k)
  holds IC Comput(ProgramPart( (s +* (while=0(a,I) +*
  Start-At( 0,SCM+FSA)))), (s +* (while=0(a,I) +*
  Start-At( 0,SCM+FSA))),1+k+1) = IC
Comput(ProgramPart( (s +* (I +* Start-At( 0,SCM+FSA)))), (s +* (I +* Start-At(
0,SCM+FSA))),k+1) + 4 &
DataPart Comput(ProgramPart( (
s +* (while=0(a,I) +* Start-At( 0,SCM+FSA)))), (
s +* (while=0(a,I) +* Start-At( 0,SCM+FSA))),1+k+1) =
DataPart Comput(ProgramPart( (s +*
  (I +* Start-At( 0,SCM+FSA)))), (s +*
  (I +* Start-At( 0,SCM+FSA))),k+1);

theorem :: SCMFSA_9:20
  for a being Int-Location, I being Program of SCM+FSA, s being
  State of SCM+FSA st I is_closed_on s & I is_halting_on s & IC Comput(
ProgramPart( (s
  +* (while=0(a,I) +* Start-At( 0,SCM+FSA)))), (s
  +* (while=0(a,I) +* Start-At( 0,SCM+FSA))),(1 + LifeSpan(ProgramPart(s +*
  (I +* Start-At(
 0,SCM+FSA))),s +*
  (I +* Start-At(
 0,SCM+FSA))) ) ) =
IC Comput(ProgramPart( (s +* ( I +* Start-At( 0,SCM+FSA)))), (s +* ( I +*
Start-At( 0,SCM+FSA))),
LifeSpan(ProgramPart(s
+* (I +* Start-At( 0,SCM+FSA) )),s
+* (I +* Start-At( 0,SCM+FSA) )) ) + 4
holds CurInstr(ProgramPart Comput(ProgramPart( (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA))),(1 + LifeSpan(ProgramPart(s +* (I +*
  Start-At( 0,SCM+FSA))),s +* (I +*
  Start-At( 0,SCM+FSA))))),
   Comput(ProgramPart( (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA))),(1 + LifeSpan(ProgramPart(s +* (I +*
  Start-At( 0,SCM+FSA))),s +* (I +*
  Start-At( 0,SCM+FSA)))))) =
  goto  (card I +4);

theorem :: SCMFSA_9:21
  for a being Int-Location, I being Program of SCM+FSA holds
  while=0(a,I). (card I +4) = goto  0;

reserve f for FinSeq-Location,
  c for Int-Location;

theorem :: SCMFSA_9:22
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being read-write Int-Location st I is_closed_on s & I is_halting_on s & s.a =0
holds IC Comput(ProgramPart( (s +* (while=0(a,I) +* Start-At( 0,SCM+FSA)))), (s
+* (while=0(a,I) +* Start-At( 0,SCM+FSA))),
(LifeSpan(ProgramPart(s
+* (I +* Start-At( 0,SCM+FSA))),s
+* (I +* Start-At( 0,SCM+FSA))) + 3)) =  0 &
for k being Element of NAT st k
  <= LifeSpan(ProgramPart(s +* (I +* Start-At( 0,SCM+FSA))),s +* (I +* Start-At
( 0,SCM+FSA))) + 3
  holds IC Comput(ProgramPart( (s +* (
  while=0(a,I) +* Start-At( 0,SCM+FSA)))), (s +* (
  while=0(a,I) +* Start-At( 0,SCM+FSA))),k) in dom while=0(a,I);

reserve s for State of SCM+FSA,
  I for Program of SCM+FSA,
  a for read-write
  Int-Location;

definition
  let s,I,a;
  func StepWhile=0(a,I,s) -> Function of NAT,product the Object-Kind of
  SCM+FSA means
:: SCMFSA_9:def 4

  it.0 = s & for i being Nat holds it.(i+1)= Comput(ProgramPart( (
  it.i +* (while=0(a,I) +* (Start-At( 0,SCM+FSA))))), (
  it.i +* (while=0(a,I) +* (Start-At( 0,SCM+FSA)))),
  (LifeSpan(ProgramPart(it.i +* (I +* (
  Start-At( 0,SCM+FSA)))),it.i +* (I +* (
  Start-At( 0,SCM+FSA)))) + 3));
end;

reserve i,k,m,n for Element of NAT;

canceled 2;

theorem :: SCMFSA_9:25
  StepWhile=0(a,I,s).(k+1)=StepWhile=0(a,I,StepWhile=0(a,I,s).k).1;

canceled 3;

theorem :: SCMFSA_9:29
  for s1,s2 being State of SCM+FSA st IC s1 = IC s2 & DataPart s1
  = DataPart s2 & s1 | NAT = s2 | NAT holds s1 = s2;

theorem :: SCMFSA_9:30
  for I being Program of SCM+FSA,a being read-write Int-Location,
  s being State of SCM+FSA holds StepWhile=0(a,I,s).(0+1)= Comput(ProgramPart(
(s +* (
while=0(a,I) +* (Start-At( 0,SCM+FSA)) ))), (s +* (
while=0(a,I) +* (Start-At( 0,SCM+FSA)) )),(LifeSpan(ProgramPart(s+* (I +*
(Start-At( 0,SCM+FSA))
  )),s+* (I +*
(Start-At( 0,SCM+FSA))
  )) + 3));

theorem :: SCMFSA_9:31
  for I being Program of SCM+FSA,a being read-write Int-Location,
s being State of SCM+FSA,k,n being Element of NAT st IC StepWhile=0(a,I,s).k =
   0 & StepWhile=0(a,I,s).k= Comput(ProgramPart( (s +* (while=0(a,I) +*
  Start-At(
 0,SCM+FSA)))), (s +* (while=0(a,I) +*
  Start-At(
 0,SCM+FSA))),n) holds StepWhile=0(a,I,s).k =
StepWhile=0(a,I,s).k +* (while=0(a,I
)+* Start-At( 0,SCM+FSA)) & StepWhile=0(a,I,s).(k+1)=
Comput(ProgramPart( (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while=0(
  a,I) +* Start-At( 0,SCM+FSA))), (n +(LifeSpan(ProgramPart(StepWhile=0(a,I,s).
k
   +* (I +*
  Start-At( 0,SCM+FSA))),StepWhile=0(a,I,s).k
   +* (I +*
  Start-At( 0,SCM+FSA))) + 3)));

theorem :: SCMFSA_9:32
  for I being Program of SCM+FSA,a being read-write Int-Location,
s being State of SCM+FSA st (for k being Nat holds I is_closed_on StepWhile=0(a
  ,I,s).k & I is_halting_on StepWhile=0(a,I,s).k) & ex f being Function of
  product the Object-Kind of SCM+FSA,NAT st (for k being Nat holds (f.(
StepWhile=0(a,I,s).(k+1)) < f.(StepWhile=0(a,I,s).k) or f.(StepWhile=0(a,I,s).k
  ) = 0) & ( f.(StepWhile=0(a,I,s).k)=0 iff (StepWhile=0(a,I,s).k).a <> 0 ) )
  holds while=0(a,I) is_halting_on s & while=0(a,I) is_closed_on s;

theorem :: SCMFSA_9:33
  for I being parahalting Program of SCM+FSA, a being read-write
  Int-Location, s being State of SCM+FSA st ex f being Function of product the
Object-Kind of SCM+FSA,NAT st (for k being Nat holds (f.(StepWhile=0(a,I,s).(k+
  1)) < f.(StepWhile=0(a,I,s).k) or f.(StepWhile=0(a,I,s).k) = 0) & ( f.(
StepWhile=0(a,I,s).k)=0 iff (StepWhile=0(a,I,s).k).a <> 0 ) ) holds while=0(a,I
  ) is_halting_on s & while=0(a,I) is_closed_on s;

theorem :: SCMFSA_9:34
  for I being parahalting Program of SCM+FSA, a being read-write
  Int-Location st ex f being Function of product the Object-Kind of SCM+FSA,NAT
st (for s being State of SCM+FSA holds (f.(StepWhile=0(a,I,s).1) < f.s or f.s =
  0) & ( f.s =0 iff s.a <> 0 )) holds while=0(a,I) is parahalting;

theorem :: SCMFSA_9:35
  for l1,l2 being Element of NAT,a being
  Int-Location holds (l1 .--> goto l2) does_not_destroy a;

theorem :: SCMFSA_9:36
  for i being Instruction of SCM+FSA st i does_not_destroy intloc
  0 holds Macro i is good;

registration
  let I,J be good Program of SCM+FSA,a be Int-Location;
  cluster if=0(a,I,J) -> good;
end;

registration
  let I be good Program of SCM+FSA,a be Int-Location;
  cluster while=0(a,I) -> good;
end;

:: -----------------------------------------------------------
:: WHILE>0  Statement

theorem :: SCMFSA_9:37
  for a being Int-Location, I being Program of SCM+FSA, k being
  Element of NAT st k < 6 holds  k in dom while>0(a,I);

theorem :: SCMFSA_9:38
  for a being Int-Location, I being Program of SCM+FSA, k being
  Element of NAT st k < 6 holds card I +k in dom while>0(a,I);

theorem :: SCMFSA_9:39
  for a being Int-Location, I being Program of SCM+FSA holds
  while>0(a,I).(card I+5) = halt SCM+FSA;

theorem :: SCMFSA_9:40
  for a being Int-Location, I being Program of SCM+FSA holds
  while>0(a,I). 3 = goto  (card I +5);

theorem :: SCMFSA_9:41
  for a being Int-Location, I being Program of SCM+FSA holds
  while>0(a,I). 2 = goto  3;

theorem :: SCMFSA_9:42
  for a being Int-Location, I being Program of SCM+FSA, k being Element
  of NAT st k < card I +6 holds  k in dom while>0(a,I);

theorem :: SCMFSA_9:43
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being read-write Int-Location st s.a <= 0 holds while>0(a,I) is_halting_on s &
  while>0(a,I) is_closed_on s;

theorem :: SCMFSA_9:44
  for a being Int-Location, I being Program of SCM+FSA, s being
State of SCM+FSA,k being Element of NAT st I is_closed_on s & I is_halting_on s
& k < LifeSpan(ProgramPart(s +* (I +* Start-At( 0,SCM+FSA))),s +* (I +*
Start-At( 0,SCM+FSA))) &
IC Comput(ProgramPart( (s +* (while>0
  (a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while>0
  (a,I) +* Start-At( 0,SCM+FSA))),1+k) = IC Comput(ProgramPart( (s +* ( I +*
  Start-At(
   0,SCM+FSA)))), (s +* ( I +*
  Start-At(
   0,SCM+FSA))),k) + 4 & DataPart Comput(ProgramPart( (s +* (while>0(a,I) +*
  Start-At(
   0,SCM+FSA)))), (s +* (while>0(a,I) +*
  Start-At(
   0,SCM+FSA))),1+k) = DataPart Comput(ProgramPart( (s +* ( I +*
  Start-At( 0,SCM+FSA)))), (s +* ( I +*
  Start-At( 0,SCM+FSA))),k)
  holds IC Comput(ProgramPart( (s +* (while>0(a,I) +*
  Start-At( 0,SCM+FSA)))), (s +* (while>0(a,I) +*
  Start-At( 0,SCM+FSA))),1+k+1) = IC
Comput(ProgramPart( (s +* (I +* Start-At( 0,SCM+FSA)))), (s +* (I +* Start-At(
0,SCM+FSA))),k+1) + 4 &
DataPart Comput(ProgramPart( (
s +* (while>0(a,I) +* Start-At( 0,SCM+FSA)))), (
s +* (while>0(a,I) +* Start-At( 0,SCM+FSA))),1+k+1) =
DataPart Comput(ProgramPart( (s +*
  (I +* Start-At( 0,SCM+FSA)))), (s +*
  (I +* Start-At( 0,SCM+FSA))),k+1);

theorem :: SCMFSA_9:45
  for a being Int-Location, I being Program of SCM+FSA, s being
  State of SCM+FSA st I is_closed_on s & I is_halting_on s & IC Comput(
ProgramPart( (s
  +* (while>0(a,I) +* Start-At( 0,SCM+FSA)))), (s
  +* (while>0(a,I) +* Start-At( 0,SCM+FSA))),1 + LifeSpan(ProgramPart(s +*
  (I +* Start-At(
 0,SCM+FSA)) ),s +*
  (I +* Start-At(
 0,SCM+FSA)) ) ) =
IC Comput(ProgramPart( (s +* ( I +* Start-At( 0,SCM+FSA)))), (s +* ( I +*
Start-At( 0,SCM+FSA))),
LifeSpan(ProgramPart(s
+* (I +* Start-At( 0,SCM+FSA) )),s
+* (I +* Start-At( 0,SCM+FSA) ))) + 4
holds CurInstr(ProgramPart Comput(ProgramPart( (s +* (while>0(a
  ,I) +* Start-At( 0,SCM+FSA)))), (s +* (while>0(a
  ,I) +* Start-At( 0,SCM+FSA))),1 + LifeSpan(ProgramPart(s +* (I +*
  Start-At( 0,SCM+FSA))),s +* (I +*
  Start-At( 0,SCM+FSA))) ),
   Comput(ProgramPart( (s +* (while>0(a
  ,I) +* Start-At( 0,SCM+FSA)))), (s +* (while>0(a
  ,I) +* Start-At( 0,SCM+FSA))),1 + LifeSpan(ProgramPart(s +* (I +*
  Start-At( 0,SCM+FSA))),s +* (I +*
  Start-At( 0,SCM+FSA))) )) =
  goto  (card I +4);

theorem :: SCMFSA_9:46
  for a being Int-Location, I being Program of SCM+FSA holds
  while>0(a,I). (card I +4) = goto  0;

theorem :: SCMFSA_9:47
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being read-write Int-Location st I is_closed_on s & I is_halting_on s & s.a >0
holds IC Comput(ProgramPart( (s +* (while>0(a,I) +* Start-At( 0,SCM+FSA)))), (s
+* (while>0(a,I) +* Start-At( 0,SCM+FSA))),
(LifeSpan(ProgramPart(s
+* (I +* Start-At( 0,SCM+FSA))),s
+* (I +* Start-At( 0,SCM+FSA))) + 3)) =  0 &
for k being Element of NAT st k
  <= LifeSpan(ProgramPart(s +* (I +* Start-At( 0,SCM+FSA))),s +* (I +* Start-At
( 0,SCM+FSA))) + 3
  holds IC Comput(ProgramPart( (s +* (
  while>0(a,I) +* Start-At( 0,SCM+FSA)))), (s +* (
  while>0(a,I) +* Start-At( 0,SCM+FSA))),k) in dom while>0(a,I);

reserve s for State of SCM+FSA,
  I for Program of SCM+FSA,
  a for read-write
  Int-Location;

definition
  let s,I,a;
  func StepWhile>0(a,I,s) -> Function of NAT,product the Object-Kind of
  SCM+FSA means
:: SCMFSA_9:def 5

  it.0 = s & for i being Nat holds it.(i+1)= Comput(ProgramPart( (
  it.i +* (while>0(a,I) +*(Start-At( 0,SCM+FSA))))), (
  it.i +* (while>0(a,I) +*(Start-At( 0,SCM+FSA)))),
  (LifeSpan(ProgramPart(it.i +* (I +* (
  Start-At( 0,SCM+FSA)))),it.i +* (I +* (
  Start-At( 0,SCM+FSA)))) + 3));
end;

canceled 2;

theorem :: SCMFSA_9:50
  StepWhile>0(a,I,s).(k+1)=StepWhile>0(a,I,StepWhile>0(a,I,s).k).1;

theorem :: SCMFSA_9:51
  for I being Program of SCM+FSA,a being read-write Int-Location,
  s being State of SCM+FSA holds StepWhile>0(a,I,s).(0+1)= Comput(ProgramPart(
(s +* (
while>0(a,I) +* (Start-At( 0,SCM+FSA))))), (s +* (
while>0(a,I) +* (Start-At( 0,SCM+FSA)))), (LifeSpan(ProgramPart(s+* (I +*
(Start-At( 0,SCM+FSA))
  )),s+* (I +*
(Start-At( 0,SCM+FSA))
  )) + 3));

theorem :: SCMFSA_9:52
  for I being Program of SCM+FSA,a being read-write Int-Location,
s being State of SCM+FSA,k,n being Element of NAT st IC StepWhile>0(a,I,s).k =
   0 & StepWhile>0(a,I,s).k= Comput(ProgramPart( (s +* (while>0(a,I) +*
  Start-At(
 0,SCM+FSA)))), (s +* (while>0(a,I) +*
  Start-At(
 0,SCM+FSA))),n)
 holds StepWhile>0(a,I,s).k = StepWhile>0(a,I,s).k +* (while>0(a,I
)+* Start-At( 0,SCM+FSA)) & StepWhile>0(a,I,s).(k+1)=
Comput(ProgramPart( (s +* (while>0(
  a,I) +* Start-At( 0,SCM+FSA)))), (s +* (while>0(
  a,I) +* Start-At( 0,SCM+FSA))), (n +(LifeSpan(ProgramPart(StepWhile>0(a,I,s).
k
   +* (I +*
  Start-At( 0,SCM+FSA))),StepWhile>0(a,I,s).k
   +* (I +*
  Start-At( 0,SCM+FSA))) + 3)));

theorem :: SCMFSA_9:53
  for I being Program of SCM+FSA,a being read-write Int-Location,
s being State of SCM+FSA st (for k being Nat holds I is_closed_on StepWhile>0(a
  ,I,s).k & I is_halting_on StepWhile>0(a,I,s).k) & ex f being Function of
  product the Object-Kind of SCM+FSA,NAT st (for k being Nat holds (f.(
StepWhile>0(a,I,s).(k+1)) < f.(StepWhile>0(a,I,s).k) or f.(StepWhile>0(a,I,s).k
  ) = 0) & ( f.(StepWhile>0(a,I,s).k)=0 iff (StepWhile>0(a,I,s).k).a <= 0 ) )
  holds while>0(a,I) is_halting_on s & while>0(a,I) is_closed_on s;

theorem :: SCMFSA_9:54
  for I being parahalting Program of SCM+FSA, a being read-write
  Int-Location, s being State of SCM+FSA st ex f being Function of product the
Object-Kind of SCM+FSA,NAT st (for k being Nat holds (f.(StepWhile>0(a,I,s).(k+
  1)) < f.(StepWhile>0(a,I,s).k) or f.(StepWhile>0(a,I,s).k) = 0) & ( f.(
StepWhile>0(a,I,s).k)=0 iff (StepWhile>0(a,I,s).k).a <= 0 ) ) holds while>0(a,I
  ) is_halting_on s & while>0(a,I) is_closed_on s;

theorem :: SCMFSA_9:55
  for I being parahalting Program of SCM+FSA, a being read-write
  Int-Location st ex f being Function of product the Object-Kind of SCM+FSA,NAT
st (for s being State of SCM+FSA holds (f.(StepWhile>0(a,I,s).1) < f.s or f.s =
  0) & ( f.s =0 iff s.a <= 0 )) holds while>0(a,I) is parahalting;

registration
  let I,J be good Program of SCM+FSA,a be Int-Location;
  cluster if>0(a,I,J) -> good;
end;

registration
  let I be good Program of SCM+FSA,a be Int-Location;
  cluster while>0(a,I) -> good;
end;

