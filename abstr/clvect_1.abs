:: Complex Linear Space and Complex Normed Space
::  by Noboru Endou
:: 
:: Received January 26, 2004
:: Copyright (c) 2004 Association of Mizar Users

environ

 vocabulary BINOP_1, FUNCT_1, ARYTM_1, RELAT_1, FINSEQ_1, BOOLE, RLVECT_1,
      ORDINAL2, ARYTM, CLVECT_1, ARYTM_3, SQUARE_1, ABSVALUE, COMPLEX1, SEQ_1,
      CFUNCT_1, RLSUB_1, NORMSP_1, PRE_TOPC, SEQ_2;
 notation TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, ORDINAL1, NUMBERS, ARYTM_0,
      XREAL_0, DOMAIN_1, REAL_1, RELAT_1, FUNCT_1, FUNCT_2, BINOP_1, FINSEQ_1,
      NAT_1, ABSVALUE, STRUCT_0, PRE_TOPC, RLVECT_1, SQUARE_1, PARTFUN1, SEQ_1,
      SEQ_2, COMPLEX1, CFUNCT_1, NORMSP_1;
 constructors DOMAIN_1, BINOP_1, REAL_1, NAT_1, MEMBERED, ABSVALUE, SQUARE_1,
      ARYTM_0, PARTFUN1, COMPLEX1, NORMSP_1, SEQ_2;
 clusters RELSET_1, STRUCT_0, XREAL_0, SUBSET_1, NAT_1, MEMBERED, ORDINAL2,
      RLVECT_1, COMPLEX1;
 requirements REAL, NUMERALS, BOOLE, SUBSET, ARITHM;


begin :: Complex Linear Space

definition
 struct (LoopStr) CLSStruct
   (# carrier -> set,
      Zero -> Element of the carrier,
      add -> BinOp of the carrier,
      Mult -> Function of [:COMPLEX, the carrier:], the carrier #);
end;

registration
 cluster non empty CLSStruct;
end;

definition let V be CLSStruct;
 mode VECTOR of V is Element of V;
end;

definition let V be non empty CLSStruct, v be VECTOR of V, z be Complex;
 func z * v -> Element of V equals
:: CLVECT_1:def 1
   (the Mult of V).[z,v];
end;

registration
  let ZS be non empty set, O be Element of ZS,
   F be BinOp of ZS, G be Function of [:COMPLEX,ZS:],ZS;
 cluster CLSStruct (# ZS,O,F,G #) -> non empty;
end;

definition let IT be non empty CLSStruct;
  attr IT is ComplexLinearSpace-like means
:: CLVECT_1:def 2
  (for z being Complex, v,w being VECTOR of IT holds
    z * (v + w) = z * v + z * w) &
  (for z1,z2 being Complex, v being VECTOR of IT holds
    (z1 + z2) * v = z1 * v + z2 * v) &
  (for z1,z2 being Complex, v being VECTOR of IT holds
    (z1 * z2) * v = z1 * (z2 * v)) &
  (for v being VECTOR of IT holds 1r * v = v);
end;

registration
cluster non empty strict Abelian add-associative right_zeroed
    right_complementable ComplexLinearSpace-like (non empty CLSStruct);
end;

definition
  mode ComplexLinearSpace is Abelian add-associative right_zeroed
    right_complementable ComplexLinearSpace-like (non empty CLSStruct);
end;

theorem :: CLVECT_1:1
for V being non empty CLSStruct holds
  (for v,w being VECTOR of V holds v + w = w + v) &
  (for u,v,w being VECTOR of V holds (u + v) + w = u + (v + w)) &
  (for v being VECTOR of V holds v + 0.V = v) &
  (for v being VECTOR of V ex w being VECTOR of V st v + w = 0.V) &
  (for z being Complex, v,w being VECTOR of V holds
    z * (v + w) = z * v + z * w) &
  (for z1,z2 being Complex, v being VECTOR of V holds
    (z1 + z2) * v = z1 * v + z2 * v) &
  (for z1,z2 being Complex, v being VECTOR of V holds
    (z1 * z2) * v = z1 * (z2 * v)) &
  (for v being VECTOR of V holds 1r * v = v)
    implies V is ComplexLinearSpace;

::
::  Axioms of complex linear space.
::

reserve V,X,Y for ComplexLinearSpace;
reserve u,u1,u2,v,v1,v2 for VECTOR of V;
reserve z,z1,z2 for Complex;

theorem :: CLVECT_1:2
z = 0c or v = 0.V implies z * v = 0.V;

theorem :: CLVECT_1:3
z * v = 0.V implies z = 0c or v = 0.V;

theorem :: CLVECT_1:4
- v = (- 1r) * v;

theorem :: CLVECT_1:5
v = - v implies v = 0.V;

theorem :: CLVECT_1:6
v + v = 0.V implies v = 0.V;

theorem :: CLVECT_1:7
z * (- v) = (- z) * v;

theorem :: CLVECT_1:8
z * (- v) = - (z * v);

theorem :: CLVECT_1:9
(- z) * (- v) = z * v;

theorem :: CLVECT_1:10
z * (v - u) = z * v - z * u;

theorem :: CLVECT_1:11
(z1 - z2) * v = z1 * v - z2 * v;

theorem :: CLVECT_1:12
z <> 0 & z * v = z * u implies v = u;

theorem :: CLVECT_1:13
v <> 0.V & z1 * v = z2 * v implies z1 = z2;

theorem :: CLVECT_1:14
for F,G being FinSequence of the carrier of V st len F = len G &
  (for k being Nat,v being VECTOR of V st
   k in dom F & v = G.k holds F.k = z * v)
holds Sum(F) = z * Sum(G);

theorem :: CLVECT_1:15
z * Sum(<*>(the carrier of V)) = 0.V;

theorem :: CLVECT_1:16
z * Sum<* v,u *> = z * v + z * u;

theorem :: CLVECT_1:17
 z * Sum<* u,v1,v2 *> = z * u + z * v1 + z * v2;

theorem :: CLVECT_1:18
 Sum<* v,v *> = [* 2, 0*] * v;

theorem :: CLVECT_1:19
  Sum<* - v,- v *> = [* -2,0 *] * v;

theorem :: CLVECT_1:20
  Sum<* v,v,v *> = [* 3,0 *] * v;

begin :: Subspace and Cosets of Subspaces in Complex Linear Space

reserve V1,V2,V3 for Subset of V;

definition let V, V1;
  attr V1 is lineary-closed means
:: CLVECT_1:def 3
 (for v,u being VECTOR of V st v in V1 & u in V1 holds v + u in V1) &
 (for z being Complex, v being VECTOR of V st v in V1 holds z * v in V1);
end;

theorem :: CLVECT_1:21
 V1 <> {} & V1 is lineary-closed implies 0.V in V1;

theorem :: CLVECT_1:22
 V1 is lineary-closed implies
  (for v being VECTOR of V st v in V1 holds - v in V1);

theorem :: CLVECT_1:23
  V1 is lineary-closed implies
  (for v,u being VECTOR of V st v in V1 & u in V1 holds v - u in V1);

theorem :: CLVECT_1:24
{0.V} is lineary-closed;

theorem :: CLVECT_1:25
  the carrier of V = V1 implies V1 is lineary-closed;

theorem :: CLVECT_1:26
V1 is lineary-closed & V2 is lineary-closed &
 V3 = {v + u : v in V1 & u in V2} implies
  V3 is lineary-closed;

theorem :: CLVECT_1:27
V1 is lineary-closed & V2 is lineary-closed implies
 V1 /\ V2 is lineary-closed;

definition let V;
  mode Subspace of V -> ComplexLinearSpace means
:: CLVECT_1:def 4
    the carrier of it c= the carrier of V &
    the Zero of it = the Zero of V &
    the add of it = (the add of V) | [:the carrier of it,the carrier of it:] &
    the Mult of it = (the Mult of V) | [:COMPLEX, the carrier of it:];
end;

::  Axioms of the subspaces of real linear spaces.

 reserve W,W1,W2 for Subspace of V;
 reserve x for set;
 reserve w,w1,w2 for VECTOR of W;

theorem :: CLVECT_1:28
x in W1 & W1 is Subspace of W2 implies x in W2;

theorem :: CLVECT_1:29
x in W implies x in V;

theorem :: CLVECT_1:30
w is VECTOR of V;

theorem :: CLVECT_1:31
0.W = 0.V;

theorem :: CLVECT_1:32
0.W1 = 0.W2;

theorem :: CLVECT_1:33
w1 = v & w2 = u implies w1 + w2 = v + u;

theorem :: CLVECT_1:34
w = v implies z * w = z * v;

theorem :: CLVECT_1:35
w = v implies - v = - w;

theorem :: CLVECT_1:36
w1 = v & w2 = u implies w1 - w2 = v - u;

theorem :: CLVECT_1:37
0.V in W;

theorem :: CLVECT_1:38
0.W1 in W2;

theorem :: CLVECT_1:39
0.W in V;

theorem :: CLVECT_1:40
u in W & v in W implies u + v in W;

theorem :: CLVECT_1:41
v in W implies z * v in W;

theorem :: CLVECT_1:42
v in W implies - v in W;

theorem :: CLVECT_1:43
u in W & v in W implies u - v in W;

reserve D for non empty set;
reserve d1 for Element of D;
reserve A for BinOp of D;
reserve M for Function of [:COMPLEX,D:],D;

theorem :: CLVECT_1:44
V1 = D &
d1 = 0.V &
A = (the add of V) | [:V1,V1:] &
M = (the Mult of V) | [:COMPLEX,V1:] implies
    CLSStruct (# D,d1,A,M #) is Subspace of V;

theorem :: CLVECT_1:45
V is Subspace of V;

theorem :: CLVECT_1:46
for V,X being strict ComplexLinearSpace holds
 V is Subspace of X & X is Subspace of V implies V = X;

theorem :: CLVECT_1:47
V is Subspace of X & X is Subspace of Y implies V is Subspace of Y;

theorem :: CLVECT_1:48
the carrier of W1 c= the carrier of W2 implies W1 is Subspace of W2;

theorem :: CLVECT_1:49
(for v st v in W1 holds v in W2) implies W1 is Subspace of W2;

registration let V;
cluster strict Subspace of V;
end;

theorem :: CLVECT_1:50
for W1,W2 being strict Subspace of V holds
 the carrier of W1 = the carrier of W2 implies W1 = W2;

theorem :: CLVECT_1:51
for W1,W2 being strict Subspace of V holds
 (for v holds v in W1 iff v in W2) implies W1 = W2;

theorem :: CLVECT_1:52
for V being strict ComplexLinearSpace, W being strict Subspace of V holds
 the carrier of W = the carrier of V implies W = V;

theorem :: CLVECT_1:53
for V being strict ComplexLinearSpace, W being strict Subspace of V holds
 (for v being VECTOR of V holds v in W iff v in V) implies W = V;

theorem :: CLVECT_1:54
the carrier of W = V1 implies V1 is lineary-closed;

theorem :: CLVECT_1:55
V1 <> {} & V1 is lineary-closed implies
 (ex W being strict Subspace of V st V1 = the carrier of W);

:: Definition of zero subspace and improper subspace of complex linear space.

definition let V;
func (0).V -> strict Subspace of V means
:: CLVECT_1:def 5
the carrier of it = {0.V};
end;

definition let V;
func (Omega).V -> strict Subspace of V equals
:: CLVECT_1:def 6
the CLSStruct of V;
end;

:: Definitional theorems of zero subspace and improper subspace.

theorem :: CLVECT_1:56
(0).W = (0).V;

theorem :: CLVECT_1:57
(0).W1 = (0).W2;

theorem :: CLVECT_1:58
(0).W is Subspace of V;

theorem :: CLVECT_1:59
(0).V is Subspace of W;

theorem :: CLVECT_1:60
(0).W1 is Subspace of W2;

theorem :: CLVECT_1:61
for V being strict ComplexLinearSpace holds V is Subspace of (Omega).V;

:: Introduction of the cosets of subspace.

definition let V; let v,W;
func v + W -> Subset of V equals
:: CLVECT_1:def 7
 {v + u : u in W};
end;

definition let V; let W;
mode Coset of W -> Subset of V means
:: CLVECT_1:def 8
 ex v st it = v + W;
end;

reserve B,C for Coset of W;

:: Definitional theorems of the cosets.

theorem :: CLVECT_1:62
0.V in v + W iff v in W;

theorem :: CLVECT_1:63
v in v + W;

theorem :: CLVECT_1:64
0.V + W = the carrier of W;

theorem :: CLVECT_1:65
v + (0).V = {v};

theorem :: CLVECT_1:66
v + (Omega).V = the carrier of V;

theorem :: CLVECT_1:67
0.V in v + W iff v + W = the carrier of W;

theorem :: CLVECT_1:68
v in W iff v + W = the carrier of W;

theorem :: CLVECT_1:69
v in W implies (z * v) + W = the carrier of W;

theorem :: CLVECT_1:70
z <> 0c & (z * v) + W = the carrier of W implies v in W;

theorem :: CLVECT_1:71
v in W iff - v + W = the carrier of W;

theorem :: CLVECT_1:72
u in W iff v + W = (v + u) + W;

theorem :: CLVECT_1:73
u in W iff v + W = (v - u) + W;

theorem :: CLVECT_1:74
v in u + W iff u + W = v + W;

theorem :: CLVECT_1:75
v + W = (- v) + W iff v in W;

theorem :: CLVECT_1:76
u in v1 + W & u in v2 + W implies v1 + W = v2 + W;

theorem :: CLVECT_1:77
u in v + W & u in (- v) + W implies v in W;

theorem :: CLVECT_1:78
z <> 1r & z * v in v + W implies v in W;

theorem :: CLVECT_1:79
v in W implies z * v in v + W;

theorem :: CLVECT_1:80
- v in v + W iff v in W;

theorem :: CLVECT_1:81
u + v in v + W iff u in W;

theorem :: CLVECT_1:82
v - u in v + W iff u in W;

theorem :: CLVECT_1:83
u in v + W iff (ex v1 st v1 in W & u = v + v1);

theorem :: CLVECT_1:84
u in v + W iff (ex v1 st v1 in W & u = v - v1);

theorem :: CLVECT_1:85
 (ex v st v1 in v + W & v2 in v + W) iff v1 - v2 in W;

theorem :: CLVECT_1:86
 v + W = u + W implies
  (ex v1 st v1 in W & v + v1 = u);

theorem :: CLVECT_1:87
 v + W = u + W implies
  (ex v1 st v1 in W & v - v1 = u);

theorem :: CLVECT_1:88
 for W1,W2 being strict Subspace of V holds
 v + W1 = v + W2 iff W1 = W2;

theorem :: CLVECT_1:89
 for W1,W2 being strict Subspace of V holds
 v + W1 = u + W2 implies W1 = W2;

:: Theorems concerning cosets of subspace
:: regarded as subsets of the carrier.

theorem :: CLVECT_1:90
   C is lineary-closed iff C = the carrier of W;

theorem :: CLVECT_1:91
   for W1,W2 being strict Subspace of V,
  C1 being Coset of W1, C2 being Coset of W2 holds
 C1 = C2 implies W1 = W2;

theorem :: CLVECT_1:92
   {v} is Coset of (0).V;

theorem :: CLVECT_1:93
   V1 is Coset of (0).V implies (ex v st V1 = {v});

theorem :: CLVECT_1:94
   the carrier of W is Coset of W;

theorem :: CLVECT_1:95
   the carrier of V is Coset of (Omega).V;

theorem :: CLVECT_1:96
   V1 is Coset of (Omega).V implies V1 = the carrier of V;

theorem :: CLVECT_1:97
   0.V in C iff C = the carrier of W;

theorem :: CLVECT_1:98
 u in C iff C = u + W;

theorem :: CLVECT_1:99
   u in C & v in C implies (ex v1 st v1 in W & u + v1 = v);

theorem :: CLVECT_1:100
   u in C & v in C implies (ex v1 st v1 in W & u - v1 = v);

theorem :: CLVECT_1:101
   (ex C st v1 in C & v2 in C) iff v1 - v2 in W;

theorem :: CLVECT_1:102
   u in B & u in C implies B = C;

begin :: Complex Normed Space

definition
 struct(CLSStruct) CNORMSTR (# carrier -> set,
            Zero -> Element of the carrier,
             add -> BinOp of the carrier,
            Mult -> Function of [:COMPLEX, the carrier:], the carrier,
            norm -> Function of the carrier, REAL #);
end;

registration
 cluster non empty CNORMSTR;
end;

 reserve X for non empty CNORMSTR;
 reserve x for Point of X;

definition let X, x;
 func ||.x.|| -> Real equals
:: CLVECT_1:def 9
   ( the norm of X ).x;
end;

definition let IT be non empty CNORMSTR;
 attr IT is ComplexNormSpace-like means
:: CLVECT_1:def 10
   for x , y being Point of IT , z holds
          ( ||.x.|| = 0 iff x = 0.IT ) &
          ||.z * x.|| = |.z.| * ||.x.|| &
          ||.x + y.|| <= ||.x.|| + ||.y.||;
end;

registration
 cluster ComplexNormSpace-like ComplexLinearSpace-like Abelian
    add-associative right_zeroed right_complementable strict
      (non empty CNORMSTR);
end;

definition
 mode ComplexNormSpace is ComplexNormSpace-like ComplexLinearSpace-like
      Abelian add-associative right_zeroed right_complementable
          (non empty CNORMSTR);
end;

 reserve CNS for ComplexNormSpace;
 reserve x, y, w, g, g1, g2 for Point of CNS;

theorem :: CLVECT_1:103
 ||.0.CNS.|| = 0;

theorem :: CLVECT_1:104
 ||.-x.|| = ||.x.||;

theorem :: CLVECT_1:105
 ||.x - y.|| <= ||.x.|| + ||.y.||;

theorem :: CLVECT_1:106
 0 <= ||.x.||;

theorem :: CLVECT_1:107
 ||.z1 * x + z2 * y.|| <= |.z1.| * ||.x.|| + |.z2.| * ||.y.||;

theorem :: CLVECT_1:108
 ||.x - y.|| = 0 iff x = y;

theorem :: CLVECT_1:109
 ||.x - y.|| = ||.y - x.||;

theorem :: CLVECT_1:110
 ||.x.|| - ||.y.|| <= ||.x - y.||;

theorem :: CLVECT_1:111
 abs(||.x.|| - ||.y.||) <= ||.x - y.||;

theorem :: CLVECT_1:112
 ||.x - w.|| <= ||.x - y.|| + ||.y - w.||;

theorem :: CLVECT_1:113
 x <> y implies ||.x - y.|| <> 0;

reserve S, S1, S2 for sequence of CNS;
reserve k, n, m, m1, m2 for Nat;
reserve r for Real;
reserve f for Function;
reserve d, s, t for set;

theorem :: CLVECT_1:114
 ex S st rng S = {0.CNS};

scheme :: CLVECT_1:sch 1
 ExCNSSeq{CNS()->ComplexNormSpace, F(Nat) -> ( Point of CNS() ) } :
 ex S be sequence of CNS() st for n holds S.n = F(n);

scheme :: CLVECT_1:sch 2
 ExCLSSeq{CNS()->ComplexLinearSpace, F(Nat) -> Element of CNS() }:
 ex S be sequence of CNS() st for n holds S.n = F(n);

definition
let CNS be ComplexLinearSpace;
let S1, S2 be sequence of CNS;
 func S1 + S2 -> sequence of CNS means
:: CLVECT_1:def 11
     for n holds it.n = S1.n + S2.n;
end;

definition
let CNS be ComplexLinearSpace;
let S1, S2 be sequence of CNS;
 func S1 - S2 -> sequence of CNS means
:: CLVECT_1:def 12
    for n holds it.n = S1.n - S2.n;
end;

definition
let CNS be ComplexLinearSpace;
let S be sequence of CNS;
let x be Element of CNS;
 func S - x -> sequence of CNS means
:: CLVECT_1:def 13
     for n holds it.n = S.n - x;
end;

definition
let CNS be ComplexLinearSpace;
let S be sequence of CNS;
let z;
 func z * S -> sequence of CNS means
:: CLVECT_1:def 14
     for n holds it.n = z * S.n;
end;

definition
let CNS;
let S;
 attr S is convergent means
:: CLVECT_1:def 15
   ex g st
     for r st 0 < r ex m st for n st m <= n holds ||.(S.n) - g.|| < r;
end;

theorem :: CLVECT_1:115
 S1 is convergent & S2 is convergent implies S1 + S2 is convergent;

theorem :: CLVECT_1:116
 S1 is convergent & S2 is convergent implies S1 - S2 is convergent;

theorem :: CLVECT_1:117
 S is convergent implies S - x is convergent;

theorem :: CLVECT_1:118
 S is convergent implies z * S is convergent;

definition
let CNS;
let S;
 func ||.S.|| -> Real_Sequence means
:: CLVECT_1:def 16
   for n holds it.n =||.(S.n).||;
end;

theorem :: CLVECT_1:119
 S is convergent implies ||.S.|| is convergent;

definition
let CNS;
let S;
assume S is convergent;
 func lim S -> Point of CNS means
:: CLVECT_1:def 17
  for r st 0 < r ex m st for n st m <= n holds ||.(S.n) - it.|| < r;
end;

theorem :: CLVECT_1:120
 S is convergent & lim S = g implies
  ( ||.S - g.|| is convergent & lim ||.S - g.|| = 0 );

theorem :: CLVECT_1:121
 S1 is convergent & S2 is convergent implies lim(S1+S2) = (lim S1) + (lim S2);

theorem :: CLVECT_1:122
 S1 is convergent & S2 is convergent implies lim (S1-S2) = (lim S1) - (lim S2);

theorem :: CLVECT_1:123
 S is convergent implies lim (S - x) = (lim S) - x;

theorem :: CLVECT_1:124
 S is convergent implies lim (z * S) = z * (lim S);
