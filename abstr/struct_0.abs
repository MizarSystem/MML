:: Preliminaries to Structures
::  by Library Committee
::
:: Received January 6, 1995
:: Copyright (c) 1995 Association of Mizar Users

environ

 vocabularies SETFAM_1, FUNCT_1, FINSEQ_1, PBOOLE, SUBSET_1, BOOLE, RLVECT_1,
      GROUP_1, VECTSP_1, NORMSP_1, PARTFUN1, REALSET1, STRUCT_0, FINSET_1,
      ARYTM, XREAL_0, FUNCT_7, COLLSP, AMI_1, FUNCOP_1, RELAT_1, ANPROJ_1,
      CARD_1, BINOP_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, FINSET_1, CARD_1, RELSET_1,
      PARTFUN1, FUNCT_2, BINOP_1, NAT_1, FINSEQ_1, FUNCOP_1, REALSET1, PBOOLE,
      FUNCT_7;
 constructors PARTFUN1, PBOOLE, REALSET1, FUNCT_7, SETFAM_1, RELSET_1;
 registrations XBOOLE_0, FUNCT_1, FUNCT_2, REALSET1, CARD_5, ZFMISC_1;
 requirements BOOLE, SUBSET;


begin

definition
  struct 1-sorted(# carrier -> set #);
end;

definition
  let S be 1-sorted;
  attr S is empty means
:: STRUCT_0:def 1

  the carrier of S is empty;
end;

registration
  cluster strict empty 1-sorted;
end;

registration
  cluster strict non empty 1-sorted;
end;

registration
  let S be empty 1-sorted;
  cluster the carrier of S -> empty;
end;

registration
  let S be non empty 1-sorted;
  cluster the carrier of S -> non empty;
end;

definition
  let S be 1-sorted;
  mode Element of S is Element of the carrier of S;
  mode Subset of S is Subset of the carrier of S;
  mode Subset-Family of S is Subset-Family of the carrier of S;
end;

:: Added by AK on 2005.09.22
:: Moved from ALG_1, GROUP_6, PRE_TOPC, POLYNOM1

definition
  let S be 1-sorted, X be set;
  mode Function of S,X is Function of the carrier of S, X;
  mode Function of X,S is Function of X, the carrier of S;
end;

definition
  let S, T be 1-sorted;
  mode Function of S,T is Function of the carrier of S, the carrier of T;
end;

:: from PRE_TOPC, 2006.12.02, AT

definition
  let T be 1-sorted;
  func {}T -> Subset of T equals
:: STRUCT_0:def 2
  {};
  func [#]T -> Subset of T equals
:: STRUCT_0:def 3
  the carrier of T;
end;

registration
  let T be 1-sorted;
  cluster {}T -> empty;
end;

registration
  let T be empty 1-sorted;
  cluster [#]T -> empty;
end;

registration
  let T be non empty 1-sorted;
  cluster [#]T -> non empty;
end;

registration
  let S be non empty 1-sorted;
  cluster non empty Subset of S;
end;

::Moved from TOPREAL1 on 2005.09.22

definition
  let S be 1-sorted;
  mode FinSequence of S is FinSequence of the carrier of S;
end;

::Moved from YELLOW18, AK, 21.02.2006

definition
  let S be 1-sorted;
  mode ManySortedSet of S is ManySortedSet of the carrier of S;
end;

::Moved from GRCAT_1, AK, 16.01.2007

definition
  let S be 1-sorted;
  func id S -> Function of S,S equals
:: STRUCT_0:def 4
  id the carrier of S;
end;

::Moved from NORMSP_1, AK, 14.02.2007

definition
  let S be 1-sorted;
  mode sequence of S is sequence of the carrier of S;
end;

::Moved from NFCONT_1, AK, 14.02.2007

definition
  let S,T be 1-sorted;
  mode PartFunc of S,T is PartFunc of the carrier of S,the carrier of T;
end;

::Moved from RLVECT_1, 2007.02.19, A.T.

definition
  let S be 1-sorted;
  let x be set;
  pred x in S means
:: STRUCT_0:def 5
  x in the carrier of S;
end;

:: Pointed structures

definition
  struct (1-sorted) ZeroStr(# carrier -> set, ZeroF -> Element of the carrier
  #);
end;

registration
  cluster strict non empty ZeroStr;
end;

definition
  struct (1-sorted) OneStr(# carrier -> set, OneF -> Element of the carrier #);
end;

definition
  struct (ZeroStr,OneStr) ZeroOneStr(# carrier -> set, ZeroF -> Element of the
    carrier, OneF -> Element of the carrier #);
end;

definition
  let S be ZeroStr;
  func 0.S -> Element of S equals
:: STRUCT_0:def 6
  the ZeroF of S;
end;

definition
  let S be OneStr;
  func 1.S -> Element of S equals
:: STRUCT_0:def 7
  the OneF of S;
end;

definition
  let S be ZeroOneStr;
  attr S is degenerated means
:: STRUCT_0:def 8

  0.S = 1.S;
end;

definition
  let IT be 1-sorted;
  attr IT is trivial means
:: STRUCT_0:def 9

  the carrier of IT is trivial;
end;

registration
  cluster empty -> trivial 1-sorted;
  cluster non trivial -> non empty 1-sorted;
end;

definition
  let S be 1-sorted;
  redefine attr S is trivial means
:: STRUCT_0:def 10

  for x,y being Element of S holds x
  = y;
end;

registration
  cluster non degenerated -> non trivial ZeroOneStr;
end;

registration
  cluster trivial non empty 1-sorted;
  cluster non trivial non empty 1-sorted;
end;

registration
  let S be non trivial 1-sorted;
  cluster the carrier of S -> non trivial;
end;

registration
  let S be trivial 1-sorted;
  cluster the carrier of S -> trivial;
end;

begin :: Finite 1-sorted Structures

definition
  let S be 1-sorted;
  attr S is finite means
:: STRUCT_0:def 11

  the carrier of S is finite;
end;

registration
  cluster strict finite non empty 1-sorted;
end;

registration
  let S be finite 1-sorted;
  cluster the carrier of S -> finite;
end;

registration
  cluster -> finite (empty 1-sorted);
end;

notation
  let S be 1-sorted;
  antonym S is infinite for S is finite;
end;

registration
  cluster strict infinite 1-sorted;
end;

registration
  let S be infinite 1-sorted;
  cluster the carrier of S -> infinite;
end;

registration
  cluster -> non empty (infinite 1-sorted);
end;

:: from YELLOW_13, 2007.04.12, A.T.

registration
  cluster trivial -> finite 1-sorted;
end;

registration
  cluster infinite -> non trivial 1-sorted;
end;

definition
  let S be ZeroStr, x be Element of S;
  attr x is zero means
:: STRUCT_0:def 12

  x = 0.S;
end;

registration
  let S be ZeroStr;
  cluster 0.S -> zero;
end;

registration
  cluster strict non degenerated ZeroOneStr;
end;

registration
  let S be non degenerated ZeroOneStr;
  cluster 1.S -> non zero;
end;

definition
  let S be 1-sorted;
  mode Cover of S is Cover of the carrier of S;
end;

:: from RING_1, 2008.06.19, A.T. (needed in TEX_2)

registration
  let S be 1-sorted;
  cluster [#]S -> non proper;
end;

begin :: 2-sorted structures, 2008.07.02, A.T.

definition
  struct(1-sorted) 2-sorted(#carrier,carrier' -> set#);
end;

definition
  let S be 2-sorted;
  attr S is void means
:: STRUCT_0:def 13

  the carrier' of S is empty;
end;

registration
  cluster strict empty void 2-sorted;
end;

registration
  let S be void 2-sorted;
  cluster the carrier' of S -> empty;
end;

registration
  cluster strict non empty non void 2-sorted;
end;

registration
  let S be non void 2-sorted;
  cluster the carrier' of S -> non empty;
end;

:: from BORSUK_1, 2008.07.07, A.T.

definition
  let X be 1-sorted,Y be non empty 1-sorted, y be Element of Y;
  func X --> y -> Function of X,Y equals
:: STRUCT_0:def 14
  (the carrier of X) --> y;
end;

registration
  let S be ZeroStr;
  cluster zero Element of S;
end;

registration
  cluster strict non trivial ZeroStr;
end;

registration
  let S be non trivial ZeroStr;
  cluster non zero Element of S;
end;

:: comp. NDIFF_1, 2008.08.29, A.T.

definition
  canceled;
  let X be set, S be ZeroStr, R be Relation of X, the carrier of S;
  attr R is non-zero means
:: STRUCT_0:def 16
  not 0.S in rng R;
end;

:: 2008.10.12, A.T.

definition
  let S be 1-sorted;
  func card S -> Cardinal equals
:: STRUCT_0:def 17
  card the carrier of S;
end;

:: 2009.01.11, A.K.

definition
  let S be 1-sorted;
  mode UnOp of S is UnOp of the carrier of S;
  mode BinOp of S is BinOp of the carrier of S;
end;

:: 2009.01.24, A.T.

definition
  let S be ZeroStr;
  func NonZero S -> Subset of S equals
:: STRUCT_0:def 18
  [#]S \ {0.S};
end;

theorem :: STRUCT_0:1
  for S being non empty ZeroStr for u being Element of S holds u in
  NonZero S iff u is not zero;

definition
  let V be non empty ZeroStr;
  redefine attr V is trivial means
:: STRUCT_0:def 19

  for u being Element of V holds u =
  0.V;
end;

registration
  let V be non trivial ZeroStr;
  cluster NonZero V -> non empty;
end;

registration
  let S be non empty 1-sorted;
  cluster non empty trivial Subset of S;
end;

theorem :: STRUCT_0:2
  for F being non degenerated ZeroOneStr holds 1.F in NonZero F;

