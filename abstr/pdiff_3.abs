:: Second-order Partial Differentiation of Real Binary Functions
::  by Bing Xie , Xiquan Liang and Xiuzhuan Shen
:: 
:: Received December 16, 2008
:: Copyright (c) 2008 Association of Mizar Users

environ

 vocabularies FUNCT_1, ARYTM, ARYTM_1, FINSEQ_1, RELAT_1, ORDINAL2, SEQ_1,
      SEQ_2, RCOMP_1, PARTFUN1, FDIFF_1, PDIFF_1, BORSUK_1, PDIFF_2, ARYTM_3,
      SEQM_3, FCONT_1, ANPROJ_1, PDIFF_3, OPPCAT_1;
 notations TARSKI, SUBSET_1, FUNCT_1, FUNCT_2, RELSET_1, PARTFUN1, RFUNCT_2,
      XXREAL_0, XCMPLX_0, XREAL_0, NAT_1, ORDINAL1, NUMBERS, REAL_1, VALUED_0,
      VALUED_1, SEQ_1, SEQ_2, FINSEQ_1, RCOMP_1, EUCLID, FDIFF_1, FCONT_1,
      PDIFF_1, PDIFF_2, PARTFUN2;
 constructors REAL_1, SEQ_2, PARTFUN1, RFUNCT_2, RCOMP_1, FDIFF_1, SEQ_1,
      NAT_1, FCONT_1, PDIFF_1, PARTFUN2, PDIFF_2, SEQM_3, FUNCT_2, COMPLEX1;
 registrations RELSET_1, XREAL_0, MEMBERED, FDIFF_1, FUNCT_2, NAT_1, NUMBERS,
      XBOOLE_0, XXREAL_0, VALUED_0, VALUED_1, ORDINAL1, SEQ_4;
 requirements SUBSET, REAL, BOOLE, NUMERALS, ARITHM;


begin :: Second-order Partial Derivatives

reserve Z for set;
reserve X,Y for Subset of REAL;
reserve x,x0,x1,x2,y,y0,y1,y2,g,g1,g2,r,r1,s,p,p1,p2 for Real;
reserve z,z0 for Element of REAL 2;
reserve n,m,k for Element of NAT;
reserve Z,Z1 for Subset of REAL 2;
reserve s1,s3 for Real_Sequence;
reserve f,f1,f2,g for PartFunc of REAL 2,REAL;
reserve R,R1,R2 for REST;
reserve L,L1,L2 for LINEAR;

registration
  cluster -> total REST;
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  func pdiff1(f,z) -> Function of REAL 2, REAL means
:: PDIFF_3:def 1
  for z st z in REAL 2 holds it.z = partdiff1(f,z);

  func pdiff2(f,z) -> Function of REAL 2, REAL means
:: PDIFF_3:def 2
  for z st z in REAL 2 holds it.z = partdiff2(f,z);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  pred f is_hpartial_differentiable`11_in z means
:: PDIFF_3:def 3
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(pdiff1(f,z),z) &
  ex L,R st for x st x in N holds
  SVF1(pdiff1(f,z),z).x - SVF1(pdiff1(f,z),z).x0 = L.(x-x0) + R.(x-x0);

  pred f is_hpartial_differentiable`12_in z means
:: PDIFF_3:def 4
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(pdiff1(f,z),z) &
  ex L,R st for y st y in N holds
  SVF2(pdiff1(f,z),z).y - SVF2(pdiff1(f,z),z).y0 = L.(y-y0) + R.(y-y0);

  pred f is_hpartial_differentiable`21_in z means
:: PDIFF_3:def 5
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(pdiff2(f,z),z) &
  ex L,R st for x st x in N holds
  SVF1(pdiff2(f,z),z).x - SVF1(pdiff2(f,z),z).x0 = L.(x-x0) + R.(x-x0);

  pred f is_hpartial_differentiable`22_in z means
:: PDIFF_3:def 6
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(pdiff2(f,z),z) &
  ex L,R st for y st y in N holds
  SVF2(pdiff2(f,z),z).y - SVF2(pdiff2(f,z),z).y0 = L.(y-y0) + R.(y-y0);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  assume  f is_hpartial_differentiable`11_in z;
  func hpartdiff11(f,z) -> Real means
:: PDIFF_3:def 7
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(pdiff1(f,z),z) &
  ex L,R st it = L.1 & for x st x in N holds
  SVF1(pdiff1(f,z),z).x - SVF1(pdiff1(f,z),z).x0 = L.(x-x0) + R.(x-x0);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  assume  f is_hpartial_differentiable`12_in z;
  func hpartdiff12(f,z) -> Real means
:: PDIFF_3:def 8
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(pdiff1(f,z),z) &
  ex L,R st it = L.1 & for y st y in N holds
  SVF2(pdiff1(f,z),z).y - SVF2(pdiff1(f,z),z).y0 = L.(y-y0) + R.(y-y0);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  assume  f is_hpartial_differentiable`21_in z;
  func hpartdiff21(f,z) -> Real means
:: PDIFF_3:def 9
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of x0 st N c= dom SVF1(pdiff2(f,z),z) &
  ex L,R st it = L.1 & for x st x in N holds
  SVF1(pdiff2(f,z),z).x - SVF1(pdiff2(f,z),z).x0 = L.(x-x0) + R.(x-x0);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let z be Element of REAL 2;
  assume  f is_hpartial_differentiable`22_in z;
  func hpartdiff22(f,z) -> Real means
:: PDIFF_3:def 10
  ex x0,y0 being Real st z = <*x0,y0*> &
  ex N being Neighbourhood of y0 st N c= dom SVF2(pdiff2(f,z),z) &
  ex L,R st it = L.1 & for y st y in N holds
  SVF2(pdiff2(f,z),z).y - SVF2(pdiff2(f,z),z).y0 = L.(y-y0) + R.(y-y0);
end;

theorem :: PDIFF_3:1
  z = <*x0,y0*> & f is_hpartial_differentiable`11_in z implies
  SVF1(pdiff1(f,z),z) is_differentiable_in x0;

theorem :: PDIFF_3:2
  z = <*x0,y0*> & f is_hpartial_differentiable`12_in z implies
  SVF2(pdiff1(f,z),z) is_differentiable_in y0;

theorem :: PDIFF_3:3
  z = <*x0,y0*> & f is_hpartial_differentiable`21_in z implies
  SVF1(pdiff2(f,z),z) is_differentiable_in x0;

theorem :: PDIFF_3:4
  z = <*x0,y0*> & f is_hpartial_differentiable`22_in z implies
  SVF2(pdiff2(f,z),z) is_differentiable_in y0;

theorem :: PDIFF_3:5
  z = <*x0,y0*> & f is_hpartial_differentiable`11_in z implies
  hpartdiff11(f,z) = diff(SVF1(pdiff1(f,z),z),x0);

theorem :: PDIFF_3:6
  z = <*x0,y0*> & f is_hpartial_differentiable`12_in z implies
  hpartdiff12(f,z) = diff(SVF2(pdiff1(f,z),z),y0);

theorem :: PDIFF_3:7
  z = <*x0,y0*> & f is_hpartial_differentiable`21_in z implies
  hpartdiff21(f,z) = diff(SVF1(pdiff2(f,z),z),x0);

theorem :: PDIFF_3:8
  z = <*x0,y0*> & f is_hpartial_differentiable`22_in z implies
  hpartdiff22(f,z) = diff(SVF2(pdiff2(f,z),z),y0);

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  pred f is_hpartial_differentiable`11_on Z means
:: PDIFF_3:def 11
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_hpartial_differentiable`11_in z;

  pred f is_hpartial_differentiable`12_on Z means
:: PDIFF_3:def 12
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_hpartial_differentiable`12_in z;

  pred f is_hpartial_differentiable`21_on Z means
:: PDIFF_3:def 13
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_hpartial_differentiable`21_in z;

  pred f is_hpartial_differentiable`22_on Z means
:: PDIFF_3:def 14
  Z c= dom f & for z be Element of REAL 2 st z in Z holds
  f|Z is_hpartial_differentiable`22_in z;
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_hpartial_differentiable`11_on Z;
  func f`hpartial11|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_3:def 15
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = hpartdiff11(f,z);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_hpartial_differentiable`12_on Z;
  func f`hpartial12|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_3:def 16
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = hpartdiff12(f,z);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_hpartial_differentiable`21_on Z;
  func f`hpartial21|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_3:def 17
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = hpartdiff21(f,z);
end;

definition
  let f be PartFunc of REAL 2,REAL;
  let Z be set;
  assume  f is_hpartial_differentiable`22_on Z;
  func f`hpartial22|Z -> PartFunc of REAL 2,REAL means
:: PDIFF_3:def 18
  dom it = Z & for z be Element of REAL 2 st z in Z holds
  it.z = hpartdiff22(f,z);
end;

begin :: Main Properties of Second-order Partial Derivatives

theorem :: PDIFF_3:9
  f is_hpartial_differentiable`11_in z iff
  pdiff1(f,z) is_partial_differentiable`1_in z;

theorem :: PDIFF_3:10
  f is_hpartial_differentiable`12_in z iff
  pdiff1(f,z) is_partial_differentiable`2_in z;

theorem :: PDIFF_3:11
  f is_hpartial_differentiable`21_in z iff
  pdiff2(f,z) is_partial_differentiable`1_in z;

theorem :: PDIFF_3:12
  f is_hpartial_differentiable`22_in z iff
  pdiff2(f,z) is_partial_differentiable`2_in z;

theorem :: PDIFF_3:13
  f is_hpartial_differentiable`11_in z iff
  pdiff1(f,z) is_partial_differentiable_in z,1;

theorem :: PDIFF_3:14
  f is_hpartial_differentiable`12_in z iff
  pdiff1(f,z) is_partial_differentiable_in z,2;

theorem :: PDIFF_3:15
  f is_hpartial_differentiable`21_in z iff
  pdiff2(f,z) is_partial_differentiable_in z,1;

theorem :: PDIFF_3:16
  f is_hpartial_differentiable`22_in z iff
  pdiff2(f,z) is_partial_differentiable_in z,2;

theorem :: PDIFF_3:17
  f is_hpartial_differentiable`11_in z implies
  hpartdiff11(f,z) = partdiff1(pdiff1(f,z),z);

theorem :: PDIFF_3:18
  f is_hpartial_differentiable`12_in z implies
  hpartdiff12(f,z) = partdiff2(pdiff1(f,z),z);

theorem :: PDIFF_3:19
  f is_hpartial_differentiable`21_in z implies
  hpartdiff21(f,z) = partdiff1(pdiff2(f,z),z);

theorem :: PDIFF_3:20
  f is_hpartial_differentiable`22_in z implies
  hpartdiff22(f,z) = partdiff2(pdiff2(f,z),z);

theorem :: PDIFF_3:21
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(1,2).z0 st
  f is_hpartial_differentiable`11_in z0 & N c= dom SVF1(pdiff1(f,z0),z0) holds
  for h be convergent_to_0 Real_Sequence, c be constant Real_Sequence
  st rng c = {proj(1,2).z0} & rng (h+c) c= N holds
  h"(#)(SVF1(pdiff1(f,z0),z0)/*(h+c) - SVF1(pdiff1(f,z0),z0)/*c)
    is convergent &
  hpartdiff11(f,z0)
  = lim (h"(#)(SVF1(pdiff1(f,z0),z0)/*(h+c) - SVF1(pdiff1(f,z0),z0)/*c));

theorem :: PDIFF_3:22
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(2,2).z0 st
  f is_hpartial_differentiable`12_in z0 & N c= dom SVF2(pdiff1(f,z0),z0) holds
  for h be convergent_to_0 Real_Sequence, c be constant Real_Sequence
  st rng c = {proj(2,2).z0} & rng (h+c) c= N holds
  h"(#)(SVF2(pdiff1(f,z0),z0)/*(h+c) - SVF2(pdiff1(f,z0),z0)/*c)
    is convergent &
  hpartdiff12(f,z0)
  = lim (h"(#)(SVF2(pdiff1(f,z0),z0)/*(h+c) - SVF2(pdiff1(f,z0),z0)/*c));

theorem :: PDIFF_3:23
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(1,2).z0 st
  f is_hpartial_differentiable`21_in z0 & N c= dom SVF1(pdiff2(f,z0),z0) holds
  for h be convergent_to_0 Real_Sequence, c be constant Real_Sequence
  st rng c = {proj(1,2).z0} & rng (h+c) c= N holds
  h"(#)(SVF1(pdiff2(f,z0),z0)/*(h+c) - SVF1(pdiff2(f,z0),z0)/*c)
    is convergent &
  hpartdiff21(f,z0)
  = lim (h"(#)(SVF1(pdiff2(f,z0),z0)/*(h+c) - SVF1(pdiff2(f,z0),z0)/*c));

theorem :: PDIFF_3:24
  for z0 being Element of REAL 2
  for N being Neighbourhood of proj(2,2).z0 st
  f is_hpartial_differentiable`22_in z0 & N c= dom SVF2(pdiff2(f,z0),z0) holds
  for h be convergent_to_0 Real_Sequence, c be constant Real_Sequence
  st rng c = {proj(2,2).z0} & rng (h+c) c= N holds
  h"(#)(SVF2(pdiff2(f,z0),z0)/*(h+c) - SVF2(pdiff2(f,z0),z0)/*c)
    is convergent &
  hpartdiff22(f,z0)
  = lim (h"(#)(SVF2(pdiff2(f,z0),z0)/*(h+c) - SVF2(pdiff2(f,z0),z0)/*c));

theorem :: PDIFF_3:25
  f1 is_hpartial_differentiable`11_in z0 &
  f2 is_hpartial_differentiable`11_in z0 implies
  pdiff1(f1,z0)+pdiff1(f2,z0) is_partial_differentiable`1_in z0 &
  partdiff1(pdiff1(f1,z0)+pdiff1(f2,z0),z0)
  = hpartdiff11(f1,z0) + hpartdiff11(f2,z0);

theorem :: PDIFF_3:26
  f1 is_hpartial_differentiable`12_in z0 &
  f2 is_hpartial_differentiable`12_in z0 implies
  pdiff1(f1,z0)+pdiff1(f2,z0) is_partial_differentiable`2_in z0 &
  partdiff2(pdiff1(f1,z0)+pdiff1(f2,z0),z0)
  = hpartdiff12(f1,z0) + hpartdiff12(f2,z0);

theorem :: PDIFF_3:27
  f1 is_hpartial_differentiable`21_in z0 &
  f2 is_hpartial_differentiable`21_in z0 implies
  pdiff2(f1,z0)+pdiff2(f2,z0) is_partial_differentiable`1_in z0 &
  partdiff1(pdiff2(f1,z0)+pdiff2(f2,z0),z0)
  = hpartdiff21(f1,z0) + hpartdiff21(f2,z0);

theorem :: PDIFF_3:28
  f1 is_hpartial_differentiable`22_in z0 &
  f2 is_hpartial_differentiable`22_in z0 implies
  pdiff2(f1,z0)+pdiff2(f2,z0) is_partial_differentiable`2_in z0 &
  partdiff2(pdiff2(f1,z0)+pdiff2(f2,z0),z0)
  = hpartdiff22(f1,z0) + hpartdiff22(f2,z0);

theorem :: PDIFF_3:29
  f1 is_hpartial_differentiable`11_in z0 &
  f2 is_hpartial_differentiable`11_in z0 implies
  pdiff1(f1,z0)-pdiff1(f2,z0) is_partial_differentiable`1_in z0 &
  partdiff1(pdiff1(f1,z0)-pdiff1(f2,z0),z0)
  = hpartdiff11(f1,z0) - hpartdiff11(f2,z0);

theorem :: PDIFF_3:30
  f1 is_hpartial_differentiable`12_in z0 &
  f2 is_hpartial_differentiable`12_in z0 implies
  pdiff1(f1,z0)-pdiff1(f2,z0) is_partial_differentiable`2_in z0 &
  partdiff2(pdiff1(f1,z0)-pdiff1(f2,z0),z0)
  = hpartdiff12(f1,z0) - hpartdiff12(f2,z0);

theorem :: PDIFF_3:31
  f1 is_hpartial_differentiable`21_in z0 &
  f2 is_hpartial_differentiable`21_in z0 implies
  pdiff2(f1,z0)-pdiff2(f2,z0) is_partial_differentiable`1_in z0 &
  partdiff1(pdiff2(f1,z0)-pdiff2(f2,z0),z0)
  = hpartdiff21(f1,z0) - hpartdiff21(f2,z0);

theorem :: PDIFF_3:32
  f1 is_hpartial_differentiable`22_in z0 &
  f2 is_hpartial_differentiable`22_in z0 implies
  pdiff2(f1,z0)-pdiff2(f2,z0) is_partial_differentiable`2_in z0 &
  partdiff2(pdiff2(f1,z0)-pdiff2(f2,z0),z0)
  = hpartdiff22(f1,z0) - hpartdiff22(f2,z0);

theorem :: PDIFF_3:33
  f is_hpartial_differentiable`11_in z0 implies
  r(#)pdiff1(f,z0) is_partial_differentiable`1_in z0 &
  partdiff1((r(#)pdiff1(f,z0)),z0) = r*hpartdiff11(f,z0);

theorem :: PDIFF_3:34
  f is_hpartial_differentiable`12_in z0 implies
  r(#)pdiff1(f,z0) is_partial_differentiable`2_in z0 &
  partdiff2((r(#)pdiff1(f,z0)),z0) = r*hpartdiff12(f,z0);

theorem :: PDIFF_3:35
  f is_hpartial_differentiable`21_in z0 implies
  r(#)pdiff2(f,z0) is_partial_differentiable`1_in z0 &
  partdiff1((r(#)pdiff2(f,z0)),z0) = r*hpartdiff21(f,z0);

theorem :: PDIFF_3:36
  f is_hpartial_differentiable`22_in z0 implies
  r(#)pdiff2(f,z0) is_partial_differentiable`2_in z0 &
  partdiff2((r(#)pdiff2(f,z0)),z0) = r*hpartdiff22(f,z0);

theorem :: PDIFF_3:37
  f1 is_hpartial_differentiable`11_in z0 &
  f2 is_hpartial_differentiable`11_in z0 implies
  pdiff1(f1,z0)(#)pdiff1(f2,z0) is_partial_differentiable`1_in z0;

theorem :: PDIFF_3:38
  f1 is_hpartial_differentiable`12_in z0 &
  f2 is_hpartial_differentiable`12_in z0 implies
  pdiff1(f1,z0)(#)pdiff1(f2,z0) is_partial_differentiable`2_in z0;

theorem :: PDIFF_3:39
  f1 is_hpartial_differentiable`21_in z0 &
  f2 is_hpartial_differentiable`21_in z0 implies
  pdiff2(f1,z0)(#)pdiff2(f2,z0) is_partial_differentiable`1_in z0;

theorem :: PDIFF_3:40
  f1 is_hpartial_differentiable`22_in z0 &
  f2 is_hpartial_differentiable`22_in z0 implies
  pdiff2(f1,z0)(#)pdiff2(f2,z0) is_partial_differentiable`2_in z0;

theorem :: PDIFF_3:41
  for z0 being Element of REAL 2 holds
  f is_hpartial_differentiable`11_in z0
  implies SVF1(pdiff1(f,z0),z0) is_continuous_in proj(1,2).z0;

theorem :: PDIFF_3:42
  for z0 being Element of REAL 2 holds
  f is_hpartial_differentiable`12_in z0
  implies SVF2(pdiff1(f,z0),z0) is_continuous_in proj(2,2).z0;

theorem :: PDIFF_3:43
  for z0 being Element of REAL 2 holds
  f is_hpartial_differentiable`21_in z0
  implies SVF1(pdiff2(f,z0),z0) is_continuous_in proj(1,2).z0;

theorem :: PDIFF_3:44
  for z0 being Element of REAL 2 holds
  f is_hpartial_differentiable`22_in z0
  implies SVF2(pdiff2(f,z0),z0) is_continuous_in proj(2,2).z0;

theorem :: PDIFF_3:45
  f is_hpartial_differentiable`11_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;

theorem :: PDIFF_3:46
  f is_hpartial_differentiable`12_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;

theorem :: PDIFF_3:47
  f is_hpartial_differentiable`21_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;

theorem :: PDIFF_3:48
  f is_hpartial_differentiable`22_in z0 implies
  ex R st R.0 = 0 & R is_continuous_in 0;
