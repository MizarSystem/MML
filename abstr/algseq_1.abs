:: Construction of Finite Sequences over Ring and Left-, Right-,
:: and Bi-Modules over a Ring
::  by Micha{\l} Muzalewski and Les{\l}aw W. Szczerba
::
:: Received September 13, 1990
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies BOOLE, NORMSP_1, FUNCT_1, RLVECT_1, RELAT_1, FINSEQ_1, ALGSEQ_1,
      FUNCOP_1, GR_CY_1, ARYTM;
 notations TARSKI, XBOOLE_0, SUBSET_1, CARD_1, NUMBERS, NAT_1, RELAT_1,
      FUNCT_1, FUNCOP_1, STRUCT_0, FUNCT_2, XXREAL_0;
 constructors FUNCOP_1, XXREAL_0, XREAL_0, NAT_1, RLVECT_1;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, XREAL_0, STRUCT_0;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;


begin

reserve i,k,l,m,n for Nat,
  x for set;

canceled 9;

theorem :: ALGSEQ_1:10
  k in Segm n iff k < n;

theorem :: ALGSEQ_1:11
  Segm 0 = {} & Segm 1 = { 0 } & Segm 2 = { 0,1 };

theorem :: ALGSEQ_1:12
  n in Segm(n+1);

theorem :: ALGSEQ_1:13
  n <= m iff Segm n c= Segm m;

theorem :: ALGSEQ_1:14
  Segm n = Segm m implies n = m;

theorem :: ALGSEQ_1:15
  k <= n implies
  Segm k = Segm k /\ Segm n & Segm k = Segm n /\ Segm k;

theorem :: ALGSEQ_1:16
  (Segm k = Segm k /\ Segm n or Segm k = Segm n /\ Segm k)
  implies k <= n;

canceled;

::
::    Algebraic Sequences
::

reserve R for non empty ZeroStr;

definition
  let R;
  canceled;
  let F be sequence of R;
  attr F is finite-Support means
:: ALGSEQ_1:def 2

  ex n st for i st i >= n holds F.i = 0.R;
end;

registration
  let R;
  cluster finite-Support sequence of R;
end;

definition
  let R;
  mode AlgSequence of R is finite-Support sequence of R;
end;

reserve p,q for AlgSequence of R;

definition
  let R,p;
  let k be Nat;
  pred k is_at_least_length_of p means
:: ALGSEQ_1:def 3

  for i st i>=k holds p.i=0.R;
end;

definition
  let R,p;
  func len p -> Element of NAT means
:: ALGSEQ_1:def 4

  it is_at_least_length_of p
  & for m st m is_at_least_length_of p holds it<=m;
end;

canceled 4;

theorem :: ALGSEQ_1:22
  i>=len p implies p.i=0.R;

canceled;

theorem :: ALGSEQ_1:24
  (for i st i < k holds p.i<>0.R) implies len p>=k;

theorem :: ALGSEQ_1:25
  len p=k+1 implies p.k<>0.R;

::
:: SUPPORT
::

definition
  let R,p;
  func support p -> Subset of NAT equals
:: ALGSEQ_1:def 5

  Segm len p;
end;

canceled;

theorem :: ALGSEQ_1:27
  k = len p iff Segm k = support p;

scheme :: ALGSEQ_1:sch 1
 AlgSeqLambdaF{R()->non empty ZeroStr,A()->Nat, F(Nat)->Element of R()}:
  ex p being AlgSequence of R()
  st len p <= A() & for k st k < A() holds p.k=F(k);

theorem :: ALGSEQ_1:28
  len p = len q & (for k st k < len p holds p.k = q.k) implies p=q;

theorem :: ALGSEQ_1:29
  the carrier of R <> {0.R} implies
  for k ex p being AlgSequence of R st len p = k;

::
::      The Short AlgSequence of R
::

reserve x for Element of R;

definition
  let R,x;
  func <%x%> -> AlgSequence of R means
:: ALGSEQ_1:def 6

  len it <= 1 & it.0 = x;
end;

canceled;

theorem :: ALGSEQ_1:31
  p=<%0.R%> iff len p = 0;

theorem :: ALGSEQ_1:32
  p=<%0.R%> iff support p = {};

theorem :: ALGSEQ_1:33
  <%0.R%>.i=0.R;

theorem :: ALGSEQ_1:34
  p=<%0.R%> iff rng p = {0.R};

