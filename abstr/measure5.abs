:: Properties of the Intervals of Real Numbers
::  by J\'ozef Bia{\l}as
::
:: Received January 12, 1993
:: Copyright (c) 1993 Association of Mizar Users

environ

 vocabularies SUPINF_1, RLVECT_1, ARYTM_1, ORDINAL2, RCOMP_1, BOOLE, MEASURE5,
      ARYTM, SQUARE_1, MEMBERED;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, DOMAIN_1, NUMBERS, MEMBERED,
      XXREAL_0, XREAL_0, REAL_1, XXREAL_1, RCOMP_1, XXREAL_2, SUPINF_1,
      SUPINF_2;
 constructors DOMAIN_1, REAL_1, RCOMP_1, SUPINF_2, SUPINF_1, FINSET_1;
 registrations XBOOLE_0, NUMBERS, XXREAL_0, XREAL_0, MEMBERED, XXREAL_1,
      XXREAL_2, SUBSET_1, FINSET_1;
 requirements SUBSET, BOOLE, ARITHM, REAL;


begin  :: Some theorems about R_eal numbers

reserve x,y,a,b,a1,b1,a2,b2 for R_eal;

canceled 7;

theorem :: MEASURE5:8
  for a,b,c being R_eal holds (b <> -infty & b <> +infty &
  not (a = -infty & c = -infty) & not (a = +infty & c = +infty)) implies
  (c - b) + (b - a) = c - a;

:: PROPERTIES OF THE INTERVALS

scheme :: MEASURE5:sch 1
 RSetEq {P[set]} : for X1,X2 being Subset of REAL st
  (for x being R_eal holds x in X1 iff P[x]) &
  (for x being R_eal holds x in X2 iff P[x]) holds X1 = X2;

definition
  let a,b be ext-real number;
  func |[.a,b.]| -> Subset of REAL means
:: MEASURE5:def 1

  for x being R_eal holds
  x in it iff a <= x & x <= b & x in REAL;
end;

registration
  let a,b be real number;
  identify |[.a,b.]| with [.a,b.];
end;

definition
  let a,b be R_eal;
  redefine func ].a,b.[ -> Subset of REAL means
:: MEASURE5:def 2
 for x being R_eal holds x in it iff a < x & x < b;
end;

definition
  let a,b be ext-real number;
  func ].a,b.]| -> Subset of REAL means
:: MEASURE5:def 3

  for x being R_eal holds
  x in it iff (a < x & x <= b & x in REAL);
  func |[.a,b.[ -> Subset of REAL means
:: MEASURE5:def 4

  for x being R_eal holds
  x in it iff (a <= x & x < b & x in REAL);
end;

registration
  let a be real number, b be ext-real number;
  identify |[.a,b.[ with [.a,b.[;
end;

registration
  let a be ext-real number, b be real number;
  identify ].a,b.]| with ].a,b.];
end;

definition
  let IT be Subset of REAL;
  attr IT is open_interval means
:: MEASURE5:def 5

  ex a,b being R_eal st a <= b & IT = ].a,b.[;
  attr IT is closed_interval means
:: MEASURE5:def 6
  ex a,b being R_eal st a <= b & IT = |[.a,b.]|;
end;

registration
  cluster open_interval Subset of REAL;
  cluster closed_interval Subset of REAL;
end;

definition
  let IT be Subset of REAL;
  attr IT is right_open_interval means
:: MEASURE5:def 7
  ex a,b being R_eal st a <= b & IT = |[.a,b.[;
end;

notation
  let IT be Subset of REAL;
  synonym IT is left_closed_interval for IT is right_open_interval;
end;

definition
  let IT be Subset of REAL;
  attr IT is left_open_interval means
:: MEASURE5:def 8
  ex a,b being R_eal st a <= b & IT = ].a,b.]|;
end;

notation
  let IT be Subset of REAL;
  synonym IT is right_closed_interval for IT is left_open_interval;
end;

registration
  cluster right_open_interval Subset of REAL;
  cluster left_open_interval Subset of REAL;
end;

definition
  let IT be Subset of REAL;
  attr IT is interval means
:: MEASURE5:def 9

  IT is open_interval or IT is closed_interval or
  IT is right_open_interval or IT is left_open_interval;
end;

registration
  cluster interval Subset of REAL;
end;

definition
  mode Interval is interval Subset of REAL;
end;

reserve A,B for Interval;

registration
  cluster open_interval -> interval Subset of REAL;
  cluster closed_interval -> interval Subset of REAL;
  cluster right_open_interval -> interval Subset of REAL;
  cluster left_open_interval -> interval Subset of REAL;
end;

canceled 2;

theorem :: MEASURE5:11
  for x being set, a,b being R_eal st
  (x in ].a,b.[ or x in |[.a,b.]| or x in |[.a,b.[ or x in ].a,b.]|) holds
  x is R_eal;

theorem :: MEASURE5:12
  for a,b being R_eal st b < a holds
  |[.a,b.]| = {} & |[.a,b.[ = {} & ].a,b.]| = {};

theorem :: MEASURE5:13
  for a being R_eal holds |[.a,a.[ = {} & ].a,a.]| = {};

theorem :: MEASURE5:14
  for a being R_eal holds ((a = -infty or a = +infty) implies |[.a,a.]| = {}) &
  ((a <> -infty & a <> +infty) implies |[.a,a.]| = {a});

theorem :: MEASURE5:15
  for a,b being R_eal st b <= a holds
   |[.a,b.[ = {} & ].a,b.]| = {} & |[.a,b.]| c= {a}
   & |[.a,b.]| c= {b};

canceled;

theorem :: MEASURE5:17
  for a,b being R_eal st a < b ex x being R_eal st a < x & x < b & x in REAL;

theorem :: MEASURE5:18
  for a,b,c being R_eal st a < b & a < c
  ex x being R_eal st a < x & x < b & x < c & x in REAL;

theorem :: MEASURE5:19
  for a,b,c being R_eal st a < c & b < c
  ex x being R_eal st a < x & b < x & x < c & x in REAL;

theorem :: MEASURE5:20
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ & not x in ].a2,b2.[) or
  (not x in ].a1,b1.[ & x in ].a2,b2.[));

theorem :: MEASURE5:21
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st x in ].a1,b1.[ & not x in ].a2,b2.[
  or not x in ].a1,b1.[ & x in ].a2,b2.[;

theorem :: MEASURE5:22
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in ].a2,b2.[) or (not x in |[.a1,b1.]| & x in ].a2,b2.[));

theorem :: MEASURE5:23
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in ].a2,b2.[) or (not x in |[.a1,b1.]| & x in ].a2,b2.[));

theorem :: MEASURE5:24
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in |[.a2,b2.]|) or (not x in ].a1,b1.[ & x in |[.a2,b2.]|));

theorem :: MEASURE5:25
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in |[.a2,b2.]|) or (not x in ].a1,b1.[ & x in |[.a2,b2.]|));

theorem :: MEASURE5:26
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in |[.a2,b2.[) or (not x in ].a1,b1.[ & x in |[.a2,b2.[));

theorem :: MEASURE5:27
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in |[.a2,b2.[) or (not x in ].a1,b1.[ & x in |[.a2,b2.[));

theorem :: MEASURE5:28
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in ].a2,b2.[) or (not x in |[.a1,b1.[ & x in ].a2,b2.[));

theorem :: MEASURE5:29
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in ].a2,b2.[) or (not x in |[.a1,b1.[ & x in ].a2,b2.[));

theorem :: MEASURE5:30
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in ].a2,b2.]|) or (not x in ].a1,b1.[ & x in ].a2,b2.]|));

theorem :: MEASURE5:31
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.[ &
  not x in ].a2,b2.]|) or (not x in ].a1,b1.[ & x in ].a2,b2.]|));

theorem :: MEASURE5:32
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in ].a2,b2.[) or (not x in ].a1,b1.]| & x in ].a2,b2.[));

theorem :: MEASURE5:33
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in ].a2,b2.[) or (not x in ].a1,b1.]| & x in ].a2,b2.[));

theorem :: MEASURE5:34
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in |[.a2,b2.]|) or (not x in |[.a1,b1.]| & x in |[.a2,b2.]|));

theorem :: MEASURE5:35
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in |[.a2,b2.]|) or (not x in |[.a1,b1.]| & x in |[.a2,b2.]|));

theorem :: MEASURE5:36
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in |[.a2,b2.[) or (not x in |[.a1,b1.]| & x in |[.a2,b2.[));

theorem :: MEASURE5:37
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in |[.a2,b2.[) or (not x in |[.a1,b1.]| & x in |[.a2,b2.[));

theorem :: MEASURE5:38
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in |[.a2,b2.]|) or (not x in |[.a1,b1.[ & x in |[.a2,b2.]|));

theorem :: MEASURE5:39
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in |[.a2,b2.]|) or (not x in |[.a1,b1.[ & x in |[.a2,b2.]|));

theorem :: MEASURE5:40
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in ].a2,b2.]|) or (not x in |[.a1,b1.]| & x in ].a2,b2.]|));

theorem :: MEASURE5:41
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.]| &
  not x in ].a2,b2.]|) or (not x in |[.a1,b1.]| & x in ].a2,b2.]|));

theorem :: MEASURE5:42
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in |[.a2,b2.]|) or (not x in ].a1,b1.]| & x in |[.a2,b2.]|));

theorem :: MEASURE5:43
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in |[.a2,b2.]|) or (not x in ].a1,b1.]| & x in |[.a2,b2.]|));

theorem :: MEASURE5:44
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in |[.a2,b2.[) or (not x in |[.a1,b1.[ & x in |[.a2,b2.[));

theorem :: MEASURE5:45
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in |[.a2,b2.[) or (not x in |[.a1,b1.[ & x in |[.a2,b2.[));

theorem :: MEASURE5:46
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in ].a2,b2.]|) or (not x in |[.a1,b1.[ & x in ].a2,b2.]|));

theorem :: MEASURE5:47
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in |[.a1,b1.[ &
  not x in ].a2,b2.]|) or (not x in |[.a1,b1.[ & x in ].a2,b2.]|));

theorem :: MEASURE5:48
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in |[.a2,b2.[) or (not x in ].a1,b1.]| & x in |[.a2,b2.[));

theorem :: MEASURE5:49
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in |[.a2,b2.[) or (not x in ].a1,b1.]| & x in |[.a2,b2.[));

theorem :: MEASURE5:50
  a1 < a2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in ].a2,b2.]|) or (not x in ].a1,b1.]| & x in ].a2,b2.]|));

theorem :: MEASURE5:51
  b1 < b2 & (a1 < b1 or a2 < b2) implies
  ex x being R_eal st ((x in ].a1,b1.]| &
  not x in ].a2,b2.]|) or (not x in ].a1,b1.]| & x in ].a2,b2.]|));

theorem :: MEASURE5:52
  (a1 < b1 &
  ((A = ].a1,b1.[ or A = |[.a1,b1.]| or A = |[.a1,b1.[ or A = ].a1,b1.]|) &
  (A = ].a2,b2.[ or A = |[.a2,b2.]| or A = |[.a2,b2.[ or A = ].a2,b2.]|)))
  implies (a1 = a2 & b1 = b2);

definition
  let A be ext-real-membered set;
  func vol A -> R_eal equals
:: MEASURE5:def 10
 sup A - inf A if A <> {}
    otherwise 0.;
end;

canceled;

theorem :: MEASURE5:54
  for a,b being R_eal holds
  ((a < b implies vol ].a,b.[ = b - a) &
  (b <= a implies vol ].a,b.[ = 0.));

theorem :: MEASURE5:55
  for a,b being R_eal holds
  ((a <= b implies vol [.a,b.] = b - a) &
  (b < a implies vol [.a,b.] = 0.));

theorem :: MEASURE5:56
  for a,b being R_eal holds
  ((a < b implies vol [.a,b.[ = b - a) & (b <= a implies vol [.a,b.[ = 0.));

theorem :: MEASURE5:57
  for a,b being R_eal holds
  ((a < b implies vol ].a,b.] = b - a) & (b <= a implies vol ].a,b.] = 0.));

canceled;

theorem :: MEASURE5:59
  for a,b being R_eal holds (a = -infty & b = +infty &
  (A = ].a,b.[ or A = [.a,b.] or A = [.a,b.[ or A = ].a,b.]))
  implies vol(A) = +infty;

registration
  cluster empty Interval;
end;

definition
  redefine func {} -> Interval;
end;

theorem :: MEASURE5:60
  vol {} = 0.;

theorem :: MEASURE5:61
  (A c= B & B =[.a,b.] & b <= a) implies (vol(A) = 0. & vol(B) = 0.);

theorem :: MEASURE5:62
  A c= B implies vol A <= vol B;

theorem :: MEASURE5:63
  0. <= vol A;

theorem :: MEASURE5:64
 for a,b being ext-real number
  holds |[.a,b.]| = [.a,b.] /\ REAL;

theorem :: MEASURE5:65
 for a,b being ext-real number
  holds |[.a,b.[ = [.a,b.[ /\ REAL;

theorem :: MEASURE5:66
 for a,b being ext-real number
  holds ].a,b.]| = ].a,b.] /\ REAL;

theorem :: MEASURE5:67
 for a,b being ext-real number st a in REAL & b in REAL
  holds |[.a,b.]| = [.a,b.];

theorem :: MEASURE5:68
 for a,b being ext-real number st a in REAL
  holds |[.a,b.[ = [.a,b.[;

theorem :: MEASURE5:69
 for a,b being ext-real number st b in REAL
  holds ].a,b.]| = ].a,b.];

theorem :: MEASURE5:70
 for a being ext-real number
  holds ].a,+infty.]| = ].a,+infty.[;

theorem :: MEASURE5:71
 for a being ext-real number st a in REAL
  holds |[.a,+infty.]| = [.a,+infty.[;

theorem :: MEASURE5:72
 for a being ext-real number st a in REAL
  holds |[.-infty,a.]| = ].-infty,a.];

theorem :: MEASURE5:73
 for a being ext-real number
  holds |[.-infty,a.[ = ].-infty,a.[;

