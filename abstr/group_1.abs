:: Groups
::  by Wojciech A. Trybulec
::
:: Received July 3, 1990
:: Copyright (c) 1990-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, NAT_1, INT_1, XBOOLE_0, ALGSTR_0, SUBSET_1, BINOP_2,
      RELAT_1, REAL_1, ARYTM_3, CARD_1, ARYTM_1, BINOP_1, STRUCT_0, FUNCT_1,
      SETWISEO, FINSEQOP, ZFMISC_1, NEWTON, COMPLEX1, XXREAL_0, FINSET_1,
      TARSKI, RLVECT_1, SUPINF_2, GROUP_1;
 notations TARSKI, ZFMISC_1, SUBSET_1, CARD_1, NUMBERS, XCMPLX_0, XXREAL_0,
      RELAT_1, FUNCT_1, REAL_1, FUNCT_2, BINOP_2, BINOP_1, STRUCT_0, ALGSTR_0,
      RLVECT_1, INT_1, NAT_1, FINSEQOP, SETWISEO, INT_2;
 constructors BINOP_1, SETWISEO, XXREAL_0, REAL_1, NAT_1, NAT_D, BINOP_2,
      FINSEQOP, RLVECT_1, SEQ_1;
 registrations ORDINAL1, RELSET_1, FINSET_1, NUMBERS, XXREAL_0, XREAL_0, NAT_1,
      INT_1, STRUCT_0, XBOOLE_0, ALGSTR_0, CARD_1, REAL_1;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;


begin

reserve m,n for Nat;
reserve i,j for Integer;
reserve S for non empty multMagma;
reserve r,r1,r2,s,s1,s2,t,t1,t2 for Element of S;

definition
  let IT be multMagma;
  canceled;
  attr IT is unital means
:: GROUP_1:def 2

  ex e being Element of IT st for h being
  Element of IT holds h * e = h & e * h = h;
  attr IT is Group-like means
:: GROUP_1:def 3

  ex e being Element of IT st for h being
Element of IT holds h * e = h & e * h = h & ex g being Element of IT st h * g =
  e & g * h = e;
  attr IT is associative means
:: GROUP_1:def 4

  for x,y,z being Element of IT holds (x*y )*z = x*(y*z);
end;

registration
  cluster Group-like -> unital multMagma;
end;

registration
  cluster strict Group-like associative non empty multMagma;
end;

definition
  mode Group is Group-like associative non empty multMagma;
end;

canceled 4;

theorem :: GROUP_1:5
  ((for r,s,t holds (r * s) * t = r * (s * t)) & ex t st for s1 holds s1
* t = s1 & t * s1 = s1 & ex s2 st s1 * s2 = t & s2 * s1 = t) implies S is Group
;

theorem :: GROUP_1:6
  (for r,s,t holds r * s * t = r * (s * t)) & (for r,s holds (ex t st r
  * t = s) & (ex t st t * r = s)) implies S is associative Group-like;

theorem :: GROUP_1:7
  multMagma (# REAL, addreal #) is associative Group-like;

reserve G for Group-like non empty multMagma;
reserve e,h for Element of G;

definition
  let G be multMagma such that
 G is unital;
  func 1_G -> Element of G means
:: GROUP_1:def 5

  for h being Element of G holds h * it = h & it * h = h;
end;

canceled 2;

theorem :: GROUP_1:10
  (for h holds h * e = h & e * h = h) implies e = 1_G;

reserve G for Group;
reserve f,g,h for Element of G;

definition
  let G,h;
  func h" -> Element of G means
:: GROUP_1:def 6

  h * it = 1_G & it * h = 1_G;
  involutiveness;
end;

canceled;

theorem :: GROUP_1:12
  h * g = 1_G & g * h = 1_G implies g = h";

canceled;

theorem :: GROUP_1:14
  h * g = h * f or g * h = f * h implies g = f;

theorem :: GROUP_1:15
  h * g = h or g * h = h implies g = 1_G;

theorem :: GROUP_1:16
  (1_G)" = 1_G;

theorem :: GROUP_1:17
  h" = g" implies h = g;

theorem :: GROUP_1:18
  h" = 1_G implies h = 1_G;

theorem :: GROUP_1:19
  h"" = h;

theorem :: GROUP_1:20
  h * g = 1_G implies h = g" & g = h";

theorem :: GROUP_1:21
  h * f = g iff f = h" * g;

theorem :: GROUP_1:22
  f * h = g iff f = g * h";

theorem :: GROUP_1:23
  ex f st g * f = h;

theorem :: GROUP_1:24
  ex f st f * g = h;

theorem :: GROUP_1:25
  (h * g)" = g" * h";

theorem :: GROUP_1:26
  g * h = h * g iff (g * h)" = g" * h";

theorem :: GROUP_1:27
  g * h = h * g iff g" * h" = h" * g";

theorem :: GROUP_1:28
  g * h = h * g iff g * h" = h" * g;

reserve u for UnOp of G;

definition
  let G;
  func inverse_op(G) -> UnOp of G means
:: GROUP_1:def 7

  it.h = h";
end;

canceled 3;

registration
  let G be associative non empty multMagma;
  cluster  the multF of G -> associative;
end;

theorem :: GROUP_1:32
  for G being unital non empty multMagma holds 1_G is_a_unity_wrt
  the multF of G;

theorem :: GROUP_1:33
  for G being unital non empty multMagma holds the_unity_wrt the
  multF of G = 1_G;

canceled;

registration
  let G be unital non empty multMagma;
  cluster the multF of G -> having_a_unity;
end;

theorem :: GROUP_1:35
  inverse_op(G) is_an_inverseOp_wrt the multF of G;

canceled;

registration
  let G;
  cluster the multF of G -> having_an_inverseOp;
end;

theorem :: GROUP_1:37
  the_inverseOp_wrt the multF of G = inverse_op(G);

definition
  let G be non empty multMagma;
  func power G -> Function of [:the carrier of G,NAT:], the carrier of G means
:: GROUP_1:def 8

  for h being Element of G holds it.(h,0) = 1_G & for n being Element of
  NAT holds it.(h,n + 1) = it.(h,n) * h;
end;

definition
  let G,i,h;
  func h |^ i -> Element of G equals
:: GROUP_1:def 9

  power(G).(h,abs(i)) if 0 <= i
  otherwise (power(G).(h,abs(i)))";
end;

definition
  let G,n,h;
  redefine func h |^ n equals
:: GROUP_1:def 10
  power(G).(h,n);
end;

canceled 5;

theorem :: GROUP_1:43
  h |^ 0 = 1_G;

theorem :: GROUP_1:44
  h |^ 1 = h;

theorem :: GROUP_1:45
  h |^ 2 = h * h;

theorem :: GROUP_1:46
  h |^ 3 = h * h * h;

theorem :: GROUP_1:47
  h |^ 2 = 1_G iff h" = h;

canceled 12;

theorem :: GROUP_1:60
  i <= 0 implies h |^ i = (h |^ abs(i))";

theorem :: GROUP_1:61
  (1_G) |^ i = 1_G;

theorem :: GROUP_1:62
  h |^ (-1) = h";

theorem :: GROUP_1:63
  h |^ (i + j) = (h |^ i) * (h |^ j);

canceled 2;

theorem :: GROUP_1:66
  h |^ (i + 1) = h |^ i * h & h |^ (i + 1) = h * (h |^ i);

theorem :: GROUP_1:67
  h |^ (i * j) = h |^ i |^ j;

canceled 2;

theorem :: GROUP_1:70
  h |^ -i = (h |^ i)";

canceled;

theorem :: GROUP_1:72
  h" |^ i = (h |^ i)";

theorem :: GROUP_1:73
  g * h = h * g implies (g * h) |^ i = g |^ i * (h |^ i);

theorem :: GROUP_1:74
  g * h = h * g implies g |^ i * (h |^ j) = h |^ j * (g |^ i);

canceled 2;

theorem :: GROUP_1:77
  g * h = h * g implies g * (h |^ i) = h |^ i * g;

definition
  let G,h;
  attr h is being_of_order_0 means
:: GROUP_1:def 11

  h |^ n = 1_G implies n = 0;
end;

canceled 2;

registration
  let G;
  cluster 1_G -> non being_of_order_0;
end;

definition
  let G,h;
  func ord h -> Element of NAT means
:: GROUP_1:def 12

  it = 0 if h is being_of_order_0
  otherwise
  h |^ it = 1_G & it <> 0 & for m st h |^ m = 1_G & m <> 0 holds it <= m;
end;

canceled 2;

theorem :: GROUP_1:82
  h |^ ord h = 1_G;

canceled;

theorem :: GROUP_1:84
  ord 1_G = 1;

theorem :: GROUP_1:85
  ord h = 1 implies h = 1_G;

theorem :: GROUP_1:86
  h |^ n = 1_G implies ord h divides n;

definition
  let G be finite 1-sorted;
  canceled;
  redefine func card G -> Element of NAT;
end;

canceled 3;

theorem :: GROUP_1:90
  for G being non empty finite 1-sorted holds card G >= 1;

definition
  canceled 2;
  let IT be multMagma;
  attr IT is commutative means
:: GROUP_1:def 16

  for x, y being Element of IT holds x*y = y*x;
end;

registration
  cluster strict commutative Group;
end;

definition
  let FS be commutative non empty multMagma;
  let x,y be Element of FS;
  redefine func x*y;
  commutativity;
end;

canceled;

theorem :: GROUP_1:92
  multMagma (# REAL, addreal #) is commutative Group;

reserve A for commutative Group;
reserve a,b for Element of A;

canceled;

theorem :: GROUP_1:94
  (a * b)" = a" * b";

canceled;

theorem :: GROUP_1:96
  (a * b) |^ i = a |^ i * (b |^ i);

theorem :: GROUP_1:97
  addLoopStr (# the carrier of A, the multF of A, 1_A #) is Abelian
  add-associative right_zeroed right_complementable;

begin :: Addenda
:: from COMPTRIG, 2006.08.12, A.T.

theorem :: GROUP_1:98
  for L be unital non empty multMagma for x be Element of L holds
  (power L).(x,1) = x;

theorem :: GROUP_1:99
  for L be unital non empty multMagma for x be Element of L holds (power
  L).(x,2) = x*x;

theorem :: GROUP_1:100
  for L be associative commutative unital non empty multMagma for x,y be
Element of L for n be Element of NAT holds (power L).(x*y,n) = (power L).(x,n)
  * (power L).(y,n);

:: Moved from ENDALG, 17.01_2006, AK

definition
  let G,H be multMagma;
  let IT be Function of G,H;
  attr IT is unity-preserving means
:: GROUP_1:def 17
  IT.1_G = 1_H;
end;
