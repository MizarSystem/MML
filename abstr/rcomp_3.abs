:: Properties of Connected Subsets of the Real Line
::  by Artur Korni{\l}owicz
:: 
:: Received February 22, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies PRE_TOPC, RELAT_1, ARYTM, SUBSET_1, WELLORD1, FINSET_1, METRIC_1,
      FUNCT_1, ORDINAL2, ARYTM_1, SQUARE_1, ARYTM_3, RCOMP_1, TOPMETR, JORDAN1,
      BOOLE, SETFAM_1, TARSKI, COMPTS_1, FINSEQ_1, RELAT_2, RCOMP_3, FINSEQ_4,
      ORDERS_2, CARD_1, MEMBERED, SEQ_2, LATTICES, TOPS_1, LIMFUNC1, REALSET1,
      WELLORD2;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, RELAT_1, SETFAM_1, TEX_1,
      FUNCT_1, RELSET_1, FUNCT_2, SEQ_1, FINSET_1, ORDINAL2, WELLORD1,
      ORDERS_1, WELLORD2, RELAT_2, CARD_1, MEMBERED, NUMBERS, XCMPLX_0,
      XREAL_0, REAL_1, NAT_1, LIMFUNC1, SEQM_3, FINSEQ_1, SEQ_4, FINSEQ_4,
      RCOMP_1, RCOMP_2, PRE_CIRC, SFMASTR3, STRUCT_0, PRE_TOPC, TOPS_1,
      METRIC_1, TOPS_2, COMPTS_1, CONNSP_1, TEX_2, TOPMETR, PCOMPS_1, PSCOMP_1,
      BORSUK_6, TOPALG_2, TOPREALB, BINARITH, JCT_MISC, REALSET2;
 constructors CONNSP_1, COMPTS_1, REALSET2, COMPUT_1, PSCOMP_1, TOPREALB,
      FINSEQ_4, TEX_1, TRIANG_1, BINARITH, JCT_MISC, RCOMP_2, LIMFUNC1, TOPS_1,
      PRE_CIRC, PROB_1, CARD_4, WAYBEL35;
 registrations STRUCT_0, RELSET_1, XREAL_0, PRE_TOPC, SUBSET_1, INT_1,
      TOPALG_2, TOPS_1, YELLOW13, TOPREAL6, BORSUK_6, PSCOMP_1, TOPREALB,
      FINSEQ_1, FINSET_1, NAT_1, WAYBEL_7, TREES_2, MEMBERED, SPRECT_1,
      BORSUK_5, RFINSEQ, RCOMP_1, REALSET1, FCONT_3, METRIC_1;
 requirements NUMERALS, BOOLE, SUBSET, ARITHM, REAL;


begin

registration
  let X be non empty set;
  cluster [#]X -> non empty;
end;

registration
  cluster -> real-membered SubSpace of RealSpace;
end;

registration
  let S be real-membered 1-sorted;
  cluster the carrier of S -> real-membered;
end;

registration
  cluster non empty finite bounded_below bounded_above (real-membered set);
end;

theorem :: RCOMP_3:1
  for X being non empty bounded_below (real-membered set),
      Y being closed Subset of REAL st X c= Y holds inf X in Y;

theorem :: RCOMP_3:2
  for X being non empty bounded_above (real-membered set),
      Y being closed Subset of REAL st X c= Y holds sup X in Y;

theorem :: RCOMP_3:3
  for X, Y being Subset of REAL holds Cl(X \/ Y) = Cl X \/ Cl Y;

begin :: Intervals

reserve a, b, r, s for real number;

registration
  let r, s;
  cluster [.r,s.[ -> bounded;
  cluster ].r,s.] -> bounded;
  cluster ].r,s.[ -> bounded;
end;

registration
  let r, s;
  cluster [.r,s.] -> connected;
  cluster [.r,s.[ -> connected;
  cluster ].r,s.] -> connected;
  cluster ].r,s.[ -> connected;
end;

registration
  cluster open bounded connected non empty Subset of REAL;
end;

theorem :: RCOMP_3:4
  r < s implies inf [.r,s.[ = r;

theorem :: RCOMP_3:5
  r < s implies sup [.r,s.[ = s;

theorem :: RCOMP_3:6
  r < s implies inf ].r,s.] = r;

theorem :: RCOMP_3:7
  r < s implies sup ].r,s.] = s;

theorem :: RCOMP_3:8
  (a <= b or r <= s) & [.a,b.] = [.r,s.] implies a = r & b = s;

theorem :: RCOMP_3:9
  (a < b or r < s) & ].a,b.[ = ].r,s.[ implies a = r & b = s;

theorem :: RCOMP_3:10
  (a < b or r < s) & ].a,b.] = ].r,s.] implies a = r & b = s;

theorem :: RCOMP_3:11
  (a < b or r < s) & [.a,b.[ = [.r,s.[ implies a = r & b = s;

theorem :: RCOMP_3:12
  a < b & [.a,b.[ c= [.r,s.] implies r <= a & b <= s;

theorem :: RCOMP_3:13
  a < b & [.a,b.[ c= [.r,s.[ implies r <= a & b <= s;

theorem :: RCOMP_3:14
  a < b & ].a,b.] c= [.r,s.] implies r <= a & b <= s;

theorem :: RCOMP_3:15
  a < b & ].a,b.] c= ].r,s.] implies r <= a & b <= s;

begin :: Halflines

theorem :: RCOMP_3:16
  [.a,b.]` = left_open_halfline(a) \/ right_open_halfline(b);

theorem :: RCOMP_3:17
  ].a,b.[` = left_closed_halfline(a) \/ right_closed_halfline(b);

theorem :: RCOMP_3:18
  [.a,b.[` = left_open_halfline(a) \/ right_closed_halfline(b);

theorem :: RCOMP_3:19
  ].a,b.]` = left_closed_halfline(a) \/ right_open_halfline(b);

theorem :: RCOMP_3:20
  a <= b implies
  [.a,b.] /\ (left_closed_halfline(a) \/ right_closed_halfline(b)) = {a,b};

registration
  let a;
  cluster left_closed_halfline(a) -> non bounded_below bounded_above connected;
  cluster left_open_halfline(a) -> non bounded_below bounded_above connected;
  cluster right_closed_halfline(a) ->
          bounded_below non bounded_above connected;
  cluster right_open_halfline(a) -> bounded_below non bounded_above connected;
end;

theorem :: RCOMP_3:21
  sup left_closed_halfline(a) = a;

theorem :: RCOMP_3:22
  sup left_open_halfline(a) = a;

theorem :: RCOMP_3:23
  inf right_closed_halfline(a) = a;

theorem :: RCOMP_3:24
  inf right_open_halfline(a) = a;

begin :: Connectedness

registration
  cluster [#]REAL -> connected non bounded_below non bounded_above;
end;

theorem :: RCOMP_3:25
  for X being bounded connected Subset of REAL st
  inf X in X & sup X in X holds X = [.inf X,sup X.];

theorem :: RCOMP_3:26
  for X being bounded Subset of REAL st not inf X in X holds
  X c= ].inf X,sup X.];

theorem :: RCOMP_3:27
  for X being bounded connected Subset of REAL st
  not inf X in X & sup X in X holds X = ].inf X,sup X.];

theorem :: RCOMP_3:28
  for X being bounded Subset of REAL st not sup X in X holds
  X c= [.inf X,sup X.[;

theorem :: RCOMP_3:29
  for X being bounded connected Subset of REAL st
  inf X in X & not sup X in X holds X = [.inf X,sup X.[;

theorem :: RCOMP_3:30
  for X being bounded Subset of REAL st not inf X in X & not sup X in X
  holds X c= ].inf X,sup X.[;

theorem :: RCOMP_3:31
  for X being non empty bounded connected Subset of REAL st
  not inf X in X & not sup X in X holds X = ].inf X,sup X.[;

theorem :: RCOMP_3:32
  for X being Subset of REAL st X is bounded_above holds
  X c= left_closed_halfline(sup X);

theorem :: RCOMP_3:33
  for X being connected Subset of REAL st
  X is not bounded_below & X is bounded_above & sup X in X holds
  X = left_closed_halfline(sup X);

theorem :: RCOMP_3:34
  for X being Subset of REAL st X is bounded_above & not sup X in X holds
  X c= left_open_halfline(sup X);

theorem :: RCOMP_3:35
  for X being non empty connected Subset of REAL st
  X is not bounded_below & X is bounded_above & not sup X in X holds
  X = left_open_halfline(sup X);

theorem :: RCOMP_3:36
  for X being Subset of REAL st X is bounded_below holds
  X c= right_closed_halfline(inf X);

theorem :: RCOMP_3:37
  for X being connected Subset of REAL st
  X is bounded_below & X is not bounded_above & inf X in X holds
  X = right_closed_halfline(inf X);

theorem :: RCOMP_3:38
  for X being Subset of REAL st X is bounded_below & not inf X in X holds
  X c= right_open_halfline(inf X);

theorem :: RCOMP_3:39
  for X being non empty connected Subset of REAL st
  X is bounded_below & X is not bounded_above & not inf X in X holds
  X = right_open_halfline(inf X);

theorem :: RCOMP_3:40
  for X being connected Subset of REAL st
  X is not bounded_above & X is not bounded_below
  holds X = REAL;

theorem :: RCOMP_3:41
  for X being connected Subset of REAL holds X is empty or X = REAL or
  (ex a st X = left_closed_halfline(a)) or
  (ex a st X = left_open_halfline(a)) or
  (ex a st X = right_closed_halfline(a)) or
  (ex a st X = right_open_halfline(a)) or
  (ex a, b st a <= b & X = [.a,b.]) or
  (ex a, b st a < b & X = [.a,b.[) or
  (ex a, b st a < b & X = ].a,b.]) or
  (ex a, b st a < b & X = ].a,b.[);

theorem :: RCOMP_3:42
  for X being non empty connected Subset of REAL st not r in X holds
  r <= inf X or sup X <= r;

theorem :: RCOMP_3:43
  for X, Y being non empty bounded connected Subset of REAL
  st inf X <= inf Y & sup Y <= sup X &
  (inf X = inf Y & inf Y in Y implies inf X in X) &
  (sup X = sup Y & sup Y in Y implies sup X in X)
  holds Y c= X;

registration
  cluster open closed connected non empty non bounded Subset of REAL;
end;

begin :: R^1

theorem :: RCOMP_3:44
  for X being Subset of R^1 st a <= b & X = [.a,b.] holds Fr X = {a,b};

theorem :: RCOMP_3:45
  for X being Subset of R^1 st a < b & X = ].a,b.[ holds Fr X = {a,b};

theorem :: RCOMP_3:46
  for X being Subset of R^1 st a < b & X = [.a,b.[ holds Fr X = {a,b};

theorem :: RCOMP_3:47
  for X being Subset of R^1 st a < b & X = ].a,b.] holds Fr X = {a,b};

theorem :: RCOMP_3:48
  for X being Subset of R^1 st X = [.a,b.] holds Int X = ].a,b.[;

theorem :: RCOMP_3:49
  for X being Subset of R^1 st X = ].a,b.[ holds Int X = ].a,b.[;

theorem :: RCOMP_3:50
  for X being Subset of R^1 st X = [.a,b.[ holds Int X = ].a,b.[;

theorem :: RCOMP_3:51
  for X being Subset of R^1 st X = ].a,b.] holds Int X = ].a,b.[;

registration
  let X be convex Subset of R^1;
  cluster R^1 | X -> convex;
end;

registration
  let A be connected Subset of REAL;
  cluster R^1(A) -> convex;
end;

theorem :: RCOMP_3:52
  for X being Subset of R^1, Y being Subset of REAL st X = Y holds
  X is connected iff Y is connected;

begin :: Closed Interval TSpace

registration
  let r;
  cluster Closed-Interval-TSpace(r,r) -> trivial;
end;

theorem :: RCOMP_3:53
  r <= s implies for A being Subset of Closed-Interval-TSpace(r,s) holds
  A is bounded Subset of REAL;

theorem :: RCOMP_3:54
  r <= s implies for X being Subset of Closed-Interval-TSpace(r,s) st
  X = [.a,b.[ & r < a & b <= s holds Int X = ].a,b.[;

theorem :: RCOMP_3:55
  r <= s implies for X being Subset of Closed-Interval-TSpace(r,s) st
  X = ].a,b.] & r <= a & b < s holds Int X = ].a,b.[;

theorem :: RCOMP_3:56
  for X being Subset of Closed-Interval-TSpace(r,s),
      Y being Subset of REAL st X = Y holds
  X is connected iff Y is connected;

registration
  let T be TopSpace;
  cluster open closed connected Subset of T;
end;

registration
  let T be non empty connected TopSpace;
  cluster non empty open closed connected Subset of T;
end;

theorem :: RCOMP_3:57
  r <= s implies
  for X being open connected Subset of Closed-Interval-TSpace(r,s) holds
    X is empty or X = [.r,s.] or
    (ex a being real number st r < a & a <= s & X = [.r,a.[) or
    (ex a being real number st r <= a & a < s & X = ].a,s.]) or
    (ex a, b being real number st r <= a & a < b & b <= s &
        X = ].a,b.[);

begin

theorem :: RCOMP_3:58
  for T being 1-sorted, F being Subset-Family of T holds
  F is_a_cover_of T iff F is_a_cover_of [#]T;

theorem :: RCOMP_3:59
  for T being 1-sorted, F being finite Subset-Family of T
  for F1 being Subset-Family of T st
  F is_a_cover_of T &
  F1 = F \ {X where X is Subset of T:
    X in F & ex Y being Subset of T st Y in F & X c= Y & X <> Y}
  holds F1 is_a_cover_of T;

theorem :: RCOMP_3:60
  for S being trivial non empty 1-sorted, s being Point of S,
  F being Subset-Family of S st F is_a_cover_of S holds
  {s} in F;

definition
  let T be TopStruct, F be Subset-Family of T;
  attr F is connected means
:: RCOMP_3:def 1
  for X being Subset of T st X in F holds X is connected;
end;

registration
  let T be TopSpace;
  cluster non empty open closed connected Subset-Family of T;
end;

reserve
  n, m for natural number,
  F for Subset-Family of Closed-Interval-TSpace(r,s);

theorem :: RCOMP_3:61
  for L being TopSpace, G, G1 being Subset-Family of L st
  G is_a_cover_of L & G is finite
  for ALL being set st
  G1 = G \ {X where X is Subset of L: X in G & ex Y being Subset of L st
  Y in G & X c= Y & X <> Y} &
  ALL = {C where C is Subset-Family of L: C is_a_cover_of L & C c= G1}
  holds ALL has_lower_Zorn_property_wrt RelIncl ALL;

theorem :: RCOMP_3:62
  for L being TopSpace, G, ALL being set st
  ALL = {C where C is Subset-Family of L: C is_a_cover_of L & C c= G}
  for M being set st M is_minimal_in RelIncl ALL & M in field RelIncl ALL
  for A1 being Subset of L st A1 in M holds
  not ex A2, A3 being Subset of L st
  A2 in M & A3 in M & A1 c= A2 \/ A3 & A1 <> A2 & A1 <> A3;

definition
  let r, s be real number;
  let F be Subset-Family of Closed-Interval-TSpace(r,s) such that
   F is_a_cover_of Closed-Interval-TSpace(r,s) and
   F is open and
   F is connected and
   r <= s;
  mode IntervalCover of F -> FinSequence of bool REAL means
:: RCOMP_3:def 2
  rng it c= F & union rng it = [.r,s.] &

  (for n being natural number st 1 <= n holds
    (n <= len it implies it/.n is non empty) &
    (n+1 <= len it implies
      inf(it/.n) <= inf(it/.(n+1)) &
      sup(it/.n) <= sup(it/.(n+1)) &
      inf(it/.(n+1)) < sup(it/.n)) &
    (n+2 <= len it implies sup(it/.n) <= inf(it/.(n+2)))) &

  ([.r,s.] in F implies it = <*[.r,s.]*>) &
  (not [.r,s.] in F implies
  (ex p being real number st r < p & p <= s & it.1 = [.r,p.[) &
  (ex p being real number st r <= p & p < s & it.len it = ].p,s.]) &
  (for n being natural number st 1 < n & n < len it
    ex p, q being real number st r <= p & p < q & q <= s & it.n = ].p,q.[));
end;

theorem :: RCOMP_3:63
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  [.r,s.] in F implies
  <*[.r,s.]*> is IntervalCover of F;

reserve C for IntervalCover of F;

theorem :: RCOMP_3:64
  for F being Subset-Family of Closed-Interval-TSpace(r,r),
  C being IntervalCover of F holds
  F is_a_cover_of Closed-Interval-TSpace(r,r) & F is open connected
  implies C = <*[.r,r.]*>;

theorem :: RCOMP_3:65
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected &
  r <= s implies 1 <= len C;

theorem :: RCOMP_3:66
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected &
  r <= s & len C = 1 implies C = <*[.r,s.]*>;

theorem :: RCOMP_3:67
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  n in dom C & m in dom C & n < m implies
  inf(C/.n) <= inf(C/.m);

theorem :: RCOMP_3:68
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  n in dom C & m in dom C & n < m implies
  sup(C/.n) <= sup(C/.m);

theorem :: RCOMP_3:69
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  1 <= n & n+1 <= len C implies
  ].inf(C/.(n+1)),sup(C/.n).[ is non empty;

theorem :: RCOMP_3:70
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s
  implies inf(C/.1) = r;

theorem :: RCOMP_3:71
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s
  implies r in C/.1;

theorem :: RCOMP_3:72
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s
  implies sup(C/.len C) = s;

theorem :: RCOMP_3:73
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s
  implies s in C/.len C;

definition
  let r, s be real number;
  let F be Subset-Family of Closed-Interval-TSpace(r,s),
      C be IntervalCover of F such that
   F is_a_cover_of Closed-Interval-TSpace(r,s) and
   F is open and
   F is connected and
   r <= s;
  mode IntervalCoverPts of C -> FinSequence of REAL means
:: RCOMP_3:def 3
  len it = len C + 1 & it.1 = r & it.len it = s &
  for n being natural number st 1 <= n & n+1 < len it holds
   it.(n+1) in ].inf(C/.(n+1)),sup(C/.n).[;
end;

reserve G for IntervalCoverPts of C;

theorem :: RCOMP_3:74
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s
  implies 2 <= len G;

theorem :: RCOMP_3:75
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  len C = 1 implies G = <*r,s*>;

theorem :: RCOMP_3:76
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  1 <= n & n+1 < len G implies G.(n+1) < sup(C/.n);

theorem :: RCOMP_3:77
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  1 < n & n <= len C implies inf(C/.n) < G.n;

theorem :: RCOMP_3:78
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  1 <= n & n < len C
  implies G.n <= inf(C/.(n+1));

theorem :: RCOMP_3:79
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r < s
  implies G is increasing;

theorem :: RCOMP_3:80
  F is_a_cover_of Closed-Interval-TSpace(r,s) & F is open connected & r <= s &
  1 <= n & n < len G implies [.G.n,G.(n+1).] c= C.n;
