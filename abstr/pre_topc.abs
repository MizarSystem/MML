:: Topological Spaces and Continuous Functions
::  by Beata Padlewska and Agata Darmochwa\l
::
:: Received April 14, 1989
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabulary SETFAM_1, TARSKI, BOOLE, SUBSET_1, RELAT_1, FUNCT_1, ORDINAL2,
      PRE_TOPC;
 notation TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_2, SETFAM_1,
      STRUCT_0;
 constructors STRUCT_0, FUNCT_2, MEMBERED;
 clusters STRUCT_0, RELSET_1, SUBSET_1, MEMBERED, ZFMISC_1;
 requirements BOOLE, SUBSET;


begin

definition
  struct(1-sorted) TopStruct (# carrier -> set,
                             topology -> Subset-Family of the carrier #);
end;


reserve T for TopStruct;

::
::                   The topological space
::

definition let IT be TopStruct;
 attr IT is TopSpace-like means
:: PRE_TOPC:def 1

     the carrier of IT in the topology of IT &
     (for a being Subset-Family of IT
      st a c= the topology of IT
       holds union a in the topology of IT) &
     (for a,b being Subset of IT st
      a in the topology of IT & b in the topology of IT
       holds a /\ b in the topology of IT);
end;


registration
 cluster non empty strict TopSpace-like TopStruct;
  existence
   proof
   now
  take X={{}};
  set T={{},X};
    T c= bool X
   proof
    let x be set;
    assume x in T;
    then x= {} or x = X by TARSKI:def 2;
    then x c= X by XBOOLE_1:2;
    hence thesis;
   end;
  then reconsider T as Subset-Family of X by SETFAM_1:def 7;
  take T;
  set Y=TopStruct(#X,T#);
  thus the carrier of Y in the topology of Y by TARSKI:def 2;
  thus for a being Subset-Family of Y st
   a c= the topology of Y holds union a in the topology of Y
       proof
        let a be Subset-Family of Y; assume
           a c= the topology of Y;
         then a={} or a={{}} or a={X} or a={{},X} by ZFMISC_1:42;
          then union a={} or union a=X or union a = {} \/ X by ZFMISC_1:2,31,93
;
          hence thesis by TARSKI:def 2;
        end;
  let a,b be Subset of Y such that
      A1:a in the topology of Y and A2:b in the topology of Y;
        (a={} or a=X) & (b={} or b=X) by A1,A2,TARSKI:def 2;
    hence a /\ b in the topology of Y by TARSKI:def 2;
 end;
     then consider X being non empty set, T being Subset-Family of X such that
A3:    the carrier of TopStruct(#X,T#) in the topology of TopStruct(#X,T#) &
      (for a being Subset-Family of TopStruct(#X,T#)
       st a c= the topology of TopStruct(#X,T#)
        holds union a in the topology of TopStruct(#X,T#)) &
      (for a,b being Subset of TopStruct(#X,T#) st
       a in the topology of TopStruct(#X,T#) &
       b in the topology of TopStruct(#X,T#)
        holds a /\ b in the topology of TopStruct(#X,T#));
    take TopStruct(#X,T#);
    thus TopStruct(#X,T#) is non empty by STRUCT_0:def 1;
     thus thesis by A3,Def1;
   end;
end;


definition
  mode TopSpace is TopSpace-like TopStruct;
end;


definition let S be 1-sorted;
 mode Point of S is Element of S;
end;


reserve GX for TopSpace;

canceled 4;

theorem :: PRE_TOPC:5
 {} in the topology of GX;

definition let T be 1-sorted;
  func {}T -> Subset of T equals
:: PRE_TOPC:def 2
 {};
  func [#]T -> Subset of T equals
:: PRE_TOPC:def 3
 the carrier of T;
end;


registration let T be 1-sorted;
 cluster {}T -> empty;
 coherence by Def2;
end;


canceled 6;

theorem :: PRE_TOPC:12
   for T being 1-sorted holds [#]T = the carrier of T;

registration let T be non empty 1-sorted;
 cluster [#]T -> non empty;
 coherence by Def3;
end;


theorem :: PRE_TOPC:13
 for T being non empty 1-sorted, p being Point of T holds p in [#]T;

theorem :: PRE_TOPC:14
 for T being 1-sorted, P being Subset of T holds P c= [#]T;

theorem :: PRE_TOPC:15
 for T being 1-sorted, P being Subset of T holds P /\ [#]T = P;

theorem :: PRE_TOPC:16
 for T being 1-sorted
  for A being set st A c= [#]T holds A is Subset of T;

theorem :: PRE_TOPC:17
  for T being 1-sorted, P being Subset of T holds P` = [#]T \ P;

theorem :: PRE_TOPC:18
    for T being 1-sorted, P being Subset of T holds P \/ P` =
[#]
T;

theorem :: PRE_TOPC:19
   for T being 1-sorted, P,Q being Subset of T
 holds P c= Q iff Q` c= P`;

theorem :: PRE_TOPC:20
   for T being 1-sorted, P being Subset of T
 holds P = P``;

theorem :: PRE_TOPC:21
  for T being 1-sorted
  for P,Q being Subset of T holds P c= Q` iff P misses Q;

theorem :: PRE_TOPC:22
  for T being 1-sorted, P being Subset of T
     holds [#]T \ ([#]T \ P) = P;

theorem :: PRE_TOPC:23
  for T being 1-sorted, P being Subset of T
    holds P <> [#]T iff [#]T \ P <> {};

theorem :: PRE_TOPC:24
    for T being 1-sorted, P,Q being Subset of T st [#]T \ P = Q
    holds [#]T = P \/ Q;

theorem :: PRE_TOPC:25
    for T being 1-sorted, P,Q being Subset of T
   st [#]T = P \/ Q & P misses Q
   holds Q = [#]T \ P;

theorem :: PRE_TOPC:26
    for T being 1-sorted, P being Subset of T holds P misses P`;

theorem :: PRE_TOPC:27
   for T being 1-sorted holds [#]T = ({}T)`;

definition let T be TopStruct, P be Subset of T;
 canceled;

  attr P is open means
:: PRE_TOPC:def 5
P in the topology of T;
end;


definition let T be TopStruct, P be Subset of T;
  attr P is closed means
:: PRE_TOPC:def 6
[#]T \ P is open;
end;


definition let T be 1-sorted, F be Subset-Family of T;
 redefine func union F -> Subset of T;
end;


definition let T be 1-sorted, F be Subset-Family of T;
 redefine func meet F -> Subset of T;
end;


definition let T be 1-sorted, F be Subset-Family of T;
 canceled;

  pred F is_a_cover_of T means
:: PRE_TOPC:def 8
       [#]T = union F;
end;


definition let T be TopStruct;
  mode SubSpace of T -> TopStruct means
:: PRE_TOPC:def 9
           [#]it c= [#]T &
           for P being Subset of it
            holds P in the topology of it iff
           ex Q being Subset of T st Q in the topology of T &
           P = Q /\ [#]it;
end;

registration let T be TopStruct;
 cluster strict SubSpace of T;
  existence
   proof
       the TopStruct of T is SubSpace of T by Lm2;
    hence thesis;
   end;
end;


registration let T be non empty TopStruct;
 cluster strict non empty SubSpace of T;
  existence
   proof
A1:   the TopStruct of T is SubSpace of T by Lm2;
       the TopStruct of T is non empty by STRUCT_0:def 1;
    hence thesis by A1;
   end;
end;


scheme :: PRE_TOPC:sch 1
 SubFamExS {A() -> TopStruct, P[Subset of A()]}:
   ex F being Subset-Family of A() st
   for B being Subset of A() holds B in F iff P[B]
proof
   defpred Q[Subset of A()] means P[$1];
   consider F being Subset-Family of A() such that
A1: for B being Subset of A() holds B in F iff Q[B]
 from SETFAM_1:sch 1;
   reconsider F as Subset-Family of A();
   take F;
   thus thesis by A1;
end;

registration let T be TopSpace;
 cluster -> TopSpace-like SubSpace of T;
 coherence
  proof let S be SubSpace of T;
      S is TopSpace-like
     proof
      set P = the carrier of S;
A1:    P = [#] S by Def3;
      then A2: P c= [#] T by Def9;
A3:   [#]T = the carrier of T by Def3;
      then A4:[#]T in the topology of T by Def1;
        [#]T /\ P = P by A2,A3,Th15;
     hence the carrier of S in the topology of S by A1,A4,Def9;
     thus for a being Subset-Family of S st
          a c= the topology of S
         holds union a in the topology of S
      proof
       let a be Subset-Family of S such that
        A5:a c= the topology of S;
        defpred Q[set] means
         $1 /\ the carrier of S in a & $1 in the topology of T;
        consider b being Subset-Family of T such that
        A6:for Z being Subset of T holds Z in b iff Q[Z]
         from SubFamExS;
          b c= the topology of T
        proof
          let y be set;
          assume y in b;
          hence thesis by A6;
        end;
        then A7:union b in the topology of T by Def1;
          union a = union b /\ P
        proof
          A8:union a c= union b /\ P
          proof
           let x be set;
            assume A9:x in union a;
            then consider Z1 being set such that A10:x in Z1 & Z1 in a
               by TARSKI:def 4;
            consider Z3 being Subset of T such that
            A11:Z3 in the topology of T & Z1 = Z3 /\ P by A1,A5,A10,Def9;
            A12:Z3 in b by A6,A10,A11;
              x in Z3 by A10,A11,XBOOLE_0:def 3;
            then x in union b by A12,TARSKI:def 4;
           hence x in union b /\ P by A9,XBOOLE_0:def 3;
          end;
            union b /\ P c= union a
          proof
           let x be set;
            assume x in union b /\ P;
            then A13:x in union b & x in P by XBOOLE_0:def 3;
            then consider Z being set such that
            A14:x in Z & Z in b by TARSKI:def 4;
            A15:Z /\ P in a by A6,A14;
              x in Z /\ P by A13,A14,XBOOLE_0:def 3;
           hence x in union a by A15,TARSKI:def 4;
          end;
          hence union a = union b /\ P by A8,XBOOLE_0:def 10;
         end;
         hence union a in the topology of S by A1,A7,Def9;
     end;
     thus for V,Q being Subset of S st
      V in the topology of S & Q in the topology of S holds
      V /\ Q in the topology of S
      proof
       let V,Q be Subset of S; assume
        A16:V in the topology of S & Q in the topology of S;
        then consider P1 being Subset of T such that
        A17:P1 in the topology of T & V = P1 /\ P by A1,Def9;
        consider Q1 being Subset of T such that
        A18:Q1 in the topology of T & Q = Q1 /\ P by A1,A16,Def9;
        A19:P1 /\ Q1 in the topology of T by A17,A18,Def1;
          V /\ Q = P1 /\ ((Q1 /\ P) /\ P) by A17,A18,XBOOLE_1:16
             .= P1 /\ (Q1 /\ (P /\ P)) by XBOOLE_1:16
             .= (P1 /\ Q1) /\ P by XBOOLE_1:16;
       hence V /\ Q in the topology of S by A1,A19,Def9;
      end;
     end;
   hence thesis;
  end;
end;


definition let T be TopStruct, P be Subset of T;
 func T|P -> strict SubSpace of T means
:: PRE_TOPC:def 10
  [#]it = P;
end;


registration let T be non empty TopStruct,
               P be non empty Subset of T;
 cluster T|P -> non empty;
coherence
  proof
      [#](T|P) = P by Def10;
    hence the carrier of T|P is non empty by Def3;
  end;
end;


registration let T be TopSpace;
 cluster TopSpace-like strict SubSpace of T;
  existence
   proof consider X being strict SubSpace of T;
    take X; thus thesis;
   end;
end;


registration
 let T be TopSpace, P be Subset of T;
 cluster T|P -> TopSpace-like;
 coherence;
end;


definition let S, T be 1-sorted;
  mode map of S, T is Function of the carrier of S, the carrier of T;
 canceled;
end;


definition let S, T be 1-sorted,
               f be Function of the carrier of S, the carrier of T,
               P be set;
  redefine func f.:P -> Subset of T;
end;


definition let S, T be 1-sorted,
               f be Function of the carrier of S, the carrier of T,
               P be set;
  redefine func f"P -> Subset of S;
end;


definition let S, T be TopStruct, f be map of S,T;
  attr f is continuous means
:: PRE_TOPC:def 12
      for P1 being Subset of T st P1 is closed holds f" P1 is closed;
end;


scheme :: PRE_TOPC:sch 2
 TopAbstr{A() -> TopStruct,P[set]}:
  ex P being Subset of A() st
  for x being set st x in the carrier of A() holds x in P iff P[x]
proof
   defpred Q[set] means ex y being Point of A() st $1=y & P[y];
   consider Z being set such that
A1:for x being set holds x in Z iff x in the carrier of A() & Q[x]
    from XBOOLE_0:sch 1;
     for x being set holds x in Z implies x in the carrier of A() by A1;
   then reconsider Z as Subset of A() by TARSKI:def 3;
   take Z;
     for x being set st x in the carrier of A() holds x in Z iff P[x]
   proof
    let x be set such that
A2: x in the carrier of A();
    thus x in Z implies P[x]
    proof
     assume x in Z;
      then ex y being Point of A() st x=y & P[y] by A1;
     hence P[x];
    end;
    thus P[x] implies x in Z by A1,A2;
   end;
 hence thesis;
end;

canceled 11;

theorem :: PRE_TOPC:39
  for X' being SubSpace of T, A being Subset of X'
   holds A is Subset of T;

canceled;

theorem :: PRE_TOPC:41
     for A being Subset of T st A <> {}T
   ex x being Point of T st x in A;

theorem :: PRE_TOPC:42
 [#]GX is closed;

registration let T be TopSpace;
 cluster [#]T -> closed;
coherence by Th42;
end;


registration let T be TopSpace;
 cluster closed Subset of T;
existence
  proof
    take [#]T;
    thus thesis;
  end;
end;


registration let T be non empty TopSpace;
 cluster non empty closed Subset of T;
existence
  proof
    take [#]T;
    thus thesis;
  end;
end;


theorem :: PRE_TOPC:43
for X' being SubSpace of T,
    B being Subset of X' holds
  B is closed iff ex C being Subset of T st C is closed & C /\ [#](X') = B;

theorem :: PRE_TOPC:44
  for F being Subset-Family of GX st
  for A being Subset of GX st A in F holds A is closed
  holds meet F is closed;

::
::                    The closure of a set
::

definition
 let GX be TopStruct, A be Subset of GX;
   func Cl A -> Subset of GX means
:: PRE_TOPC:def 13
for p being set st p in the carrier of GX holds p in it iff
    for G being Subset of GX st G is open holds
                        p in G implies A meets G;
end;


theorem :: PRE_TOPC:45
  for A being Subset of T, p being set
    st p in the carrier of T holds
  p in Cl A iff for C being Subset of T st C is closed
  holds (A c= C implies p in C);

theorem :: PRE_TOPC:46
  for A being Subset of GX ex F being Subset-Family of GX st
  (for C being Subset of GX holds C in F iff C is closed &
  A c= C) & Cl A = meet F;

theorem :: PRE_TOPC:47
   for X' being SubSpace of T, A being Subset of T,
 A1 being Subset of X'
  st A = A1 holds Cl A1 = (Cl A) /\ ([#]X');

theorem :: PRE_TOPC:48
  for A being Subset of T holds A c= Cl A;

theorem :: PRE_TOPC:49
  for A,B being Subset of T st A c= B holds Cl A c= Cl B;

theorem :: PRE_TOPC:50
    for A,B being Subset of GX holds Cl(A \/ B) = Cl A \/ Cl B;

theorem :: PRE_TOPC:51
    for A, B being Subset of T holds
    Cl (A /\ B) c= (Cl A) /\ Cl B;

theorem :: PRE_TOPC:52
 for A being Subset of T holds
  (A is closed implies Cl A = A) &
  (T is TopSpace-like & Cl A = A implies A is closed);

theorem :: PRE_TOPC:53
   for A being Subset of T holds
  (A is open implies Cl([#](T) \ A) = [#](T) \ A) &
  (T is TopSpace-like & Cl([#](T) \ A) = [#](T) \ A implies A is open);

theorem :: PRE_TOPC:54
    for A being Subset of T,
      p being Point of T holds
  p in Cl A iff
  T is non empty & for G being Subset of T st G is open holds
   p in G implies A meets G;
