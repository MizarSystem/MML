:: The Limit of a Real Function at Infinity. Halflines.
:: Real Sequence Divergent to Infinity
::  by Jaros{\l}aw Kotowicz
::
:: Received August 20, 1990
:: Copyright (c) 1990-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, XREAL_0, ORDINAL1, SUBSET_1, SEQ_1, PARTFUN1, CARD_1,
      ARYTM_3, XXREAL_0, ARYTM_1, RELAT_1, TARSKI, XBOOLE_0, VALUED_1, PROB_1,
      XXREAL_1, VALUED_0, XXREAL_2, FUNCT_1, SEQ_2, ORDINAL2, COMPLEX1,
      FUNCOP_1, REAL_1, NAT_1, SQUARE_1, FUNCT_3, SEQM_3, FUNCT_2, ORDINAL4,
      LIMFUNC1;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, NUMBERS, XCMPLX_0, XREAL_0,
      COMPLEX1, REAL_1, NAT_1, FUNCT_2, FUNCOP_1, VALUED_0, VALUED_1, SEQ_1,
      SEQ_2, SEQM_3, PROB_1, RELSET_1, SQUARE_1, PARTFUN1, FUNCT_3, RFUNCT_1,
      XXREAL_0, XXREAL_1, RECDEF_1;
 constructors PARTFUN1, FUNCOP_1, REAL_1, SQUARE_1, NAT_1, COMPLEX1, VALUED_1,
      SEQ_2, SEQM_3, PROB_1, RCOMP_1, RFUNCT_1, RFUNCT_2, SEQ_1, RECDEF_1,
      RELSET_1, BINOP_2, RVSUM_1;
 registrations ORDINAL1, RELSET_1, NUMBERS, XXREAL_0, XREAL_0, MEMBERED,
      XXREAL_1, VALUED_0, VALUED_1, FUNCT_2, FUNCOP_1, SEQ_2, SEQ_4;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;


begin

reserve r,r1,g for real number,
  n,m,k for Element of NAT,
  seq,seq1, seq2 for Real_Sequence,
  f,f1,f2 for PartFunc of REAL,REAL,
  x for set;

definition
  let n,m;
  redefine func max(n,m) -> Element of NAT;
end;

notation
  let r be real number;
  synonym left_open_halfline r for halfline r;
end;

definition
  let r be real number;
  func left_closed_halfline r -> Subset of REAL equals
:: LIMFUNC1:def 1
  ].-infty,r.];
  func right_closed_halfline r -> Subset of REAL equals
:: LIMFUNC1:def 2
  [.r,+infty.[;
  func right_open_halfline r -> Subset of REAL equals
:: LIMFUNC1:def 3
  ].r,+infty.[;
end;

theorem :: LIMFUNC1:1
  (seq is non-decreasing implies seq is bounded_below) & (seq is
  non-increasing implies seq is bounded_above);

theorem :: LIMFUNC1:2
  seq is non-zero & seq is convergent & lim seq=0 & seq is
  non-decreasing implies for n holds seq.n<0;

theorem :: LIMFUNC1:3
  seq is non-zero & seq is convergent & lim seq=0 & seq is
  non-increasing implies for n holds 0<seq.n;

theorem :: LIMFUNC1:4
  seq is convergent & 0<lim seq implies ex n st for m st n<=m holds 0<seq.m;

theorem :: LIMFUNC1:5
  seq is convergent & 0<lim seq implies ex n st for m st n<=m
  holds (lim seq)/2<seq.m;

reserve r,r1,r2,g,g1,g2 for Real;

definition
  let seq;
  attr seq is divergent_to+infty means
:: LIMFUNC1:def 4

  for r ex n st for m st n<=m holds r<seq.m;
  attr seq is divergent_to-infty means
:: LIMFUNC1:def 5

  for r ex n st for m st n<=m holds seq.m<r;
end;

theorem :: LIMFUNC1:6
  seq is divergent_to+infty or seq is divergent_to-infty implies ex n st
  for m st n<=m holds seq^\m is non-zero;

theorem :: LIMFUNC1:7
  (seq^\k is divergent_to+infty implies seq is divergent_to+infty)
  & (seq^\k is divergent_to-infty implies seq is divergent_to-infty);

theorem :: LIMFUNC1:8
  seq1 is divergent_to+infty & seq2 is divergent_to+infty implies
  seq1+seq2 is divergent_to+infty;

theorem :: LIMFUNC1:9
  seq1 is divergent_to+infty & seq2 is bounded_below implies seq1+
  seq2 is divergent_to+infty;

theorem :: LIMFUNC1:10
  seq1 is divergent_to+infty & seq2 is divergent_to+infty implies
  seq1(#)seq2 is divergent_to+infty;

theorem :: LIMFUNC1:11
  seq1 is divergent_to-infty & seq2 is divergent_to-infty implies
  seq1+seq2 is divergent_to-infty;

theorem :: LIMFUNC1:12
  seq1 is divergent_to-infty & seq2 is bounded_above implies seq1+
  seq2 is divergent_to-infty;

theorem :: LIMFUNC1:13
  (seq is divergent_to+infty & r>0 implies r(#)seq is
  divergent_to+infty) & (seq is divergent_to+infty & r<0 implies r(#)seq is
  divergent_to-infty) & ( r=0 implies rng (r(#)seq)={0} & r(#) seq is constant)
;

theorem :: LIMFUNC1:14
  (seq is divergent_to-infty & r>0 implies r(#)seq is
  divergent_to-infty) & (seq is divergent_to-infty & r<0 implies r(#)seq is
  divergent_to+infty) & ( r=0 implies rng (r(#)seq)={0} & r(#) seq is constant)
;

theorem :: LIMFUNC1:15
  (seq is divergent_to+infty implies -seq is divergent_to-infty) & (seq
  is divergent_to-infty implies -seq is divergent_to+infty);

theorem :: LIMFUNC1:16
  seq is bounded_below & seq1 is divergent_to-infty implies seq-seq1 is
  divergent_to+infty;

theorem :: LIMFUNC1:17
  seq is bounded_above & seq1 is divergent_to+infty implies seq-seq1 is
  divergent_to-infty;

theorem :: LIMFUNC1:18
  seq is divergent_to+infty & seq1 is convergent implies seq+seq1 is
  divergent_to+infty;

theorem :: LIMFUNC1:19
  seq is divergent_to-infty & seq1 is convergent implies seq+seq1 is
  divergent_to-infty;

theorem :: LIMFUNC1:20
  (for n holds seq.n=n) implies seq is divergent_to+infty;

theorem :: LIMFUNC1:21
  (for n holds seq.n=-n) implies seq is divergent_to-infty;

theorem :: LIMFUNC1:22
  seq1 is divergent_to+infty & (ex r st r>0 & for n holds seq2.n>=
  r) implies seq1(#)seq2 is divergent_to+infty;

theorem :: LIMFUNC1:23
  seq1 is divergent_to-infty & (ex r st 0<r & for n holds seq2.n>=r)
  implies seq1(#)seq2 is divergent_to-infty;

theorem :: LIMFUNC1:24
  seq1 is divergent_to-infty & seq2 is divergent_to-infty implies
  seq1(#)seq2 is divergent_to+infty;

theorem :: LIMFUNC1:25
  (seq is divergent_to+infty or seq is divergent_to-infty) implies
  abs(seq) is divergent_to+infty;

theorem :: LIMFUNC1:26
  seq is divergent_to+infty & seq1 is subsequence of seq implies
  seq1 is divergent_to+infty;

theorem :: LIMFUNC1:27
  seq is divergent_to-infty & seq1 is subsequence of seq implies
  seq1 is divergent_to-infty;

theorem :: LIMFUNC1:28
  seq1 is divergent_to+infty & seq2 is convergent & 0<lim seq2 implies
  seq1(#)seq2 is divergent_to+infty;

theorem :: LIMFUNC1:29
  seq is non-decreasing & not seq is bounded_above implies seq is
  divergent_to+infty;

theorem :: LIMFUNC1:30
  seq is non-increasing & not seq is bounded_below implies seq is
  divergent_to-infty;

theorem :: LIMFUNC1:31
  seq is increasing & not seq is bounded_above implies seq is
  divergent_to+infty;

theorem :: LIMFUNC1:32
  seq is decreasing & not seq is bounded_below implies seq is
  divergent_to-infty;

theorem :: LIMFUNC1:33
  seq is monotone implies seq is convergent or seq is divergent_to+infty
  or seq is divergent_to-infty;

theorem :: LIMFUNC1:34
  (seq is divergent_to+infty or seq is divergent_to-infty) implies
  seq" is convergent & lim(seq")=0;

theorem :: LIMFUNC1:35
  seq is convergent & lim seq=0 & (ex k st for n st k<=n holds 0<
  seq.n) implies seq" is divergent_to+infty;

theorem :: LIMFUNC1:36
  seq is convergent & lim seq=0 & (ex k st for n st k<=n holds seq
  .n<0) implies seq" is divergent_to-infty;

theorem :: LIMFUNC1:37
  seq is non-zero & seq is convergent & lim seq=0 & seq is
  non-decreasing implies seq" is divergent_to-infty;

theorem :: LIMFUNC1:38
  seq is non-zero & seq is convergent & lim seq=0 & seq is
  non-increasing implies seq" is divergent_to+infty;

theorem :: LIMFUNC1:39
  seq is non-zero & seq is convergent & lim seq=0 & seq is increasing
  implies seq" is divergent_to-infty;

theorem :: LIMFUNC1:40
  seq is non-zero & seq is convergent & lim seq=0 & seq is decreasing
  implies seq" is divergent_to+infty;

theorem :: LIMFUNC1:41
  seq1 is bounded & (seq2 is divergent_to+infty or seq2 is
  divergent_to-infty) implies seq1/"seq2 is convergent & lim(seq1/"seq2)=0;

theorem :: LIMFUNC1:42
  seq is divergent_to+infty & (for n holds seq.n<=seq1.n) implies
  seq1 is divergent_to+infty;

theorem :: LIMFUNC1:43
  seq is divergent_to-infty & (for n holds seq1.n<=seq.n) implies
  seq1 is divergent_to-infty;

definition
  let f;
  attr f is convergent_in+infty means
:: LIMFUNC1:def 6

  (for r ex g st r<g & g in dom f)
& ex g st for seq st seq is divergent_to+infty & rng seq c= dom f holds f/*seq
  is convergent & lim(f/*seq)=g;
  attr f is divergent_in+infty_to+infty means
:: LIMFUNC1:def 7

  (for r ex g st r<g & g in
  dom f) & for seq st seq is divergent_to+infty & rng seq c= dom f holds f/*seq
  is divergent_to+infty;
  attr f is divergent_in+infty_to-infty means
:: LIMFUNC1:def 8

  (for r ex g st r<g & g in
  dom f) & for seq st seq is divergent_to+infty & rng seq c= dom f holds f/*seq
  is divergent_to-infty;
  attr f is convergent_in-infty means
:: LIMFUNC1:def 9

  (for r ex g st g<r & g in dom f)
& ex g st for seq st seq is divergent_to-infty & rng seq c= dom f holds f/*seq
  is convergent & lim(f/*seq)=g;
  attr f is divergent_in-infty_to+infty means
:: LIMFUNC1:def 10

  (for r ex g st g<r & g
  in dom f) & for seq st seq is divergent_to-infty & rng seq c= dom f holds f/*
  seq is divergent_to+infty;
  attr f is divergent_in-infty_to-infty means
:: LIMFUNC1:def 11

  (for r ex g st g<r & g
  in dom f) & for seq st seq is divergent_to-infty & rng seq c= dom f holds f/*
  seq is divergent_to-infty;
end;

theorem :: LIMFUNC1:44
  f is convergent_in+infty iff (for r ex g st r<g & g in dom f) & ex g
  st for g1 st 0<g1 ex r st for r1 st r<r1 & r1 in dom f holds abs(f.r1-g)<g1;

theorem :: LIMFUNC1:45
  f is convergent_in-infty iff (for r ex g st g<r & g in dom f) & ex g
  st for g1 st 0<g1 ex r st for r1 st r1<r & r1 in dom f holds abs(f.r1-g)<g1;

theorem :: LIMFUNC1:46
  f is divergent_in+infty_to+infty iff (for r ex g st r<g & g in dom f)
  & for g ex r st for r1 st r<r1 & r1 in dom f holds g<f.r1;

theorem :: LIMFUNC1:47
  f is divergent_in+infty_to-infty iff (for r ex g st r<g & g in dom f)
  & for g ex r st for r1 st r<r1 & r1 in dom f holds f.r1<g;

theorem :: LIMFUNC1:48
  f is divergent_in-infty_to+infty iff (for r ex g st g<r & g in dom f)
  & for g ex r st for r1 st r1<r & r1 in dom f holds g<f.r1;

theorem :: LIMFUNC1:49
  f is divergent_in-infty_to-infty iff (for r ex g st g<r & g in dom f)
  & for g ex r st for r1 st r1<r & r1 in dom f holds f.r1<g;

theorem :: LIMFUNC1:50
  f1 is divergent_in+infty_to+infty & f2 is divergent_in+infty_to+infty
  & (for r ex g st r<g & g in dom f1 /\ dom f2) implies f1+f2 is
  divergent_in+infty_to+infty & f1(#)f2 is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:51
  f1 is divergent_in+infty_to-infty & f2 is divergent_in+infty_to-infty
  & (for r ex g st r<g & g in dom f1 /\ dom f2) implies f1+f2 is
  divergent_in+infty_to-infty & f1(#)f2 is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:52
  f1 is divergent_in-infty_to+infty & f2 is divergent_in-infty_to+infty
  & (for r ex g st g<r & g in dom f1 /\ dom f2) implies f1+f2 is
  divergent_in-infty_to+infty & f1(#)f2 is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:53
  f1 is divergent_in-infty_to-infty & f2 is divergent_in-infty_to-infty
  & (for r ex g st g<r & g in dom f1 /\ dom f2) implies f1+f2 is
  divergent_in-infty_to-infty & f1(#)f2 is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:54
  f1 is divergent_in+infty_to+infty & (for r ex g st r<g & g in dom(f1+
  f2)) & (ex r st f2|right_open_halfline r is bounded_below) implies f1+f2 is
  divergent_in+infty_to+infty;

theorem :: LIMFUNC1:55
  f1 is divergent_in+infty_to+infty & (for r ex g st r<g & g in dom(f1
  (#)f2 ) ) & (ex r,r1 st 0<r & for g st g in dom f2 /\ right_open_halfline(r1)
  holds r<=f2.g) implies f1(#)f2 is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:56
  f1 is divergent_in-infty_to+infty & (for r ex g st g<r & g in dom(f1+
  f2)) & (ex r st f2|left_open_halfline r is bounded_below) implies f1+f2 is
  divergent_in-infty_to+infty;

theorem :: LIMFUNC1:57
  f1 is divergent_in-infty_to+infty & (for r ex g st g<r & g in dom(f1
  (#)f2 ) ) & (ex r,r1 st 0<r & for g st g in dom f2 /\ left_open_halfline(r1)
  holds r<=f2.g) implies f1(#)f2 is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:58
  (f is divergent_in+infty_to+infty & r>0 implies r(#)f is
divergent_in+infty_to+infty) & (f is divergent_in+infty_to+infty & r<0 implies
r(#)f is divergent_in+infty_to-infty) & (f is divergent_in+infty_to-infty & r>0
  implies r(#)f is divergent_in+infty_to-infty) & (f is
divergent_in+infty_to-infty & r<0 implies r(#)f is divergent_in+infty_to+infty)
;

theorem :: LIMFUNC1:59
  (f is divergent_in-infty_to+infty & r>0 implies r(#)f is
divergent_in-infty_to+infty) & (f is divergent_in-infty_to+infty & r<0 implies
r(#)f is divergent_in-infty_to-infty) & (f is divergent_in-infty_to-infty & r>0
  implies r(#)f is divergent_in-infty_to-infty) & (f is
divergent_in-infty_to-infty & r<0 implies r(#)f is divergent_in-infty_to+infty)
;

theorem :: LIMFUNC1:60
  (f is divergent_in+infty_to+infty or f is divergent_in+infty_to-infty)
  implies abs(f) is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:61
  (f is divergent_in-infty_to+infty or f is divergent_in-infty_to-infty)
  implies abs(f) is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:62
  (ex r st f|right_open_halfline r is non-decreasing & not f|
  right_open_halfline r is bounded_above) & (for r ex g st r<g & g in dom f)
  implies f is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:63
  (ex r st f|right_open_halfline r is increasing & not f|
  right_open_halfline r is bounded_above) & (for r ex g st r<g & g in dom f)
  implies f is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:64
  (ex r st f|right_open_halfline r is non-increasing & not f|
  right_open_halfline r is bounded_below) & (for r ex g st r<g & g in dom f)
  implies f is divergent_in+infty_to-infty;

theorem :: LIMFUNC1:65
  (ex r st f|right_open_halfline r is decreasing & not f|
  right_open_halfline r is bounded_below) & (for r ex g st r<g & g in dom f)
  implies f is divergent_in+infty_to-infty;

theorem :: LIMFUNC1:66
  (ex r st f|left_open_halfline r is non-increasing & not f|
  left_open_halfline r is bounded_above) & (for r ex g st g<r & g in dom f)
  implies f is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:67
  (ex r st f|left_open_halfline r is decreasing & not f|
  left_open_halfline r is bounded_above) & (for r ex g st g<r & g in dom f)
  implies f is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:68
  (ex r st f|left_open_halfline r is non-decreasing & not f|
  left_open_halfline r is bounded_below) & (for r ex g st g<r & g in dom f)
  implies f is divergent_in-infty_to-infty;

theorem :: LIMFUNC1:69
  (ex r st f|left_open_halfline r is increasing & not f|
  left_open_halfline r is bounded_below) & (for r ex g st g<r & g in dom f)
  implies f is divergent_in-infty_to-infty;

theorem :: LIMFUNC1:70
  f1 is divergent_in+infty_to+infty & (for r ex g st r<g & g in
  dom f) & (ex r st dom f /\ right_open_halfline(r) c= dom f1 /\
right_open_halfline(r) & for g st g in dom f /\ right_open_halfline(r) holds f1
  .g<=f.g) implies f is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:71
  f1 is divergent_in+infty_to-infty & (for r ex g st r<g & g in
  dom f) & (ex r st dom f/\right_open_halfline(r) c= dom f1 /\
right_open_halfline(r) & for g st g in dom f /\ right_open_halfline(r) holds f.
  g<=f1.g) implies f is divergent_in+infty_to-infty;

theorem :: LIMFUNC1:72
  f1 is divergent_in-infty_to+infty & (for r ex g st g<r & g in
dom f) & (ex r st dom f/\left_open_halfline(r) c= dom f1 /\ left_open_halfline(
r) & for g st g in dom f /\ left_open_halfline(r) holds f1.g<=f.g) implies f is
  divergent_in-infty_to+infty;

theorem :: LIMFUNC1:73
  f1 is divergent_in-infty_to-infty & (for r ex g st g<r & g in
dom f) & (ex r st dom f/\left_open_halfline(r) c= dom f1 /\ left_open_halfline(
r) & for g st g in dom f /\ left_open_halfline(r) holds f.g<=f1.g) implies f is
  divergent_in-infty_to-infty;

theorem :: LIMFUNC1:74
  f1 is divergent_in+infty_to+infty & (ex r st right_open_halfline(r) c=
dom f /\ dom f1 & for g st g in right_open_halfline(r) holds f1.g<=f.g) implies
  f is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:75
  f1 is divergent_in+infty_to-infty & (ex r st right_open_halfline(r) c=
dom f /\ dom f1 & for g st g in right_open_halfline(r) holds f.g<=f1.g) implies
  f is divergent_in+infty_to-infty;

theorem :: LIMFUNC1:76
  f1 is divergent_in-infty_to+infty & (ex r st left_open_halfline(r) c=
dom f /\ dom f1 & for g st g in left_open_halfline(r) holds f1.g<=f.g) implies
  f is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:77
  f1 is divergent_in-infty_to-infty & (ex r st left_open_halfline(r) c=
dom f /\ dom f1 & for g st g in left_open_halfline(r) holds f.g<=f1.g) implies
  f is divergent_in-infty_to-infty;

definition
  let f;
  assume
 f is convergent_in+infty;
  func lim_in+infty f ->Real means
:: LIMFUNC1:def 12

  for seq st seq is
divergent_to+infty & rng seq c= dom f holds f/*seq is convergent & lim(f/*seq)=
  it;
end;

definition
  let f;
  assume
 f is convergent_in-infty;
  func lim_in-infty f ->Real means
:: LIMFUNC1:def 13

  for seq st seq is
divergent_to-infty & rng seq c= dom f holds f/*seq is convergent & lim(f/*seq)=
  it;
end;

theorem :: LIMFUNC1:78
  f is convergent_in-infty implies (lim_in-infty f=g iff for g1 st 0<g1
  ex r st for r1 st r1<r & r1 in dom f holds abs(f.r1-g)<g1);

theorem :: LIMFUNC1:79
  f is convergent_in+infty implies (lim_in+infty f=g iff for g1 st 0<g1
  ex r st for r1 st r<r1 & r1 in dom f holds abs(f.r1-g)<g1);

theorem :: LIMFUNC1:80
  f is convergent_in+infty implies r(#)f is convergent_in+infty &
  lim_in+infty(r(#)f)=r*(lim_in+infty f);

theorem :: LIMFUNC1:81
  f is convergent_in+infty implies -f is convergent_in+infty &
  lim_in+infty(-f)=-(lim_in+infty f);

theorem :: LIMFUNC1:82
  f1 is convergent_in+infty & f2 is convergent_in+infty & (for r
  ex g st r<g & g in dom(f1+f2)) implies f1+f2 is convergent_in+infty &
  lim_in+infty(f1+f2) = lim_in+infty f1 + lim_in+infty f2;

theorem :: LIMFUNC1:83
  f1 is convergent_in+infty & f2 is convergent_in+infty & (for r ex g st
r<g & g in dom(f1-f2)) implies f1-f2 is convergent_in+infty & lim_in+infty(f1-
  f2)=(lim_in+infty f1)-(lim_in+infty f2);

theorem :: LIMFUNC1:84
  f is convergent_in+infty & f"{0}={} & (lim_in+infty f)<>0 implies f^
  is convergent_in+infty & lim_in+infty(f^)=(lim_in+infty f)";

theorem :: LIMFUNC1:85
  f is convergent_in+infty implies abs(f) is convergent_in+infty &
  lim_in+infty abs(f)=abs(lim_in+infty f);

theorem :: LIMFUNC1:86
  f is convergent_in+infty & lim_in+infty f<>0 & (for r ex g st r
<g & g in dom f & f.g<>0) implies f^ is convergent_in+infty & lim_in+infty(f^)=
  (lim_in+infty f)";

theorem :: LIMFUNC1:87
  f1 is convergent_in+infty & f2 is convergent_in+infty & (for r
  ex g st r<g & g in dom(f1(#)f2)) implies f1(#) f2 is convergent_in+infty &
  lim_in+infty(f1(#)f2)=(lim_in+infty f1)*(lim_in+infty f2);

theorem :: LIMFUNC1:88
  f1 is convergent_in+infty & f2 is convergent_in+infty & lim_in+infty
  f2<> 0 & (for r ex g st r<g & g in dom(f1/f2)) implies f1/f2 is
  convergent_in+infty & lim_in+infty(f1/f2)=(lim_in+infty f1)/(lim_in+infty f2)
;

theorem :: LIMFUNC1:89
  f is convergent_in-infty implies r(#)f is convergent_in-infty &
  lim_in-infty(r(#)f)=r*(lim_in-infty f);

theorem :: LIMFUNC1:90
  f is convergent_in-infty implies -f is convergent_in-infty &
  lim_in-infty(-f)=-(lim_in-infty f);

theorem :: LIMFUNC1:91
  f1 is convergent_in-infty & f2 is convergent_in-infty & (for r
  ex g st g<r & g in dom(f1+f2)) implies f1+f2 is convergent_in-infty &
  lim_in-infty(f1+f2) = lim_in-infty f1 + lim_in-infty f2;

theorem :: LIMFUNC1:92
  f1 is convergent_in-infty & f2 is convergent_in-infty & (for r ex g st
g<r & g in dom(f1-f2)) implies f1-f2 is convergent_in-infty & lim_in-infty(f1-
  f2)=(lim_in-infty f1)-(lim_in-infty f2);

theorem :: LIMFUNC1:93
  f is convergent_in-infty & f"{0}={} & (lim_in-infty f)<>0 implies f^
  is convergent_in-infty & lim_in-infty(f^)=(lim_in-infty f)";

theorem :: LIMFUNC1:94
  f is convergent_in-infty implies abs(f) is convergent_in-infty &
  lim_in-infty abs(f)=abs(lim_in-infty f);

theorem :: LIMFUNC1:95
  f is convergent_in-infty & lim_in-infty f<>0 & (for r ex g st g
<r & g in dom f & f.g<>0) implies f^ is convergent_in-infty & lim_in-infty(f^)=
  (lim_in-infty f)";

theorem :: LIMFUNC1:96
  f1 is convergent_in-infty & f2 is convergent_in-infty & (for r
  ex g st g<r & g in dom(f1(#)f2)) implies f1(#) f2 is convergent_in-infty &
  lim_in-infty(f1(#)f2)=(lim_in-infty f1)*(lim_in-infty f2);

theorem :: LIMFUNC1:97
  f1 is convergent_in-infty & f2 is convergent_in-infty & lim_in-infty
  f2<> 0 & (for r ex g st g<r & g in dom(f1/f2)) implies f1/f2 is
  convergent_in-infty & lim_in-infty(f1/f2)=(lim_in-infty f1)/(lim_in-infty f2)
;

theorem :: LIMFUNC1:98
  f1 is convergent_in+infty & lim_in+infty f1=0 & (for r ex g st r<g & g
in dom(f1(#)f2)) & (ex r st f2|right_open_halfline r is bounded) implies f1(#)
  f2 is convergent_in+infty & lim_in+infty(f1(#)f2)=0;

theorem :: LIMFUNC1:99
  f1 is convergent_in-infty & lim_in-infty f1=0 & (for r ex g st g<r & g
in dom(f1(#)f2)) & (ex r st f2|left_open_halfline r is bounded) implies f1(#)f2
  is convergent_in-infty & lim_in-infty(f1(#)f2)=0;

theorem :: LIMFUNC1:100
  f1 is convergent_in+infty & f2 is convergent_in+infty &
lim_in+infty f1=lim_in+infty f2 & (for r ex g st r<g & g in dom f) & (ex r st (
  (dom f1 /\ right_open_halfline(r) c= dom f2 /\ right_open_halfline(r) & dom f
  /\ right_open_halfline(r) c= dom f1 /\ right_open_halfline(r)) or (dom f2 /\
  right_open_halfline(r) c= dom f1 /\ right_open_halfline(r) & dom f /\
  right_open_halfline(r) c= dom f2 /\ right_open_halfline(r))) & for g st g in
  dom f /\ right_open_halfline(r) holds f1.g<=f.g & f.g<=f2.g) implies f is
  convergent_in+infty & lim_in+infty f=lim_in+infty f1;

theorem :: LIMFUNC1:101
  f1 is convergent_in+infty & f2 is convergent_in+infty & lim_in+infty
f1=lim_in+infty f2 & (ex r st right_open_halfline(r) c= dom f1 /\ dom f2 /\ dom
f & for g st g in right_open_halfline(r) holds f1.g<=f.g & f.g<=f2.g) implies f
  is convergent_in+infty & lim_in+infty f=lim_in+infty f1;

theorem :: LIMFUNC1:102
  f1 is convergent_in-infty & f2 is convergent_in-infty &
lim_in-infty f1=lim_in-infty f2 & (for r ex g st g<r & g in dom f) & (ex r st (
(dom f1 /\ left_open_halfline(r) c= dom f2 /\ left_open_halfline(r) & dom f /\
  left_open_halfline(r) c= dom f1 /\ left_open_halfline(r)) or (dom f2 /\
  left_open_halfline(r) c= dom f1 /\ left_open_halfline(r) & dom f /\
left_open_halfline(r) c= dom f2 /\ left_open_halfline(r))) & for g st g in dom
  f /\ left_open_halfline(r) holds f1.g<=f.g & f.g<=f2.g) implies f is
  convergent_in-infty & lim_in-infty f=lim_in-infty f1;

theorem :: LIMFUNC1:103
  f1 is convergent_in-infty & f2 is convergent_in-infty & lim_in-infty
f1=lim_in-infty f2 & (ex r st left_open_halfline(r) c= dom f1 /\ dom f2 /\ dom
f & for g st g in left_open_halfline(r) holds f1.g<=f.g & f.g<=f2.g) implies f
  is convergent_in-infty & lim_in-infty f=lim_in-infty f1;

theorem :: LIMFUNC1:104
  f1 is convergent_in+infty & f2 is convergent_in+infty & (ex r st ((dom
  f1 /\ right_open_halfline(r) c= dom f2 /\ right_open_halfline(r) & for g st g
  in dom f1 /\ right_open_halfline(r) holds f1.g<=f2.g) or (dom f2 /\
right_open_halfline(r) c= dom f1 /\ right_open_halfline(r) & for g st g in dom
  f2 /\ right_open_halfline(r) holds f1.g<=f2.g))) implies lim_in+infty f1<=
  lim_in+infty f2;

theorem :: LIMFUNC1:105
  f1 is convergent_in-infty & f2 is convergent_in-infty & (ex r st ((dom
f1 /\ left_open_halfline(r) c= dom f2 /\ left_open_halfline(r) & for g st g in
  dom f1 /\ left_open_halfline(r) holds f1.g<=f2.g) or (dom f2 /\
left_open_halfline(r) c= dom f1 /\ left_open_halfline(r) & for g st g in dom f2
  /\ left_open_halfline(r) holds f1.g<=f2.g))) implies lim_in-infty f1<=
  lim_in-infty f2;

theorem :: LIMFUNC1:106
  (f is divergent_in+infty_to+infty or f is divergent_in+infty_to-infty)
& (for r ex g st r<g & g in dom f & f.g<>0) implies f^ is convergent_in+infty &
  lim_in+infty(f^)=0;

theorem :: LIMFUNC1:107
  (f is divergent_in-infty_to+infty or f is divergent_in-infty_to-infty)
& (for r ex g st g<r & g in dom f & f.g<>0) implies f^ is convergent_in-infty &
  lim_in-infty(f^)=0;

theorem :: LIMFUNC1:108
  f is convergent_in+infty & lim_in+infty f=0 & (for r ex g st r<g & g
  in dom f & f.g<>0) & (ex r st for g st g in dom f /\ right_open_halfline(r)
  holds 0<=f.g) implies f^ is divergent_in+infty_to+infty;

theorem :: LIMFUNC1:109
  f is convergent_in+infty & lim_in+infty f=0 & (for r ex g st r<g & g
  in dom f & f.g<>0) & (ex r st for g st g in dom f /\ right_open_halfline(r)
  holds f.g<=0) implies f^ is divergent_in+infty_to-infty;

theorem :: LIMFUNC1:110
  f is convergent_in-infty & lim_in-infty f=0 & (for r ex g st g<r & g
  in dom f & f.g<>0) & (ex r st for g st g in dom f /\ left_open_halfline(r)
  holds 0<=f.g) implies f^ is divergent_in-infty_to+infty;

theorem :: LIMFUNC1:111
  f is convergent_in-infty & lim_in-infty f=0 & (for r ex g st g<r & g
  in dom f & f.g<>0) & (ex r st for g st g in dom f /\ left_open_halfline(r)
  holds f.g<=0) implies f^ is divergent_in-infty_to-infty;

theorem :: LIMFUNC1:112
  f is convergent_in+infty & lim_in+infty f=0 & (ex r st for g st g in
  dom f /\ right_open_halfline(r) holds 0<f.g) implies f^ is
  divergent_in+infty_to+infty;

theorem :: LIMFUNC1:113
  f is convergent_in+infty & lim_in+infty f=0 & (ex r st for g st g in
  dom f /\ right_open_halfline(r) holds f.g<0) implies f^ is
  divergent_in+infty_to-infty;

theorem :: LIMFUNC1:114
  f is convergent_in-infty & lim_in-infty f=0 & (ex r st for g st g in
  dom f /\ left_open_halfline(r) holds 0<f.g) implies f^ is
  divergent_in-infty_to+infty;

theorem :: LIMFUNC1:115
  f is convergent_in-infty & lim_in-infty f=0 & (ex r st for g st g in
  dom f /\ left_open_halfline(r) holds f.g<0) implies f^ is
  divergent_in-infty_to-infty;
