:: Comma Category
::  by Grzegorz Bancerek and Agata Darmochwa\l
::
:: Received February 20, 1992
:: Copyright (c) 1992 Association of Mizar Users

environ

 vocabularies CAT_1, MCART_1, FUNCT_1, RELAT_1, PARTFUN1, CAT_2, FUNCT_3,
      COMMACAT, GRAPH_1, STRUCT_0;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1, PARTFUN1,
      FUNCT_2, BINOP_1, FUNCOP_1, STRUCT_0, GRAPH_1, CAT_1, CAT_2, MCART_1,
      DOMAIN_1;
 constructors DOMAIN_1, CAT_2, FUNCOP_1, RELSET_1;
 registrations XBOOLE_0, SUBSET_1, RELSET_1, CAT_1, CAT_2, STRUCT_0;
 requirements SUBSET, BOOLE;
 definitions TARSKI, XBOOLE_0, CAT_1, BINOP_1, FUNCOP_1, GRAPH_1;
 theorems TARSKI, ZFMISC_1, MCART_1, FUNCT_1, FUNCT_2, CAT_1, CAT_2, GRFUNC_1,
      RELSET_1, FUNCOP_1;
 schemes FUNCT_2, CLASSES1;

begin
deffunc obj(CatStr) = the carrier of $1;
deffunc morph(CatStr) = the carrier' of $1;

definition
  canceled 4;
end;

reserve x,x1,x2,y,y1,y2 for set;

canceled;

reserve C,D,E for Category,
  c,c1,c2 for Object of C,
  d,d1 for Object of D,
  x
  for set,
  f,f1 for (Morphism of E),
  g for (Morphism of C),
  h for (Morphism of D)
  ,
  F for Functor of C,E,
  G for Functor of D,E;

definition
  let C,D,E;
  let F be Functor of C,E, G be Functor of D,E;
  given c1,d1,f1 such that
A1: f1 in Hom(F.c1,G.d1);
  func commaObjs(F,G) -> non empty Subset of [:[:the carrier of C, the carrier
  of D:], the carrier' of E:] equals
  :Def5:
  {[[c,d],f] : f in Hom(F.c,G.d)};
  coherence
  proof
A2: {[[c,d],f] : f in Hom(F.c,G.d)} c= [:[:the carrier of C, the carrier
    of D:], the carrier' of E:]
    proof
      let x;
      assume
      x in {[[c,d],f] : f in Hom(F.c,G.d)};
      then ex c,d,f st x = [[c,d],f] & f in Hom(F.c,G.d);
      hence thesis;
    end;
    [[c1,d1],f1] in {[[c,d],f] : f in Hom(F.c,G.d)} by A1;
    hence thesis by A2;
  end;
end;

reserve o,o1,o2 for Element of commaObjs(F,G);

theorem Th2:
  (ex c,d,f st f in Hom(F.c,G.d)) implies o = [[o`11,o`12],o`2] & o
  `2 in Hom(F.o`11,G.o`12) & dom o`2 = F.o`11 & cod o`2 = G.o`12
proof
  assume
  ex c,d,f st f in Hom(F.c,G.d);
  then
A1: commaObjs(F,G) = {[[c,d],f]: f in Hom(F.c,G.d)} by Def5;
  o in commaObjs(F,G);
  then consider c,d,f such that
A2: o = [[c,d],f] and
A3: f in Hom(F.c,G.d) by A1;
A4: o`2 = f by A2,MCART_1:7;
  o`11 = c & o`12 = d by A2,MCART_1:89;
  hence thesis by A2,A3,A4,CAT_1:18;
end;

definition
  let C,D,E,F,G;
  given c1,d1,f1 such that
A1: f1 in Hom(F.c1,G.d1);
  func commaMorphs(F,G) -> non empty Subset of [:[:commaObjs(F,G), commaObjs(F
  ,G):], [:the carrier' of C, the carrier' of D:]:] equals
  :Def6:
  {[[o1,o2], [g,h
]] : dom g = o1`11 & cod g = o2`11 & dom h = o1`12 & cod h = o2`12 & (o2`2)*(F.
  g) = (G.h)*(o1`2)};
  coherence
  proof
    commaObjs(F,G) = {[[c,d],f] : f in Hom(F.c,G.d)} by A1,Def5;
    then [[c1,d1],f1] in commaObjs(F,G) by A1;
    then reconsider o = [[c1,d1],f1] as Element of commaObjs(F,G);
    set X = {[[o1,o2], [g,h]] : dom g = o1`11 & cod g = o2`11 & dom h = o1`12
    & cod h = o2`12 & (o2`2)*(F.g) = (G.h)*(o1`2)};
A2: dom id d1 = d1 & cod id d1 = d1 by CAT_1:44;
A3: o`1`1 = o`11 & o`1`2 = o`12 by MCART_1:def 14,def 15;
A4: X c= [:[:commaObjs(F,G), commaObjs(F,G):], [:the carrier' of C, the
    carrier' of D:]:]
    proof
      let x;
      assume
      x in X;
      then ex g,h,o1,o2 st x = [[o1,o2], [g,h]] & dom g = o1`11 & cod g = o2
      `11 & dom h = o1`12 & cod h = o2`12 & (o2`2)*(F.g) = (G.h)*(o1`2);
      hence thesis;
    end;
A5: [c1,d1]`2 = d1 & o`2 = f1 by MCART_1:7;
A6: o`1 = [c1,d1] & [c1,d1]`1 = c1 by MCART_1:7;
    cod f1 = G.d1 by A1,CAT_1:18;
    then
A7: id(G.d1)*f1 = f1 by CAT_1:46;
    dom f1 = F.c1 by A1,CAT_1:18;
    then
A8: f1*id(F.c1) = f1 by CAT_1:47;
A9: F.id c1 = id(F.c1) & G.id d1 = id(G.d1) by CAT_1:108;
    dom id c1 = c1 & cod id c1 = c1 by CAT_1:44;
    then [[o,o],[id c1,id d1]] in X by A2,A3,A6,A5,A8,A7,A9;
    hence thesis by A4;
  end;
end;

reserve k,k1,k2,k' for Element of commaMorphs(F,G);

definition
  let C,D,E,F,G,k;
  redefine func k`11 -> Element of commaObjs(F,G);
  coherence
  proof
    thus k`11 is Element of commaObjs(F,G);
  end;
  func k`12 -> Element of commaObjs(F,G);
  coherence
  proof
    thus k`12 is Element of commaObjs(F,G);
  end;
end;

theorem Th3:
  (ex c,d,f st f in Hom(F.c,G.d)) implies k = [[k`11,k`12], [k`21,k
`22]] & dom k`21 = k`11`11 & cod k`21 = k`12`11 & dom k`22 = k`11`12 & cod k`22
  = k`12`12 & (k`12`2)*(F.k`21) = (G.k`22)*(k`11`2)
proof
  assume
  ex c,d,f st f in Hom(F.c,G.d);
  then
A1: commaMorphs(F,G) = {[[o1,o2], [g,h]] : dom g = o1`11 & cod g = o2`11 &
  dom h = o1`12 & cod h = o2`12 & (o2`2)*(F.g) = (G.h)*(o1`2)} by Def6;
  k in commaMorphs(F,G);
  then consider g,h,o1,o2 such that
A2: k = [[o1,o2], [g,h]] and
A3: dom g = o1`11 & cod g = o2`11 & dom h = o1`12 & cod h = o2`12 & (o2
  `2) *(F.g) = (G.h)*(o1`2) by A1;
A4: k`21 = g by A2,MCART_1:89;
  k`11 = o1 & k`12 = o2 by A2,MCART_1:89;
  hence thesis by A2,A3,A4,MCART_1:89;
end;

definition
  let C,D,E,F,G,k1,k2;
  given c1,d1,f1 such that
A1: f1 in Hom(F.c1,G.d1);
  assume
A2: k1`12 = k2`11;
  func k2*k1 -> Element of commaMorphs(F,G) equals
  :Def7:
  [[k1`11,k2`12],[k2
  `21*k1`21,k2`22*k1`22]];
  coherence
  proof
    set k22 = k2`22*k1`22;
    set k21 = k2`21*k1`21;
A3: F.cod k2`21 = cod (F.k2`21) & dom (F.k2`21) = F.dom k2`21 by CAT_1:
    109;
A4: cod (F.k1`21) = F.cod k1`21 by CAT_1:109;
A5: cod k1`12`2 = G.k1`12`12 by A1,Th2;
A6: dom k1`22 = k1`11`12 by A1,Th3;
A7: (k2`12`2)*(F.k2`21) = (G.k2`22)*(k2`11`2) & dom k2`12`2 = F.k2`12`11
    by A1, Th2,Th3;
A8: cod (G.k1`22) = G.cod k1`22 by CAT_1:109;
A9: (k1`12`2)*(F.k1`21) = (G.k1`22)*(k1`11`2) & dom k1`12`2 = F.k1`12`11
    by A1, Th2,Th3;
A10: dom (G.k2`22) = G.dom k2`22 by CAT_1:109;
A11: cod k1`11`2 = G.k1`11`12 & dom (G.k1`22) = G.dom k1`22 by A1,Th2,
    CAT_1:109;
A12: cod k2`21 = k2`12`11 by A1,Th3;
A13: commaMorphs(F,G) = {[[o1,o2], [g,h]] : dom g = o1`11 & cod g = o2`11
    & dom h = o1`12 & cod h = o2`12 & (o2`2)*(F.g) = (G.h)*(o1`2)} by A1,Def6;
A14: dom k2`22 = k2`11`12 by A1,Th3;
A15: cod k1`22 = k1`12`12 by A1,Th3;
    then
A16: dom k22 = dom k1`22 & cod k22 = cod k2`22 by A2,A14,CAT_1:42;
A17: dom k1`21 = k1`11`11 & cod k2`22 = k2`12`12 by A1,Th3;
A18: cod k1`21 = k1`12`11 by A1,Th3;
A19: dom k2`21 = k2`11`11 by A1,Th3;
    then
A20: dom k21 = dom k1`21 & cod k21 = cod k2`21 by A2,A18,CAT_1:42;
    ((k2`12)`2)*(F.k21) = (k2`12`2)*((F.k2`21)*(F.k1`21)) by A2,A18,A19,
    CAT_1:99
      .= (G.k2`22)*(k2`11`2)*(F.k1`21) by A2,A18,A19,A12,A7,A3,A4,CAT_1:43
      .= (G.k2`22)*((G.k1`22)*(k1`11`2)) by A2,A18,A14,A9,A5,A4,A10,CAT_1:
    43
      .= (G.k2`22)*(G.k1`22)*(k1`11`2) by A2,A6,A15,A14,A10,A11,A8,CAT_1:43
      .= (G.k22)*((k1`11)`2) by A2,A15,A14,CAT_1:99;
    then
    ([[k1`11,k2`12],[k2`21*k1`21,k2`22*k1`22]]) in commaMorphs(F,G) by A6
    ,A12,A17,A13,A20,A16;
    hence thesis;
  end;
end;

definition
  let C,D,E,F,G;
  func commaComp(F,G) -> PartFunc of [:commaMorphs(F,G),commaMorphs(F,G):],
  commaMorphs(F,G) means
  : Def8:
  dom it = { [k1,k2]: k1`11 = k2`12 } & for k,k'
  st [k,k'] in dom it holds it.[k,k'] = k*k';
  existence
  proof
    defpred P[set,set] means ex k1,k2 st $1 = [k1,k2] & $2 = k1*k2;
    set X = {[k1,k2]: k1`11 = k2`12};
A1: for x st x in X ex y st P[x,y]
    proof
      let x;
      assume
      x in X;
      then consider k1,k2 such that
A2:   x = [k1,k2] and
      k1`11 = k2`12;
      reconsider y = k1*k2 as set;
      take y,k1,k2;
      thus thesis by A2;
    end;
    consider f being Function such that
A3: dom f = X & for x st x in X holds P[x,f.x] from CLASSES1:sch 1(A1);
A4: rng f c= commaMorphs(F,G)
    proof
      let x;
      assume
      x in rng f;
      then consider y such that
A5:   y in dom f and
A6:   x = f.y by FUNCT_1:def 5;
      ex k1,k2 st y = [k1,k2] & f.y = k1*k2 by A3,A5;
      hence thesis by A6;
    end;
    dom f c= [:commaMorphs(F,G),commaMorphs(F,G):]
    proof
      let x;
      assume
      x in dom f;
      then ex k1,k2 st x = [k1,k2] & k1`11 = k2`12 by A3;
      hence thesis;
    end;
    then reconsider f as PartFunc of [:commaMorphs(F,G),commaMorphs(F,G):],
    commaMorphs(F,G) by A4,RELSET_1:11;
    take f;
    thus dom f = X by A3;
    let k1,k2;
    assume
    [k1,k2] in dom f;
    then consider k,k' such that
A7: [k1,k2] = [k,k'] and
A8: f.[k1,k2] = k*k' by A3;
    k1 = k by A7,ZFMISC_1:33;
    hence thesis by A7,A8,ZFMISC_1:33;
  end;
  uniqueness
  proof
    let f1,f2 be PartFunc of [:commaMorphs(F,G),commaMorphs(F,G):],
    commaMorphs(F,G) such that
A9: dom f1 = { [k1,k2]: k1`11 = k2`12 } & for k,k' st [k,k'] in dom
    f1 holds f1.[k,k'] = k*k' and
A10: dom f2 = { [k1,k2]: k1`11 = k2`12 } & for k,k' st [k,k'] in dom
    f2 holds f2.[k,k'] = k*k';
    now
      let x;
      assume
A11:  x in { [k1,k2]: k1`11 = k2`12 };
      then consider k1,k2 such that
A12:  x = [k1,k2] and
      k1`11 = k2`12;
      thus f1.x = k1*k2 by A9,A11,A12
        .= f2.x by A10,A11,A12;
    end;
    hence thesis by A9,A10,FUNCT_1:9;
  end;
end;

definition
  let C,D,E,F,G;
  given c1,d1,f1 such that
A1: f1 in Hom(F.c1,G.d1);
  func F comma G -> strict Category means
  the carrier of it = commaObjs(F,G) &
  the carrier' of it = commaMorphs(F,G) & (for k holds (the Source of it).k = k
`11) & (for k holds (the Target of it).k = k`12) & (for o holds (the Id of it).
  o = [[o,o], [id o`11,id o`12]]) & the Comp of it = commaComp(F,G);
  existence
  proof
    reconsider O = commaObjs(F,G), M = commaMorphs(F,G) as non empty set;
    defpred P[Element of commaObjs(F,G),set] means $2 = [[$1,$1],[id $1`11, id
    $1`12]];
    deffunc G(Element of commaMorphs(F,G)) = $1`12;
    deffunc F(Element of commaMorphs(F,G)) = $1`11;
    consider D' being Function of commaMorphs(F,G),commaObjs(F,G) such that
A2: D'.k = F(k) from FUNCT_2:sch 4;
A3: commaMorphs(F,G) = {[[o1,o2], [g,h]] : dom g = o1`11 & cod g = o2`11 &
    dom h = o1`12 & cod h = o2`12 & (o2`2)*(F.g) = (G.h)*(o1`2)} by A1,Def6;
A4: ex k st P[o,k]
    proof
A5:   dom id o`12 = o`12 & cod id o`12 = o`12 by CAT_1:44;
      dom o`2 = F.o`11 & F.id o`11 = id (F.o`11) by A1,Th2,CAT_1:108;
      then
A6:   o`2*(F.id o`11) = o`2 by CAT_1:47;
      cod o`2 = G.o`12 & G.id o`12 = id (G.o`12) by A1,Th2,CAT_1:108;
      then
A7:   (G.id o`12)*o`2 = o`2 by CAT_1:46;
      dom id o`11 = o`11 & cod id o`11 = o`11 by CAT_1:44;
      then [[o,o],[id o`11,id o`12]] in commaMorphs(F,G) by A3,
      A5,A6,A7;
      hence thesis;
    end;
    consider I being Function of commaObjs(F,G),commaMorphs(F,G) such that
A8: P[o,I.o] from FUNCT_2:sch 3(A4);
    reconsider I as Function of O,M;
    reconsider ' = commaComp(F,G) as PartFunc of [:M,M:],M;
    consider C' being Function of commaMorphs(F,G),commaObjs(F,G) such that
A9: C'.k = G(k) from FUNCT_2:sch 4;
    reconsider D', C' as Function of M,O;
    set FG = CatStr(#O, M, D', C', ', I#);
A10: dom the Comp of FG = { [k1,k2]: k1`11 = k2`12} by Def8;
A11: for f,g being Morphism of FG for k1,k2 st f = k1 & g = k2 & dom g =
    cod f holds g*f = [[k1`11,k2`12],[k2`21*k1`21,k2`22*k1`22]]
    proof
      let f,g be Morphism of FG;
      let k1,k2;
      assume that
A12:  f = k1 & g = k2 and
A13:  dom g = cod f;
A14:  dom g = k2`11 & cod f = k1`12 by A2,A9,A12;
      then
A15:  [k2,k1] in dom ' by A10,A13;
      then
A16:  '.(k2,k1) = k2*k1 by Def8;
      g*f = '.(g,f) by A12,A15,CAT_1:def 4;
      hence thesis by A1,A12,A13,A14,A16,Def7;
    end;
A17: for b being Object of FG holds dom id b = b & cod id b = b & (for f
being Morphism of FG st cod f = b holds (id b)*f = f) & for g being Morphism of
    FG st dom g = b holds g*(id b) = g
    proof
      let b be Object of FG;
      reconsider b' = b as Element of commaObjs(F,G);
      reconsider i = id b as Element of commaMorphs(F,G);
A18:  I.b' = [[b',b'],[id b'`11, id b'`12]] by A8;
      then
A19:  (I.b')`11 = b' by MCART_1:89;
A20:  (I.b')`12 = b' by A18,MCART_1:89;
      hence dom id b = b & cod id b = b by A2,A9,A19;
A21:  (I.b')`21 = id b'`11 & (I.b')`22 = id b'`12 by A18,MCART_1:89;
      thus for f being Morphism of FG st cod f = b holds (id b)*f = f
      proof
        let f be Morphism of FG;
        reconsider f' = f as Element of commaMorphs(F,G);
        assume
A22:    cod f = b;
        then
A23:    b = f`12 by A9;
        cod f'`22 = f'`12`12 by A1,Th3;
        then
A24:    (id b'`12)*f'`22 = f'`22 by A23,CAT_1:46;
        cod f'`21 = f'`12`11 by A1,Th3;
        then
A25:    (id b'`11)*f'`21 = f'`21 by A23,CAT_1:46;
        cod f = dom id b by A2,A19,A22;
        hence (id b)*f = [[f'`11,i`12],[i`21*f'`21,i`22*f'`22]] by A11
          .= f by A1,A20,A21,A23,A25,A24,Th3;
      end;
      let g be Morphism of FG;
      reconsider g' = g as Element of commaMorphs(F,G);
      assume
A26:  dom g = b;
      then
A27:  b = g`11 by A2;
      dom g'`22 = g'`11`12 by A1,Th3;
      then
A28:  g'`22*(id b'`12) = g'`22 by A27,CAT_1:47;
      dom g'`21 = g'`11`11 by A1,Th3;
      then
A29:  g'`21*(id b'`11) = g'`21 by A27,CAT_1:47;
      dom g = cod id b by A9,A20,A26;
      hence g*(id b) = [[i`11,g'`12],[g'`21*i`21,g'`22*i`22]] by A11
        .= g by A1,A19,A21,A27,A29,A28,Th3;
    end;
A30: for f,g being Morphism of FG st dom g = cod f holds dom(g*f) = dom f
    & cod (g*f) = cod g
    proof
      let f,g be Morphism of FG such that
A31:  dom g = cod f;
      reconsider f1 = f, g1 = g as Element of commaMorphs(F,G);
A32:  dom g = g1`11 & cod f = f1`12 by A2,A9;
      then [g1,f1] in dom ' by A10,A31;
      then
A33:  g*f = '.(g,f) & '.(g1,f1) = g1*f1 by Def8,CAT_1:def 4;
A34:  dom f = f`11 & cod g = g`12 by A2,A9;
A35:  dom (g*f) = (g*f)`11 & cod (g*f) = (g*f)`12 by A2,A9;
      g1*f1 = [[f1`11,g1`12],[g1`21*f1`21,g1`22*f1`22]] by A1,A31,A32,
      Def7;
      hence thesis by A35,A34,A33,MCART_1:89;
    end;
A36: for f,g,h being Morphism of FG st dom h = cod g & dom g = cod f holds
    h*(g*f) = (h*g)*f
    proof
      let f,g,h be Morphism of FG;
      reconsider f1 = f, g1 = g, h1 = h, gf = g*f, hg = h*g as Element of
      commaMorphs(F,G);
      assume that
A37:  dom h = cod g and
A38:  dom g = cod f;
A39:  dom g = g`11 & cod g = g`12 by A2,A9;
      dom (h*g) = dom g by A30,A37;
      then
A40:  (h*g)*f = [[f`11,hg`12],[hg`21*f1`21,hg`22*f1`22]] by A11,A38;
A41:  dom h = h`11 & cod f = f`12 by A2,A9;
      cod (g*f) = cod g by A30,A38;
      then
A42:  h*(g*f) = [[gf`11,h`12],[h1`21*gf`21,h1`22*gf`22]] by A11,A37;
A43:  dom h1`21 = h1`11`11 & cod f1`21 = f1`12`11 by A1,Th3;
A44:  dom h1`22 = h1`11`12 & cod f1`22 = f1`12`12 by A1,Th3;
A45:  dom g1`22 = g1`11`12 & cod g1`22 = g1`12`12 by A1,Th3;
A46:  h*g = [[g`11,h`12],[h1`21*g1`21,h1`22*g1`22]] by A11,A37;
      then
A47:  (h*g)`12 = h`12 & hg`21 = h1`21*g1`21 by MCART_1:89;
A48:  g*f = [[f`11,g`12],[g1`21*f1`21,g1`22*f1`22]] by A11,A38;
      then
A49:  (g*f)`11 = f`11 & gf`21 = g1`21*f1`21 by MCART_1:89;
A50:  gf`22 = g1`22*f1`22 by A48,MCART_1:89;
A51:  hg`22 = h1`22*g1`22 by A46,MCART_1:89;
      dom g1`21 = g1`11`11 & cod g1`21 = g1`12`11 by A1,Th3;
      then (h1`21*g1`21)*f1`21 = h1`21*(g1`21*f1`21) by A37,A38,A39,A43,
      A41, CAT_1:43;
      hence thesis by A37,A38,A39,A41,A45,A44,A42,A40,A47,A49,A51,A50,
      CAT_1:43;
    end;
    for f,g being Morphism of FG holds [g,f] in dom the Comp of FG iff
    dom g = cod f
    proof
      let f,g be Morphism of FG;
      reconsider f1 = f, g1 = g as Element of commaMorphs(F,G);
A52:  dom g = g1`11 & cod f = f1`12 by A2,A9;
      thus [g,f] in dom the Comp of FG implies dom g = cod f
      proof
        assume
        [g,f] in dom the Comp of FG;
        then consider k1,k2 such that
A53:    [g,f] = [k1,k2] and
A54:    k1`11 = k2`12 by A10;
        g = k1 by A53,ZFMISC_1:33;
        hence thesis by A52,A53,A54,ZFMISC_1:33;
      end;
      thus thesis by A10,A52;
    end;
    then reconsider FG as strict Category by A30,A36,A17,CAT_1:29;
    take FG;
    thus thesis by A2,A9,A8;
  end;
  uniqueness
  proof
    let E1,E2 be strict Category such that
A55: the carrier of E1 = commaObjs(F,G) and
A56: the carrier' of E1 = commaMorphs(F,G) and
A57: for k holds (the Source of E1).k = k`11 and
A58: for k holds (the Target of E1).k = k`12 and
A59: for o holds (the Id of E1).o = [[o,o], [id o`11,id o`12]] and
A60: the Comp of E1 = commaComp(F,G) and
A61: the carrier of E2 = commaObjs(F,G) & the carrier' of E2 =
    commaMorphs(F,G) and
A62: for k holds (the Source of E2).k = k`11 and
A63: for k holds (the Target of E2).k = k`12 and
A64: for o holds (the Id of E2).o = [[o,o], [id o`11,id o`12]] and
A65: the Comp of E2 = commaComp(F,G);
    now
      let x be Element of morph(E1);
      thus (the Target of E1).x = x`12 by A56,A58
        .= (the Target of E2).x by A56,A63;
    end;
    then
A66: the Target of E1 = the Target of E2 by A55,A56,A61,FUNCT_2:113;
A67: now
      let x be Object of E1;
      reconsider o = x as Element of commaObjs(F,G) by A55;
      thus (the Id of E1).x = [[o,o],[id o`11,id o`12]] by A59
        .= (the Id of E2).x by A64;
    end;
    now
      let x be Element of morph(E1);
      thus (the Source of E1).x = x`11 by A56,A57
        .= (the Source of E2).x by A56,A62;
    end;
    then the Source of E1 = the Source of E2 by A55,A56,A61,FUNCT_2:113;
    hence thesis by A55,A56,A60,A61,A65,A66,A67,FUNCT_2:113;
  end;
end;

theorem
  the carrier of 1Cat(x,y) = {x} & the carrier' of 1Cat(x,y) = {y};

theorem Th5:
  for a,b being Object of 1Cat(x,y) holds Hom(a,b) = {y}
proof
  let a,b be Object of 1Cat(x,y);
  thus Hom(a,b) c= {y};
  y is Morphism of 1Cat(x,y) by TARSKI:def 1;
  then y in Hom(a,b) by CAT_1:36;
  hence thesis by ZFMISC_1:37;
end;

definition
  let C, c;
  func 1Cat c -> strict Subcategory of C equals
  1Cat(c, id c);
  coherence
  proof
A1: now
      let a be Object of 1Cat(c, id c);
      id a = id c by TARSKI:def 1;
      hence for c1 st a = c1 holds id a = id c1 by TARSKI:def 1;
    end;
A2: now
      let a,b be Object of 1Cat(c, id c);
A3:   a = c & b = c by TARSKI:def 1;
      id c in Hom(c,c) & Hom(a,a) = {id c} by Th5,CAT_1:55;
      hence for c1,c2 st a = c1 & b = c2 holds Hom(a,b) c= Hom(c1,c2) by A3,
      ZFMISC_1:37;
    end;
    set m = id c;
    set s = (m,m).--> m;
A4: dom s = {[m,m]} by FUNCOP_1:19;
A5: dom m = c by CAT_1:44;
A6: cod m = c by CAT_1:44;
A7: s.(m,m) = m by FUNCOP_1:86;
A8: now
      let x;
      assume
A9:   x in dom the Comp of 1Cat(c,m);
      hence (the Comp of 1Cat(c,m)).x = m by A7,A4,TARSKI:def 1
        .= m*(m qua Morphism of C) by A6,CAT_1:46
        .= (the Comp of C).(m,m) by A5,A6,CAT_1:41
        .= (the Comp of C).x by A4,A9,TARSKI:def 1;
    end;
    [m,m] in dom the Comp of C by A5,A6,CAT_1:40;
    then dom the Comp of 1Cat(c,m) c= dom the Comp of C by A4,ZFMISC_1:37;
    then
    obj(1Cat(c, id c)) = {c} & the Comp of 1Cat(c, id c) c= the Comp of C
    by A8,GRFUNC_1:8;
    hence thesis by A2,A1,CAT_2:def 4;
  end;
end;

definition
  let C, c;
  func c comma C -> strict Category equals
  (incl 1Cat c) comma (id C);
  coherence;
  func C comma c -> strict Category equals
  (id C) comma (incl 1Cat c);
  coherence;
end;

