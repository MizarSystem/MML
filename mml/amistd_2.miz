:: On the Composition of Macro Instructions of Standard Computers
::  by Artur Korni{\l}owicz
::
:: Received April 14, 2000
:: Copyright (c) 2000 Association of Mizar Users

environ

 vocabularies NUMBERS, ORDINAL1, SETFAM_1, ARYTM_1, ARYTM_3, CARD_1, SUBSET_1,
      AMI_1, XBOOLE_0, RELAT_1, TARSKI, FUNCOP_1, GLIB_000, GOBOARD5,
      AMISTD_1, UNIALG_1, FUNCT_1, CARD_3, CARD_5, FRECHET, RCOMP_1, STRUCT_0,
      VALUED_1, FSM_1, FUNCT_4, FUNCT_7, TURING_1, CIRCUIT2, AMISTD_2,
      PARTFUN1, CAT_1, SCMNORM;
 notations TARSKI, XBOOLE_0, SUBSET_1, ORDINAL1, MCART_1, SETFAM_1,
      MEMBERED, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2, FUNCT_4, CARD_1,
      NUMBERS, XCMPLX_0, XXREAL_0, NAT_1, CARD_3, FINSEQ_1, FUNCOP_1, NAT_D,
      FUNCT_7, VALUED_0, VALUED_1, AFINSQ_1, STRUCT_0,
      COMPOS_1, EXTPRO_1, AMISTD_1;
 constructors WELLORD2, REALSET1, NAT_D, AMISTD_1, XXREAL_2, PRE_POLY,
      AFINSQ_1, ORDINAL4, RECDEF_2, VALUED_1;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, FUNCOP_1, FINSET_1,
      XXREAL_0, XREAL_0, NAT_1, MEMBERED, FINSEQ_1, CARD_3, REALSET1, FUNCT_7,
      STRUCT_0, AMISTD_1, CARD_1, FUNCT_4, XXREAL_2, RELSET_1, GRFUNC_1,
      FUNCT_2, ORDINAL1, AFINSQ_1, VALUED_1, VALUED_0, COMPOS_1, EXTPRO_1;
 requirements NUMERALS, BOOLE, SUBSET, REAL, ARITHM;
 definitions RELAT_1, FUNCT_1, WELLORD2, FUNCT_7, COMPOS_1, EXTPRO_1, YELLOW_8,
      AMISTD_1, XBOOLE_0, FUNCOP_1, CARD_3, NAT_1, AFINSQ_1, MCART_1, VALUED_1,
      TARSKI;
 theorems AMISTD_1, FUNCOP_1, FUNCT_1, FUNCT_4, GRFUNC_1, MCART_1,
      RELAT_1, SETFAM_1, TARSKI, ZFMISC_1, CARD_3, XBOOLE_0, XBOOLE_1, FUNCT_7,
      PBOOLE, PARTFUN1, RECDEF_2, VALUED_1, COMPOS_1, EXTPRO_1;

begin  :: Properties of AMI-Struct

reserve k, m for natural number,
  x, x1, x2, x3, y, y1, y2, y3, X,Y,Z for set,
  N for with_non-empty_elements non empty set;

canceled 16;

theorem Th17:
  for I being Instruction of STC N holds JumpPart I = 0
proof
  let I be Instruction of STC N;
  the Instructions of STC N = {[0,0,0],[1,0,0]} by AMISTD_1:def 11;
  then I = [0,0,0] or I = [1,0,0] by TARSKI:def 2;
  hence thesis by RECDEF_2:def 2;
end;

definition
 canceled 5;
  let N be with_non-empty_elements non empty set,
  S be IC-Ins-separated definite standard-ins
  (non empty stored-program AMI-Struct over N), I be Instruction of S;
  attr I is with_explicit_jumps means
:Def6: JUMP I = rng JumpPart I;
  canceled;
end;

definition
  let N be with_non-empty_elements non empty set,
  S be standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N);
  attr S is with_explicit_jumps means
:Def8: for I being Instruction of S holds I is with_explicit_jumps;
  canceled;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster standard -> (IC-Ins-separated definite
    (non empty stored-program AMI-Struct over N));
  coherence;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster standard standard-ins (IC-Ins-separated definite
    (non empty stored-program AMI-Struct over N));
  existence
  proof
    take STC N;
    thus thesis;
  end;
end;

theorem Th18:
  for S being standard (IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)), I being Instruction of S
  st for f being Element of NAT holds NIC(I,f)={succ f}
  holds JUMP I is empty
proof
  let S be standard (IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)), I be Instruction of S;
  assume
A1: for f being Element of NAT holds NIC(I,f)={succ f};
  set p=1, q=2;
  reconsider p,q as Element of NAT;
  set X = { NIC(I,f) where f is Element of NAT:
  not contradiction };
  assume not thesis;
  then consider x being set such that
A2: x in meet X by XBOOLE_0:def 1;
A3: NIC(I,p) = {succ p} by A1;
A4: NIC(I,q) = {succ q} by A1;
A5: {succ p} in X by A3;
A6: {succ q} in X by A4;
A7: x in {succ p} by A2,A5,SETFAM_1:def 1;
A8: x in {succ q} by A2,A6,SETFAM_1:def 1;
    x = succ p by A7,TARSKI:def 1;
  hence contradiction by A8,TARSKI:def 1;
end;

registration
  let N be with_non-empty_elements non empty set,
  I be Instruction of STC N;
  cluster JUMP I -> empty;
  coherence
  proof
    per cases by AMISTD_1:22;
    suppose InsCode I = 0;
      then for f being Element of NAT holds NIC(I,f)={f} by AMISTD_1:15,20;
      hence thesis by AMISTD_1:14;
    end;
    suppose InsCode I = 1;
      then for f being Element of NAT holds NIC(I,f)={succ f} by AMISTD_1:39;
      hence thesis by Th18;
    end;
  end;
end;

theorem Th19:
  for T being InsType of STC N holds JumpParts T = {0}
proof
  let T be InsType of STC N;
  set A = { JumpPart I where I is Instruction of STC N: InsCode I = T };
  {0} = A
  proof
    hereby
      let a be set;
      assume a in {0};
      then
A1:   a = 0 by TARSKI:def 1;
A2:   the Instructions of STC N = {[0,0,0],[1,0,0]} by AMISTD_1:def 11;
      then
A3:   InsCodes STC N = {0,1} by MCART_1:96;
      per cases by A3,TARSKI:def 2;
      suppose
A4:     T = 0;
        reconsider I = [0,0,0] as Instruction of STC N by A2,TARSKI:def 2;
A5:     JumpPart I = 0 by Th17;
        InsCode I = 0 by RECDEF_2:def 1;
        hence a in A by A1,A4,A5;
      end;
      suppose
A6:     T = 1;
        reconsider I = [1,0,0] as Instruction of STC N by A2,TARSKI:def 2;
A7:     JumpPart I = 0 by Th17;
        InsCode I = 1 by RECDEF_2:def 1;
        hence a in A by A1,A6,A7;
      end;
    end;
    let a be set;
    assume a in A;
    then ex I being Instruction of STC N st a = JumpPart I & InsCode I = T;
    then a = 0 by Th17;
    hence thesis by TARSKI:def 1;
  end;
  hence thesis;
end;

Lm3: for I being Instruction of Trivial-AMI N holds JumpPart I = 0
proof
  let I be Instruction of Trivial-AMI N;
  the Instructions of Trivial-AMI N = {[0,0,{}]} by EXTPRO_1:def 1;
  then I = [0,0,0] by TARSKI:def 1;
  hence thesis by RECDEF_2:def 2;
end;

Lm4: for T being InsType of Trivial-AMI N holds JumpParts T = {0}
proof
  let T be InsType of Trivial-AMI N;
  set A = { JumpPart I
   where I is Instruction of Trivial-AMI N: InsCode I = T };
  {0} = A
  proof
    hereby
      let a be set;
      assume a in {0};
      then
A1:   a = 0 by TARSKI:def 1;
A2:   the Instructions of Trivial-AMI N = {[0,0,{}]} by EXTPRO_1:def 1;
      then InsCodes Trivial-AMI N = {0} by MCART_1:97;
      then
A3:   T = 0 by TARSKI:def 1;
      reconsider I = [0,0,0] as Instruction of Trivial-AMI N
      by A2,TARSKI:def 1;
A4:   JumpPart I = 0 by Lm3;
      InsCode I = 0 by RECDEF_2:def 1;
      hence a in A by A1,A3,A4;
    end;
    let a be set;
    assume a in A;
    then ex I being Instruction of Trivial-AMI N
    st a = JumpPart I & InsCode I = T;
    then a = 0 by Lm3;
    hence thesis by TARSKI:def 1;
  end;
  hence thesis;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster STC N ->
   with_explicit_jumps homogeneous regular J/A-independent;
  coherence
  proof
    thus STC N is with_explicit_jumps
    proof
      let I be Instruction of STC N;
      the Instructions of STC N = {[0,0,0],[1,0,0]} by AMISTD_1:def 11;
      then I = [0,0,0] or I = [1,0,0] by TARSKI:def 2;
      hence JUMP I = rng JumpPart I by RECDEF_2:def 2,RELAT_1:60;
    end;
    thus STC N is homogeneous
     proof let I, J be Instruction of STC N;
       JumpPart I = {} & JumpPart J = {} by Th17;
      hence thesis;
     end;
    thus STC N is regular
     proof let I be Instruction of STC N;
       JumpPart I = {} by Th17;
      hence thesis;
     end;
    let T be InsType of STC N;
    let f1,f2 be Function, p be set;
    assume f1 in JumpParts T;
     then
A:    f1 in {0} by Th19;
     assume
Z:    f2 in product product" JumpParts T;
     product" JumpParts T = {} by Th19,CARD_3:156;
     then f1 = 0 & f2 = 0 by A,Z,CARD_3:19,TARSKI:def 1;
    hence thesis;
  end;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster standard regular J/A-independent homogeneous
   halting realistic with_explicit_jumps (IC-Ins-separated definite
   standard-ins
    (non empty stored-program AMI-Struct over N));
  existence
  proof
    take STC N;
    thus thesis;
  end;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster Trivial-AMI N -> regular J/A-independent;
  coherence
  proof
   thus Trivial-AMI N is regular
    proof
    let I be Instruction of Trivial-AMI N;
     JumpPart I = {} by Lm3;
    hence thesis;
    end;
    let T be InsType of Trivial-AMI N;
    let f1,f2 be Function, p be set;
    assume f1 in JumpParts T;
     then
A:    f1 in {0} by Lm4;
     assume
Z:    f2 in product product" JumpParts T;
     product" JumpParts T = {} by Lm4,CARD_3:156;
     then f1 = 0 & f2 = 0 by A,Z,CARD_3:19,TARSKI:def 1;
    hence thesis;
  end;
end;

registration

  let N be with_non-empty_elements non empty set;
  cluster regular J/A-independent (standard-ins AMI-Struct over N);
  existence
  proof
    take Trivial-AMI N;
    thus thesis;
  end;
end;

registration

  let N be with_non-empty_elements non empty set,
  I be Instruction of Trivial-AMI N;
  cluster JUMP I -> empty;
  coherence
  proof
    for f being Element of NAT holds NIC(I,f)={f} by AMISTD_1:15,56;
    hence thesis by AMISTD_1:14;
  end;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster Trivial-AMI N -> with_explicit_jumps;
  coherence
  proof
    thus Trivial-AMI N is with_explicit_jumps
    proof
      let I be Instruction of Trivial-AMI N;
      the Instructions of Trivial-AMI N = {[0,0,{}]} by EXTPRO_1:def 1;
      then I = [0,0,0] by TARSKI:def 1;
      hence JUMP I = rng JumpPart I by RECDEF_2:def 2,RELAT_1:60;
    end;
  end;
end;

registration
  let N;
  cluster regular J/A-independent
    (non empty stored-program standard-ins AMI-Struct over N);
  existence
  proof
    take Trivial-AMI N;
    thus thesis;
  end;
end;

registration

  let N be with_non-empty_elements non empty set;
  cluster with_explicit_jumps halting realistic
    (standard-ins IC-Ins-separated definite
    (non empty stored-program AMI-Struct over N));
  existence
  proof
    take Trivial-AMI N;
    thus thesis;
  end;
end;

registration

  let N be with_non-empty_elements non empty set;
  let S be with_explicit_jumps (IC-Ins-separated
  definite (non empty stored-program standard-ins AMI-Struct over N));
  cluster -> with_explicit_jumps Instruction of S;
  coherence by Def8;
end;

canceled;

theorem Th21:
  for S being realistic IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N),
  I being Instruction of S st I is halting holds JUMP I is empty
proof

  let S be realistic IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N), I be Instruction of S;
  assume I is halting;
  then for l being Element of NAT holds NIC(I,l)={l}
  by AMISTD_1:15;
  hence thesis by AMISTD_1:14;
end;

registration

  let N be with_non-empty_elements non empty set,
  S be halting realistic
  (IC-Ins-separated definite (non empty stored-program AMI-Struct over N)),
  I be halting Instruction of S;
  cluster JUMP I -> empty;
  coherence by Th21;
end;

theorem
  for S being halting with_explicit_jumps
  realistic (IC-Ins-separated definite
  (standard-ins non empty stored-program AMI-Struct over N)),
  I being Instruction of S st I is ins-loc-free holds JUMP I is empty
proof
  let S be halting with_explicit_jumps realistic (IC-Ins-separated definite
  (standard-ins non empty stored-program AMI-Struct over N)),
  I be Instruction of S such that
A1: JumpPart I is empty;
B1: rng JumpPart I = {} by A1;
   JUMP I c= rng JumpPart I by Def6;
  hence thesis by B1,XBOOLE_1:3;
end;

registration

  let N be with_non-empty_elements non empty set,
  S be with_explicit_jumps
  realistic (standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N));
  cluster halting -> ins-loc-free Instruction of S;
  coherence
proof
  let I be Instruction of S;
  assume I is halting;
   then
A1:  JUMP I is empty by Th21;
   rng JumpPart I = JUMP I by Def6;
  hence JumpPart I is empty by A1;
end;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be standard with_explicit_jumps
   standard-ins (IC-Ins-separated definite
  (standard-ins non empty stored-program AMI-Struct over N));
  cluster sequential -> ins-loc-free Instruction of S;
  coherence
proof
  let I be Instruction of S;
  assume I is sequential;
   then
A1: JUMP I is empty by AMISTD_1:43;
   rng JumpPart I = JUMP I by Def6;
  hence JumpPart I is empty by A1;
end;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be standard realistic halting
  (IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N));
  cluster Stop S -> closed;
  coherence by AMISTD_1:46;
end;

begin  :: On the composition of macro instructions

registration
  let N be with_non-empty_elements non empty set,
  S be halting standard with_explicit_jumps
  realistic regular homogeneous J/A-independent
   (standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)),
  I be halting Instruction of S, k be natural number;
  cluster IncAddr(I,k) -> halting;
  coherence by COMPOS_1:92;
end;

canceled 13;

theorem
  for S being regular homogeneous J/A-independent standard halting
  with_explicit_jumps
  realistic (standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)),
  I being Instruction of S st I is sequential
  holds IncAddr(I,k) is sequential by COMPOS_1:92;

definition
 canceled 8;
  let N be with_non-empty_elements non empty set,
  S be regular homogeneous J/A-independent standard halting realistic
   (standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)), I be Instruction of S;
  attr I is IC-good means
  :Def17:
  for k being natural number, s1 being State of S
  holds IC Exec(I,s1) + k = IC Exec(IncAddr(I,k),IncrIC(s1,k));
end;

definition
  let N be with_non-empty_elements non empty set,
  S be regular homogeneous J/A-independent standard halting realistic
   (standard-ins IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N));
  attr S is IC-good means
  :Def18:
  for I being Instruction of S holds I is IC-good;
end;

definition
  let N be with_non-empty_elements set,
  S be stored-program AMI-Struct over N, I be Instruction of S;
  attr I is Exec-preserving means
  :Def19:
  for s1, s2 being State of S
  st s1, s2 equal_outside NAT holds Exec(I,s1), Exec(I,s2) equal_outside NAT;
end;

definition
  let N be with_non-empty_elements set,
  S be stored-program AMI-Struct over N;
  attr S is Exec-preserving means
  :Def20:
  for I being Instruction of S holds I is Exec-preserving;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be regular homogeneous J/A-independent standard
  with_explicit_jumps
  (standard-ins IC-Ins-separated definite halting realistic
  (non empty stored-program AMI-Struct over N));
  cluster sequential -> IC-good Instruction of S;
  coherence
proof
  let I be Instruction of S such that
A1: I is sequential;
  let k be natural number, s1 be State of S;
  set s2 = IncrIC(s1,k);
  dom (IC S .--> (IC s1 + k)) = {IC S} by FUNCOP_1:19;
  then IC S in dom (IC S .--> (IC s1 + k)) by TARSKI:def 1;
  then
A3: IC s2 = (IC S .--> (IC s1 + k)).IC S by FUNCT_4:14
    .= IC s1 + k by FUNCOP_1:87;
A4: IC Exec(I, s2) = succ IC s2 by A1,AMISTD_1:def 16
    .= IC s1 + 1 + k by A3;
  IC Exec(I,s1) = succ IC s1 by A1,AMISTD_1:def 16
    .= IC s1 + 1;
  hence IC Exec(I,s1) + k = IC Exec(IncAddr(I,k), s2) by A1,A4,COMPOS_1:92;
end;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be regular homogeneous J/A-independent standard
  realistic with_explicit_jumps
  (standard-ins IC-Ins-separated definite halting realistic
  (non empty stored-program AMI-Struct over N));
  cluster halting -> IC-good Instruction of S;
  coherence
proof
  let I be Instruction of S such that
A1: I is halting;
  let k be natural number, s1 be State of S;
  set s2 = IncrIC(s1,k);
  dom (IC S .--> (IC s1 + k)) = {IC S} by FUNCOP_1:19;
  then
A3: IC S in dom (IC S .--> (IC s1 + k)) by TARSKI:def 1;
  thus IC Exec(I,s1) + k = IC s1 + k by A1,EXTPRO_1:def 3
    .= (IC S .--> (IC s1 + k)).IC S by FUNCOP_1:87
    .= IC s2 by A3,FUNCT_4:14
    .= IC Exec(I,s2) by A1,EXTPRO_1:def 3
    .= IC Exec(IncAddr(I,k), s2) by A1,COMPOS_1:92;
end;
end;

registration

  let N be with_non-empty_elements non empty set,
  S be stored-program AMI-Struct over N;
  cluster halting -> Exec-preserving Instruction of S;
  coherence
proof
  let I be Instruction of S such that
A1: for s being State of S holds Exec(I,s) = s;
  let s1, s2 be State of S such that
A2: s1, s2 equal_outside NAT;
  Exec(I,s1) = s1 by A1;
  hence thesis by A1,A2;
end;
end;

canceled 9;

theorem Th46:
  for S being stored-program AMI-Struct over N,
  I being Instruction of S st I is halting holds I is Exec-preserving;

registration
  let N be with_non-empty_elements non empty set;
  cluster STC N -> IC-good Exec-preserving;
  coherence
  proof
    thus STC N is IC-good
    proof
      let I be Instruction of STC N, k be natural number,
      s1 be State of STC N;
      set s2 = IncrIC(s1,k);
      {IC STC N} = dom (IC STC N .--> (IC s1 + k)) by FUNCOP_1:19;
      then IC STC N in dom (IC STC N .--> (IC s1 + k)) by TARSKI:def 1;
      then
A2:   IC s2 = (IC STC N .--> (IC s1 + k)).IC STC N by FUNCT_4:14
        .= IC s1 + k by FUNCOP_1:87;
      per cases by AMISTD_1:22;
      suppose
A3:     InsCode I = 1;
        then
A4:     InsCode IncAddr(I,k) = 1 by COMPOS_1:def 38;
        Exec(I,s1).IC STC N = succ IC s1 by A3,AMISTD_1:38
          .= IC s1 + 1;
        hence IC Exec(I,s1) + k = succ IC s2 by A2
          .= IC Exec(IncAddr(I,k), s2) by A4,AMISTD_1:38;
      end;
      suppose InsCode I = 0;
        then
A5:     I is halting by AMISTD_1:20;
        hence IC Exec(I,s1) + k = IC s1 + k by EXTPRO_1:def 3
          .= IC Exec(IncAddr(I,k), s2) by A2,A5,EXTPRO_1:def 3;
      end;
    end;
    let I be Instruction of STC N;
    per cases by AMISTD_1:22;
    suppose
A6:   InsCode I = 1;
      the Instructions of STC N = {[0,0,0],[1,0,0]} by AMISTD_1:def 11;
      then
A7:   I = [0,0,0] or I = [1,0,0] by TARSKI:def 2;
      let s1, s2 be State of STC N such that
A8:   s1, s2 equal_outside NAT;
      consider f being Function of product the Object-Kind of STC N,
      product the Object-Kind of STC N such that
A9:   for s being Element of product the Object-Kind of STC N
      holds f.s = s+*(NAT .-->succ(s.NAT)) and
A10:  the Execution of STC N
      = ([1,0,0] .--> f) +* ([0,0,0] .--> id product the Object-Kind of STC N)
      by AMISTD_1:def 11;
B9:   for s being State of STC N
      holds f.s = s+*(NAT .-->succ(s.NAT))
       proof let s be State of STC N;
        reconsider s as Element of product the Object-Kind of STC N
         by PBOOLE:155;
        f.s = s+*(NAT .-->succ(s.NAT)) by A9;
       hence thesis;
       end;
      [0,0,0] <> [1,0,0] by MCART_1:28;
      then not I in {[0,0,0]} by A6,A7,RECDEF_2:def 1,TARSKI:def 1;
      then not I in dom ([0,0,0] .--> id product the Object-Kind of STC N)
      by FUNCOP_1:19;
      then
A11:  (the Execution of STC N).I = ([1,0,0] .--> f).I by A10,FUNCT_4:12;
A12:  I in {[1,0,0]} by A6,A7,RECDEF_2:def 1,TARSKI:def 1;
      then
A13:  Exec(I,s1) = f.s1 by A11,FUNCOP_1:13
        .= s1+*(NAT .-->succ(s1.NAT)) by B9;
A14:  Exec(I,s2) = f.s2 by A11,A12,FUNCOP_1:13
        .= s2+*(NAT .-->succ(s2.NAT)) by B9;
A15:  dom Exec(I,s1) = the carrier of STC N by PARTFUN1:def 4
           .= dom Exec(I,s2) by PARTFUN1:def 4;
      for x being set st x in dom Exec(I,s1) \ NAT
      holds Exec(I,s1).x = Exec(I,s2).x
      proof
        let x be set;
        assume
A16:    x in dom Exec(I,s1) \ NAT;
        then
A17:    not x in NAT by XBOOLE_0:def 5;
A18:    s1.NAT = IC s1 by AMISTD_1:def 11
          .= IC s2 by A8,COMPOS_1:24
          .= s2.NAT by AMISTD_1:def 11;
        x in dom Exec(I,s1) by A16;
        then x in the carrier of STC N by PARTFUN1:def 4;
        then x in NAT \/ {NAT} by AMISTD_1:def 11;
        then
A19:    x in {NAT} by A17,XBOOLE_0:def 3;
        then
A20:    x in dom (NAT .-->succ(s2.NAT)) by FUNCOP_1:19;
        x in dom (NAT .-->succ(s1.NAT)) by A19,FUNCOP_1:19;
        hence Exec(I,s1).x = (NAT .-->succ(s1.NAT)).x by A13,FUNCT_4:14
          .= Exec(I,s2).x by A14,A18,A20,FUNCT_4:14;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) =
      Exec(I,s2)|(dom Exec(I,s2) \ NAT) by A15,FUNCT_1:165;
    end;
    suppose InsCode I = 0;
      hence thesis by Th46,AMISTD_1:20;
    end;
  end;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster homogeneous realistic halting
    with_explicit_jumps Exec-preserving
    (regular J/A-independent standard (standard-ins IC-Ins-separated definite
    (non empty stored-program AMI-Struct over N)));
  existence
  proof
    take STC N;
    thus thesis;
  end;
end;

registration
  let N be with_non-empty_elements non empty set;
  cluster IC-good (homogeneous realistic
    with_explicit_jumps Exec-preserving halting
    (regular J/A-independent standard (standard-ins IC-Ins-separated definite
    (non empty stored-program AMI-Struct over N))));
  existence
  proof
    take STC N;
    thus thesis;
  end;
end;

registration

  let N be with_non-empty_elements non empty set;
  cluster Trivial-AMI N -> Exec-preserving;
  coherence
  proof
    let I be Instruction of Trivial-AMI N;
    thus thesis by Th46,AMISTD_1:56;
  end;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be IC-good (regular homogeneous J/A-independent standard
  (standard-ins IC-Ins-separated definite halting realistic
  (non empty stored-program AMI-Struct over N)));
  cluster -> IC-good Instruction of S;
  coherence by Def18;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be Exec-preserving (stored-program AMI-Struct over N);
  cluster -> Exec-preserving Instruction of S;
  coherence by Def20;
end;

registration
  let N be with_non-empty_elements non empty set,
  S be IC-good (homogeneous Exec-preserving
  (regular J/A-independent standard realistic halting (standard-ins
  IC-Ins-separated definite
  (non empty stored-program AMI-Struct over N)))),
  F, G be closed initial non empty (NAT-defined
  (the Instructions of S)-valued FinPartState of S);
  cluster F ';' G -> closed;
  coherence
  proof
    set P = F ';' G, k = card F -' 1;
    let f be Element of NAT such that
A1: f in dom P;
A2: dom P = dom CutLastLoc F \/ dom Shift(IncAddr(G,k),k) by FUNCT_4:def 1;
A4: dom CutLastLoc F c= dom F by GRFUNC_1:8;
A5: dom Shift(IncAddr(G,k),k) =
    {(m+k) where m is Element of NAT: m in dom IncAddr(G,k)}
    by VALUED_1:def 12;
    let x be set;
    assume x in NIC(P/.f,f);
    then consider s2 being Element of product the Object-Kind of S
    such that
A6: x = IC Exec(P/.f,s2) and
A7: IC s2 = f;
A9: P/.f = P.f by A1,PARTFUN1:def 8;
    per cases by A1,A2,XBOOLE_0:def 3;
    suppose
S:    f in dom CutLastLoc F;
      then
A11:  NIC(F/.f,f) c= dom F by A4,AMISTD_1:def 17;
      dom CutLastLoc F = dom F \ {LastLoc F} by VALUED_1:37;
      then
XX:   f in dom F by S,XBOOLE_0:def 5;
      dom CutLastLoc F misses dom Shift(IncAddr(G,card F -' 1),card F -' 1)
          by COMPOS_1:100;
      then
Y:    not f in dom Shift(IncAddr(G,card F -' 1),card F -' 1)
          by  S,XBOOLE_0:3;
X:    P/.f = P.f by A1,PARTFUN1:def 8
        .= (CutLastLoc F).f by Y,FUNCT_4:12
        .= F.f by S,GRFUNC_1:8
        .= F/.f by XX,PARTFUN1:def 8;
      IC Exec(F/.f,s2) in NIC(F/.f,f) by A7;
      then
A12:  x in dom F by A6,A11,X;
      dom F c= dom P by COMPOS_1:103;
      hence thesis by A12;
    end;
    suppose
A13:  f in dom Shift(IncAddr(G,k),k);
      then consider m being Element of NAT such that
A14:  f = m+k and
A15:  m in dom IncAddr(G,k) by A5;
A16:  m in dom G by A15,COMPOS_1:def 40;
      then
A17:  NIC(G/.m,m) c= dom G by AMISTD_1:def 17;
A18:  ObjectKind IC S = NAT by COMPOS_1:def 6;
      reconsider v = IC S .--> m as FinPartState of S
      by A18,COMPOS_1:5;
      set s1 = s2 +* v;
A19:  P/.f = Shift(IncAddr(G,k),k).f by A9,A13,FUNCT_4:14
        .= IncAddr(G,k).m by A14,A15,VALUED_1:def 12;
A20:  (IC S .--> m).IC S = m by FUNCOP_1:87;
A21:  IC S in {IC S} by TARSKI:def 1;
A22:  dom (IC S .--> m) = {IC S} by FUNCOP_1:19;
      reconsider w = IC S .--> (IC s1 + k) as FinPartState of S
      by A18,COMPOS_1:5;
A24:  dom (s1 +* (IC S .--> (IC s1 + k))) = the carrier of S by PARTFUN1:def 4;
X:    dom s2 = the carrier of S by PARTFUN1:def 4;
      for a being set st a in dom s2 holds
      s2.a = (s1 +* (IC S .--> (IC s1 + k))).a
      proof
        let a be set such that a in dom s2;
A25:    dom (IC S .--> (IC s1 + k)) = {IC S} by FUNCOP_1:19;
        per cases;
        suppose
A26:      a = IC S;
          hence s2.a = IC s1 + k by A7,A14,A22,A20,A21,FUNCT_4:14
            .= (IC S .--> (IC s1 + k)).a by A26,FUNCOP_1:87
            .= (s1 +* (IC S .--> (IC s1 + k))).a by A21,A25,A26,FUNCT_4:14;
        end;
        suppose
A27:      a <> IC S;
          then
A28:      not a in dom (IC S .--> (IC s1 + k)) by A25,TARSKI:def 1;
          not a in dom (IC S .--> m) by A22,A27,TARSKI:def 1;
          then s1.a = s2.a by FUNCT_4:12;
          hence thesis by A28,FUNCT_4:12;
        end;
      end;
      then
A29:  s2 = IncrIC(s1,k) by A24,X,FUNCT_1:9;
      set s3 = s1 +* (m .--> G/.m);
A30:  dom (m .--> G/.m) = {m} by FUNCOP_1:19;
      now
        assume IC S in dom (m .--> G/.m);
        then reconsider l=IC S as Element of NAT
        by A30,TARSKI:def 1;
        l=IC S;
        hence contradiction by COMPOS_1:3;
      end;
      then
A32:  IC s3 = s1.IC S by FUNCT_4:12
        .= m by A20,A21,A22,FUNCT_4:14;
A34:  dom s1 = the carrier of S by PARTFUN1:def 4;
A35:  dom s3 = the carrier of S by PARTFUN1:def 4;
      for x being set st x in dom s1 \ NAT holds s1.x = s3.x
      proof
        let x be set;
A36:    dom (m .--> G/.m) c= NAT by RELAT_1:def 18;
        assume x in dom s1 \ NAT;
        then not x in dom (m .--> G/.m)
        by A36,XBOOLE_0:def 5;
        hence thesis by FUNCT_4:12;
      end;
      then s1|(dom s1 \ NAT) = s3|(dom s3 \ NAT) by A34,A35,FUNCT_1:165;
      then s1, s3 equal_outside NAT by FUNCT_7:def 2;
      then
A37:  Exec(G/.m,s1), Exec(G/.m,s3)
      equal_outside NAT by Def19;
      reconsider s3 as Element of product the Object-Kind of S by PBOOLE:155;
      reconsider k,m as Element of NAT;
A38:  x = IC Exec(IncAddr(G/.m,k),s2) by A6,A16,A19,COMPOS_1:def 40
        .= IC Exec(G/.m, s1) + k by A29,Def17
        .= IC Exec(G/.m, s3) + k by A37,COMPOS_1:24;
      IC Exec(G/.m, s3) in NIC(G/.m,m) by A32;
      then IC Exec(G/.m, s3) in dom G by A17;
      then IC Exec(G/.m, s3) in dom IncAddr(G,k) by COMPOS_1:def 40;
      then x in dom Shift(IncAddr(G,k),k) by A5,A38;
      hence thesis by A2,XBOOLE_0:def 3;
    end;
  end;
end;

canceled 16;

theorem
  for I being Instruction of Trivial-AMI N holds JumpPart I = 0 by Lm3;

theorem
  for T being InsType of Trivial-AMI N holds JumpParts T = {0} by Lm4;

