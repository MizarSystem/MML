:: The {\bf loop} and {\bf Times} Macroinstruction for {\SCMFSA}
::  by Noriko Asamoto
::
:: Received October 29, 1997
:: Copyright (c) 1997-2012 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, FSM_1, SCMFSA_2, CAT_1, AMI_1, SCMFSA8A,
      XXREAL_0, CIRCUIT2, FUNCT_4, CARD_1, RELAT_1, ARYTM_3, AMISTD_2, GRAPHSP,
      AMI_3, EXTPRO_1, TARSKI, FUNCT_1, ARYTM_1, TURING_1, SCMFSA6C, FUNCOP_1,
      SCMFSA6A, SCMFSA6B, XBOOLE_0, MSUALG_1, UNIALG_2, SCMFSA7B, SF_MASTR,
      STRUCT_0, NAT_1, SCMFSA8B, SCMFSA8C, COMPOS_1, ORDINAL1, PARTFUN1, RELOC,
      PBOOLE, SCMPDS_4;
 notations TARSKI, XBOOLE_0, ENUMSET1, SUBSET_1, CARD_1, NUMBERS, XCMPLX_0,
      ORDINAL1, NAT_1, FUNCOP_1, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_4, FUNCT_7,
      PBOOLE, VALUED_1, AFINSQ_1, STRUCT_0, COMPOS_0,
      COMPOS_1, MEMSTR_0, EXTPRO_1, AMISTD_1,
      AMISTD_2, SCMFSA_2, SF_MASTR, SCMFSA6A, SCMFSA6B, SCMFSA6C, SCMFSA7B,
      SCMFSA8A, SCMFSA8B, NAT_D, XXREAL_0, SCMFSA_M;
 constructors DOMAIN_1, XXREAL_0, REAL_1, SCMFSA6A, SF_MASTR, SCMFSA6B,
      SCMFSA6C, SCMFSA8A, SCMFSA8B, AMISTD_2, NAT_D, AMI_3, RELSET_1, PRE_POLY,
      SCMFSA7B, AMISTD_1, PBOOLE, SCMFSA_7, MEMSTR_0, WELLORD2, INT_2,
      SCMFSA_2, VALUED_1, SCMFSA_M, FUNCT_7;
 registrations SETFAM_1, FUNCT_1, FUNCOP_1, NUMBERS, XXREAL_0, XREAL_0, NAT_1,
      INT_1, SCMFSA_2, SCMFSA6A, SF_MASTR, SCMFSA6B, SCMFSA6C, SCMFSA7B,
      SCMFSA8A, SCMFSA8B, ORDINAL1, XBOOLE_0, AFINSQ_1, VALUED_1, RELAT_1,
      SCMFSA10, AMISTD_2, COMPOS_1, EXTPRO_1, PBOOLE, FUNCT_4, MEMSTR_0,
      RELSET_1, FINSET_1, STRUCT_0, FINSEQ_1, AMI_3, COMPOS_0, SCMFSA_M;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions FUNCOP_1, COMPOS_1, EXTPRO_1, SCMFSA8A, SCMFSA6A, AMISTD_2,
      SCMFSA6B, MEMSTR_0, COMPOS_0, SCMFSA_M;
 theorems FUNCT_4, SCMFSA_4, SCMFSA6A, SCMFSA8B, SCMFSA6C, SCMFSA7B, SCMFSA8A,
      SF_MASTR, NAT_1, SCMFSA6B, GRFUNC_1, SCMFSA_2, MEMSTR_0, FUNCT_1,
      FUNCT_7, TARSKI, ENUMSET1, FUNCOP_1, RELAT_1, SCMFSA_3, INT_1, XBOOLE_0,
      XBOOLE_1, XREAL_1, ORDINAL1, XXREAL_0, EXTPRO_1, ZFMISC_1, AFINSQ_1,
      XREAL_0, PBOOLE, PARTFUN1, SCMFSA10, COMPOS_1, AMISTD_2, AMISTD_1,
      STRUCT_0, COMPOS_0, SCMFSA_M;
 schemes NAT_1;

begin :: Preliminaries

reserve m for Element of NAT;
reserve P,PP,P1,P2
 for Instruction-Sequence of SCM+FSA;

set SA0 = Start-At(0,SCM+FSA);
set Q = intloc 0 .--> 1;

theorem Th1:
  for s being State of SCM+FSA,I being initial Program of SCM+FSA
   st I is_pseudo-closed_on s,P
  for k being Element of NAT st
    for n being Element of NAT st n <= k
     holds IC Comput(P +* I,Initialize s,n) in dom I
  holds k < pseudo-LifeSpan(s,P,I)
proof
  let s be State of SCM+FSA;
  let I be initial Program of SCM+FSA;
  assume I is_pseudo-closed_on s,P;
  then
  IC Comput(P +* I,Initialize s,pseudo-LifeSpan(s,P,I))
     = card I by SCMFSA8A:def 4;
  then
A1: not IC Comput(P +* I, Initialize s,pseudo-LifeSpan(s,P,I)) in dom I;
  let k be Element of NAT;
  assume
 for n being Element of NAT st n <= k
    holds IC Comput(P +* I,(Initialize s),n) in dom I;
  hence pseudo-LifeSpan(s,P,I) > k by A1;
:::  hence contradiction by A2,A1;
end;

theorem Th2:
  for I,J being Program of SCM+FSA, k being Element of NAT
     st card I <= k & k < card I + card J
  for i being Instruction of SCM+FSA st i = J.(k -' card I)
   holds (I ";" J). k = IncAddr(i,card I)
proof
  let I,J be Program of SCM+FSA;
  let k be Element of NAT;
  assume
A1: card I <= k;
  assume k < card I + card J;
  then
A2: k + 0 < card J + card I;
  k -' card I = k - card I by A1,XREAL_1:233;
  then k -' card I < card J - 0 by A2,XREAL_1:21;
  then
A3:  (k -' card I) in dom J by AFINSQ_1:66;
  let i be Instruction of SCM+FSA;
  assume
A4: i = J. (k -' card I);
A5: k -' card I + card I = k - card I + card I by A1,XREAL_1:233
    .= k;
  then  k in {m + card I: m in dom J} by A3;
  then
  k in dom Reloc(J, card I) by COMPOS_1:33;
  hence (I ";" J). k = (Reloc(J,card I)). k by FUNCT_4:13
    .= IncAddr(i,card I) by A4,A3,A5,COMPOS_1:35;
end;

theorem
  for s being State of SCM+FSA, I being Program of SCM+FSA holds
  IExec(I,P,s) = IExec(I,P,Initialized s);

canceled;

theorem Th5:
  for I being Program of SCM+FSA st
   for s being State of SCM+FSA, P holds I is_halting_on Initialized s,P
  holds Initialize((intloc 0).-->1) is I-halted
proof
  let I be Program of SCM+FSA;
  assume
A1: for s being State of SCM+FSA,P holds I is_halting_on Initialized s,P;
  let s be State of SCM+FSA;
  assume  Initialize((intloc 0).-->1) c= s;
   then Initialize((intloc 0).-->1) c= s;
   then
A2:   s +*Initialize((intloc 0).-->1) = s by FUNCT_4:98;
  let P be Instruction-Sequence of SCM+FSA such that
A3: I c= P;
A4: P +* I = P by A3,FUNCT_4:98;
    I is_halting_on Initialized s,P by A1;
    then P +* I halts_on Initialize Initialized s by SCMFSA7B:def 7;
    hence P halts_on s by A2,A4,MEMSTR_0:44;
end;

theorem Th6:
  for I being Program of SCM+FSA holds (for s being State of
  SCM+FSA, P holds I is_halting_on Initialized s,P)
   implies Initialize((intloc 0).-->1) is I-halted by Th5;

canceled 5;

theorem Th12:
  for s being State of SCM+FSA, i being Instruction of SCM+FSA st
  InsCode i in {0,6,7,8} holds DataPart Exec(i,s) = DataPart s
proof
  let s be State of SCM+FSA;
  let i be Instruction of SCM+FSA;
  assume
A1: InsCode i in {0,6,7,8};
  now
    let a be Int-Location;
    let f be FinSeq-Location;
    per cases by A1,ENUMSET1:def 2;
    suppose
      InsCode i = 0;
      then i = halt SCM+FSA by SCMFSA_2:95;
      hence Exec(i,s).a = s.a & Exec(i,s).f = s.f by EXTPRO_1:def 3;
    end;
    suppose
      InsCode i = 6;
      then ex lb being Element of NAT st i = goto lb by SCMFSA_2:35;
      hence Exec(i,s).a = s.a & Exec(i,s).f = s.f by SCMFSA_2:69;
    end;
    suppose
      InsCode i = 7;
      then
      ex lb being Element of NAT, b being Int-Location st
      i = b=0_goto lb by SCMFSA_2:36;
      hence Exec(i,s).a = s.a & Exec(i,s).f = s.f by SCMFSA_2:70;
    end;
    suppose
      InsCode i = 8;
      then
      ex lb being Element of NAT, b being Int-Location st
      i = b>0_goto lb by SCMFSA_2:37;
      hence Exec(i,s).a = s.a & Exec(i,s).f = s.f by SCMFSA_2:71;
    end;
  end;
  hence thesis by SCMFSA_M:2;
end;

canceled;

theorem Th14:
  for s being State of SCM+FSA holds IExec(Stop SCM+FSA,P,s) = Initialized s
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  set s1 = Initialize Initialized s,
      P1 = P +* Stop SCM+FSA;
A1: Stop SCM+FSA c= P1 by FUNCT_4:25;
A2: s1 = Comput(P1, s1,0);
A3:  P1/.IC s1 = P1.IC s1 by PBOOLE:143;
A4: (Stop SCM+FSA).0 = halt SCM+FSA by AFINSQ_1:34;
A5:  0 in dom Stop SCM+FSA by COMPOS_1:3;
A6: s +*Initialize((intloc 0).-->1) = s1 by MEMSTR_0:44;
A7: CurInstr(P1,s1) = P1. 0 by A3,MEMSTR_0:28
    .= (Stop SCM+FSA). 0 by A5,A1,GRFUNC_1:2;
  then P1 halts_on s1 by A2,A4,EXTPRO_1:29;
  then
A8: IExec(Stop SCM+FSA,P,s) = s1 by A6,A7,A2,A4,EXTPRO_1:def 9;
  then
A9: DataPart IExec(Stop SCM+FSA,P,s) = DataPart s1
    .= DataPart Initialized s by MEMSTR_0:79;
  hereby
A10: now
      let x be set;
      assume
A11:   x in dom IExec(Stop SCM+FSA,P,s);
      per cases by A11,SCMFSA_M:1;
      suppose
A12:    x is Int-Location;
        IExec(Stop SCM+FSA,P,s).x = (Initialized s).x by A9,A12,SCMFSA_M:2;
        hence IExec(Stop SCM+FSA,P,s).x = (Initialized s).x;
      end;
      suppose
A13:    x is FinSeq-Location;
        IExec(Stop SCM+FSA,P,s).x = (Initialized s).x by A9,A13,SCMFSA_M:2;
        hence IExec(Stop SCM+FSA,P,s).x = (Initialized s).x;
      end;
      suppose
A14:    x = IC SCM+FSA;
        then x in {IC SCM+FSA} by TARSKI:def 1;
        then
A15:    x in dom SA0 by FUNCOP_1:13;
        thus IExec(Stop SCM+FSA,P,s).x
           = s1.IC SCM+FSA by A8,A14
          .= SA0.IC SCM+FSA by A14,A15,FUNCT_4:13
          .= (s +* ((intloc 0) .--> 1) +* SA0).x by A14,A15,FUNCT_4:13
          .= (s +* Initialize ((intloc 0) .--> 1)).x by FUNCT_4:14
          .= (Initialized s).x;
      end;
    end;
    dom IExec(Stop SCM+FSA,P,s) = the carrier of SCM+FSA by PARTFUN1:def 2
      .= dom Initialized s by PARTFUN1:def 2;
    hence thesis by A10,FUNCT_1:2;
  end;
end;

theorem Th15:
  for s being State of SCM+FSA,I being Program of SCM+FSA st I
  is_closed_on s,P holds  0 in dom I
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  reconsider n = IC Comput(P +* I, Initialize s,0)
   as Element of NAT;
  assume
A1: I is_closed_on s,P;
  then
A2:  n in dom I by SCMFSA7B:def 6;
  per cases;
  suppose
    n = 0;
    hence thesis by A1,SCMFSA7B:def 6;
  end;
  suppose
    0 < n;
    hence thesis by A2,AFINSQ_1:def 12;
  end;
end;

theorem Th16:
  for s1 being 0-started State of SCM+FSA,
      s2 being State of SCM+FSA,I being Program of SCM+FSA
   st I is_closed_on s1,P1 & I c= P1
  for n being Element of NAT st
   Reloc(I,n) c= P2 & IC s2 =  n & DataPart s1 = DataPart s2
  for i being Element of NAT holds
   IC Comput(P1, s1,i) + n = IC Comput(P2, s2,i) &
   IncAddr(CurInstr(P1,Comput(P1,s1,i)),n)
        = CurInstr(P2,Comput(P2,s2,i)) &
  DataPart Comput(P1, s1,i) = DataPart Comput(P2,s2,i)
proof
  let s1 be 0-started State of SCM+FSA,
      s2 be State of SCM+FSA;
  let J be Program of SCM+FSA;
  set JAt = Start-At(0,SCM+FSA);
  assume
A1: J is_closed_on s1,P1;
  then
A2:  0 in dom J by Th15;
A3: Start-At(0,SCM+FSA) c= s1 by MEMSTR_0:29;
  assume that
A4: J c= P1;
   SA0 c= s1 by A3;
   then
A5: Initialize s1 = s1 by FUNCT_4:98;
A6: IC SCM+FSA in dom JAt by MEMSTR_0:15;
A7: P1.IC s1 = P1. 0 by A5,MEMSTR_0:16
    .= J. 0 by A2,A4,GRFUNC_1:2;
A8: P1 = P1 +* J by A4,FUNCT_4:98;
A9: IC Comput(P1,s1,0) = IC s1
    .= IC JAt by A3,A6,GRFUNC_1:2
    .=  0 by FUNCOP_1:72;
A10:  0 in dom J by A1,Th15;
  let n be Element of NAT;
  defpred P[Nat] means IC Comput(P1,s1,$1) + n
    = IC Comput(P2,s2,$1) &
   IncAddr(CurInstr(P1,Comput(P1,s1,$1)),n) =
     CurInstr(P2,Comput(P2,s2,$1)) &
    DataPart Comput(P1,s1,$1) = DataPart Comput(P2,s2,$1);
  assume that
A11: Reloc(J,n) c= P2 and
A12: IC s2 =  n and
A13: DataPart s1 = DataPart s2;
  let i be Element of NAT;
A14: DataPart Comput(P1,s1,0) = DataPart s2 by A13
    .= DataPart Comput(P2,s2,0);
A15: for k being Element of NAT st P[k] holds P[k + 1]
  proof
    let k be Element of NAT;
A16: Comput(P1,s1,k+1) = Following(P1,Comput(P1,s1,k)) by EXTPRO_1:3;
    reconsider l = IC Comput(P1,s1,k+1) as Element of NAT;
    reconsider
     j = CurInstr(P1,Comput(P1,s1,k+1))
     as Instruction of SCM+FSA;
A17: Comput(P2,s2,k+1) = Following(P2,Comput(P2,s2,k)) by EXTPRO_1:3;
A18: Initialize s1 = s1 by A3,FUNCT_4:98;
    then
A19: IC Comput(P1,s1,k+1) in dom J by A1,A8,SCMFSA7B:def 6;
    assume
A20: P[k];
    hence
A21: IC Comput(P1,s1,k+1) + n = IC Comput(P2,s2,k+1)
by A16,A17,SCMFSA6A:8;
    then
A22: IC Comput(P2,s2,k+1) in dom Reloc(J,n) by A19,COMPOS_1:46;
A23: l in dom J by A18,A1,A8,SCMFSA7B:def 6;
    j = P1.IC Comput(P1,s1,k+1) by PBOOLE:143
      .= J.l by A19,A4,GRFUNC_1:2;
    hence IncAddr(CurInstr(P1,Comput(P1,s1,k+1)),n)
     = Reloc(J,n).(l + n) by A23,COMPOS_1:35
      .= P2.IC Comput(P2,s2,k+1) by A11,A21,A22,GRFUNC_1:2
      .= CurInstr(P2,Comput(P2,s2,k+1))
       by PBOOLE:143;
    thus thesis by A20,A16,A17,SCMFSA6A:8;
  end;
   0 in dom J by A1,Th15;
  then
A24:  (0 + n) in dom Reloc(J,n) by COMPOS_1:46;
A25:  P1/.IC s1 = P1.IC s1 by PBOOLE:143;
A26:  P2/.IC s2 = P2.IC s2 by PBOOLE:143;
  IncAddr(CurInstr(P1,Comput(P1,s1,0)),n)
    = Reloc(J,n). (0 + n) by A10,A25,A7,COMPOS_1:35
    .= CurInstr(P2,Comput(P2,s2,0))
     by A11,A12,A24,A26,GRFUNC_1:2;
  then
A27: P[0] by A12,A9,A14;
  for k being Element of NAT holds P[k] from NAT_1:sch 1(A27,A15);
  hence thesis;
end;

theorem Th17:
  for s1,s2 being 0-started State of SCM+FSA,I being Program of SCM+FSA
   st I is_closed_on s1,P1 & I c= P1 & I c= P2 & DataPart s1 = DataPart s2
  for i being Element of NAT
  holds IC Comput(P1, s1,i) = IC Comput(P2, s2,i) &
  CurInstr(P1,Comput(P1,s1,i)) = CurInstr(P2,Comput(P2,s2,i)) &
  DataPart Comput(P1, s1,i) = DataPart Comput(P2,s2,i)
proof
  let s1,s2 be 0-started State of SCM+FSA;
  let J be Program of SCM+FSA;
  assume that
A1: J is_closed_on s1,P1 and
A2: J c= P1 and
A3: J c= P2 and
A4: DataPart s1 = DataPart s2;
A5: Start-At(0,SCM+FSA) c= s2 by MEMSTR_0:29;
A6: Reloc(J,0) = J;
  let i be Element of NAT;
A7: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A8: IC Comput(P1, s1,i) + 0 = IC Comput(P1, s1,i);
A9: IC s2 = IC (Initialize s2) by A5,FUNCT_4:98
    .= IC Start-At(0,SCM+FSA) by A7,FUNCT_4:13
    .=  0 by FUNCOP_1:72;
  IncAddr(CurInstr(P1,Comput(P1,s1,i)),0)
   = CurInstr(P1,Comput(P1,s1,i)) by COMPOS_0:3;
  hence thesis by A1,A4,A8,A9,Th16,A2,A3,A6;
end;

theorem Th18:
  for s1,s2 being 0-started State of SCM+FSA,I being Program of SCM+FSA
    st I is_closed_on s1,P1 & I is_halting_on s1,P1 & I c= P1 & I c= P2 &
       DataPart s1 = DataPart s2
  holds LifeSpan(P1,s1) = LifeSpan(P2,s2)
proof
  let s1,s2 be 0-started State of SCM+FSA;
  let J be Program of SCM+FSA;
  assume that
A1: J is_closed_on s1,P1 and
A2: J is_halting_on s1,P1 and
A3: J c= P1 and
A4: J c= P2 and
A5: DataPart s1 = DataPart s2;
A6: P1 = P1 +* J by A3,FUNCT_4:98;
  s1 = Initialize s1 by MEMSTR_0:44;
  then
A7: P1 halts_on s1 by A2,A6,SCMFSA7B:def 7;
A8: now
    let k be Element of NAT;
    assume
    CurInstr(P2,Comput(P2,s2,k)) = halt SCM+FSA;
    then CurInstr(P1,Comput(P1,s1,k))
     = halt SCM+FSA by A1,A5,Th17,A3,A4;
    hence LifeSpan(P1,s1) <= k by A7,EXTPRO_1:def 15;
  end;
  CurInstr(P1,Comput(P1,s1,LifeSpan(P1,s1)))
   = halt SCM+FSA by A7,EXTPRO_1:def 15;
  then
A9: CurInstr(P2,Comput(P2,s2,LifeSpan(P1,s1)))
 = halt SCM+FSA by A1,A5,Th17,A3,A4;
  then P2 halts_on s2 by EXTPRO_1:29;
  hence thesis by A9,A8,EXTPRO_1:def 15;
end;

theorem
  for s1,s2 being State of SCM+FSA,I being Program of SCM+FSA st
  s1.intloc 0 = 1 & I is_closed_on s1,P1 & I is_halting_on s1,P1 &
   ((for a being read-write Int-Location holds s1.a = s2.a) &
  for f being FinSeq-Location holds s1.f = s2.f)
  holds DataPart IExec(I,P1,s1) = DataPart IExec(I,P2,s2)
proof
  let s1,s2 be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set s11 = Initialized s1, P11 = P1 +* I;
  set s21 = Initialized s2, P21 = P2 +* I;
  assume s1.intloc 0 = 1;
  then
A1: s11 = Initialize s1 by SCMFSA_M:18;
  then
A2: DataPart s11 = DataPart s1 by MEMSTR_0:79;
  assume that
A3: I is_closed_on s1,P1 and
A4: I is_halting_on s1,P1;
A5: I is_closed_on s11,P11 by A3,A4,A2,SCMFSA8B:5;
  assume
A6: for a being read-write Int-Location holds s1.a = s2.a;
A7: now
    let a be read-write Int-Location;
     a <> intloc 0 & a <> IC SCM+FSA by SCMFSA_2:56;
     then
A8: not a in dom Initialize((intloc 0).-->1) by SCMFSA_M:11,TARSKI:def 2;
    hence s11.a = s1.a by FUNCT_4:11
      .= s2.a by A6
      .= s21.a by A8,FUNCT_4:11;
  end;
  assume
A9: for f being FinSeq-Location holds s1.f = s2.f;
A10: now
    let f be FinSeq-Location;
     f <> intloc 0 & f <> IC SCM+FSA by SCMFSA_2:57,58;
     then
A11: not f in dom Initialize((intloc 0).-->1) by SCMFSA_M:11,TARSKI:def 2;
    hence s11.f = s1.f by FUNCT_4:11
      .= s2.f by A9
      .= s21.f by A11,FUNCT_4:11;
  end;
A12: intloc 0 in dom Initialize((intloc 0).-->1) by SCMFSA_M:10;
  then s11.intloc 0 = (Initialize((intloc 0).-->1)).intloc 0 by FUNCT_4:13
    .= s21.intloc 0 by A12,FUNCT_4:13;
  then
A13: DataPart s11 = DataPart s21 by A7,A10,SCMFSA_M:20;
A14: I c= P21 by FUNCT_4:25;
A15: I c= P11 by FUNCT_4:25;
A16: P11 halts_on s11 by A4,A1,SCMFSA7B:def 7;
  then CurInstr(P11,
  Comput(P11,s11,LifeSpan(P11,s11)))
  = halt SCM+FSA by EXTPRO_1:def 15;
  then CurInstr(P21,
  Comput(P21,s21,LifeSpan(P11,s11)))
   = halt SCM+FSA by A5,A13,Th17,A15,A14;
  then
A17: P21 halts_on s21 by EXTPRO_1:29;
  I is_halting_on s11,P11 by A3,A4,A2,SCMFSA8B:5;
  then
A18: LifeSpan(P11,s11) = LifeSpan(P21,s21) by A5,A13,Th18,A15,A14;
  thus DataPart IExec(I,P1,s1) = DataPart Result(P11,s11)
    .= DataPart Comput(P11, s11,LifeSpan(P11,s11)) by A16,EXTPRO_1:23
    .= DataPart Comput(P21, s21,LifeSpan(P11,s11)) by A5,A13,Th17,A15,A14
    .= DataPart Result(P21,s21) by A18,A17,EXTPRO_1:23
    .= DataPart IExec(I,P2,s2);
end;

theorem Th20:
  for s1,s2 being State of SCM+FSA,I being Program of SCM+FSA
   st s1.intloc 0 = 1 & I is_closed_on s1,P1 & I is_halting_on s1,P1 &
      DataPart s1 = DataPart s2
  holds DataPart IExec(I,P1,s1) = DataPart IExec(I,P2,s2)
proof
  let s1,s2 be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set s11 = Initialized s1, P11 = P1 +* I;
  set s21 = Initialized s2, P21 = P2 +* I;
A1: I c= P11 by FUNCT_4:25;
A2: I c= P21 by FUNCT_4:25;
  assume that
A3: s1.intloc 0 = 1 and
A4: I is_closed_on s1,P1 and
A5: I is_halting_on s1,P1 and
A6: DataPart s1 = DataPart s2;
A7: s11 = Initialize s1 by A3,SCMFSA_M:18;
  then
A8: DataPart s11 = DataPart s1 by MEMSTR_0:79;
  then
A9: I is_closed_on s11,P11 by A4,A5,SCMFSA8B:5;
  s2.intloc 0 = 1 by A3,A6,SCMFSA_M:2;
  then s21 = Initialize s2 by SCMFSA_M:18;
  then
A10: DataPart s11 = DataPart s21 by A6,A8,MEMSTR_0:79;
A11: P11 halts_on s11 by A5,A7,SCMFSA7B:def 7;
  then CurInstr(P11,
  Comput(P11,s11,LifeSpan(P11,s11)))
  = halt SCM+FSA by EXTPRO_1:def 15;
  then CurInstr(P21,
  Comput(P21,s21,LifeSpan(P11,s11)))
   = halt SCM+FSA by A9,A10,Th17,A1,A2;
  then
A12: P21 halts_on s21 by EXTPRO_1:29;
  I is_halting_on s11,P11 by A4,A5,A8,SCMFSA8B:5;
  then
A13: LifeSpan(P11,s11) = LifeSpan(P21,s21) by A9,A10,Th18,A1,A2;
  thus DataPart IExec(I,P1,s1) = DataPart Result(P11,s11)
    .= DataPart Comput(P11, s11,LifeSpan(P11,s11)) by A11,EXTPRO_1:23
    .= DataPart Comput(P21, s21,LifeSpan(P11,s11)) by A9,A10,Th17,A1,A2
    .= DataPart Result(P21,s21) by A13,A12,EXTPRO_1:23
    .= DataPart IExec(I,P2,s2);
end;

theorem Th21:
  for s being State of SCM+FSA,
      I being Program of SCM+FSA
       st I is_pseudo-closed_on s,P
 holds I is_pseudo-closed_on Initialize s,P+*I &
   pseudo-LifeSpan(s,P,I) = pseudo-LifeSpan(Initialize s,P+*I,I)
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  set s2 = Initialize Initialize s,
      P2 = P +* I +* I;
  assume
A1: I is_pseudo-closed_on s,P;
  then
A2: for n being Element of NAT st not IC Comput(P2, s2,n) in dom I holds
  pseudo-LifeSpan(s,P,I) <= n by SCMFSA8A:def 4;
A3: for n being Element of NAT st n < pseudo-LifeSpan(s,P,I)
holds IC
  Comput(P2, s2,n) in dom I by A1,SCMFSA8A:def 4;
  IC Comput(P2, s2,pseudo-LifeSpan(s,P,I)) =  card I by A1,SCMFSA8A:def 4;
  hence
A4: I is_pseudo-closed_on Initialize s,P+*I by A3,SCMFSA8A:def 2;
  IC Comput(P2, s2,pseudo-LifeSpan(s,P,I)) =  card I by A1,SCMFSA8A:def 4;
  hence thesis by A2,A4,SCMFSA8A:def 4;
end;

theorem Th22:
  for s1 being 0-started State of SCM+FSA,
      s2 being State of SCM+FSA, I being Program of SCM+FSA st
   I c= P1 & I is_pseudo-closed_on s1,P1
   for n being Element of NAT st Reloc(I,n) c= P2 &
    IC s2 =  n & DataPart s1 =
  DataPart s2 holds ((for i being Element of NAT
   st i < pseudo-LifeSpan(s1,P1,I)
  holds IncAddr(CurInstr(P1,Comput(P1,s1,i)),n)
   = CurInstr(P2,Comput(P2,s2,i))) &
for i being Element of NAT st i <= pseudo-LifeSpan(s1,P1,I)
holds IC Comput(P1, s1,i) + n = IC Comput(P2, s2,i) &
  DataPart Comput(P1, s1,i) = DataPart Comput(P2, s2,i))
proof
  let s1 be 0-started State of SCM+FSA,
      s2 be State of SCM+FSA;
  let I be Program of SCM+FSA;
A1: Start-At(0,SCM+FSA) c= s1 by MEMSTR_0:29;
  assume
A2: I c= P1;
   then
A3: P1 = P1 +* I by FUNCT_4:98;
  assume
A4: I is_pseudo-closed_on s1,P1;
  let n be Element of NAT;
  assume
A5: Reloc(I,n) c= P2;
  defpred P[Nat] means $1 <= pseudo-LifeSpan(s1,P1,I) implies
   IC Comput(P1,s1,$1) + n = IC Comput(P2,s2,$1) &
   DataPart Comput(P1,s1,$1) = DataPart Comput(P2,s2,$1);
  assume
A6: IC s2 =  n;
  assume
A7: DataPart s1 = DataPart s2;
  thus
A8: now
    defpred P[Nat] means $1 < pseudo-LifeSpan(s1,P1,I) implies
       IC Comput(P1,s1,$1) + n = IC Comput(P2,s2,$1) &
       IncAddr(CurInstr(P1,Comput(P1,s1,$1)),n)
        = CurInstr(P2,Comput(P2,s2,$1)) &
       DataPart Comput(P1,s1,$1) = DataPart Comput(P2,s2,$1);
    let i be Element of NAT;
    assume
A9: i < pseudo-LifeSpan(s1,P1,I);
A10: for k being Element of NAT st P[k] holds P[k + 1]
    proof
      let k be Element of NAT;
      assume
A11:  P[k];
      reconsider l = IC Comput(P1,s1,k+1) as Element of NAT;
      reconsider j = CurInstr(P1,Comput(P1,s1,k+1)) as Instruction of SCM+FSA;
      assume
A12:  k + 1 < pseudo-LifeSpan(s1,P1,I);
A13:  Comput(P1,s1,k+1) = Following(P1,Comput(P1,s1,k)) by EXTPRO_1:3;
A14:   Initialize s1 = s1 by A1,FUNCT_4:98;
      then
A15:  IC Comput(P1,s1,k+1) in dom I by A4,A12,A3,SCMFSA8A:def 4;
A16:  l in dom I by A14,A4,A12,A3,SCMFSA8A:def 4;
A17:  Comput(P2,s2,k+1) = Following(P2,Comput(P2,s2,k)) by EXTPRO_1:3;
A18:  k + 0 < k + 1 by XREAL_1:6;
      hence
A19:  IC Comput(P1,s1,k+1) + n = IC Comput(P2,s2,k+1)
by A11,A12,A13,A17,SCMFSA6A:8,XXREAL_0:2;
      then
A20:  IC Comput(P2,s2,k+1) in dom Reloc(I,n) by A15,COMPOS_1:46;
      j = P1.IC Comput(P1,s1,k+1) by PBOOLE:143
        .= I.l by A15,A2,GRFUNC_1:2;
      hence
      IncAddr(CurInstr(P1,Comput(P1,s1,k+1)),n)
         = Reloc(I,n).(l + n) by A16,COMPOS_1:35
        .= P2.IC Comput(P2,s2,k+1) by A20,A19,A5,GRFUNC_1:2
        .= CurInstr(P2,Comput(P2,s2,k+1)) by PBOOLE:143;
      thus thesis by A11,A12,A18,A13,A17,SCMFSA6A:8,XXREAL_0:2;
    end;
A21: P[0]
    proof
A22:   IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A23:  IC Comput(P1 +* I, (Initialize s1),0) =
      IC (Initialize s1)
        .= IC Start-At(0,SCM+FSA) by A22,FUNCT_4:13
        .=  0 by FUNCOP_1:72;
      assume 0 < pseudo-LifeSpan(s1,P1,I);
      then
A24:   0 in dom I by A4,A23,SCMFSA8A:def 4;
A25:  IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
      IC Comput(P1,s1,0) = s1.IC SCM+FSA
        .= IC Start-At(0,SCM+FSA) by A1,A25,GRFUNC_1:2
        .=  0 by FUNCOP_1:72;
      hence IC Comput(P1,s1,0) + n = IC Comput(P2,s2,0) by A6;
A26:   (0 + n) in dom Reloc(I,n) by A24,COMPOS_1:46;
A27:  P1.IC s1 = P1.IC Start-At(0,SCM+FSA) by A1,A25,GRFUNC_1:2
        .= P1. 0 by FUNCOP_1:72
        .= I. 0 by A24,A2,GRFUNC_1:2;
A28:  P1/.IC s1 = P1.IC s1 by PBOOLE:143;
A29:  P2/.IC s2 = P2.IC s2 by PBOOLE:143;
      thus IncAddr(CurInstr(P1,
      Comput(P1,s1,0)),n)
        = Reloc(I,n). (0 + n) by A24,A28,A27,COMPOS_1:35
        .= CurInstr(P2,Comput(P2,s2,0))
         by A6,A26,A29,A5,GRFUNC_1:2;
      thus DataPart Comput(P1,s1,0) = DataPart s2 by A7
        .= DataPart Comput(P2,s2,0);
    end;
    for k being Element of NAT holds P[k] from NAT_1:sch 1(A21,A10);
    hence IncAddr(CurInstr(P1,Comput(P1,s1,i)),n)
     = CurInstr(P2,Comput(P2,s2,i)) by A9;
  end;
A30: for k being Element of NAT st P[k] holds P[k + 1]
  proof
    let k be Element of NAT;
    assume
A31: P[k];
    set i = CurInstr(P1,Comput(P1,s1,k));
A32: Comput(P2,s2,k+1) = Following(P2,Comput(P2,s2,k)) by EXTPRO_1:3;
    assume
A33: k + 1 <= pseudo-LifeSpan(s1,P1,I);
    then
A34: k + 1 <= pseudo-LifeSpan(s1,P1,I) + 1 by NAT_1:12;
A35: k < pseudo-LifeSpan(s1,P1,I) by A33,NAT_1:13;
A36: Comput(P1,s1,k+1) = Following(P1,Comput(P1,s1,k)) by EXTPRO_1:3;
    hence IC Comput(P1,s1,k+1) + n
       = IC Exec(IncAddr(i,n),Comput(P2,s2,k))
    by A31,A34,SCMFSA6A:8,XREAL_1:6
      .= IC Comput(P2,s2,k+1) by A8,A35,A32;
    thus DataPart Comput(P1,s1,k+1) = DataPart Exec(IncAddr(i,n),
Comput(P2,s2,k)) by A31,A34,A36,SCMFSA6A:8,XREAL_1:6
      .= DataPart Comput(P2,s2,k+1) by A8,A35,A32;
  end;
  let i be Element of NAT;
  assume
A37: i <= pseudo-LifeSpan(s1,P1,I);
A38: P[0]
  proof
    assume 0 <= pseudo-LifeSpan(s1,P1,I);
A39: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
    IC Comput(P1,s1,0) = s1.IC SCM+FSA
      .= IC Start-At(0,SCM+FSA) by A1,A39,GRFUNC_1:2
      .=  0 by FUNCOP_1:72;
    hence IC Comput(P1,s1,0) + n = IC Comput(P2,s2,0)
by A6;
    thus DataPart Comput(P1,s1,0) = DataPart s2 by A7
      .= DataPart Comput(P2,s2,0);
  end;
  for k being Element of NAT holds P[k] from NAT_1:sch 1(A38,A30);
  hence thesis by A37;
end;

theorem Th23:
  for s1,s2 being State of SCM+FSA, I being Program of SCM+FSA st
  DataPart s1 = DataPart s2 holds I is_pseudo-closed_on s1,P1 implies I
  is_pseudo-closed_on s2,P2
proof
  let s1,s2 be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set S1 = Initialize s1,
      Q1 = P1 +* I,
      S2 = Initialize s2,
      Q2 = P2 +* I;
A1: I c= Q1 by FUNCT_4:25;
A2: Reloc(I,0)= I;
A3: IC (Initialize s2)
     = IC (s2 +* Start-At(0,SCM+FSA))
    .=  0 by FUNCT_4:113;
A4:   I c= Q2 by FUNCT_4:25;
  assume DataPart s1 = DataPart s2;
  then
A5: DataPart  S1 = DataPart s2 by MEMSTR_0:79
    .= DataPart S2 by MEMSTR_0:79;
  assume
A6: I is_pseudo-closed_on s1,P1;
  then
A7: IC Comput(Q1,S1,pseudo-LifeSpan(s1,P1,I)) = card I
by SCMFSA8A:def 4;
A8: I is_pseudo-closed_on S1,Q1 by A6,Th21;
A9: now
    let k be Element of NAT;
    assume
A10: k < pseudo-LifeSpan(s1,P1,I);
    then
   k <= pseudo-LifeSpan(Initialize s1,P1+*I,I)
    by A6,Th21;
    then
    IC Comput(Q2,S2,k) = IC Comput(Q1,S1,k) + 0
          by A5,A8,A4,A3,Th22,A1,A2
      .= IC Comput(Q1,S1,k);
    hence IC Comput(Q2,S2,k) in dom I by A6,A10,SCMFSA8A:def 4;
  end;
  IC Comput(Q2,S2,pseudo-LifeSpan(s1,P1,I)) = IC
Comput(Q2,S2,
  pseudo-LifeSpan(Initialize s1,P1+*I,I)) by A6,Th21
    .= IC Comput(Q1,S1,pseudo-LifeSpan(
    Initialize s1,P1+*I,I))
  + 0 by A5,A8,A4,A3,Th22,A1,A2
    .= IC Comput(Q1,S1,pseudo-LifeSpan(s1,P1,I)) by A6,Th21;
  hence thesis by A7,A9,SCMFSA8A:def 2;
end;

theorem Th24:
  for s being State of SCM+FSA, I being Program of SCM+FSA st s.
intloc 0 = 1 holds I is_pseudo-closed_on s,P iff
I is_pseudo-closed_on Initialized s,P
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  assume s.intloc 0 = 1;
  then DataPart s = DataPart Initialized s by SCMFSA_M:19;
  hence thesis by Th23;
end;

theorem Th25:
  for a being Int-Location, I,J being Program of SCM+FSA holds
   0 in dom if=0(a,I,J) &  1 in dom if=0(a,I,J) &  0 in dom
  if>0(a,I,J) &  1 in dom if>0(a,I,J)
proof
  let a be Int-Location;
  let I,J be Program of SCM+FSA;
  set i = a =0_goto  (card J + 3);
  if=0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I ";" Stop
  SCM+FSA by SCMFSA8B:def 1
    .= i ";" J ";" Goto  (card I + 1) ";" (I ";" Stop SCM+FSA) by SCMFSA6A:25
    .= i ";" J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)) by SCMFSA6A:25
    .= i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA))) by
SCMFSA6A:29
    .= Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)
  ));
  then
A1: dom Macro i c= dom if=0(a,I,J) by SCMFSA6A:17;
A2: dom Macro i = { 0,  1} by COMPOS_1:61;
  then
A3:  1 in dom Macro i by TARSKI:def 2;
   0 in dom Macro i by A2,TARSKI:def 2;
  hence  0 in dom if=0(a,I,J) &  1 in dom if=0(a,I,J) by A1,A3;
  set i = a >0_goto  (card J + 3);
  if>0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I ";" Stop
  SCM+FSA by SCMFSA8B:def 2
    .= i ";" J ";" Goto  (card I + 1) ";" (I ";" Stop SCM+FSA) by SCMFSA6A:25
    .= i ";" J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)) by SCMFSA6A:25
    .= i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA))) by
SCMFSA6A:29
    .= Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)
  ));
  then
A4: dom Macro i c= dom if>0(a,I,J) by SCMFSA6A:17;
A5: dom Macro i = { 0,  1} by COMPOS_1:61;
  then
A6:  1 in dom Macro i by TARSKI:def 2;
   0 in dom Macro i by A5,TARSKI:def 2;
  hence thesis by A4,A6;
end;

theorem Th26:
  for a being Int-Location, I,J being Program of SCM+FSA holds
  if=0(a,I,J). 0 = a =0_goto  (card J + 3) & if=0(a,I,J). 1 =
goto  2 & if>0(a,I,J). 0 = a >0_goto  (card J + 3) & if>0(a,I
  ,J). 1 = goto  2
proof
  let a be Int-Location;
  let I,J be Program of SCM+FSA;
  set i = a =0_goto  (card J + 3);
A1: if=0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I ";" Stop
  SCM+FSA by SCMFSA8B:def 1
    .= i ";" J ";" Goto  (card I + 1) ";" (I ";" Stop SCM+FSA) by SCMFSA6A:25
    .= i ";" J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)) by SCMFSA6A:25
    .= i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA))) by
SCMFSA6A:29
    .= Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)
  ));
A2: dom Macro i = { 0,  1} by COMPOS_1:61;
  then  0 in dom Macro i by TARSKI:def 2;
  hence if=0(a,I,J). 0 = (Directed Macro i). 0 by A1,SCMFSA8A:14
    .= i by SCMFSA7B:1;
   1 in dom Macro i by A2,TARSKI:def 2;
  hence if=0(a,I,J). 1 = (Directed Macro i). 1 by A1,SCMFSA8A:14
    .= goto  2 by SCMFSA7B:2;
  set i = a >0_goto  (card J + 3);
A3: if>0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I ";" Stop
  SCM+FSA by SCMFSA8B:def 2
    .= i ";" J ";" Goto  (card I + 1) ";" (I ";" Stop SCM+FSA) by SCMFSA6A:25
    .= i ";" J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)) by SCMFSA6A:25
    .= i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA))) by
SCMFSA6A:29
    .= Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA)
  ));
A4: dom Macro i = { 0,  1} by COMPOS_1:61;
  then  0 in dom Macro i by TARSKI:def 2;
  hence if>0(a,I,J). 0 = (Directed Macro i). 0 by A3,SCMFSA8A:14
    .= i by SCMFSA7B:1;
   1 in dom Macro i by A4,TARSKI:def 2;
  hence if>0(a,I,J). 1 = (Directed Macro i). 1 by A3,SCMFSA8A:14
    .= goto  2 by SCMFSA7B:2;
end;

theorem Th27:
  for a being Int-Location, I,J being Program of SCM+FSA, n being
Element of NAT st n < card I + card J + 3 holds n in dom if=0(a,I,J) & if=0(a,I
  ,J).n <> halt SCM+FSA
proof
  let a be Int-Location;
  let I,J be Program of SCM+FSA;
  let n be Element of NAT;
  set J1 = a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  ";" I;
A1: card J1 = card (Macro (a =0_goto  (card J + 3)) ";" J ";" Goto
   (card I + 1)) + card I by SCMFSA6A:21
    .= card (Macro (a =0_goto  (card J + 3)) ";" J) + card Goto
  (card I + 1) + card I by SCMFSA6A:21
    .= card (Macro (a =0_goto  (card J + 3)) ";" J) + 1 + card I by SCMFSA8A:15
    .= card Macro (a =0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
    .= 2 + card J + 1 + card I by COMPOS_1:56
    .= card I + card J + 3;
  assume n < card I + card J + 3;
  then  n in dom J1 by A1,AFINSQ_1:66;
  then
A2:  n in dom Directed J1 by FUNCT_4:99;
  then
A3: (Directed J1). n in rng Directed J1 by FUNCT_1:def 3;
  if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  then
A4: Directed J1 c= if=0(a,I,J) by SCMFSA6A:16;
  then dom Directed J1 c= dom if=0(a,I,J) by GRFUNC_1:2;
  hence n in dom if=0(a,I,J) by A2;
  if=0(a,I,J). n = (Directed J1). n by A2,A4,GRFUNC_1:2;
  hence thesis by A3,COMPOS_1:def 11;
end;

theorem Th28:
  for a being Int-Location, I,J being Program of SCM+FSA, n being
Element of NAT st n < card I + card J + 3 holds n in dom if>0(a,I,J) & if>0(a,I
  ,J).n <> halt SCM+FSA
proof
  let a be Int-Location;
  let I,J be Program of SCM+FSA;
  let n be Element of NAT;
  set J1 = a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  ";" I;
A1: card J1 = card (Macro (a >0_goto  (card J + 3)) ";" J ";" Goto
   (card I + 1)) + card I by SCMFSA6A:21
    .= card (Macro (a >0_goto  (card J + 3)) ";" J) + card Goto
  (card I + 1) + card I by SCMFSA6A:21
    .= card (Macro (a >0_goto  (card J + 3)) ";" J) + 1 + card I by SCMFSA8A:15
    .= card Macro (a >0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
    .= 2 + card J + 1 + card I by COMPOS_1:56
    .= card I + card J + 3;
  assume n < card I + card J + 3;
  then  n in dom J1 by A1,AFINSQ_1:66;
  then
A2:  n in dom Directed J1 by FUNCT_4:99;
  then
A3: (Directed J1). n in rng Directed J1 by FUNCT_1:def 3;
  if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  then
A4: Directed J1 c= if>0(a,I,J) by SCMFSA6A:16;
  then dom Directed J1 c= dom if>0(a,I,J) by GRFUNC_1:2;
  hence n in dom if>0(a,I,J) by A2;
  if>0(a,I,J). n = (Directed J1). n by A2,A4,GRFUNC_1:2;
  hence thesis by A3,COMPOS_1:def 11;
end;

theorem Th29:
  for s being State of SCM+FSA, I being Program of SCM+FSA st
  Directed I is_pseudo-closed_on s,P
   holds I ";" Stop SCM+FSA is_closed_on s,P &
    I ";" Stop SCM+FSA is_halting_on s,P &
   LifeSpan(P +* (I ";" Stop SCM+FSA),
         Initialize s) =
   pseudo-LifeSpan(s,P,Directed I) &
  (for n being Element of
  NAT st n < pseudo-LifeSpan(s,P,Directed I) holds
   IC Comput(P +* I, (Initialize s),n)
     = IC Comput(P +* (I ";" Stop SCM+FSA),
     (Initialize s),n)) &
for n being Element of NAT st n <= pseudo-LifeSpan(s,P,Directed I)
 holds DataPart Comput(P +* I, (Initialize s),n)
   = DataPart Comput(P+* (I ";" Stop SCM+FSA),
    Initialize s,n)
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set I0 = Directed I;
  set I1 = I ";" Stop SCM+FSA;
  set s00 = Initialize s,
      P00 = P+*I0;
  set s10 = Initialize s,
      P10 = P+*I1;
  reconsider k = pseudo-LifeSpan(s00,P00,I0) as Element of NAT;
  (Stop SCM+FSA).0 = halt SCM+FSA by AFINSQ_1:34;
  then
A1: halt SCM+FSA = (Stop SCM+FSA). (card I -' card I) by XREAL_1:232;
A2: DataPart s00 = DataPart s10;
  assume
A3: I0 is_pseudo-closed_on s,P;
  then
A4: I0 is_pseudo-closed_on s00,P00 by Th21;
  defpred P[Nat] means k <= $1 implies
   IC Comput(P10, s10,$1) = card I &
   CurInstr(P10,Comput(P10,s10,$1)) = halt SCM+FSA;
A5: I1 c= P10 by FUNCT_4:25;
A6: I1 c= P10 by FUNCT_4:25;
A7: I0 c= I1 by SCMFSA6A:16;
  then
A8: dom I0 c= dom I1 by GRFUNC_1:2;
A9: I0 c= P10 by A7,A5,XBOOLE_1:1;
  Reloc(I0,0) c= I1 by A7;
  then
A10: Reloc(I0,0) c= P10 by A6,XBOOLE_1:1;
A11: IC s10 =  0 by FUNCT_4:113;
A12: I0 c= P00 by FUNCT_4:25;
A13: now
    let n be Element of NAT;
    assume
A14: n <= pseudo-LifeSpan(s00,P00,I0);
    then IC Comput(P00, s00,n) + 0 = IC Comput(P10,s10,n)
     by A4,A10,A11,A2,Th22,A12;
    hence IC Comput(P00, s00,n) = IC Comput(P10,s10,n);
    thus DataPart Comput(P00, s00,n) = DataPart Comput(P10, s10,n)
     by A4,A10,A11,A2,A14,Th22,A12;
  end;
A15: k = pseudo-LifeSpan(s,P,I0) by A3,Th21;
A16: Initialize s00 = s00;
A17: P00 +* I0 = P +* (I0 +* I0)
    .= P00;
A18: now
    let n be Element of NAT;
    assume
A19: n < pseudo-LifeSpan(s00,P00,I0);
    then
    IncAddr(CurInstr(P00,Comput(P00,s00,n)),0)
     = CurInstr(P10,Comput(P10,s10,n))
      by A4,A10,A11,A2,Th22,A12;
    hence CurInstr(P00,Comput(P00,s00,n))
     = CurInstr(P10,Comput(P10,s10,n))
      by COMPOS_0:3;
    thus IC Comput(P00, s00,n) in dom I0 by A16,A4,A19,A17,SCMFSA8A:17;
    thus CurInstr(P00,Comput(P00,s00,n))
     <> halt SCM+FSA by A16,A4,A19,A17,SCMFSA8A:17;
  end;
A20: now
    let n be Element of NAT;
    assume
A21: CurInstr(P10,Comput(P10,s10,n)) = halt SCM+FSA;
    reconsider l = IC Comput(P00, s00,n) as Element of NAT;
    assume
A22: k > n;
    then
A23: l in dom I0 by A3,A15,SCMFSA8A:def 4;
    CurInstr(P10,Comput(P10,s10,n)) =
     CurInstr(P00,Comput(P00,s00,n)) by A18,A22
      .= P00.l by PBOOLE:143
      .= I0.l by A23,A12,GRFUNC_1:2;
    then halt SCM+FSA in rng I0 by A21,A23,FUNCT_1:def 3;
    hence contradiction by COMPOS_1:def 11;
  end;
A24: card Stop SCM+FSA = 1 by AFINSQ_1:33;
  then card I1 = card I + 1 by SCMFSA6A:21;
  then card I < card I1 by NAT_1:13;
  then
A25:  card I in dom I1 by AFINSQ_1:66;
  card I < card I + card Stop SCM+FSA by A24,NAT_1:13;
  then
A26: I1. card I = IncAddr(halt SCM+FSA,card I) by A1,Th2
    .= halt SCM+FSA by COMPOS_0:4;
  then
A27: P10. card I = halt SCM+FSA by A25,A5,GRFUNC_1:2;
A28: for n being Element of NAT st P[n] holds P[n + 1]
  proof
    let n be Element of NAT;
    assume
A29: P[n];
    assume
A30: k <= n + 1;
    hereby
      per cases by A30,NAT_1:8;
      suppose
        k = n + 1;
        hence IC Comput(P10, s10,n+1)
            = IC Comput(P00, s00,k) by A13
          .=  card I0 by A3,A15,SCMFSA8A:def 4
          .=  card I by SCMFSA8A:20;
      end;
      suppose
A31:    k <= n;
        Comput(P10, s10,n+1) = Following(P10,Comput(P10,s10,n)) by EXTPRO_1:3;
        hence IC Comput(P10, s10,n+1) =  card I by A29,A31,EXTPRO_1:def 3;
      end;
    end;
    hence thesis by A27,PBOOLE:143;
  end;
A32: P[0]
  proof
    assume k <= 0;
    then k = 0;
    hence IC Comput(P10, s10,0) = IC Comput(P00,s00,k) by A13
      .=  card I0 by A3,A15,SCMFSA8A:def 4
      .=  card I by SCMFSA8A:20;
    hence CurInstr(P10,Comput(P10,s10,0))
           = P10.card I by PBOOLE:143
          .= halt SCM+FSA by A26,A25,A5,GRFUNC_1:2;
  end;
A33: for n being Element of NAT holds P[n] from NAT_1:sch 1(A32,A28);
  now
    let n be Element of NAT;
    per cases;
    suppose
A34:  n < k;
      then IC Comput(P00, s00,n) = IC Comput(P10,s10,n) by A13;
      then IC Comput(P10, s10,n) in dom I0 by A3,A15,A34,SCMFSA8A:def 4;
      hence IC Comput(P10, s10,n) in dom I1 by A8;
    end;
    suppose
      k <= n;
      hence IC Comput(P10, s10,n) in dom I1 by A25,A33;
    end;
  end;
  hence I1 is_closed_on s,P by SCMFSA7B:def 6;
  set s1 = Initialize s,
      P1 = P +* I;
A35: I c= P1 by FUNCT_4:25;
A36: card I0 = card I by SCMFSA8A:20;
  P[k] by A33;
  then
A37: P10 halts_on s10 by EXTPRO_1:29;
  hence I1 is_halting_on s,P by SCMFSA7B:def 7;
  CurInstr(P10,Comput(P10,s10,k)) = halt SCM+FSA by A33;
  then
A38: LifeSpan(P10,s10) = k by A37,A20,EXTPRO_1:def 15;
  defpred P[Nat] means $1 < pseudo-LifeSpan(s,P,I0) implies
    IC Comput(P1, s1,$1) in dom I &
    IC Comput(P1, s1,$1) = IC Comput(P10, s10,$1) &
    DataPart Comput(P1, s1,$1) = DataPart Comput(P10, s10,$1);
A39: for n being Element of NAT st P[n] holds P[n + 1]
  proof
    let n be Element of NAT;
    set l = IC Comput(P1, s1,n);
    set l0 = IC Comput(P10, s10,n);
    assume
A40: P[n];
    assume
A41: n + 1 < pseudo-LifeSpan(s,P,I0);
    then
A42: l0 in dom I0 by A40,FUNCT_4:99,NAT_1:12;
A43: for f being FinSeq-Location
      holds Comput(P1, s1,n).f = Comput(P10,s10,n).f
       by A40,A41,NAT_1:12,SCMFSA_M:2;
    for a being Int-Location
     holds Comput(P1, s1,n).a = Comput(P10, s10,n).a
      by A40,A41,NAT_1:12,SCMFSA_M:2;
    then
A44:  Comput(P1, s1,n) =  Comput(P10, s10,n)
              by A40,A41,A43,NAT_1:12,SCMFSA_2:61;
A45: now
      assume
A46:  I.l = halt SCM+FSA;
A47:  P00/.IC Comput(P00,s00,n)
 = P00.IC Comput(P00,s00,n) by PBOOLE:143;
      n < k by A15,A41,NAT_1:12;
      then
A48:  CurInstr(P00,Comput(P00,s00,n))
       = P00.l0 by A13,A47
        .= I0.l0 by A42,A12,GRFUNC_1:2
        .= goto  card I by A40,A41,A46,NAT_1:12,SCMFSA8A:16;
A49:  IC Comput(P00, s00,n+1) = IC Following(P00,Comput(P00,s00,n))
                by EXTPRO_1:3
        .=  card I by A48,SCMFSA_2:69
        .=  card I0 by SCMFSA8A:20;
      IC Comput(P00, s00,n+1) in dom I0 by A3,A41,SCMFSA8A:17;
      hence contradiction by A49;
    end;
A50: CurInstr(P1,Comput(P1,s1,n)) = P1.l by PBOOLE:143
      .= I.l by A35,A40,A41,GRFUNC_1:2,NAT_1:12
      .= I0.l0 by A40,A41,A45,NAT_1:12,SCMFSA8A:16
      .= P10.l0 by A42,A9,GRFUNC_1:2
      .= CurInstr(P10,Comput(P10,s10,n)) by PBOOLE:143;
A51: Comput(P10, s10,n+1) = Following(P10,Comput(P10,s10,n)) by EXTPRO_1:3
      .= Exec(CurInstr(P1,Comput(P1,s1,n)),Comput(P10, s10,n)) by A50;
    pseudo-LifeSpan(s,P,I0) = k by A3,Th21;
    then
A52: IC Comput(P00, s00,n+1) = IC Comput(P10, s10,n+1) by A13,A41;
A53: dom I0 = dom I by FUNCT_4:99;
 Comput(P1, s1,n+1) = Following(P1,Comput(P1,s1,n)) by EXTPRO_1:3;
    then
A54:  Comput(P1, s1,n+1) =  Comput(P10, s10,n+1) by A51,A44;
A55: for f being FinSeq-Location
       holds Comput(P1, s1,n+1).f = Comput(P10, s10,n+1).f
     by A54;
    IC Comput(P00, s00,n+1) in dom I0 by A3,A41,SCMFSA8A:17;
    hence IC Comput(P1, s1,n+1) in dom I by A52,A53,A54;
    thus IC Comput(P1, s1,n+1) = IC Comput(P10, s10,n+1) by A54;
    for a being Int-Location holds Comput(P1, s1,n+1).a
       = Comput(P10,s10,n+1).a by A54;
    hence thesis by A55,SCMFSA_M:2;
  end;
  IC Comput(P10, s10,k) =  card I by A33;
  then
A56: IC Comput(P00, s00,LifeSpan(P10,s10)) =  card I
by A13,A38;
  for n be Element of NAT st not IC Comput(P00, s00,n) in dom I0
    holds LifeSpan(P10,s10) <= n by A18,A38;
  hence LifeSpan(P10,s10) = pseudo-LifeSpan(s,P,I0)
    by A3,A56,A36,SCMFSA8A:def 4;
A57: P[0]
  proof
A58: IC Comput(P1, s1,0) = IC s1
      .= IC Initialize s
      .=  0 by FUNCT_4:113;
    assume 0 < pseudo-LifeSpan(s,P,I0);
    then IC Comput(P +* I0, (Initialize s),0)
     in dom I0 by A3,SCMFSA8A:17;
    then IC (Initialize s) in dom I0;
    then  0 in dom I0 by MEMSTR_0:16;
    hence IC Comput(P1, s1,0) in dom I by A58,FUNCT_4:99;
    thus IC Comput(P1, s1,0) = IC Comput(P10, s10,0);
    thus DataPart Comput(P1, s1,0) = DataPart s1
      .= DataPart s10
      .= DataPart Comput(P10, s10,0);
  end;
A59: for n being Element of NAT holds P[n] from NAT_1:sch 1(A57,A39);
  hence for n be Element of NAT st n < pseudo-LifeSpan(s,P,I0)
    holds IC Comput(P1, s1,n) = IC Comput(P10, s10,n);
  let n be Element of NAT;
  assume
A60: n <= pseudo-LifeSpan(s,P,Directed I);
  per cases by A60,XXREAL_0:1;
  suppose
    n < pseudo-LifeSpan(s,P,I0);
    hence thesis by A59;
  end;
  suppose
A61: n = pseudo-LifeSpan(s,P,I0);
      per cases by NAT_1:6;
      suppose
A62:    n = 0;
        hence DataPart Comput(P1, s1,n) = DataPart s1 by EXTPRO_1:2
          .= DataPart s10
          .= DataPart Comput(P10, s10,n) by A62,EXTPRO_1:2;
      end;
      suppose
        ex m be Nat st n = m + 1;
        then consider m being Nat such that
A63:    n = m + 1;
        reconsider m as Element of NAT by ORDINAL1:def 12;
A64:    Comput(P10, s10,n) = Following(P10,Comput(P10,s10,m))
              by A63,EXTPRO_1:3;
        set i = CurInstr(P1,Comput(P1,s1,m));
A65:    Comput(P1, s1,n) = Following(P1,Comput(P1,s1,m)) by A63,EXTPRO_1:3;
        set l0 = IC Comput(P10, s10,m);
        set l = IC Comput(P1, s1,m);
A66:    m + 0 < pseudo-LifeSpan(s,P,I0) by A61,A63,XREAL_1:6;
        then
A67:    l = l0 by A59;
A68:    l in dom I by A59,A66;
        then
A69:    l0 in dom I0 by A67,FUNCT_4:99;
A70:    i = P1.l by PBOOLE:143
          .= I.l by A35,A68,GRFUNC_1:2;
A71:     I0 c= I1 by SCMFSA6A:16;
        then
A72:    dom I0 c= dom I1 by RELAT_1:11;
A73:    I0.l0 = I1.l0 by A69,A71,GRFUNC_1:2
          .= P10.l0 by A5,A72,A69,GRFUNC_1:2
          .= CurInstr(P10,Comput(P10,s10,m)) by PBOOLE:143;
A74:    DataPart Comput(P1, s1,m) = DataPart Comput(P10, s10,m) by A59,A66;
          per cases;
          suppose
A75:        i = halt SCM+FSA;
            then CurInstr(P10,Comput(P10,s10,m))
             = goto  card I by A68,A67,A70,A73,SCMFSA8A:16;
            then InsCode CurInstr(P10,
            Comput(P10,s10,m)) = 6 by SCMFSA_2:23;
            then
A76:        InsCode CurInstr(P10,Comput(P10,s10,m)) in {0,6,7,8}
              by ENUMSET1:def 2;
            thus DataPart Comput(P1, s1,n)
             = DataPart Comput(P1, s1,m) by A65,A75,EXTPRO_1:def 3
              .= DataPart Comput(P10, s10,m) by A59,A66
              .= DataPart Comput(P10, s10,n) by A64,A76,Th12;
          end;
          suppose
            i <> halt SCM+FSA;
            then
            CurInstr(P10,Comput(P10,s10,m))
             = i by A68,A67,A70,A73,SCMFSA8A:16;
            hence thesis by A65,A64,A74,SCMFSA6C:4;
          end;
      end;
  end;
end;

theorem Th30:
  for s being State of SCM+FSA, I being Program of SCM+FSA st
  Directed I is_pseudo-closed_on s,P holds
   DataPart Result(P +* (I ";" Stop SCM+FSA),
   Initialize s) =
  DataPart Comput(P +* I, (Initialize s),
  pseudo-LifeSpan(s,P,Directed I))
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set I0 = Directed I;
  set I1 = I ";" Stop SCM+FSA;
  set s2 = Initialize s,
      P2 = P +* I;
  set s10 = Initialize s,
      P10 = P+*I1;
  set k = pseudo-LifeSpan(s,P,I0);
  assume
A1: I0 is_pseudo-closed_on s,P;
  then
A2: DataPart Comput(P2, s2,k) = DataPart Comput(P10, s10,k) by Th29;
  I1 is_halting_on s,P by A1,Th29;
  then
A3: P10 halts_on s10 by SCMFSA7B:def 7;
  LifeSpan(P10,s10) = k by A1,Th29;
  hence thesis by A2,A3,EXTPRO_1:23;
end;

theorem
  for s being State of SCM+FSA, I being Program of SCM+FSA st s.intloc 0
= 1 & Directed I is_pseudo-closed_on s,P
 holds DataPart IExec(I ";" Stop SCM+FSA,P,s)
  = DataPart Comput(P +* I, (Initialize s),
pseudo-LifeSpan(s,P,Directed I))
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  set I0 = Directed I;
  set I1 = I ";" Stop SCM+FSA;
  set s2 = Initialize s,
      P2 = P +* I;
  set s10 = Initialize s,
      P10 = P+*I1;
  set k = pseudo-LifeSpan(s,P,I0);
  assume
A1: s.intloc 0 = 1;
  assume
A2: I0 is_pseudo-closed_on s,P;
A3: s10 = Initialized s by A1,SCMFSA_M:18;
  thus DataPart IExec(I1,P,s)
     = DataPart(Result(P10,s10)) by A3
    .= DataPart Comput(P2, s2,k) by A2,Th30;
end;

theorem Th32:
  for I,J being Program of SCM+FSA,a being Int-Location holds if=0
  (a,I,J). (card I + card J + 3) = halt SCM+FSA
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
A1: if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  set II = a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  ";" I;
A2: card II = card (Macro (a =0_goto  (card J + 3)) ";" J ";" Goto
   (card I + 1)) + card I by SCMFSA6A:21
    .= card (Macro (a =0_goto  (card J + 3)) ";" J) + card Goto
  (card I + 1) + card I by SCMFSA6A:21
    .= card (Macro (a =0_goto  (card J + 3)) ";" J) + 1 + card I by SCMFSA8A:15
    .= card Macro (a =0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
    .= 2 + card J + 1 + card I by COMPOS_1:56
    .= card I + card J + 3;
  then
A3: card I + card J + 3 -' card II = 0 by XREAL_1:232;
A4: (Stop SCM+FSA).0 = halt SCM+FSA by AFINSQ_1:34;
  card Stop SCM+FSA = 1 by AFINSQ_1:33;
  then card I + card J + 3 < card II + card Stop SCM+FSA by A2,NAT_1:13;
  hence
  if=0(a,I,J). (card I + card J + 3) = IncAddr(halt SCM+FSA,card II
  ) by A1,A2,A3,Th2,A4
    .= halt SCM+FSA by COMPOS_0:4;
end;

theorem Th33:
  for I,J being Program of SCM+FSA,a being Int-Location holds if>0
  (a,I,J). (card I + card J + 3) = halt SCM+FSA
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
A1: if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  set II = a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  ";" I;
A2: card II = card (Macro (a >0_goto  (card J + 3)) ";" J ";" Goto
   (card I + 1)) + card I by SCMFSA6A:21
    .= card (Macro (a >0_goto  (card J + 3)) ";" J) + card Goto
  (card I + 1) + card I by SCMFSA6A:21
    .= card (Macro (a >0_goto  (card J + 3)) ";" J) + 1 + card I by SCMFSA8A:15
    .= card Macro (a >0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
    .= 2 + card J + 1 + card I by COMPOS_1:56
    .= card I + card J + 3;
  then
A3: card I + card J + 3 -' card II = 0 by XREAL_1:232;
A4: (Stop SCM+FSA).0 = halt SCM+FSA by AFINSQ_1:34;
  card Stop SCM+FSA = 1 by AFINSQ_1:33;
  then card I + card J + 3 < card II + card Stop SCM+FSA by A2,NAT_1:13;
  hence
  if>0(a,I,J). (card I + card J + 3) = IncAddr(halt SCM+FSA,card II
  ) by A1,A2,A3,Th2,A4
    .= halt SCM+FSA by COMPOS_0:4;
end;

theorem Th34:
  for I,J being Program of SCM+FSA,a being Int-Location holds if=0
  (a,I,J). (card J + 2) = goto  (card I + card J + 3)
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
  set JJ = a =0_goto  (card J + 3) ";" J;
  set J3 = a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1);
A1: if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
A2: card JJ = card Macro (a =0_goto  (card J + 3)) + card J by SCMFSA6A:21
    .= 2 + card J by COMPOS_1:56;
  then card J + 2 -' card JJ = 0 by XREAL_1:232;
  then
A3: goto  (card I + 1) = (Goto  (card I + 1)). (card J + 2
  -' card JJ) by SCMFSA8A:31;
  card Goto  (card I + 1) = 1 by SCMFSA8A:15;
  then card J + 2 < card JJ + card Goto  (card I + 1) by A2,NAT_1:13;
  then
A4: J3. (card J + 2) = IncAddr(goto  (card I + 1),card JJ) by A2,A3,Th2
    .= goto  (card I + 1 + (card J + 2)) by A2,SCMFSA_4:1
    .= goto  (card I + card J + (1 + 2));
  card Goto  (card I + 1) = 1 by SCMFSA8A:15;
  then card J3 = card J + 2 + 1 by A2,SCMFSA6A:21
    .= card J + (2 + 1);
  then card J3 = card J + 2 + 1;
  then card J + 2 < card J3 by NAT_1:13;
  then
A5:  (card J + 2) in dom J3 by AFINSQ_1:66;
  then (J3 ";" (I ";" Stop SCM+FSA)). (card J + 2) = (Directed J3).
   (card J + 2) by SCMFSA8A:14
    .= goto  (card I + card J + 3) by A4,A5,SCMFSA8A:16;
  hence thesis by A1,SCMFSA6A:25;
end;

theorem Th35:
  for I,J being Program of SCM+FSA,a being Int-Location holds if>0
  (a,I,J). (card J + 2) = goto  (card I + card J + 3)
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
  set JJ = a >0_goto  (card J + 3) ";" J;
  set J3 = a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1);
A1: if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
A2: card JJ = card Macro (a >0_goto  (card J + 3)) + card J by SCMFSA6A:21
    .= 2 + card J by COMPOS_1:56;
  then card J + 2 -' card JJ = 0 by XREAL_1:232;
  then
A3: goto  (card I + 1) = (Goto  (card I + 1)). (card J + 2
  -' card JJ) by SCMFSA8A:31;
  card Goto  (card I + 1) = 1 by SCMFSA8A:15;
  then card J + 2 < card JJ + card Goto  (card I + 1) by A2,NAT_1:13;
  then
A4: J3. (card J + 2) = IncAddr(goto  (card I + 1),card JJ) by A2,A3,Th2
    .= goto  (card I + 1 + (card J + 2)) by A2,SCMFSA_4:1
    .= goto  (card I + card J + (1 + 2));
  card Goto  (card I + 1) = 1 by SCMFSA8A:15;
  then card J3 = card J + 2 + 1 by A2,SCMFSA6A:21
    .= card J + (2 + 1);
  then card J3 = card J + 2 + 1;
  then card J + 2 < card J3 by NAT_1:13;
  then
A5:  (card J + 2) in dom J3 by AFINSQ_1:66;
  then (J3 ";" (I ";" Stop SCM+FSA)). (card J + 2) = (Directed J3).
   (card J + 2) by SCMFSA8A:14
    .= goto  (card I + card J + 3) by A4,A5,SCMFSA8A:16;
  hence thesis by A1,SCMFSA6A:25;
end;

theorem Th36:
  for J being Program of SCM+FSA,a being Int-Location holds if=0(a
  ,Goto  2,J). (card J + 3) = goto  (card J + 5)
proof
  let J be Program of SCM+FSA;
  let a be Int-Location;
  set JJ = a =0_goto  (card J + 3) ";" J;
  set J3 = a =0_goto  (card J + 3) ";" J ";" Goto  2;
  set J4 = a =0_goto  (card J + 3) ";" J ";" Goto  2 ";" Goto
   2;
A1: card Goto  2 = 1 by SCMFSA8A:15;
  card JJ = card Macro (a =0_goto  (card J + 3)) + card J by SCMFSA6A:21
    .= 2 + card J by COMPOS_1:56;
  then
A2: card J3 = card J + 2 + 1 by A1,SCMFSA6A:21
    .= card J + (2 + 1);
  then card J + 3 -' card J3 = 0 by XREAL_1:232;
  then
A3: goto  2 = (Goto  2). (card J + 3 -' card J3) by SCMFSA8A:31;
  card Goto  2 = 1 by SCMFSA8A:15;
  then card J + 3 < card J3 + card Goto  2 by A2,NAT_1:13;
  then
A4: J4. (card J + 3) = IncAddr(goto  2,card J3) by A2,A3,Th2
    .= goto  (2 + (card J + 3)) by A2,SCMFSA_4:1
    .= goto  (card J + (2 + 3));
  card Goto  2 = 1 by SCMFSA8A:15;
  then
A5: if=0(a,Goto  2,J) = (a =0_goto  (card J + 3) ";" J ";" Goto
   (1 + 1) ";" Goto  2) ";" Stop SCM+FSA by SCMFSA8B:def 1;
  card J4 = card J + 3 + 1 by A1,A2,SCMFSA6A:21
    .= card J + (3 + 1);
  then card J4 = card J + 3 + 1;
  then card J + 3 < card J4 by NAT_1:13;
  then
A6:  (card J + 3) in dom J4 by AFINSQ_1:66;
  then (J4 ";" Stop SCM+FSA). (card J + 3) = (Directed J4). (card
  J + 3) by SCMFSA8A:14
    .= goto  (card J + 5) by A4,A6,SCMFSA8A:16;
  hence thesis by A5;
end;

theorem Th37:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA,
      a being read-write Int-Location st
  s.a = 0 & Directed I is_pseudo-closed_on s,P
    holds if=0(a,I,J) is_halting_on s,P &
    if=0(a,I,J) is_closed_on s,P &
    LifeSpan(P +* if=0(a,I,J),Initialize s)
   = LifeSpan(P +* (I ";" Stop SCM+FSA),
       Initialize s) + 1
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set I0 = Directed I;
  set I1 = I ";" Stop SCM+FSA;
  set s00 = Initialize s,
      P00 = P+*I0;
  set s3 = Initialize s,
      P3 = P +* if=0(a,I,J);
A1: if=0(a,I,J) c= P3 by FUNCT_4:25;
  set s4 = Comput(P3, s3,1);
  set i = a =0_goto  (card J + 3);
  card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if=0(a,I,J) by NAT_1:13;
  then
A2:  (card I + card J + 3) in dom if=0(a,I,J) by AFINSQ_1:66;
A3: if=0(a,I,J) c= P3 by FUNCT_4:25;
A4:  0 in dom if=0(a,I,J) by Th25;
A5: P3. 0 = (if=0(a,I,J)). 0 by A4,A1,GRFUNC_1:2
    .= i by Th26;
A6: card (i ";" J ";" Goto  (card I + 1)) = card (Macro i ";" J) +
  card Goto  (card I + 1) by SCMFSA6A:21
    .= card (Macro i ";" J) + 1 by SCMFSA8A:15
    .= card Macro i + card J + 1 by SCMFSA6A:21
    .= card J + 2 + 1 by COMPOS_1:56
    .= card J + (2 + 1);
A7: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A8: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A7,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
A9: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A8,A5,PBOOLE:143;
A10: if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  then if=0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I1 by SCMFSA6A:25;
  then
 Reloc(I1,card J + 3) c= if=0(a,I,J) by A6,FUNCT_4:25;
  then
A11: Reloc(I1,card J + 3) c= P3 by A3,XBOOLE_1:1;
 Reloc(I0,card J + 3) c= Reloc(I1,card J + 3)
 by COMPOS_1:44,SCMFSA6A:16;
  then
A12: Reloc(I0,card J + 3) c= P3 by A11,XBOOLE_1:1;
A13: for f being FinSeq-Location holds s00.f = s4.f by A9,SCMFSA_2:70;
  for a being Int-Location holds s00.a = s4.a by A9,SCMFSA_2:70;
  then
A14: DataPart s00 = DataPart s4 by A13,SCMFSA_M:2;
A15:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A15,TARSKI:def 1;
   then
A16: not a in dom Start-At(0,SCM+FSA);
  assume s.a = 0;
  then s3.a = 0 by A16,FUNCT_4:11;
  then
A17: IC Comput(P3,s3,1) =  (card J + 3) by A9,SCMFSA_2:70;
  assume
A18: I0 is_pseudo-closed_on s,P;
  then
A19: pseudo-LifeSpan(s,P,I0)
 = LifeSpan(P +* I1,Initialize s) by Th29;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A20: I0 is_pseudo-closed_on s00,P00 by A18,Th23;
A21: I0 c= P00 by FUNCT_4:25;
A22: IC Comput(P3,s3,pseudo-LifeSpan(s00,P00,I0) +
1) = IC Comput(
P3, s4,
  pseudo-LifeSpan(s00,P00,I0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00,I0)) + (card J + 3)
by A20,A12,A17,A14,Th22,A21
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,I0)
) + (card J + 3)
by A18,Th21
    .=  card I0 + (card J + 3) by A18,SCMFSA8A:def 4
    .=  (card I + (card J + 3)) by SCMFSA8A:20
    .=  (card I + card J + 3);
  then
A23: CurInstr(P3,
     Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) +
1)) = P3. (card I + card J + 3) by PBOOLE:143
    .= if=0(a,I,J). (card I + card J + 3) by A2,A1,GRFUNC_1:2
    .= halt SCM+FSA by Th32;
  then
A24: P3 halts_on s3 by EXTPRO_1:29;
  hence if=0(a,I,J) is_halting_on s,P by SCMFSA7B:def 7;
  now
    let k be Element of NAT;
    per cases;
    suppose
      k = 0;
      then Comput(P3, s3,k) = s3 by EXTPRO_1:2;
      then IC Comput(P3, s3,k) =  0 by MEMSTR_0:16;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by Th25;
    end;
    suppose
A25:  0 < k & k < pseudo-LifeSpan(s00,P00,I0) + 1;
      card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
        .= card I + card J + 3 + 1;
      then
A26:  card I + card J + 3 < card if=0(a,I,J) by XREAL_1:29;
      0 + 1 <= k by A25,INT_1:7;
      then consider k1 being Nat such that
A27:  1 + k1 = k by NAT_1:10;
      reconsider k1 as Element of NAT by ORDINAL1:def 12;
      reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
A28:  k1 < pseudo-LifeSpan(s00,P00,I0) by A25,A27,XREAL_1:6;
      then k1 < pseudo-LifeSpan(s,P,I0) by A18,Th21;
      then  n in dom I0 by A18,SCMFSA8A:17;
      then n < card I0 by AFINSQ_1:66;
      then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
      then n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
      then
A29:  n + (card J + 3) < card if=0(a,I,J) by A26,XXREAL_0:2;
      IC Comput(P3, s3,k) = IC Comput(P3, s4,k1)
by A27,EXTPRO_1:4
        .= IC Comput(P00, s00,k1) + (card J + 3) by A20,A12,A17,A14,A28,Th22
,A21;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A29,AFINSQ_1:66;
    end;
    suppose
      0 < k & pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A2,A22,A23,EXTPRO_1:5;
    end;
  end;
  hence if=0(a,I,J) is_closed_on s,P by SCMFSA7B:def 6;
  now
    set J1 = a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
    ";" I;
    let k be Element of NAT;
    assume
A30: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
    assume not pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
    then
A31: k <= pseudo-LifeSpan(s00,P00,I0) by NAT_1:13;
A32:  0 in dom if=0(a,I,J) by Th25;
A33:  P3/.IC s3 = P3.IC s3 by PBOOLE:143;
    CurInstr(P3,Comput(P3,s3,0))
      = P3. 0 by A33,MEMSTR_0:16
      .= if=0(a,I,J). 0 by A32,A1,GRFUNC_1:2
      .= a =0_goto  (card J + 3) by Th26;
    then consider k1 being Nat such that
A34: k1 + 1 = k by A30,NAT_1:6;
    reconsider k1 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
    k1 < k by A34,XREAL_1:29;
    then
A35: k1 < pseudo-LifeSpan(s00,P00,I0) by A31,XXREAL_0:2;
    then k1 < pseudo-LifeSpan(s,P,I0) by A18,Th21;
    then  n in dom I0 by A18,SCMFSA8A:17;
    then n < card I0 by AFINSQ_1:66;
    then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
    then
A36: n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
A37: IC Comput(P3, s3,k) = IC Comput(P3, s4,k1) by A34,EXTPRO_1:4
      .= IC Comput(P00, s00,k1) + (card J + 3) by A20,A12,A17,A14,A35,Th22,A21;
    card J1 = card (Macro (a =0_goto  (card J + 3)) ";" J ";" Goto
     (card I + 1)) + card I by SCMFSA6A:21
      .= card (Macro (a =0_goto  (card J + 3)) ";" J) + card Goto
     (card I + 1) + card I by SCMFSA6A:21
      .= card (Macro (a =0_goto  (card J + 3)) ";" J) + 1 + card I by
SCMFSA8A:15
      .= card Macro (a =0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
      .= 2 + card J + 1 + card I by COMPOS_1:56
      .= card I + card J + 3;
    then IC Comput(P3, s3,k) in dom J1 by A37,A36,AFINSQ_1:66;
    then
A38: IC Comput(P3, s3,k) in dom Directed J1 by FUNCT_4:99;
    then
A39: (Directed J1).IC Comput(P3, s3,k) in rng Directed J1 by FUNCT_1:def 3;
    card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
      .= card I + card J + 3 + 1;
    then card I + card J + 3 < card if=0(a,I,J) by XREAL_1:29;
    then n + (card J + 3) < card if=0(a,I,J) by A36,XXREAL_0:2;
    then
A40: IC Comput(P3, s3,k) in dom if=0(a,I,J) by A37,AFINSQ_1:66;
A41: CurInstr(P3,Comput(P3,s3,k))
       = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if=0(a,I,J).IC Comput(P3, s3,k) by A40,A1,GRFUNC_1:2;
    Directed J1 c= if=0(a,I,J) by A10,SCMFSA6A:16;
    then
    if=0(a,I,J).IC Comput(P3, s3,k) = (Directed J1).IC Comput(
P3, s3,
    k) by A38,GRFUNC_1:2;
    hence contradiction by A30,A39,A41,COMPOS_1:def 11;
  end;
  then LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,I0) + 1
   by A23,A24,EXTPRO_1:def 15;
  hence thesis
  by A18,A19,Th21;
end;

theorem
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a being
  read-write Int-Location st s.intloc 0 = 1 & s.a = 0 & Directed I
  is_pseudo-closed_on s,P holds DataPart IExec(if=0(a,I,J),P,s)
   = DataPart IExec(I ";" Stop SCM+FSA,P,s)
proof
  let ss be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set I0 = Directed I;
  set s = Initialized ss;
  set I1 = I ";" Stop SCM+FSA;
  set s00 = Initialize s,
      P00 = P+*I0;
  set s3 = Initialize s,
      P3 = P +* if=0(a,I,J);
A1: if=0(a,I,J) c= P3 by FUNCT_4:25;
  set s4 = Comput(P3, s3,1);
  set i = a =0_goto  (card J + 3);
A2: I0 c= P00 by FUNCT_4:25;
  assume
A3: ss.intloc 0 = 1;
  set s1 = Initialize s,
      P1 = P +* I1;
  assume ss.a = 0;
  then
A4: s.a = 0 by SCMFSA_M:37;
A5: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A6: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A5,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
A7:  0 in dom if=0(a,I,J) by Th25;
A8: P3. 0 = if=0(a,I,J). 0 by A7,FUNCT_4:13
    .= i by Th26;
A9: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A6,A8,PBOOLE:143;
A10:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A10,TARSKI:def 1;
   then
A11: not a in dom Start-At(0,SCM+FSA);
  s3.a = 0 by A11,A4,FUNCT_4:11;
  then
A12: IC Comput(P3,s3,1) =  (card J + 3) by A9,SCMFSA_2:70;
  assume I0 is_pseudo-closed_on ss,P;
  then
A13: I0 is_pseudo-closed_on s,P by A3,Th24;
  then
A14: LifeSpan(P1,s1) = pseudo-LifeSpan(s,P,I0) by Th29;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A15: I0 is_pseudo-closed_on s00,P00 by A13,Th23;
A16: for f being FinSeq-Location holds s00.f = s4.f by A9,SCMFSA_2:70;
  for a being Int-Location holds s00.a = s4.a by A9,SCMFSA_2:70;
  then
A17: DataPart s00 = DataPart s4 by A16,SCMFSA_M:2;
  card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if=0(a,I,J) by NAT_1:13;
  then
A18:  (card I + card J + 3) in dom if=0(a,I,J) by AFINSQ_1:66;
A19: card (i ";" J ";" Goto  (card I + 1)) = card (Macro i ";" J) +
  card Goto  (card I + 1) by SCMFSA6A:21
    .= card (Macro i ";" J) + 1 by SCMFSA8A:15
    .= card Macro i + card J + 1 by SCMFSA6A:21
    .= card J + 2 + 1 by COMPOS_1:56
    .= card J + (2 + 1);
A20:  s +*Initialize((intloc 0).-->1)
 = Initialize Initialized s
  by MEMSTR_0:44;
A21: if=0(a,I,J) c= P3 by FUNCT_4:25;
A22: if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  then if=0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I1 by SCMFSA6A:25;
  then
  Reloc(I1,card J + 3) c= if=0(a,I,J) by A19,FUNCT_4:25;
  then
A23: Reloc(I1,card J + 3) c= P3 by A21,XBOOLE_1:1;
 Reloc(I0,card J + 3) c= Reloc(I1,card J+ 3) by COMPOS_1:44,SCMFSA6A:16;
  then
A24: Reloc(I0,card J + 3) c= P3 by A23,XBOOLE_1:1;
  IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) + 1)
   = IC Comput(P3, s4,pseudo-LifeSpan(s00,P00,I0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00,I0)) + (card J + 3)
by A15,A24,A12,A17,Th22,A2
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,I0)
) + (card J + 3)
by A13,Th21
    .=  card I0 + (card J + 3) by A13,SCMFSA8A:def 4
    .=  (card I + (card J + 3)) by SCMFSA8A:20
    .=  (card I + card J + 3);
  then
A25: CurInstr(P3,
   Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) + 1))
     = P3. (card I + card J + 3) by PBOOLE:143
    .= if=0(a,I,J). (card I + card J + 3) by A18,A1,GRFUNC_1:2
    .= halt SCM+FSA by Th32;
  then
A26: P3 halts_on s3 by EXTPRO_1:29;
  now
    set J1 = a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
    ";" I;
    let k be Element of NAT;
    assume
A27: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
    assume not pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
    then
A28: k <= pseudo-LifeSpan(s00,P00,I0) by NAT_1:13;
A29:  0 in dom if=0(a,I,J) by Th25;
A30:  P3/.IC s3 = P3.IC s3 by PBOOLE:143;
    CurInstr(P3,Comput(P3,s3,0))
      = P3. 0 by A30,MEMSTR_0:16
     .= if=0(a,I,J). 0 by A29,A1,GRFUNC_1:2
      .= a =0_goto  (card J + 3) by Th26;
    then consider k1 being Nat such that
A31: k1 + 1 = k by A27,NAT_1:6;
    reconsider k1 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
    k1 < k by A31,XREAL_1:29;
    then
A32: k1 < pseudo-LifeSpan(s00,P00,I0) by A28,XXREAL_0:2;
    then k1 < pseudo-LifeSpan(s,P,I0) by A13,Th21;
    then  n in dom I0 by A13,SCMFSA8A:17;
    then n < card I0 by AFINSQ_1:66;
    then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
    then
A33: n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
A34: IC Comput(P3, s3,k) = IC Comput(P3, s4,k1) by A31,EXTPRO_1:4
      .= IC Comput(P00, s00,k1) + (card J + 3) by A15,A24,A12,A17,A32,Th22,A2;
    card J1 = card (Macro (a =0_goto  (card J + 3)) ";" J ";" Goto
     (card I + 1)) + card I by SCMFSA6A:21
      .= card (Macro (a =0_goto  (card J + 3)) ";" J) + card Goto
     (card I + 1) + card I by SCMFSA6A:21
      .= card (Macro (a =0_goto  (card J + 3)) ";" J) + 1 + card I by
SCMFSA8A:15
      .= card Macro (a =0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
      .= 2 + card J + 1 + card I by COMPOS_1:56
      .= card I + card J + 3;
    then IC Comput(P3, s3,k) in dom J1 by A34,A33,AFINSQ_1:66;
    then
A35: IC Comput(P3, s3,k) in dom Directed J1 by FUNCT_4:99;
    then
A36: (Directed J1).IC Comput(P3, s3,k) in rng Directed J1 by FUNCT_1:def 3;
    card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
      .= card I + card J + 3 + 1;
    then card I + card J + 3 < card if=0(a,I,J) by XREAL_1:29;
    then n + (card J + 3) < card if=0(a,I,J) by A33,XXREAL_0:2;
    then
A37: IC Comput(P3, s3,k) in dom if=0(a,I,J) by A34,AFINSQ_1:66;
A38: CurInstr(P3,Comput(P3,s3,k))
 = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if=0(a,I,J).IC Comput(P3, s3,k) by A37,A1,GRFUNC_1:2;
    Directed J1 c= if=0(a,I,J) by A22,SCMFSA6A:16;
    then
    if=0(a,I,J).IC Comput(P3, s3,k) = (Directed J1).IC Comput(
P3, s3,
    k) by A35,GRFUNC_1:2;
    hence contradiction by A27,A36,A38,COMPOS_1:def 11;
  end;
  then
A39: LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,I0)
+ 1 by A25,A26,EXTPRO_1:def 15;
A40:s +*Initialize((intloc 0).-->1) = Initialize Initialized s by MEMSTR_0:44;
A41: I0 ";" Stop SCM+FSA = I1 by SCMFSA8A:25;
  Directed I0 = I0 by SCMFSA6A:22;
  then
A42: DataPart Comput(P00, s00,pseudo-LifeSpan(s,P,I0)) = DataPart
Comput(P1, s1,pseudo-LifeSpan(s,P,I0)) by A13,A41,Th29;
  I1 is_halting_on s,P by A13,Th29;
  then
A43: P1 halts_on s1 by SCMFSA7B:def 7;
  thus DataPart IExec(if=0(a,I,J),P,ss)
   = DataPart IExec(if=0(a,I,J),P,s)
    .= DataPart Result(P3,s3) by A20
    .= DataPart Comput(P3, s3,LifeSpan(P3,s3)) by A26,EXTPRO_1:23
    .= DataPart Comput(P3, s4,pseudo-LifeSpan(s00,P00,I0)) by A39,EXTPRO_1:4
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(s00,P00,I0))
     by A15,A24,A12,A17,Th22,A2
    .= DataPart Comput(P1, s1,LifeSpan(P1,s1)) by A13,A14,A42,Th21
    .= DataPart Result(P1,s1) by A43,EXTPRO_1:23
    .= DataPart IExec(I1,P,s) by A40
    .= DataPart IExec(I1,P,ss);
end;

theorem Th39:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a
  being read-write Int-Location
   st s.a > 0 & Directed I is_pseudo-closed_on s,P
holds if>0(a,I,J) is_halting_on s,P & if>0(a,I,J) is_closed_on s,P &
 LifeSpan(P+* if>0(a,I,J),Initialize s)
   = LifeSpan(P +* (I ";" Stop SCM+FSA),
   Initialize s) + 1
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set I0 = Directed I;
  set I1 = I ";" Stop SCM+FSA;
  set s00 = Initialize s,
      P00 = P+*I0;
  set s3 = Initialize s,
      P3 = P +* if>0(a,I,J);
  set s4 = Comput(P3, s3,1);
  set i = a >0_goto  (card J + 3);
A1: I0 c= P00 by FUNCT_4:25;
A2: if>0(a,I,J) c= P3 by FUNCT_4:25;
  card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if>0(a,I,J) by NAT_1:13;
  then
A3:  (card I + card J + 3) in dom if>0(a,I,J) by AFINSQ_1:66;
A4: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A5: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A4,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
A6:  0 in dom if>0(a,I,J) by Th25;
A7: P3. 0 = (if>0(a,I,J)). 0 by A6,FUNCT_4:13
    .= i by Th26;
A8: card (i ";" J ";" Goto  (card I + 1)) = card (Macro i ";" J) +
  card Goto  (card I + 1) by SCMFSA6A:21
    .= card (Macro i ";" J) + 1 by SCMFSA8A:15
    .= card Macro i + card J + 1 by SCMFSA6A:21
    .= card J + 2 + 1 by COMPOS_1:56
    .= card J + (2 + 1);
A9: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A5,A7,PBOOLE:143;
A10: if>0(a,I,J) c= P3 by FUNCT_4:25;
A11: if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  then if>0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I1 by SCMFSA6A:25;
  then
 Reloc(I1,card J + 3) c= if>0(a,I,J) by A8,FUNCT_4:25;
  then
A12: Reloc(I1,card J + 3) c= P3 by A10,XBOOLE_1:1;
  Reloc(I0,card J + 3) c= Reloc(I1,card J
  + 3) by COMPOS_1:44,SCMFSA6A:16;
  then
A13: Reloc(I0,card J + 3) c= P3 by A12,XBOOLE_1:1;
A14: for f being FinSeq-Location holds s00.f = s4.f by A9,SCMFSA_2:71;
  for a being Int-Location holds s00.a = s4.a by A9,SCMFSA_2:71;
  then
A15: DataPart s00 = DataPart s4 by A14,SCMFSA_M:2;
A16:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A16,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then
A17:  s3.a = s.a by FUNCT_4:11;
  assume s.a > 0;
  then
A18: IC Comput(P3,s3,1) =  (card J + 3) by A9,A17,SCMFSA_2:71;
  assume
A19: I0 is_pseudo-closed_on s,P;
  then
A20: pseudo-LifeSpan(s,P,I0) = LifeSpan(P +* I1,
Initialize s) by Th29;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A21: I0 is_pseudo-closed_on s00,P00 by A19,Th23;
A22: IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0)
+ 1) = IC Comput(
P3, s4,
  pseudo-LifeSpan(s00,P00,I0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00,I0)) + (card J + 3)
by A21,A13,A18,A15,Th22,A1
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,I0)
) + (card J + 3)
by A19,Th21
    .=  card I0 + (card J + 3) by A19,SCMFSA8A:def 4
    .=  (card I + (card J + 3)) by SCMFSA8A:20
    .=  (card I + card J + 3);
  then
A23: CurInstr(P3,
    Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) + 1
)) = P3. (card I + card J + 3) by PBOOLE:143
    .= if>0(a,I,J). (card I + card J + 3) by A3,A2,GRFUNC_1:2
    .= halt SCM+FSA by Th33;
  then
A24: P3 halts_on s3 by EXTPRO_1:29;
  hence if>0(a,I,J) is_halting_on s,P by SCMFSA7B:def 7;
  now
    let k be Element of NAT;
    per cases;
    suppose
      k = 0;
      then Comput(P3, s3,k) = s3 by EXTPRO_1:2;
      then IC Comput(P3, s3,k) =  0 by MEMSTR_0:16;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by Th25;
    end;
    suppose
A25:  0 < k & k < pseudo-LifeSpan(s00,P00,I0) + 1;
      card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
        .= card I + card J + 3 + 1;
      then
A26:  card I + card J + 3 < card if>0(a,I,J) by XREAL_1:29;
      0 + 1 <= k by A25,INT_1:7;
      then consider k1 being Nat such that
A27:  1 + k1 = k by NAT_1:10;
      reconsider k1 as Element of NAT by ORDINAL1:def 12;
      reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
A28:  k1 < pseudo-LifeSpan(s00,P00,I0) by A25,A27,XREAL_1:6;
      then k1 < pseudo-LifeSpan(s,P,I0) by A19,Th21;
      then  n in dom I0 by A19,SCMFSA8A:17;
      then n < card I0 by AFINSQ_1:66;
      then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
      then n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
      then
A29:  n + (card J + 3) < card if>0(a,I,J) by A26,XXREAL_0:2;
      IC Comput(P3, s3,k) = IC Comput(P3, s4,k1)
by A27,EXTPRO_1:4
        .= IC Comput(P00, s00,k1) + (card J + 3) by A21,A13,A18,A15,A28,Th22,A1
;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A29,AFINSQ_1:66;
    end;
    suppose
      0 < k & pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A3,A22,A23,EXTPRO_1:5;
    end;
  end;
  hence if>0(a,I,J) is_closed_on s,P by SCMFSA7B:def 6;
  now
    set J1 = a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
    ";" I;
    let k be Element of NAT;
    assume
A30: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
    assume not pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
    then
A31: k <= pseudo-LifeSpan(s00,P00,I0) by NAT_1:13;
A32:  0 in dom if>0(a,I,J) by Th25;
A33:  P3/.IC s3 = P3.IC s3 by PBOOLE:143;
    CurInstr(P3,Comput(P3,s3,0))
      = P3. 0 by A33,MEMSTR_0:16
      .= if>0(a,I,J). 0 by A32,A2,GRFUNC_1:2
      .= a >0_goto  (card J + 3) by Th26;
    then consider k1 being Nat such that
A34: k1 + 1 = k by A30,NAT_1:6;
    reconsider k1 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
    k1 < k by A34,XREAL_1:29;
    then
A35: k1 < pseudo-LifeSpan(s00,P00,I0) by A31,XXREAL_0:2;
    then k1 < pseudo-LifeSpan(s,P,I0) by A19,Th21;
    then  n in dom I0 by A19,SCMFSA8A:17;
    then n < card I0 by AFINSQ_1:66;
    then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
    then
A36: n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
A37: IC Comput(P3, s3,k) = IC Comput(P3, s4,k1) by A34,EXTPRO_1:4
      .= IC Comput(P00, s00,k1) + (card J + 3) by A21,A13,A18,A15,A35,Th22,A1;
    card J1 = card (Macro (a >0_goto  (card J + 3)) ";" J ";" Goto
     (card I + 1)) + card I by SCMFSA6A:21
      .= card (Macro (a >0_goto  (card J + 3)) ";" J) + card Goto
     (card I + 1) + card I by SCMFSA6A:21
      .= card (Macro (a >0_goto  (card J + 3)) ";" J) + 1 + card I by
SCMFSA8A:15
      .= card Macro (a >0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
      .= 2 + card J + 1 + card I by COMPOS_1:56
      .= card I + card J + 3;
    then IC Comput(P3, s3,k) in dom J1 by A37,A36,AFINSQ_1:66;
    then
A38: IC Comput(P3, s3,k) in dom Directed J1 by FUNCT_4:99;
    then
A39: (Directed J1).IC Comput(P3, s3,k) in rng Directed J1 by FUNCT_1:def 3;
    card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
      .= card I + card J + 3 + 1;
    then card I + card J + 3 < card if>0(a,I,J) by XREAL_1:29;
    then n + (card J + 3) < card if>0(a,I,J) by A36,XXREAL_0:2;
    then
A40: IC Comput(P3, s3,k) in dom if>0(a,I,J) by A37,AFINSQ_1:66;
A41: CurInstr(P3,Comput(P3,s3,k))
 = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if>0(a,I,J).IC Comput(P3, s3,k) by A40,A2,GRFUNC_1:2;
    Directed J1 c= if>0(a,I,J) by A11,SCMFSA6A:16;
    then
    if>0(a,I,J).IC Comput(P3, s3,k) = (Directed J1).IC Comput(
P3, s3,
    k) by A38,GRFUNC_1:2;
    hence contradiction by A30,A39,A41,COMPOS_1:def 11;
  end;
  then LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,
I0) + 1 by A23,A24,EXTPRO_1:def 15;
  hence thesis by A19,A20,Th21;
end;

theorem Th40:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a
  being read-write Int-Location st s.intloc 0 = 1 & s.a > 0 & Directed I
  is_pseudo-closed_on s,P holds DataPart IExec(if>0(a,I,J),P,s)
   = DataPart IExec(I ";" Stop SCM+FSA,P,s)
proof
  let ss be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set I0 = Directed I;
  set s = Initialized ss;
  set I1 = I ";" Stop SCM+FSA;
  set s00 = Initialize s,
      P00 = P+*I0;
  set s3 = Initialize s,
      P3 = P +* if>0(a,I,J);
  set s4 = Comput(P3, s3,1);
  set i = a >0_goto  (card J + 3);
A1: I0 c= P00 by FUNCT_4:25;
A2: if>0(a,I,J) c= P3 by FUNCT_4:25;
  assume
A3: ss.intloc 0 = 1;
  set s1 = Initialize s,
      P1 = P +* I1;
  assume ss.a > 0;
  then
A4: s.a > 0 by SCMFSA_M:37;
A5: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A6: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A5,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
A7:  0 in dom if>0(a,I,J) by Th25;
A8: P3. 0 = (if>0(a,I,J)). 0
by A7,FUNCT_4:13
    .= i by Th26;
A9: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A6,A8,PBOOLE:143;
A10:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A10,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then
  s3.a = s.a by FUNCT_4:11;
  then
A11: IC Comput(P3,s3,1) =  (card J + 3) by A4,A9,SCMFSA_2:71;
  assume I0 is_pseudo-closed_on ss,P;
  then
A12: I0 is_pseudo-closed_on s,P by A3,Th24;
  then
A13: LifeSpan(P1,s1) = pseudo-LifeSpan(s,P,I0) by Th29;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A14: I0 is_pseudo-closed_on s00,P00 by A12,Th23;
A15: for f being FinSeq-Location holds s00.f = s4.f by A9,SCMFSA_2:71;
  for a being Int-Location holds s00.a = s4.a by A9,SCMFSA_2:71;
  then
A16: DataPart s00 = DataPart s4 by A15,SCMFSA_M:2;
  card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if>0(a,I,J) by NAT_1:13;
  then
A17:  (card I + card J + 3) in dom if>0(a,I,J) by AFINSQ_1:66;
A18: card (i ";" J ";" Goto  (card I + 1)) = card (Macro i ";" J) +
  card Goto  (card I + 1) by SCMFSA6A:21
    .= card (Macro i ";" J) + 1 by SCMFSA8A:15
    .= card Macro i + card J + 1 by SCMFSA6A:21
    .= card J + 2 + 1 by COMPOS_1:56
    .= card J + (2 + 1);
  s +*Initialize((intloc 0).-->1) = Initialize Initialized s
  by MEMSTR_0:44;
  then
A19: s +*Initialize((intloc 0).-->1) = s3;
A20: if>0(a,I,J) c= P3 by FUNCT_4:25;
A21: if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  then if>0(a,I,J) = i ";" J ";" Goto  (card I + 1) ";" I1 by SCMFSA6A:25;
  then
 Reloc(I1,card J + 3) c= if>0(a,I,J) by A18,FUNCT_4:25;
  then
A22: Reloc(I1,card J + 3) c= P3 by A20,XBOOLE_1:1;
  Reloc(I0,card J + 3) c= Reloc(I1,card J
  + 3) by COMPOS_1:44,SCMFSA6A:16;
  then
A23: Reloc(I0,card J + 3) c= P3 by A22,XBOOLE_1:1;
  IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) +
1) = IC Comput(
P3, s4,
  pseudo-LifeSpan(s00,P00,I0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00,I0)) + (card J + 3)
by A14,A23,A11,A16,Th22,A1
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,I0)
) + (card J + 3)
by A12,Th21
    .=  card I0 + (card J + 3) by A12,SCMFSA8A:def 4
    .=  (card I + (card J + 3)) by SCMFSA8A:20
    .=  (card I + card J + 3);
  then
A24: CurInstr(P3,
   Comput(P3, s3,pseudo-LifeSpan(s00,P00,I0) + 1))
     = P3. (card I + card J + 3) by PBOOLE:143
    .= if>0(a,I,J). (card I + card J + 3) by A17,A2,GRFUNC_1:2
    .= halt SCM+FSA by Th33;
  then
A25: P3 halts_on s3 by EXTPRO_1:29;
  now
    set J1 = a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
    ";" I;
    let k be Element of NAT;
    assume
A26: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
    assume not pseudo-LifeSpan(s00,P00,I0) + 1 <= k;
    then
A27: k <= pseudo-LifeSpan(s00,P00,I0) by NAT_1:13;
A28:  0 in dom if>0(a,I,J) by Th25;
A29:  P3/.IC s3 = P3.IC s3 by PBOOLE:143;
    CurInstr(P3,Comput(P3,s3,0))
      = P3. 0 by A29,MEMSTR_0:16
      .= if>0(a,I,J). 0 by A28,A2,GRFUNC_1:2
      .= a >0_goto  (card J + 3) by Th26;
    then consider k1 being Nat such that
A30: k1 + 1 = k by A26,NAT_1:6;
    reconsider k1 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k1) as Element of NAT;
    k1 < k by A30,XREAL_1:29;
    then
A31: k1 < pseudo-LifeSpan(s00,P00,I0) by A27,XXREAL_0:2;
    then k1 < pseudo-LifeSpan(s,P,I0) by A12,Th21;
    then  n in dom I0 by A12,SCMFSA8A:17;
    then n < card I0 by AFINSQ_1:66;
    then n + (card J + 3) < card I0 + (card J + 3) by XREAL_1:6;
    then
A32: n + (card J + 3) < card I + (card J + 3) by SCMFSA8A:20;
A33: IC Comput(P3, s3,k) = IC Comput(P3, s4,k1) by A30,EXTPRO_1:4
      .= IC Comput(P00, s00,k1) + (card J + 3) by A14,A23,A11,A16,A31,Th22,A1;
    card J1 = card (Macro (a >0_goto  (card J + 3)) ";" J ";" Goto
     (card I + 1)) + card I by SCMFSA6A:21
      .= card (Macro (a >0_goto  (card J + 3)) ";" J) + card Goto
     (card I + 1) + card I by SCMFSA6A:21
      .= card (Macro (a >0_goto  (card J + 3)) ";" J) + 1 + card I by
SCMFSA8A:15
      .= card Macro (a >0_goto  (card J + 3)) + card J + 1 + card I by
SCMFSA6A:21
      .= 2 + card J + 1 + card I by COMPOS_1:56
      .= card I + card J + 3;
    then IC Comput(P3, s3,k) in dom J1 by A33,A32,AFINSQ_1:66;
    then
A34: IC Comput(P3, s3,k) in dom Directed J1 by FUNCT_4:99;
    then
A35: (Directed J1).IC Comput(P3, s3,k) in rng Directed J1 by FUNCT_1:def 3;
    card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
      .= card I + card J + 3 + 1;
    then card I + card J + 3 < card if>0(a,I,J) by XREAL_1:29;
    then n + (card J + 3) < card if>0(a,I,J) by A32,XXREAL_0:2;
    then
A36: IC Comput(P3, s3,k) in dom if>0(a,I,J) by A33,AFINSQ_1:66;
A37: CurInstr(P3,Comput(P3,s3,k))
       = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if>0(a,I,J).IC Comput(P3, s3,k) by A36,A2,GRFUNC_1:2;
    Directed J1 c= if>0(a,I,J) by A21,SCMFSA6A:16;
    then
    if>0(a,I,J).IC Comput(P3, s3,k) = (Directed J1).IC Comput(
P3, s3,
    k) by A34,GRFUNC_1:2;
    hence contradiction by A26,A35,A37,COMPOS_1:def 11;
  end;
  then
A38: LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,I0)
+ 1 by A24,A25,EXTPRO_1:def 15;
A39: s +* Initialize((intloc 0).-->1) = Initialize Initialized s
           by MEMSTR_0:44;
A40: I0 ";" Stop SCM+FSA = I1 by SCMFSA8A:25;
  Directed I0 = I0 by SCMFSA6A:22;
  then
A41: DataPart Comput(P00, s00,pseudo-LifeSpan(s,P,
I0)) = DataPart
Comput(P1, s1,pseudo-LifeSpan(s,P,I0)) by A12,A40,Th29;
  I1 is_halting_on s,P by A12,Th29;
  then
A42: P1 halts_on s1 by SCMFSA7B:def 7;
  thus DataPart IExec(if>0(a,I,J),P,ss)
   = DataPart IExec(if>0(a,I,J),P,s)
    .= DataPart Result(P3,s3) by A19
    .= DataPart Comput(P3, s3,LifeSpan(P3,s3)) by A25,EXTPRO_1:23
    .= DataPart Comput(P3, s4,pseudo-LifeSpan(
s00,P00,I0)) by A38,EXTPRO_1:4
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(
s00,P00,I0)) by A14,A23,A11,A16,Th22,A1
    .= DataPart Comput(P1, s1,LifeSpan(P1,s1)) by A12,A13,A41,Th21
    .= DataPart(Result(P +* I1,s +*Initialize((intloc 0).-->1)))
          by A39,A42,EXTPRO_1:23
    .= DataPart IExec(I1,P,s)
    .= DataPart IExec(I1,P,ss);
end;

theorem Th41:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a
  being read-write Int-Location st s.a <> 0 &
   Directed J is_pseudo-closed_on s,P
holds if=0(a,I,J) is_halting_on s,P & if=0(a,I,J) is_closed_on s,P &
    LifeSpan(P +* if=0(a,I,J),Initialize s)
    = LifeSpan(P +* (J ";" Stop SCM+FSA),
      Initialize s) + 3
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set J0 = Directed J;
  set s0 = Initialized s;
  set J9 = J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA));
  set s00 = Initialize s,
      P00 = P+*J0;
  set s3 = Initialize s,
      P3 = P +* if=0(a,I,J);
  set s4 = Comput(P3, s3,1);
  set s5 = Comput(P3, s3,2);
  set i = a =0_goto  (card J + 3);
A1: if=0(a,I,J) c= P3 by FUNCT_4:25;
A2: J0 c= P00 by FUNCT_4:25;
  if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  then if=0(a,I,J) = Macro i ";" J ";" Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA) by SCMFSA6A:25;
  then if=0(a,I,J) = Macro i ";" J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA)) by SCMFSA6A:25;
  then
A3: if=0(a,I,J) = Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA))) by SCMFSA6A:25;
  card Macro i = 2 by COMPOS_1:56;
  then
A4: Reloc(J9,2) c= if=0(a,I,J) by A3,FUNCT_4:25;
A5:  0 in dom if=0(a,I,J) by Th25;
A6: P3. 0 = (if=0(a,I,J)). 0 by A5,FUNCT_4:13
    .= i by Th26;
  card if=0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:11
    .= card J + 2 + (card I + 2);
  then
A7: card J + 2 + 0 < card if=0(a,I,J) by XREAL_1:8;
  then
A8:  (card J + 2) in dom if=0(a,I,J) by AFINSQ_1:66;
A9: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A10: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A9,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
  set ss = Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2),
      PP = P3;
  if=0(a,I,J) c= P3 by FUNCT_4:25;
 then
A11: Reloc(J9,2) c= P3 by A4,XBOOLE_1:1;
 Reloc(J0,2) c= Reloc(J9,2) by COMPOS_1:44,SCMFSA6A:16;
  then
A12: Reloc(J0,2) c= P3 by A11,XBOOLE_1:1;
  card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if=0(a,I,J) by NAT_1:13;
  then
A13:  (card I + card J + 3) in dom if=0(a,I,J) by AFINSQ_1:66;
  assume s.a <> 0;
  then
A14: s0.a <> 0 by SCMFSA_M:37;
A15:  1 in dom if=0(a,I,J) by Th25;
  assume
A16: J0 is_pseudo-closed_on s,P;
  then
A17: pseudo-LifeSpan(s,P,J0) = LifeSpan(P +* (J ";" Stop SCM+FSA),
  Initialize s) by Th29;
A18: P3. 1 = (if=0(a,I,J)). 1
    by A15,FUNCT_4:13
    .= goto  2 by Th26;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A19: J0 is_pseudo-closed_on s00,P00 by A16,Th23;
A20: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A10,A6,PBOOLE:143;
A21:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A21,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then  s3.a = s.a by FUNCT_4:11
    .= s0.a by SCMFSA_M:37;
  then
A22: IC s4 = succ IC s3 by A14,A20,SCMFSA_2:70
    .=  (0 + 1) by A10;
A23: Comput(P3, s3,1+1) = Following(P3,s4) by EXTPRO_1:3
    .= Exec(goto  2,s4) by A22,A18,PBOOLE:143;
  then
A24: IC s5 =  2 by SCMFSA_2:69;
A25: now
    let f be FinSeq-Location;
    thus s00.f = s4.f by A20,SCMFSA_2:70
      .= s5.f by A23,SCMFSA_2:69;
  end;
  now
    let a be Int-Location;
    thus s00.a = s4.a by A20,SCMFSA_2:70
      .= s5.a by A23,SCMFSA_2:69;
  end;
  then
A26: DataPart s00 = DataPart s5 by A25,SCMFSA_M:2;
A27: IC ss = IC Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00,J0)) + 2
          by A19,A12,A24,A26,Th22,A2
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,J0)) + 2 by A16,Th21
    .= card J0 + 2 by A16,SCMFSA8A:def 4
    .= card J + 2 by SCMFSA8A:20;
  then
A28: CurInstr(P3,ss) = P3. (card J + 2) by PBOOLE:143
    .= if=0(a,I,J). (card J + 2) by A8,A1,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th34;
A29: IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1)
     = IC Following(P3,ss) by EXTPRO_1:3
    .= card I + card J + 3 by A28,SCMFSA_2:69;
  then
A30: CurInstr(P3,
      Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1))
     = P3. (card I + card J + 3) by PBOOLE:143
    .= if=0(a,I,J). (card I + card J + 3) by A13,A1,GRFUNC_1:2
    .= halt SCM+FSA by Th32;
  then
A31: P3 halts_on s3 by EXTPRO_1:29;
  hence if=0(a,I,J) is_halting_on s,P by SCMFSA7B:def 7;
  now
    let k be Element of NAT;
    per cases;
    suppose
      k = 0;
      then Comput(P3, s3,k) = s3 by EXTPRO_1:2;
      then IC Comput(P3, s3,k) =  0 by MEMSTR_0:16;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by Th25;
    end;
    suppose
      0 < k & k = 1;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A22,Th25;
    end;
    suppose
A32:  0 < k & k <> 1 & k < pseudo-LifeSpan(s00,P00,J0) + 2;
      then 0 + 1 <= k by INT_1:7;
      then 1 < k by A32,XXREAL_0:1;
      then 0 + (1 + 1) <= k by INT_1:7;
      then consider k2 being Nat such that
A33:  2 + k2 = k by NAT_1:10;
      card if=0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:11
        .= card J + 2 + (card I + 2);
      then
A34:  card J + 2 <= card if=0(a,I,J) by NAT_1:12;
      reconsider k2 as Element of NAT by ORDINAL1:def 12;
      reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
A35:  k2 < pseudo-LifeSpan(s00,P00,J0) by A32,A33,XREAL_1:6;
      then k2 < pseudo-LifeSpan(s,P,J0) by A16,Th21;
      then  n in dom J0 by A16,SCMFSA8A:17;
      then n < card J0 by AFINSQ_1:66;
      then n + 2 < card J0 + 2 by XREAL_1:6;
      then n + 2 < card J + 2 by SCMFSA8A:20;
      then
A36:  n + 2 < card if=0(a,I,J) by A34,XXREAL_0:2;
      IC Comput(P3, s3,k) = IC Comput(P3, s5,k2)
by A33,EXTPRO_1:4
        .= IC Comput(P00, s00,k2) + 2 by A19,A12,A24,A26,A35,Th22,A2;
      hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A36,AFINSQ_1:66;
    end;
    suppose
A37:  0 < k & k <> 1 & pseudo-LifeSpan(s00,P00,J0) + 2 <= k;
      hereby
        per cases by A37,XXREAL_0:1;
        suppose
          pseudo-LifeSpan(s00,P00,J0) + 2 = k;
          hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A7,A27,AFINSQ_1:66;
        end;
        suppose
          pseudo-LifeSpan(s00,P00,J0) + 2 < k;
          then pseudo-LifeSpan(s00,P00,J0) + 2 + 1 <= k by INT_1:7;
          hence IC Comput(P3, s3,k) in dom if=0(a,I,J) by A13,A29,A30,
EXTPRO_1:5;
        end;
      end;
    end;
  end;
  hence if=0(a,I,J) is_closed_on s,P by SCMFSA7B:def 6;
A38: CurInstr(P3,s3) = i by A10,A6,PBOOLE:143;
  now
A39: 0 + 2 < card I + card J + 3 by XREAL_1:8;
    then
A40:  2 in dom if=0(a,I,J) by Th27;
A41: CurInstr(P3,Comput(P3,s3,2)) = P3. 2 by A24,PBOOLE:143
      .= if=0(a,I,J). 2 by A40,A1,GRFUNC_1:2;
    let k be Element of NAT;
    assume
A42: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
A43: k <> 0 by A42,A38,EXTPRO_1:2;
A44:  k <> 1 by A22,A42,A18,PBOOLE:143;
    k <> 2 by A42,A39,Th27,A41;
    then 2 < k by A43,A44,NAT_1:26;
    then consider k2 being Nat such that
A45: 2 + k2 = k by NAT_1:10;
    reconsider k2 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
    assume not pseudo-LifeSpan(s00,P00,J0) + (1 + 2) <= k;
    then k < pseudo-LifeSpan(s00,P00,J0) + 1 + 2;
    then k2 < pseudo-LifeSpan(s00,P00,J0) + 1 by A45,XREAL_1:6;
    then
A46: k2 <= pseudo-LifeSpan(s00,P00,J0) by NAT_1:13;
    then
A47: k2 <= pseudo-LifeSpan(s,P,J0) by A16,Th21;
A48: now
      per cases by A47,XXREAL_0:1;
      suppose
A49:    k2 = pseudo-LifeSpan(s,P,J0);
        card I + card J + (2 + 1) = card J + 2 + 1 + card I;
        then
A50:    card J + 2 + 1 <= card I + card J + 3 by NAT_1:11;
        IC Comput(P00, s00,k2) =  card J0 by A16,A49,SCMFSA8A:def 4;
        then n = card J by SCMFSA8A:20;
        hence n + 2 < card I + card J + 3 by A50,NAT_1:13;
      end;
      suppose
        k2 < pseudo-LifeSpan(s,P,J0);
        then  n in dom J0 by A16,SCMFSA8A:17;
        then n < card J0 by AFINSQ_1:66;
        then n + 2 < card J0 + 2 by XREAL_1:6;
        then
A51:    n + 2 < card J + 2 by SCMFSA8A:20;
        card I + card J + (1 + 2) = card J + 2 + (card I + 1);
        then card J + 2 <= card I + card J + 3 by NAT_1:11;
        hence n + 2 < card I + card J + 3 by A51,XXREAL_0:2;
      end;
    end;
    then
A52:  (n + 2) in dom if=0(a,I,J) by Th27;
A53: IC Comput(P3, s3,k) = IC Comput(P3, s5,k2) by A45,EXTPRO_1:4
      .=  (n + 2) by A19,A12,A24,A26,A46,Th22,A2;
    CurInstr(P3,Comput(P3,s3,k))
     = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if=0(a,I,J).IC Comput(P3, s3,k) by A53,A52,A1,GRFUNC_1:2;
    hence contradiction by A42,A53,A48,Th27;
  end;
  then LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,
J0) + 3 by A30,A31,EXTPRO_1:def 15;
  hence thesis by A16,A17,Th21;
end;

theorem
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a being
  read-write Int-Location st s.intloc 0 = 1 & s.a <> 0 & Directed J
  is_pseudo-closed_on s,P holds
   DataPart IExec(if=0(a,I,J),P,s) = DataPart IExec(J ";" Stop SCM+FSA,P,s)
proof
  let ss be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set J0 = Directed J;
  set s = Initialized ss;
  set s0 = Initialized s;
  set J9 = J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA));
  set s00 = Initialize s,
      P00 = P+*J0;
  set s3 = Initialize s,
      P3 = P +* if=0(a,I,J);
  set s4 = Comput(P3, s3,1);
  set s5 = Comput(P3, s3,2);
  set i = a =0_goto  (card J + 3);
A1: J0 c= P00 by FUNCT_4:25;
A2: if=0(a,I,J) c= P3 by FUNCT_4:25;
  assume
A3: ss.intloc 0 = 1;
  set s1 = Initialize s,
      P1 = P +* (J ";" Stop SCM+FSA);
  assume ss.a <> 0;
  then
A4: s0.a <> 0 by SCMFSA_M:37;
A5:  0 in dom if=0(a,I,J) by Th25;
A6: P3. 0 = (if=0(a,I,J)). 0
by A5,FUNCT_4:13
    .= i by Th26;
  s +*Initialize((intloc 0).-->1) = Initialize Initialized s
  by MEMSTR_0:44;
  then
A7: s +*Initialize((intloc 0).-->1) = s3;
A8: J0 ";" Stop SCM+FSA = J ";" Stop SCM+FSA by SCMFSA8A:25;
A9: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A10: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A9,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
  if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  then if=0(a,I,J) = Macro i ";" J ";" Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA) by SCMFSA6A:25;
  then if=0(a,I,J) = Macro i ";" J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA)) by SCMFSA6A:25;
  then
A11: if=0(a,I,J) = Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA))) by SCMFSA6A:25;
  card Macro i = 2 by COMPOS_1:56;
  then
A12: Reloc(J9,2) c= if=0(a,I,J) by A11,FUNCT_4:25;
  if=0(a,I,J) c= P3 by FUNCT_4:25;
  then
A13: Reloc(J9,2) c= P3 by A12,XBOOLE_1:1;
 Reloc(J0,2) c= Reloc(J9,2) by COMPOS_1:44,SCMFSA6A:16;
  then
A14: Reloc(J0,2) c= P3 by A13,XBOOLE_1:1;
A15: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A10,A6,PBOOLE:143;
  assume J0 is_pseudo-closed_on ss,P;
  then
A16: J0 is_pseudo-closed_on s,P by A3,Th24;
  then J ";" Stop SCM+FSA is_halting_on s,P by Th29;
  then
A17: P1 halts_on s1 by SCMFSA7B:def 7;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A18: J0 is_pseudo-closed_on s00,P00 by A16,Th23;
  s +* Initialize((intloc 0).-->1)
   = Initialize Initialized s
           by MEMSTR_0:44;
  then
A19: s +* Initialize((intloc 0).-->1) = s1;
A20: Directed J0 = J0 by SCMFSA6A:22;
  card if=0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:11
    .= card J + 2 + (card I + 2);
  then card J + 2 + 0 < card if=0(a,I,J) by XREAL_1:8;
  then
A21:  (card J + 2) in dom if=0(a,I,J) by AFINSQ_1:66;
  card if=0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:11
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if=0(a,I,J) by NAT_1:13;
  then
A22:  (card I + card J + 3) in dom if=0(a,I,J) by AFINSQ_1:66;
  set s9 = Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2);
  LifeSpan(P1,s1) = pseudo-LifeSpan(s,P,J0) by A16,Th29;
  then
A23: DataPart Comput(P00, s00,pseudo-LifeSpan(s,P,J0)) = DataPart
Comput(P1, s1,LifeSpan(P1,s1)) by A16,A20,A8,Th29;
A24:  1 in dom if=0(a,I,J) by Th25;
A25:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A25,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then  s3.a = s0.a by FUNCT_4:11;
  then
A26: IC s4 = succ IC s3 by A4,A15,SCMFSA_2:70
    .=  (0 + 1) by A10;
A27: P3. 1
    = (if=0(a,I,J)). 1
    by A24,FUNCT_4:13
    .= goto  2 by Th26;
A28: Comput(P3, s3,1+1) = Following(P3,s4) by EXTPRO_1:3
    .= Exec(goto  2,s4) by A26,A27,PBOOLE:143;
  then
A29: IC s5 =  2 by SCMFSA_2:69;
A30: now
    let f be FinSeq-Location;
    thus s00.f = s4.f by A15,SCMFSA_2:70
      .= s5.f by A28,SCMFSA_2:69;
  end;
  now
    let a be Int-Location;
    thus s00.a = s4.a by A15,SCMFSA_2:70
      .= s5.a by A28,SCMFSA_2:69;
  end;
  then
A31: DataPart s00 = DataPart s5 by A30,SCMFSA_M:2;
A32: IC s9 = IC Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00
,J0)) + 2 by A18,A14,A29,A31,Th22,A1
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,J0)
) + 2 by A16,Th21
    .=  card J0 + 2 by A16,SCMFSA8A:def 4
    .=  (card J + 2) by SCMFSA8A:20;
  then
A33: CurInstr(P3,s9) = P3. (card J + 2) by PBOOLE:143
    .= if=0(a,I,J). (card J + 2) by A21,A2,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th34;
  IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1)
     = IC Following(P3,s9) by EXTPRO_1:3
    .= card I + card J + 3 by A33,SCMFSA_2:69;
  then
A34: CurInstr(P3,
   Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1))
     = P3.(card I + card J + 3) by PBOOLE:143
    .= if=0(a,I,J). (card I + card J + 3) by A22,A2,GRFUNC_1:2
    .= halt SCM+FSA by Th32;
  then
A35: P3 halts_on s3 by EXTPRO_1:29;
A36: CurInstr(P3,s3) = i by A10,A6,PBOOLE:143;
  now
A37: 0 + 2 < card I + card J + 3 by XREAL_1:8;
    then
A38:  2 in dom if=0(a,I,J) by Th27;
A39: if=0(a,I,J). 2 <> halt SCM+FSA by A37,Th27;
A40: CurInstr(P3,Comput(P3,s3,2)) = P3. 2 by A29,PBOOLE:143
      .= if=0(a,I,J). 2 by A38,A2,GRFUNC_1:2;
    let k be Element of NAT;
    assume
A41: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
A42: k <> 0 by A41,A36,EXTPRO_1:2;
A43:    k <> 1 by A26,A27,A41,PBOOLE:143;
    2 < k by A42,A43,A41,A39,A40,NAT_1:26;
    then consider k2 being Nat such that
A44: 2 + k2 = k by NAT_1:10;
    reconsider k2 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
    assume not pseudo-LifeSpan(s00,P00,J0) + (1 + 2) <= k;
    then k < pseudo-LifeSpan(s00,P00,J0) + 1 + 2;
    then k2 < pseudo-LifeSpan(s00,P00,J0) + 1 by A44,XREAL_1:6;
    then
A45: k2 <= pseudo-LifeSpan(s00,P00,J0) by NAT_1:13;
    then
A46: k2 <= pseudo-LifeSpan(s,P,J0) by A16,Th21;
A47: now
      per cases by A46,XXREAL_0:1;
      suppose
A48:    k2 = pseudo-LifeSpan(s,P,J0);
        card I + card J + (2 + 1) = card J + 2 + 1 + card I;
        then
A49:    card J + 2 + 1 <= card I + card J + 3 by NAT_1:11;
        IC Comput(P00, s00,k2) =  card J0 by A16,A48,SCMFSA8A:def 4;
        then n = card J by SCMFSA8A:20;
        hence n + 2 < card I + card J + 3 by A49,NAT_1:13;
      end;
      suppose
        k2 < pseudo-LifeSpan(s,P,J0);
        then  n in dom J0 by A16,SCMFSA8A:17;
        then n < card J0 by AFINSQ_1:66;
        then n + 2 < card J0 + 2 by XREAL_1:6;
        then
A50:    n + 2 < card J + 2 by SCMFSA8A:20;
        card I + card J + (1 + 2) = card J + 2 + (card I + 1);
        then card J + 2 <= card I + card J + 3 by NAT_1:11;
        hence n + 2 < card I + card J + 3 by A50,XXREAL_0:2;
      end;
    end;
    then
A51:  (n + 2) in dom if=0(a,I,J) by Th27;
A52: IC Comput(P3, s3,k) = IC Comput(P3, s5,k2) by A44,EXTPRO_1:4
      .=  (n + 2) by A18,A14,A29,A31,A45,Th22,A1;
    CurInstr(P3,Comput(P3,s3,k))
     = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if=0(a,I,J).IC Comput(P3, s3,k) by A52,A51,A2,GRFUNC_1:2;
    hence contradiction by A41,A52,A47,Th27;
  end;
  then
A53: LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,J0)
+ 2 + 1 by A34,A35,EXTPRO_1:def 15;
  CurInstr(P3,s9) = P3. (card J + 2) by A32,PBOOLE:143
    .= if=0(a,I,J). (card J + 2) by A21,A2,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th34;
  then InsCode CurInstr(P3,s9) = 6 by SCMFSA_2:23;
  then InsCode CurInstr(P3,s9) in {0,6,7,8} by ENUMSET1:def 2;
  then
A54: DataPart s9 = DataPart Following(P3,s9) by Th12;
A55: DataPart s9 = DataPart Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)
) by EXTPRO_1:4
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(
s00,P00,J0)) by A18,A14,A29,A31,Th22,A1;
  thus DataPart IExec(if=0(a,I,J),P,ss)
   = DataPart IExec(if=0(a,I,J),P,s)
    .= DataPart Result(P3,s3) by A7
    .= DataPart Comput(P3, s3,LifeSpan(P3,s3)) by A35,EXTPRO_1:23
    .= DataPart Following(P3,s9) by A53,EXTPRO_1:3
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(s,P,J0))
             by A16,A55,A54,Th21
    .= DataPart Result(P1,s1) by A17,A23,EXTPRO_1:23
    .= DataPart IExec(J ";" Stop SCM+FSA,P,s) by A19
    .= DataPart IExec(J ";" Stop SCM+FSA,P,ss);
end;

theorem Th43:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a
  being read-write Int-Location st s.a <= 0 &
   Directed J is_pseudo-closed_on s,P
holds if>0(a,I,J) is_halting_on s,P & if>0(a,I,J) is_closed_on s,P &
  LifeSpan(P +* if>0(a,I,J),s +* (Start-At(0,SCM+FSA))) =
  LifeSpan(P +* (J ";" Stop SCM+FSA),
  Initialize s) + 3
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set J0 = Directed J;
  set s0 = Initialized s;
  set J9 = J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA));
  set s00 = Initialize s,
      P00 = P+*J0;
  set s3 = Initialize s,
      P3 = P +* if>0(a,I,J);
A1: if>0(a,I,J) c= P3 by FUNCT_4:25;
  set s4 = Comput(P3, s3,1);
  set s5 = Comput(P3, s3,2);
  set i = a >0_goto  (card J + 3);
A2: J0 c= P00 by FUNCT_4:25;
  if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  then if>0(a,I,J) = Macro i ";" J ";" Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA) by SCMFSA6A:25;
  then if>0(a,I,J) = Macro i ";" J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA)) by SCMFSA6A:25;
  then
A3: if>0(a,I,J) = Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA))) by SCMFSA6A:25;
  card Macro i = 2 by COMPOS_1:56;
  then
A4: Reloc(J9,2) c= if>0(a,I,J) by A3,FUNCT_4:25;
A5:  0 in dom if>0(a,I,J) by Th25;
A6: P3. 0 = (if>0(a,I,J)). 0 by A5,FUNCT_4:13
    .= i by Th26;
  card if>0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:12
    .= card J + 2 + (card I + 2);
  then
A7: card J + 2 + 0 < card if>0(a,I,J) by XREAL_1:8;
  then
A8:  (card J + 2) in dom if>0(a,I,J) by AFINSQ_1:66;
A9: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A10: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A9,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
  set ss = Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2),
      PP = P3;
  if>0(a,I,J) c= P3 by FUNCT_4:25;
  then
A11: Reloc(J9,2) c= P3 by A4,XBOOLE_1:1;
 Reloc(J0,2) c= Reloc(J9,2) by COMPOS_1:44,SCMFSA6A:16;
  then
A12: Reloc(J0,2) c= P3 by A11,XBOOLE_1:1;
  card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if>0(a,I,J) by NAT_1:13;
  then
A13:  (card I + card J + 3) in dom if>0(a,I,J) by AFINSQ_1:66;
  assume s.a <= 0;
  then
A14: s0.a <= 0 by SCMFSA_M:37;
A15:  1 in dom if>0(a,I,J) by Th25;
  assume
A16: J0 is_pseudo-closed_on s,P;
  then
A17: pseudo-LifeSpan(s,P,J0) = LifeSpan(P +* (J ";" Stop SCM+FSA),
Initialize s) by Th29;
A18: P3. 1  = (if>0(a,I,J)). 1
    by A15,FUNCT_4:13
    .= goto  2 by Th26;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A19: J0 is_pseudo-closed_on s00,P00 by A16,Th23;
A20: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A10,A6,PBOOLE:143;
A21:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A21,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then  s3.a = s.a by FUNCT_4:11
    .= s0.a by SCMFSA_M:37;
  then
A22: IC s4 = succ IC s3 by A14,A20,SCMFSA_2:71
    .=  (0 + 1) by A10;
A23: Comput(P3, s3,1+1) = Following(P3,s4) by EXTPRO_1:3
    .= Exec(goto  2,s4) by A22,A18,PBOOLE:143;
  then
A24: IC s5 =  2 by SCMFSA_2:69;
A25: now
    let f be FinSeq-Location;
    thus s00.f = s4.f by A20,SCMFSA_2:71
      .= s5.f by A23,SCMFSA_2:69;
  end;
  now
    let a be Int-Location;
    thus s00.a = s4.a by A20,SCMFSA_2:71
      .= s5.a by A23,SCMFSA_2:69;
  end;
  then
A26: DataPart s00 = DataPart s5 by A25,SCMFSA_M:2;
A27: IC ss = IC Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00
,J0)) + 2 by A19,A12,A24,A26,Th22,A2
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,J0)
) + 2 by A16,Th21
    .=  card J0 + 2 by A16,SCMFSA8A:def 4
    .=  (card J + 2) by SCMFSA8A:20;
  then
A28: CurInstr(P3,ss) = P3. (card J + 2) by PBOOLE:143
    .= if>0(a,I,J). (card J + 2) by A8,A1,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th35;
A29: IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1)
     = IC Following(P3,ss) by EXTPRO_1:3
    .=  (card I + card J + 3) by A28,SCMFSA_2:69;
  then
A30: CurInstr(P3,Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1))
     = P3. (card I + card J + 3) by PBOOLE:143
    .= if>0(a,I,J). (card I + card J + 3) by A13,A1,GRFUNC_1:2
    .= halt SCM+FSA by Th33;
  then
A31: P3 halts_on s3 by EXTPRO_1:29;
  hence if>0(a,I,J) is_halting_on s,P by SCMFSA7B:def 7;
  now
    let k be Element of NAT;
    per cases;
    suppose
      k = 0;
      then Comput(P3, s3,k) = s3 by EXTPRO_1:2;
      then IC Comput(P3, s3,k) =  0 by MEMSTR_0:16;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by Th25;
    end;
    suppose
      0 < k & k = 1;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A22,Th25;
    end;
    suppose
A32:  0 < k & k <> 1 & k < pseudo-LifeSpan(s00,P00,J0) + 2;
      then 0 + 1 <= k by INT_1:7;
      then 1 < k by A32,XXREAL_0:1;
      then 0 + (1 + 1) <= k by INT_1:7;
      then consider k2 being Nat such that
A33:  2 + k2 = k by NAT_1:10;
      card if>0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:12
        .= card J + 2 + (card I + 2);
      then
A34:  card J + 2 <= card if>0(a,I,J) by NAT_1:12;
      reconsider k2 as Element of NAT by ORDINAL1:def 12;
      reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
A35:  k2 < pseudo-LifeSpan(s00,P00,J0) by A32,A33,XREAL_1:6;
      then k2 < pseudo-LifeSpan(s,P,J0) by A16,Th21;
      then  n in dom J0 by A16,SCMFSA8A:17;
      then n < card J0 by AFINSQ_1:66;
      then n + 2 < card J0 + 2 by XREAL_1:6;
      then n + 2 < card J + 2 by SCMFSA8A:20;
      then
A36:  n + 2 < card if>0(a,I,J) by A34,XXREAL_0:2;
      IC Comput(P3, s3,k) = IC Comput(P3, s5,k2)
by A33,EXTPRO_1:4
        .= IC Comput(P00, s00,k2) + 2 by A19,A12,A24,A26,A35,Th22,A2;
      hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A36,AFINSQ_1:66;
    end;
    suppose
A37:  0 < k & k <> 1 & pseudo-LifeSpan(s00,P00,J0) + 2 <= k;
      hereby
        per cases by A37,XXREAL_0:1;
        suppose
          pseudo-LifeSpan(s00,P00,J0) + 2 = k;
          hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A7,A27,AFINSQ_1:66;
        end;
        suppose
          pseudo-LifeSpan(s00,P00,J0) + 2 < k;
          then pseudo-LifeSpan(s00,P00,J0) + 2 + 1 <= k by INT_1:7;
          hence IC Comput(P3, s3,k) in dom if>0(a,I,J) by A13,A29,A30,
EXTPRO_1:5;
        end;
      end;
    end;
  end;
  hence if>0(a,I,J) is_closed_on s,P by SCMFSA7B:def 6;
A38: CurInstr(P3,s3) = i by A10,A6,PBOOLE:143;
  now
A39: 0 + 2 < card I + card J + 3 by XREAL_1:8;
    then
A40:  2 in dom if>0(a,I,J) by Th28;
A41: CurInstr(P3,Comput(P3,s3,2)) = P3. 2 by A24,PBOOLE:143
      .= if>0(a,I,J). 2 by A40,A1,GRFUNC_1:2;
    let k be Element of NAT;
    assume
A42: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
A43: k <> 0 by A42,A38,EXTPRO_1:2;
A44:    k <> 1 by A22,A42,A18,PBOOLE:143;
    2 <> k by A42,A39,Th28,A41;
    then 2 < k by A43,A44,NAT_1:26;
    then consider k2 being Nat such that
A45: 2 + k2 = k by NAT_1:10;
    reconsider k2 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
    assume not pseudo-LifeSpan(s00,P00,J0) + (1 + 2) <= k;
    then k < pseudo-LifeSpan(s00,P00,J0) + 1 + 2;
    then k2 < pseudo-LifeSpan(s00,P00,J0) + 1 by A45,XREAL_1:6;
    then
A46: k2 <= pseudo-LifeSpan(s00,P00,J0) by NAT_1:13;
    then
A47: k2 <= pseudo-LifeSpan(s,P,J0) by A16,Th21;
A48: now
      per cases by A47,XXREAL_0:1;
      suppose
A49:    k2 = pseudo-LifeSpan(s,P,J0);
        card I + card J + (2 + 1) = card J + 2 + 1 + card I;
        then
A50:    card J + 2 + 1 <= card I + card J + 3 by NAT_1:11;
        IC Comput(P00, s00,k2) =  card J0 by A16,A49,SCMFSA8A:def 4;
        then n = card J by SCMFSA8A:20;
        hence n + 2 < card I + card J + 3 by A50,NAT_1:13;
      end;
      suppose
        k2 < pseudo-LifeSpan(s,P,J0);
        then  n in dom J0 by A16,SCMFSA8A:17;
        then n < card J0 by AFINSQ_1:66;
        then n + 2 < card J0 + 2 by XREAL_1:6;
        then
A51:    n + 2 < card J + 2 by SCMFSA8A:20;
        card I + card J + (1 + 2) = card J + 2 + (card I + 1);
        then card J + 2 <= card I + card J + 3 by NAT_1:11;
        hence n + 2 < card I + card J + 3 by A51,XXREAL_0:2;
      end;
    end;
    then
A52:  (n + 2) in dom if>0(a,I,J) by Th28;
A53: IC Comput(P3, s3,k) = IC Comput(P3, s5,k2) by A45,EXTPRO_1:4
      .=  (n + 2) by A19,A12,A24,A26,A46,Th22,A2;
    CurInstr(P3,Comput(P3,s3,k))
     = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if>0(a,I,J).IC Comput(P3, s3,k) by A53,A52,A1,GRFUNC_1:2;
    hence contradiction by A42,A53,A48,Th28;
  end;
  then LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,
J0) + 3 by A30,A31,EXTPRO_1:def 15;
  hence thesis by A16,A17,Th21;
end;

theorem Th44:
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a
  being read-write Int-Location st s.intloc 0 = 1 & s.a <= 0 & Directed J
  is_pseudo-closed_on s,P holds
   DataPart IExec(if>0(a,I,J),P,s) = DataPart IExec(J
  ";" Stop SCM+FSA,P,s)
proof
  let ss be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  set J0 = Directed J;
  set s = Initialized ss;
  set s0 = Initialized s;
  set J9 = J ";" (Goto  (card I + 1) ";" (I ";" Stop SCM+FSA));
  set s00 = Initialize s,
      P00 = P+*J0;
  set s3 = Initialize s,
      P3 = P +* if>0(a,I,J);
  set s4 = Comput(P3, s3,1);
  set s5 = Comput(P3, s3,2);
  set i = a >0_goto  (card J + 3);
A1: if>0(a,I,J) c= P3 by FUNCT_4:25;
A2: J0 c= P00 by FUNCT_4:25;
  assume
A3: ss.intloc 0 = 1;
  set s1 = Initialize s,
     P1 = P +* (J ";" Stop SCM+FSA);
  assume ss.a <= 0;
  then
A4: s0.a <= 0 by SCMFSA_M:37;
A5:  0 in dom if>0(a,I,J) by Th25;
A6: P3. 0 = (if>0(a,I,J)). 0
by A5,FUNCT_4:13
    .= i by Th26;
  s +*Initialize((intloc 0).-->1) = Initialize Initialized s
  by MEMSTR_0:44;
  then
A7: s +*Initialize((intloc 0).-->1) = s3;
A8: J0 ";" Stop SCM+FSA = J ";" Stop SCM+FSA by SCMFSA8A:25;
A9: IC SCM+FSA in dom Start-At(0,SCM+FSA) by MEMSTR_0:15;
A10: IC s3 = IC(Initialize s)
      .= IC Start-At(0,SCM+FSA) by A9,FUNCT_4:13
      .=  0 by FUNCOP_1:72;
  if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  then if>0(a,I,J) = Macro i ";" J ";" Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA) by SCMFSA6A:25;
  then if>0(a,I,J) = Macro i ";" J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA)) by SCMFSA6A:25;
  then
A11: if>0(a,I,J) = Macro i ";" (J ";" (Goto  (card I + 1) ";" (I ";"
  Stop SCM+FSA))) by SCMFSA6A:25;
  card Macro i = 2 by COMPOS_1:56;
  then
A12: Reloc(J9,2) c= if>0(a,I,J) by A11,FUNCT_4:25;
A13: Reloc(J0,2) c= Reloc(J9,2) by COMPOS_1:44,SCMFSA6A:16;
   Reloc(J0,2) c= if>0(a,I,J) by A12,A13,XBOOLE_1:1;
   then
A14: Reloc(J0,2) c= P3 by A1,XBOOLE_1:1;
A15: Comput(P3, s3,0+1) = Following(P3,Comput(P3,s3,0)) by EXTPRO_1:3
    .= Following(P3,s3)
    .= Exec(i,s3) by A10,A6,PBOOLE:143;
  assume J0 is_pseudo-closed_on ss,P;
  then
A16: J0 is_pseudo-closed_on s,P by A3,Th24;
  then J ";" Stop SCM+FSA is_halting_on s,P by Th29;
  then
A17: P1 halts_on s1 by SCMFSA7B:def 7;
  DataPart s = DataPart s00 by MEMSTR_0:79;
  then
A18: J0 is_pseudo-closed_on s00,P00 by A16,Th23;
  s +* Initialize((intloc 0).-->1)
   = Initialize Initialized s
           by MEMSTR_0:44;
  then
A19: s +* Initialize((intloc 0).-->1) = s1;
A20: Directed J0 = J0 by SCMFSA6A:22;
  card if>0(a,I,J) = card I + card J + (2 + 2) by SCMFSA8B:12
    .= card J + 2 + (card I + 2);
  then card J + 2 + 0 < card if>0(a,I,J) by XREAL_1:8;
  then
A21:  (card J + 2) in dom if>0(a,I,J) by AFINSQ_1:66;
  card if>0(a,I,J) = card I + card J + (3 + 1) by SCMFSA8B:12
    .= card I + card J + 3 + 1;
  then card I + card J + 3 < card if>0(a,I,J) by NAT_1:13;
  then
A22:  (card I + card J + 3) in dom if>0(a,I,J) by AFINSQ_1:66;
  set s9 = Comput(P3, s3,pseudo-LifeSpan(s00,P00,
J0) + 2);
  LifeSpan(P1,s1) = pseudo-LifeSpan(s,P,J0) by A16,Th29;
  then
A23: DataPart Comput(P00, s00,pseudo-LifeSpan(s,P
,J0)) = DataPart
Comput(P1, s1,LifeSpan(P1,s1)) by A16,A20,A8,Th29;
A24:  1 in dom if>0(a,I,J) by Th25;
A25:  a <> IC SCM+FSA by SCMFSA_2:56;
    dom Start-At(0,SCM+FSA) = {IC SCM+FSA} by FUNCOP_1:13;
    then not a in dom Start-At(0,SCM+FSA) by A25,TARSKI:def 1;
   then
 not a in dom Start-At(0,SCM+FSA);
  then  s3.a = s0.a by FUNCT_4:11;
  then
A26: IC s4 = succ IC s3 by A4,A15,SCMFSA_2:71
    .=  (0 + 1) by A10;
A27: P3. 1
    = (if>0(a,I,J)). 1
    by A24,FUNCT_4:13
    .= goto  2 by Th26;
A28: Comput(P3, s3,1+1) = Following(P3,s4) by EXTPRO_1:3
    .= Exec(goto  2,s4) by A26,A27,PBOOLE:143;
  then
A29: IC s5 =  2 by SCMFSA_2:69;
A30: now
    let f be FinSeq-Location;
    thus s00.f = s4.f by A15,SCMFSA_2:71
      .= s5.f by A28,SCMFSA_2:69;
  end;
  now
    let a be Int-Location;
    thus s00.a = s4.a by A15,SCMFSA_2:71
      .= s5.a by A28,SCMFSA_2:69;
  end;
  then
A31: DataPart s00 = DataPart s5 by A30,SCMFSA_M:2;
A32: IC s9 = IC Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)) by EXTPRO_1:4
    .= IC Comput(P00, s00,pseudo-LifeSpan(s00,P00
,J0)) + 2 by A18,A29,A31,Th22,A2,A14
    .= IC Comput(P00, s00,pseudo-LifeSpan(s,P,J0)
) + 2 by A16,Th21
    .=  card J0 + 2 by A16,SCMFSA8A:def 4
    .=  (card J + 2) by SCMFSA8A:20;
  then
A33: CurInstr(P3,s9) = P3. (card J + 2) by PBOOLE:143
    .= if>0(a,I,J). (card J + 2) by A21,A1,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th35;
  IC Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1)
     = IC Following(P3,s9) by EXTPRO_1:3
    .= card I + card J + 3 by A33,SCMFSA_2:69;
  then
A34: CurInstr(P3,
  Comput(P3, s3,pseudo-LifeSpan(s00,P00,J0) + 2 + 1))
     = P3. (card I + card J + 3) by PBOOLE:143
    .= if>0(a,I,J). (card I + card J + 3) by A22,A1,GRFUNC_1:2
    .= halt SCM+FSA by Th33;
  then
A35: P3 halts_on s3 by EXTPRO_1:29;
A36: CurInstr(P3,s3) = i by A10,A6,PBOOLE:143;
  now
A37: 0 + 2 < card I + card J + 3 by XREAL_1:8;
    then
A38:  2 in dom if>0(a,I,J) by Th28;
A39: CurInstr(P3,Comput(P3,s3,2)) = P3. 2 by A29,PBOOLE:143
      .= if>0(a,I,J). 2 by A38,A1,GRFUNC_1:2;
    let k be Element of NAT;
    assume
A40: CurInstr(P3,Comput(P3,s3,k)) = halt SCM+FSA;
A41: k <> 0 by A40,A36,EXTPRO_1:2;
A42:    k <> 1 by A26,A27,A40,PBOOLE:143;
    2 <> k by A40,A37,Th28,A39;
    then 2 < k by A41,A42,NAT_1:26;
    then consider k2 being Nat such that
A43: 2 + k2 = k by NAT_1:10;
    reconsider k2 as Element of NAT by ORDINAL1:def 12;
    reconsider n = IC Comput(P00, s00,k2) as Element of NAT;
    assume not pseudo-LifeSpan(s00,P00,J0) + (1 + 2) <= k;
    then k < pseudo-LifeSpan(s00,P00,J0) + 1 + 2;
    then k2 < pseudo-LifeSpan(s00,P00,J0) + 1 by A43,XREAL_1:6;
    then
A44: k2 <= pseudo-LifeSpan(s00,P00,J0) by NAT_1:13;
    then
A45: k2 <= pseudo-LifeSpan(s,P,J0) by A16,Th21;
A46: now
      per cases by A45,XXREAL_0:1;
      suppose
A47:    k2 = pseudo-LifeSpan(s,P,J0);
        card I + card J + (2 + 1) = card J + 2 + 1 + card I;
        then
A48:    card J + 2 + 1 <= card I + card J + 3 by NAT_1:11;
        IC Comput(P00, s00,k2) =  card J0 by A16,A47,SCMFSA8A:def 4;
        then n = card J by SCMFSA8A:20;
        hence n + 2 < card I + card J + 3 by A48,NAT_1:13;
      end;
      suppose
        k2 < pseudo-LifeSpan(s,P,J0);
        then  n in dom J0 by A16,SCMFSA8A:17;
        then n < card J0 by AFINSQ_1:66;
        then n + 2 < card J0 + 2 by XREAL_1:6;
        then
A49:    n + 2 < card J + 2 by SCMFSA8A:20;
        card I + card J + (1 + 2) = card J + 2 + (card I + 1);
        then card J + 2 <= card I + card J + 3 by NAT_1:11;
        hence n + 2 < card I + card J + 3 by A49,XXREAL_0:2;
      end;
    end;
    then
A50:  (n + 2) in dom if>0(a,I,J) by Th28;
A51: IC Comput(P3, s3,k) = IC Comput(P3, s5,k2) by A43,EXTPRO_1:4
      .=  (n + 2) by A18,A29,A31,A44,Th22,A2,A14;
    CurInstr(P3,Comput(P3,s3,k))
     = P3.IC Comput(P3, s3,k) by PBOOLE:143
      .= if>0(a,I,J).IC Comput(P3, s3,k) by A51,A50,A1,GRFUNC_1:2;
    hence contradiction by A40,A51,A46,Th28;
  end;
  then
A52: LifeSpan(P3,s3) = pseudo-LifeSpan(s00,P00,J0)
+ 2 + 1 by A34,A35,EXTPRO_1:def 15;
  CurInstr(P3,s9) = P3. (card J + 2) by A32,PBOOLE:143
    .= if>0(a,I,J). (card J + 2) by A21,A1,GRFUNC_1:2
    .= goto  (card I + card J + 3) by Th35;
  then InsCode CurInstr(P3,s9) = 6 by SCMFSA_2:23;
  then InsCode CurInstr(P3,s9) in {0,6,7,8} by ENUMSET1:def 2;
  then
A53: DataPart s9 = DataPart Following(P3,s9) by Th12;
A54: DataPart s9 = DataPart Comput(P3, s5,pseudo-LifeSpan(
s00,P00,J0)
) by EXTPRO_1:4
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(
s00,P00,J0)) by A18,A29,A31,Th22,A2,A14;
  thus DataPart IExec(if>0(a,I,J),P,ss)
   = DataPart IExec(if>0(a,I,J),P,s)
    .= DataPart(Result(P3,s3)) by A7
    .= DataPart Comput(P3, s3,LifeSpan(P3,s3)) by A35,EXTPRO_1:23
    .= DataPart Following(P3,s9) by A52,EXTPRO_1:3
    .= DataPart Comput(P00, s00,pseudo-LifeSpan(s,P,J0)) by A16,A54,A53,Th21
    .= DataPart Result(P1,s1) by A17,A23,EXTPRO_1:23
    .= DataPart IExec(J ";" Stop SCM+FSA,P,s) by A19
    .= DataPart IExec(J ";" Stop SCM+FSA,P,ss);
end;

theorem
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a being
  read-write Int-Location st Directed I is_pseudo-closed_on s,P & Directed J
  is_pseudo-closed_on s,P holds if=0(a,I,J) is_closed_on s,P & if=0(a,I,J)
  is_halting_on s,P
proof
  let s be State of SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: Directed I is_pseudo-closed_on s,P;
  assume
A2: Directed J is_pseudo-closed_on s,P;
  hereby
    per cases;
    suppose
A3:   s.a = 0;
      hence if=0(a,I,J) is_closed_on s,P by A1,Th37;
      thus if=0(a,I,J) is_halting_on s,P by A1,A3,Th37;
    end;
    suppose
A4:   s.a <> 0;
      hence if=0(a,I,J) is_closed_on s,P by A2,Th41;
      thus if=0(a,I,J) is_halting_on s,P by A2,A4,Th41;
    end;
  end;
end;

theorem
  for s being State of SCM+FSA, I,J being Program of SCM+FSA, a being
  read-write Int-Location st Directed I is_pseudo-closed_on s,P & Directed J
  is_pseudo-closed_on s,P holds if>0(a,I,J) is_closed_on s,P & if>0(a,I,J)
  is_halting_on s,P
proof
  let s be State of SCM+FSA;
  let I,J be Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: Directed I is_pseudo-closed_on s,P;
  assume
A2: Directed J is_pseudo-closed_on s,P;
  hereby
    per cases;
    suppose
A3:   s.a > 0;
      hence if>0(a,I,J) is_closed_on s,P by A1,Th39;
      thus if>0(a,I,J) is_halting_on s,P by A1,A3,Th39;
    end;
    suppose
A4:   s.a <= 0;
      hence if>0(a,I,J) is_closed_on s,P by A2,Th43;
      thus if>0(a,I,J) is_halting_on s,P by A2,A4,Th43;
    end;
  end;
end;

theorem
  for I being Program of SCM+FSA, a being Int-Location holds I
  does not destroy a implies Directed I does not destroy a by SCMFSA8A:13;

theorem Th48:
  for i being Instruction of SCM+FSA, a being Int-Location holds i
  does not destroy a implies Macro i does not destroy a
proof
  let i be Instruction of SCM+FSA;
  let a be Int-Location;
A1: rng Macro i = {i,halt SCM+FSA} by COMPOS_1:67;
  assume
A2: i does not destroy a;
  now
    let ii be Instruction of SCM+FSA;
    assume ii in rng Macro i;
    then ii = i or ii = halt SCM+FSA by A1,TARSKI:def 2;
    hence ii does not destroy a by A2,SCMFSA7B:5;
  end;
  hence thesis by SCMFSA7B:def 4;
end;

theorem Th49:
  for a being Int-Location holds halt SCM+FSA does not refer a
proof
  let a be Int-Location;
  for b be Int-Location for l be Element of NAT for f be
  FinSeq-Location holds b := a <> halt SCM+FSA & AddTo(b,a) <> halt SCM+FSA &
  SubFrom(b,a) <> halt SCM+FSA & MultBy(b,a) <> halt SCM+FSA & Divide(a,b) <>
  halt SCM+FSA & Divide(b,a) <> halt SCM+FSA & a =0_goto l <> halt SCM+FSA & a
  >0_goto l <> halt SCM+FSA & b :=(f,a) <> halt SCM+FSA & (f,b):= a <> halt
  SCM+FSA & (f,a):= b <> halt SCM+FSA & f :=<0,...,0> a <> halt SCM+FSA;
  hence thesis by SCMFSA7B:def 1;
end;

theorem
  for a,b,c being Int-Location holds a <> b implies AddTo(c,b)
  does not refer a
proof
  let a,b,c be Int-Location;
  assume
A1: a <> b;
  now
    let e be Int-Location;
    let l be Element of NAT;
    let f be FinSeq-Location;
A2: InsCode AddTo(c,b) = 2 by SCMFSA_2:19;
    hence e := a <> AddTo(c,b) by SCMFSA_2:18;
    thus AddTo(e,a) <> AddTo(c,b) by A1,SF_MASTR:2;
    thus SubFrom(e,a) <> AddTo(c,b) by A2,SCMFSA_2:20;
    thus MultBy(e,a) <> AddTo(c,b) by A2,SCMFSA_2:21;
    thus Divide(a,e) <> AddTo(c,b) & Divide(e,a) <> AddTo(c,b) by A2,
SCMFSA_2:22;
    thus a =0_goto l <> AddTo(c,b);
    thus a >0_goto l <> AddTo(c,b);
    thus e :=(f,a) <> AddTo(c,b) by A2,SCMFSA_2:26;
    thus (f,e):= a <> AddTo(c,b) & (f,a):= e <> AddTo(c,b) by A2,SCMFSA_2:27;
    thus f :=<0,...,0> a <> AddTo(c,b) by A2,SCMFSA_2:29;
  end;
  hence thesis by SCMFSA7B:def 1;
end;

theorem
  for i being Instruction of SCM+FSA, a being Int-Location holds i
  does not refer a implies Macro i does not refer a
proof
  let i be Instruction of SCM+FSA;
  let a be Int-Location;
A1: rng Macro i = {i,halt SCM+FSA} by COMPOS_1:67;
  assume
A2: i does not refer a;
  now
    let ii be Instruction of SCM+FSA;
    assume ii in rng Macro i;
    then ii = i or ii = halt SCM+FSA by A1,TARSKI:def 2;
    hence ii does not refer a by A2,Th49;
  end;
  hence thesis by SCMFSA7B:def 2;
end;

theorem Th52:
  for I,J being Program of SCM+FSA, a being Int-Location holds I
  does not destroy a & J does not destroy a implies I ";" J does not destroy a
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
  assume that
A1: I does not destroy a and
A2: J does not destroy a;
A3: Reloc(J,card I) does not destroy a by A2,SCMFSA8A:9;
  Directed I does not destroy a by A1,SCMFSA8A:13;
  hence thesis by A3,SCMFSA8A:11;
end;

theorem Th53:
  for J being Program of SCM+FSA, i being Instruction of SCM+FSA,
a being Int-Location st i does not destroy a & J does not destroy a holds i ";"
  J does not destroy a
proof
  let J be Program of SCM+FSA;
  let i be Instruction of SCM+FSA;
  let a be Int-Location;
  assume that
A1: i does not destroy a and
A2: J does not destroy a;
  Macro i does not destroy a by A1,Th48;
  hence thesis by A2,Th52;
end;

theorem
  for I being Program of SCM+FSA, j being Instruction of SCM+FSA, a
being Int-Location st I does not destroy a & j does not destroy a holds I ";" j
  does not destroy a
proof
  let I be Program of SCM+FSA;
  let j be Instruction of SCM+FSA;
  let a be Int-Location;
  assume that
A1: I does not destroy a and
A2: j does not destroy a;
  Macro j does not destroy a by A2,Th48;
  hence thesis by A1,Th52;
end;

theorem
  for i,j being Instruction of SCM+FSA, a being Int-Location st i
  does not destroy a & j does not destroy a holds i ";" j does not destroy a
proof
  let i,j be Instruction of SCM+FSA;
  let a be Int-Location;
  assume that
A1: i does not destroy a and
A2: j does not destroy a;
A3: Macro j does not destroy a by A2,Th48;
  Macro i does not destroy a by A1,Th48;
  hence thesis by A3,Th52;
end;

theorem Th56:
  for a being Int-Location holds Stop SCM+FSA does not destroy a
proof
  let a be Int-Location;
  now
    let i be Instruction of SCM+FSA;
A1: rng Stop SCM+FSA = {halt SCM+FSA} by AFINSQ_1:33;
    assume i in rng Stop SCM+FSA;
    then i = halt SCM+FSA by A1,TARSKI:def 1;
    hence i does not destroy a by SCMFSA7B:5;
  end;
  hence thesis by SCMFSA7B:def 4;
end;

theorem Th57:
  for a being Int-Location, l being Element of NAT
   holds Goto l does not destroy a
proof
  let a be Int-Location;
  let l be Element of NAT;
  now
    let i be Instruction of SCM+FSA;
A1: rng Goto l = {goto l} by FUNCOP_1:8;
    assume i in rng Goto l;
    then i = goto l by A1,TARSKI:def 1;
    hence i does not destroy a by SCMFSA7B:11;
  end;
  hence thesis by SCMFSA7B:def 4;
end;

theorem Th58:
  for s being State of SCM+FSA, I being Program of SCM+FSA st I
  is_halting_on Initialized s,P holds
   (for a being read-write Int-Location holds
IExec(I,P,s).a = Comput(P +* I,Initialize Initialized s,
 (LifeSpan(P +* I, Initialize Initialized s))).a) &
  for f being FinSeq-Location
  holds IExec(I,P,s).f = Comput(P +* I,Initialize Initialized s,
  LifeSpan(P +* I,Initialize Initialized s)).f
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* I;
  assume I is_halting_on s0,P;
  then
A1: P1 halts_on s1 by SCMFSA7B:def 7;
  hereby
    let a be read-write Int-Location;
    thus IExec(I,P,s).a = (Result(P1,s1)).a by MEMSTR_0:44
      .= (Result(P1,s1)).a
      .= Comput(P1, s1,LifeSpan(P1,s1)).a by A1,EXTPRO_1:23;
  end;
  let f be FinSeq-Location;
  thus IExec(I,P,s).f = (Result(P1,s1)).f by MEMSTR_0:44
    .= (Result(P1,s1)).f
    .= Comput(P1, s1,LifeSpan(P1,s1)).f by A1,EXTPRO_1:23;
end;

theorem Th59:
  for s being State of SCM+FSA, I being parahalting Program of
  SCM+FSA, a being read-write Int-Location holds IExec(I,P,s).a = Comput(
P +* I,
  Initialize Initialized s,
  (LifeSpan(P +* I,Initialize Initialized s))).a
proof
  let s be State of SCM+FSA;
  let I be parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  I is_halting_on Initialized s,P by SCMFSA7B:19;
  hence thesis by Th58;
end;

theorem Th60:
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
  being Int-Location,k being Element of NAT
   st I is_closed_on Initialized s,P & I
  is_halting_on Initialized s,P & I does not destroy a holds IExec(I,P,s).a =
  Comput(P +* I, (Initialize Initialized s),k).a
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  let a be Int-Location;
  let k be Element of NAT;
  assume
A1: I is_closed_on Initialized s,P;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* I;
  assume I is_halting_on Initialized s,P;
  then
A2: P1 halts_on s1 by SCMFSA7B:def 7;
  assume
A3: I does not destroy a;
  thus IExec(I,P,s).a = (Result(P1,s1)).a by MEMSTR_0:44
    .= (Result(P1,s1)).a
    .= Comput(P1, s1,LifeSpan(P1,s1)).a by A2,EXTPRO_1:23
    .= s0.a by A1,A3,SCMFSA7B:21
    .= Comput(P +* I, (Initialize s0),k).a
    by A1,A3,SCMFSA7B:21;
end;

theorem Th61:
  for s being State of SCM+FSA, I being parahalting Program of
  SCM+FSA, a being Int-Location,k being Element of NAT st I does not destroy a
holds IExec(I,P,s).a = Comput(P +* I,(Initialize Initialized s),k).a
proof
  let s be State of SCM+FSA;
  let I be parahalting Program of SCM+FSA;
  let a be Int-Location;
  let k be Element of NAT;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* I;
A1: I c= P1 by FUNCT_4:25;
A2: I is_closed_on s0,P by SCMFSA7B:18;
  P1 halts_on s1 by A1,SCMFSA6B:1;
  then I is_halting_on s0,P by SCMFSA7B:def 7;
  hence thesis by Th60,A2;
end;

theorem Th62:
  for s being State of SCM+FSA, I being parahalting Program of
  SCM+FSA, a being Int-Location st I does not destroy a
   holds IExec(I,P,s).a = (Initialized s).a
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be parahalting Program of SCM+FSA;
  let a be Int-Location;
A1: DataPart Initialized s =
   DataPart(Initialize Initialized s) by MEMSTR_0:79;
  assume I does not destroy a;
  hence
  IExec(I,P,s).a = Comput(P +* I, (Initialize Initialized s),
  0).a by Th61
    .= (Initialize Initialized s).a
    .= (Initialized s).a by A1,SCMFSA_M:2;
end;

theorem Th63:
  for s being State of SCM+FSA, I being keeping_0 Program of
  SCM+FSA st I is_halting_on Initialized s,P
   holds IExec(I,P,s).intloc 0 = 1 & for k
being Element of NAT holds Comput(P +* I,
(Initialize Initialized s),k).intloc 0 = 1
proof
  set a = intloc 0;
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be keeping_0 Program of SCM+FSA;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* I;
A1: I c= P1 by FUNCT_4:25;
A2: DataPart s0 = DataPart s1 by MEMSTR_0:79;
A3: now
    let k be Element of NAT;
    thus Comput(P1, s1,k).a = s1.a by A1,SCMFSA6B:def 4
      .= s0.a by A2,SCMFSA_M:2
      .= 1 by SCMFSA_M:9;
  end;
  assume I is_halting_on s0,P;
  then
A4: P1 halts_on s1 by SCMFSA7B:def 7;
  thus IExec(I,P,s).a = (Result(P1,s1)).a by MEMSTR_0:44
    .= (Result(P1,s1)).a
    .= Comput(P1, s1,LifeSpan(P1,s1)).a by A4,EXTPRO_1:23
    .= 1 by A3;
  let k be Element of NAT;
  thus thesis by A3;
end;

theorem Th64:
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being Int-Location st I does not destroy a holds for k being Element of NAT st
IC Comput(P +* I, (Initialize s),k) in dom I
holds Comput(P +* I,
  (Initialize s),k + 1).a =
   Comput(P +* I, (Initialize s),k).a
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  let a be Int-Location;
  assume
A1: I does not destroy a;
  set s1 = Initialize s,
      P1 = P +* I;
A2: I c= P1 by FUNCT_4:25;
  let k be Element of NAT;
  assume
A3: IC Comput(P +* I, (Initialize s),k) in dom I;
  set l = IC Comput(P1, s1,k);
  P1.l = I.l by A3,A2,GRFUNC_1:2;
  then P1.l in rng I by A3,FUNCT_1:def 3;
  then
A4: P1.l does not destroy a by A1,SCMFSA7B:def 4;
  thus Comput(P1, s1,k + 1).a = (Following(P1,Comput(P1,s1,k))).a by EXTPRO_1:3
    .= Exec(P1.l, Comput(P1, s1,k)).a by PBOOLE:143
    .= Comput(P1, s1,k).a by A4,SCMFSA7B:20;
end;

theorem Th65:
  for s being State of SCM+FSA, I being Program of SCM+FSA, a
being Int-Location st I does not destroy a holds for m being Element of NAT st
(for n being Element of NAT st n < m
 holds IC Comput(P +* I, (Initialize s),n) in dom I)
 for n being Element of NAT st n <= m holds
  Comput(P +* I, (Initialize s),n).a = s.a
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  let a be Int-Location;
  assume
A1: I does not destroy a;
  set s1 = Initialize s,
      P1 = P +* I;
  let m be Element of NAT;
  defpred P[Nat] means $1 <= m implies Comput(P1, s1,$1).a = s.a;
  assume
A2: for n being Element of NAT st n < m
   holds IC Comput(P +* I, (Initialize s),n) in dom I;
A3: for k being Element of NAT st P[k] holds P[k + 1]
  proof
    let k be Element of NAT;
    assume
A4: P[k];
A5: k + 0 < k + 1 by XREAL_1:6;
    assume
A6: k + 1 <= m;
    then k < m by A5,XXREAL_0:2;
    then IC Comput(P1, s1,k) in dom I by A2;
    hence thesis by A1,A4,A6,A5,Th64,XXREAL_0:2;
  end;
  let n be Element of NAT;
  assume
A7: n <= m;
  Comput(P1, s1,0).a = s1.a
    .= s.a by SCMFSA_M:21;
  then
A8: P[0];
  for k being Element of NAT holds P[k] from NAT_1:sch 1(A8,A3);
  hence thesis by A7;
end;

theorem Th66:
  for s being State of SCM+FSA, I being good Program of SCM+FSA
  for m being Element of NAT st (for n being Element of NAT st n < m holds IC
  Comput(P +* I, (Initialize s),n) in dom I) holds
  for n being
Element of NAT st n <= m holds Comput(P +* I, (Initialize s),n).
  intloc 0 = s.intloc 0
proof
  let s be State of SCM+FSA;
  let I be good Program of SCM+FSA;
  let m be Element of NAT;
  assume
A1: for n being Element of NAT st n < m
 holds IC Comput(P +* I, (Initialize s),n) in dom I;
  let n be Element of NAT;
A2: I does not destroy intloc 0 by SCMFSA7B:def 5;
  assume n <= m;
  hence thesis by A1,A2,Th65;
end;

theorem Th67:
  for s being State of SCM+FSA, I being good Program of SCM+FSA st
  I is_halting_on Initialized s,P & I is_closed_on Initialized s,P
   holds IExec(I,P,s).intloc 0 = 1 & for k being Element of NAT
  holds Comput(P +* I, (Initialize Initialized s),k).intloc 0 = 1
proof
  set a = intloc 0;
  let s be State of SCM+FSA;
  let I be good Program of SCM+FSA;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* I;
  defpred P[Nat] means for n being Element of NAT st n <= $1 holds
  Comput(P1, s1,n).intloc 0 = s0.intloc 0;
  assume I is_halting_on s0,P;
  then
A1: P1 halts_on s1 by SCMFSA7B:def 7;
A2: P[0]
  proof
    let n be Element of NAT;
A3: for i being Element of NAT st i < 0 holds IC Comput(P1, s1,i)
in dom
    I;
    assume n <= 0;
    hence thesis by A3,Th66;
  end;
  assume
A4: I is_closed_on s0,P;
A5: for k being Element of NAT st P[k] holds P[k + 1]
  proof
    let k be Element of NAT;
    assume P[k];
    let n be Element of NAT;
    assume
A6: n <= k + 1;
    for i being Element of NAT st i < k + 1 holds IC Comput(P1,
s1,i) in
    dom I by A4,SCMFSA7B:def 6;
    hence thesis by A6,Th66;
  end;
A7: for k being Element of NAT holds P[k] from NAT_1:sch 1(A2,A5);
A8: now
    let k be Element of NAT;
    thus Comput(P1, s1,k).intloc 0 = s0.intloc 0 by A7
      .= 1 by SCMFSA_M:9;
  end;
  thus IExec(I,P,s).a = (Result(P1,s1)).a by MEMSTR_0:44
    .= (Result(P1,s1)).a
    .= Comput(P1, s1,LifeSpan(P1,s1)).a by A1,EXTPRO_1:23
    .= 1 by A8;
  thus thesis by A8;
end;

theorem
  for s being State of SCM+FSA, I being good Program of SCM+FSA st I
is_closed_on s,P holds for k being Element of NAT
 holds Comput(P +* I, (Initialize s),k).intloc 0 = s.intloc 0
proof
  let s be State of SCM+FSA;
  let I be good Program of SCM+FSA;
  assume
A1: I is_closed_on s,P;
  let k be Element of NAT;
  I does not destroy intloc 0 by SCMFSA7B:def 5;
  hence thesis by A1,SCMFSA7B:21;
end;

theorem Th69:
  for P
  for s being State of SCM+FSA, I being keeping_0 parahalting
  Program of SCM+FSA, a being read-write Int-Location st I does not destroy a
  holds Comput(P +* (I ";" SubFrom(a,intloc 0)),
   Initialize Initialized s,
   LifeSpan(P +* (I ";" SubFrom(a,intloc 0)),
  Initialize Initialized s)).a = s.a - 1
proof let P;
  let s be State of SCM+FSA;
  let I be keeping_0 parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: I does not destroy a;
  set s0 = Initialized s;
  set s1 = Initialize s0,
      P1 = P +* (I ";" SubFrom(a,intloc 0));
A2: not a in dom Start-At(0,SCM+FSA) by SCMFSA_2:102;
  IExec(I ";" SubFrom(a,intloc 0),P,s).a
   = Exec(SubFrom(a,intloc 0),IExec(I,P,s)).a by SCMFSA6C:6
    .= IExec(I,P,s).a - IExec(I,P,s).intloc 0 by SCMFSA_2:65
    .= IExec(I,P,s).a - 1 by SCMFSA6B:11
    .= Comput(P +* I, (Initialize s0),0).a - 1
    by A1,Th61
    .= (Initialize s0).a - 1
    .= s0.a - 1 by A2,FUNCT_4:11;
  hence Comput(P1, s1,LifeSpan(P1,s1)).a = s0.a - 1 by Th59
    .= s.a - 1 by SCMFSA_M:37;
end;

theorem Th70:
  for i being Instruction of SCM+FSA st i does not destroy intloc
  0 holds Macro i is good
proof
  let i be Instruction of SCM+FSA;
  assume i does not destroy intloc 0;
  then Macro i does not destroy intloc 0 by Th48;
  hence thesis by SCMFSA7B:def 5;
end;

theorem Th71:
  for s1,s2 being State of SCM+FSA,I being Program of SCM+FSA st
I is_closed_on s1,P1 & I is_halting_on s1,P1 & DataPart s1 = DataPart s2
  for k being Element of NAT holds
    Comput(P1 +* I,Initialize s1,k)
   =  Comput(P2 +* I,Initialize s2,k)
   & CurInstr(P1 +* I,Comput(P1 +* I,Initialize s1,k))
    = CurInstr(P2 +* I,Comput(P2 +* I,Initialize s2,k))
proof
  let s1,s2 be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  assume
A1: I is_closed_on s1,P1;
  set ss2 = Initialize s2,
      PP2 = P2 +* I;
  set ss1 = Initialize s1,
      PP1 = P1 +* I;
A2: I c= P1 +* I by FUNCT_4:25;
A3: I c= P2 +* I by FUNCT_4:25;
  assume
A4: I is_halting_on s1,P1;
  assume
A5: DataPart s1 = DataPart s2;
    let k be Element of NAT;
A6: IC Comput(PP1, ss1,k) in dom I by A1,SCMFSA7B:def 6;
    I is_closed_on s2,P2 by A1,A4,A5,SCMFSA8B:5;
    then
A7: for m being Element of NAT st m < k holds IC Comput(PP2, ss2,
m) in
    dom I by SCMFSA7B:def 6;
     ss1 =  ss2 by A5,SCMFSA8B:4;
    hence
     Comput(PP1, ss1,k) =  Comput(PP2, ss2,k)
        by A7,A2,A3,AMISTD_2:10;
    then
A8: IC Comput(PP1, ss1,k) = IC Comput(PP2, ss2,k);
    I is_closed_on s2,P2 by A1,A4,A5,SCMFSA8B:5;
    then
A9: IC Comput(PP2, ss2,k) in dom I by SCMFSA7B:def 6;
    thus CurInstr(PP2,Comput(PP2,ss2,k))
     = PP2.IC Comput(PP2, ss2,k) by PBOOLE:143
      .= I.IC Comput(PP2, ss2,k) by A9,A3,GRFUNC_1:2
      .= PP1.IC Comput(PP1, ss1,k) by A8,A6,A2,GRFUNC_1:2
      .= CurInstr(PP1,Comput(PP1,ss1,k)) by PBOOLE:143;
end;

theorem Th72:
  for s1,s2 being State of SCM+FSA,I being Program of SCM+FSA st
  I is_closed_on s1,P1 & I is_halting_on s1,P1 & DataPart s1 = DataPart s2
   holds
  LifeSpan(P1 +* I,Initialize s1) =
  LifeSpan(P2 +* I,Initialize s2) &
   Result(P1 +* I,Initialize s1)
  =  Result(P2 +* I,Initialize s2)
proof
  let s1,s2 be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  assume
A1: I is_closed_on s1,P1;
  set ss2 = Initialize s2,
      PP2 = P2 +* I;
  set ss1 = Initialize s1,
      PP1 = P1 +* I;
  assume
A2: I is_halting_on s1,P1;
  then
A3: PP1 halts_on ss1 by SCMFSA7B:def 7;
  then
A4: Result(PP1,ss1) = Comput(PP1, ss1,LifeSpan(
PP1,ss1)) by EXTPRO_1:23;
  assume
A5: DataPart s1 = DataPart s2;
  then I is_halting_on s2,P2 by A1,A2,SCMFSA8B:5;
  then
A6: PP2 halts_on ss2 by SCMFSA7B:def 7;
A7: now
    let l be Element of NAT;
    assume
A8: CurInstr(PP2,Comput(PP2,ss2,l)) = halt SCM+FSA;
    CurInstr(PP1,Comput(PP1,ss1,l))
     = CurInstr(PP2,Comput(PP2,ss2,l))
     by A1,A2,A5,Th71;
    hence LifeSpan(PP1,ss1) <= l by A3,A8,EXTPRO_1:def 15;
  end;
  CurInstr(PP2,
  Comput(PP2,ss2,LifeSpan(PP1,ss1)))
   = CurInstr(PP1,
   Comput(PP1,ss1,LifeSpan(PP1,ss1)))
    by A1,A2,A5,Th71
    .= halt SCM+FSA by A3,EXTPRO_1:def 15;
  hence LifeSpan(PP1,ss1) = LifeSpan(PP2,ss2) by A7,A6,EXTPRO_1:def 15;
  then Result(PP2,ss2) = Comput(PP2, ss2,LifeSpan(PP1,ss1)) by A6,EXTPRO_1:23
;
  hence thesis by A1,A2,A5,A4,Th71;
end;



theorem Th73:
  for s1,s2 being 0-started State of SCM+FSA,I being Program of SCM+FSA st
  I is_closed_on s1,P1 & I is_halting_on s1,P1 &
  I c= P1 & I c= P2 &
   ex k being Element of NAT st  Comput(P1, s1,k) =  s2
  holds  Result(P1,s1) =  Result(P2,s2)
proof
  let s1,s2 be 0-started State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be Program of SCM+FSA;
  assume
A1: I is_closed_on s1,P1;
  assume
A2: I is_halting_on s1,P1;
A3: Start-At(0,SCM+FSA) c= s1 by MEMSTR_0:29;
A4: s2 = Initialize s2 by MEMSTR_0:44;
  assume
 I c= P1;
   then
A5: P1 = P1 +* I by FUNCT_4:98;
  assume
 I c= P2;
   then
A6: P2 = P2 +* I by FUNCT_4:98;
A7: s1 = Initialize s1 by A3,FUNCT_4:98;
  then
A8: P1 halts_on s1 by A2,A5,SCMFSA7B:def 7;
  then consider n being Element of NAT such that
A9: CurInstr(P1,Comput(P1,s1,n)) = halt SCM+FSA
 by EXTPRO_1:29;
  given k being Element of NAT such that
A10:  Comput(P1, s1,k) =  s2;
  set s3 = Comput(P1, s1,k),
      P3 = P1;
A11: IC SCM+FSA in dom s3 by MEMSTR_0:2;
  IC s3 = IC s2 by A10
    .= IC Initialize s2 by A4
    .= 0 by FUNCT_4:113;
  then IC SCM+FSA .--> 0 c= s3 by A11,FUNCOP_1:73;
  then Start-At(0,SCM+FSA) c= s3;
  then
A12: s3 = Initialize s3 by FUNCT_4:98;
A13: now
    let n be Element of NAT;
    IC Comput(P1, s3,n) = IC Comput(P1, s1,k + n)
by EXTPRO_1:4;
    hence IC Comput(P3, s3,n) in dom I by A1,A7,A5,SCMFSA7B:def 6;
  end;
A14: Comput(P1,s1,n+k)
 = Comput(P1,Comput(P1,s1,k),n) by EXTPRO_1:4;
A15:  Comput(P1,s1,n+k) = Comput(P1,s1,n) by A9,EXTPRO_1:5,NAT_1:11;
  P3 halts_on s3 by A9,A15,A14,EXTPRO_1:29;
  then
A16: I is_halting_on s3,P3 by A12,A5,SCMFSA7B:def 7;
A17: DataPart s3 = DataPart s2 by A10;
  consider k being Element of NAT such that
A18: CurInstr(P1,Comput(P1,s1,k))
 = halt SCM+FSA by A8,EXTPRO_1:29;
A19: P1.IC Comput(P1, s1,k)
     = halt SCM+FSA by A18,PBOOLE:143;
  I is_closed_on s3,P3 by A12,A13,A5,SCMFSA7B:def 6;
  then  Result(P3,s3) =  Result(P2,s2)
by A4,A17,A12,A16,Th72,A5,A6;
  hence thesis by A19,EXTPRO_1:8;
end;

begin :: loop

definition
  let I be Program of SCM+FSA;
  func loop I -> halt-free Program of SCM+FSA equals
  Directed(I, 0);
  coherence
   proof
     dom Directed(I, 0) = dom I by FUNCT_4:99;
    hence thesis;
   end;
end;



theorem
  for I being Program of SCM+FSA, a being Int-Location holds
   loop I destroys a implies I destroys a by SCMFSA8A:13;

registration
  let I be good Program of SCM+FSA;
  cluster loop I -> good;
  correctness;
end;



theorem Th75:
  for I being Program of SCM+FSA holds not halt SCM+FSA in rng
  loop I by FUNCT_4:100;



theorem Th76:
  for s being State of SCM+FSA, I being Program of SCM+FSA st I
is_closed_on s,P & I is_halting_on s,P
 for m being Element of NAT st m <= LifeSpan(
P +* I,Initialize s)
holds  Comput(P +* I, (Initialize s),m)
   =  Comput(P +* loop I,(Initialize s),m)
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  set s1 = Initialize s,
      P1 = P +* I;
A1: I c= P1 by FUNCT_4:25;
  set s2 = Initialize s,
      P2 = P +* loop I;
A2: loop I c= P2 by FUNCT_4:25;
  assume
A3: I is_closed_on s,P;
  defpred X[Nat] means $1 <= LifeSpan(P1,s1) implies
    Comput(P1, s1,$1) =  Comput(P2, s2,$1);
  assume I is_halting_on s,P;
  then
A4: P1 halts_on s1 by SCMFSA7B:def 7;
A5: for m being Element of NAT st X[m] holds X[m+1]
  proof
    let m be Element of NAT;
    assume
A6: m <= LifeSpan(P1,s1) implies
     Comput(P1,s1,m) =  Comput(P2,s2,m);
A7: Comput(P1,s1,m+1) = Following(P1,Comput(P1,s1,m)) by EXTPRO_1:3;
A8: Comput(P2,s2,m+1) = Following(P2,Comput(P2,s2,m)) by EXTPRO_1:3;
A9: IC Comput(P1,s1,m) in dom I by A3,SCMFSA7B:def 6;
A10: P1/.IC Comput(P1,s1,m) = P1.IC Comput(P1,s1,m) by PBOOLE:143;
A11: CurInstr(P1,Comput(P1,s1,m))
 = I.IC Comput(P1,s1,m) by A9,A10,A1,GRFUNC_1:2;
    assume
A12: m + 1 <= LifeSpan(P1,s1);
    then
     m < LifeSpan(P1,s1) by NAT_1:13;
    then
A13:  I.IC Comput(P1,s1,m) <> halt SCM+FSA by A4,A11,EXTPRO_1:def 15;
A14:  P2/.IC Comput(P2,s2,m)
 = P2.IC Comput(P2,s2,m) by PBOOLE:143;
A15:   IC Comput(P1,s1,m) in dom loop I by A9,FUNCT_4:99;
    CurInstr(P1,Comput(P1,s1,m))
     = P1.IC Comput(P1,s1,m) by PBOOLE:143
    .= I.IC Comput(P1,s1,m) by A1,A9,GRFUNC_1:2
    .= (loop I).IC Comput(P1,s1,m) by A13,FUNCT_4:105
    .= P2.IC Comput(P1,s1,m) by A2,A15,GRFUNC_1:2
      .= CurInstr(P2,Comput(P2,s2,m))
       by A6,A12,A14,NAT_1:13;
    hence thesis by A6,A12,A7,A8,NAT_1:13;
  end;
A16: X[0];
  thus for m being Element of NAT holds X[m] from NAT_1:sch 1(A16, A5);
end;

theorem Th77:
  for s being State of SCM+FSA, I being Program of SCM+FSA st I
is_closed_on s,P & I is_halting_on s,P
 for m being Element of NAT st m < LifeSpan(
P +* I,
Initialize s)
holds CurInstr(P +* I,
   Comput(P +* I, (Initialize s),m))
 = CurInstr(P +* loop I,
   Comput(P +* loop I,(Initialize s),m))
proof
  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  set s1 = Initialize s,
      P1 = P +* I;
  set s2 = Initialize s,
      P2 = P +* loop I;
A1: I c= P1 by FUNCT_4:25;
A2: loop I c= P2 by FUNCT_4:25;
  assume that
A3: I is_closed_on s,P and
A4: I is_halting_on s,P;
  let m be Element of NAT;
A5: IC Comput(P1,s1,m) in dom I by A3,SCMFSA7B:def 6;
  then
A6: IC Comput(P1,s1,m) in dom loop I by FUNCT_4:99;
A7:  P1/.IC Comput(P1,s1,m) = P1.IC Comput(P1,s1,m) by PBOOLE:143;
A8: CurInstr(P1,Comput(P1,s1,m))
 = I.IC Comput(P1,s1,m) by A5,A7,A1,GRFUNC_1:2;
  assume
A9: m < LifeSpan(P +* I,Initialize s);
A10:  P2/.IC Comput(P2,s2,m)
 = P2.IC Comput(P2,s2,m) by PBOOLE:143;
  P1 halts_on s1 by A4,SCMFSA7B:def 7;
  then
A11:  I.IC Comput(P1,s1,m) <> halt SCM+FSA by A9,A8,EXTPRO_1:def 15;
A12:  Comput(P +* I, (Initialize s),m)
   =  Comput(P +* loop I,(Initialize s),m)
     by A3,A4,A9,Th76;
  thus CurInstr(P1,Comput(P1,s1,m))
   = P1.IC Comput(P1,s1,m) by PBOOLE:143
  .= I.IC Comput(P1,s1,m) by A1,A5,GRFUNC_1:2
  .= (loop I).IC Comput(P1,s1,m) by A11,FUNCT_4:105
  .= P2.IC Comput(P1,s1,m) by A6,A2,GRFUNC_1:2
    .= CurInstr(P2,Comput(P2,s2,m))
     by A10,A12;
end;

Lm1: for s being State of SCM+FSA, I being Program of SCM+FSA st I
is_closed_on s,P & I is_halting_on s,P holds
 (CurInstr(P +* loop I,
    Comput(P +* loop I, (Initialize s),
    LifeSpan(P +* I,Initialize s))) = goto
0 & for m being Element of NAT
 st m <= LifeSpan(P +* I,Initialize s)
holds CurInstr( P +* loop I,
    Comput(P +* loop I, (Initialize s),m))
 <> halt SCM+FSA)

proof
A1: dom id the InstructionsF of SCM+FSA = the InstructionsF of SCM+FSA;

  let s be State of SCM+FSA;
  let I be Program of SCM+FSA;
  set s1 = Initialize s,
      P1 = P +* I;
  set s2 = Initialize s,
      P2 = P +* loop I;
A2: I c= P1 by FUNCT_4:25;
  assume that
A3: I is_closed_on s,P and
A4: I is_halting_on s,P;
  set k = LifeSpan(P1,s1);
A5: IC Comput(P1,s1,k) in dom I by A3,SCMFSA7B:def 6;
A6:  dom loop I = dom I by FUNCT_4:99;
A7: P1 halts_on s1 by A4,SCMFSA7B:def 7;
  then
A8: CurInstr(P1,Comput(P1,s1,k))
 = halt SCM+FSA by EXTPRO_1:def 15;
A9: CurInstr(P1,Comput(P1,s1,k))
 = P1.IC Comput(P1,s1,k) by PBOOLE:143
    .= I.IC Comput(P1,s1,k) by A2,A5,GRFUNC_1:2;
A10: rng I c= the InstructionsF of SCM+FSA by RELAT_1:def 19;

A11: P2/.IC Comput(P2,s2,LifeSpan(P1,s1))
 = P2.IC Comput(P2,s2,LifeSpan(P1,s1)) by PBOOLE:143;
   Comput(P +* I, (Initialize s),k)
   =  Comput(P +* loop I,(Initialize s),k)
       by A3,A4,Th76;
  hence
A12: CurInstr(P2,Comput(P2,s2,LifeSpan(P1,s1)))
 = P2.IC Comput(P1,s1,k) by A11
    .= (loop I).IC Comput(P1,s1,k)
    by A5,A6,FUNCT_4:13
    .= (((id the InstructionsF of SCM+FSA)+*(halt SCM+FSA,goto  0))*I )
  .IC Comput(P1,s1,k) by A10,FUNCT_7:116

    .= ((id the InstructionsF of SCM+FSA) +* (halt SCM+FSA, goto  0)).
  halt SCM+FSA by A8,A5,A9,FUNCT_1:13

    .= goto  0 by A1,FUNCT_7:31;
  let m be Element of NAT;
  assume
A13: m <= LifeSpan(P1,s1);
  per cases by A13,XXREAL_0:1;
  suppose
A14: m < LifeSpan(P1,s1);
    then CurInstr(P1,Comput(P1,s1,m))
     <> halt SCM+FSA by A7,EXTPRO_1:def 15;
    hence thesis by A3,A4,A14,Th77;
  end;
  suppose
    m = LifeSpan(P1,s1);
    hence thesis by A12;
  end;
end;

theorem
  for s being State of SCM+FSA, I being Program of SCM+FSA st I
is_closed_on s,P & I is_halting_on s,P
 for m being Element of NAT st m <= LifeSpan(
P +* I,Initialize s)
  holds CurInstr(P +* loop I,
  Comput(P +* loop I,Initialize s,m)) <> halt SCM+FSA by Lm1;

theorem
  for s being State of SCM+FSA, I being Program of SCM+FSA st I
is_closed_on s,P & I is_halting_on s,P holds
 CurInstr(P +* loop I,
  Comput(P +* loop I, (Initialize s),
LifeSpan(P +* I,Initialize s)))
 = goto  0
  by Lm1;

theorem Th80:
  for s being 0-started State of SCM+FSA, I being paraclosed Program of
  SCM+FSA st I c= P & P halts_on s
   for m being Element of
  NAT st m <= LifeSpan(P,s) holds
    Comput(P, s,m) =  Comput(P +* loop I, s,m)
proof
  let s be 0-started State of SCM+FSA;
  let I be paraclosed Program of SCM+FSA;
  assume
A1: I c= P;
  defpred X[Nat] means $1 <= LifeSpan(P,s) implies
    Comput(P, s,$1) =  Comput(P+*loop I,s,$1);
  assume
A2: P halts_on s;
A3: for m st X[m] holds X[m+1]
  proof
    set sI = s,
        PI = P+*loop I;
A4: loop I c= PI by FUNCT_4:25;
    let m;
    assume
A5: m <= LifeSpan(P,s) implies
       Comput(P, s,m) =  Comput(P+*loop I,s,m);
A6: IC Comput(P,s,m) in dom I by A1,AMISTD_1:def 10;
    then
A7: IC Comput(P,s,m) in dom loop I by FUNCT_4:99;
A8:  P/.IC Comput(P,s,m) = P.IC Comput(P,s,m) by PBOOLE:143;
A9: CurInstr(P,Comput(P,s,m))
 = I.IC(Comput(P,s,m)) by A6,A8,A1,GRFUNC_1:2;
A10: Comput(PI,sI,m+1) = Following(PI,Comput(PI,sI,m)) by EXTPRO_1:3;
A11: Comput(P,s,m+1) = Following(P,Comput(P,s,m)) by EXTPRO_1:3;
A12:  PI/.IC Comput(PI,sI,m) = PI.IC Comput(PI,sI,m) by PBOOLE:143;
    assume
A13: m+1 <= LifeSpan(P,s);
    then m < LifeSpan(P,s) by NAT_1:13;
    then I.IC(Comput(P,s,m)) <> halt SCM+FSA by A2,A9,EXTPRO_1:def 15;
    then CurInstr(P,Comput(P,s,m)) = (loop I).IC(Comput(P,s,m))
          by A9,FUNCT_4:105
      .= PI.IC(Comput(P,s,m)) by A7,A4,GRFUNC_1:2
      .= CurInstr(PI,Comput(PI,sI,m)) by A5,A13,A12,NAT_1:13;
    hence thesis by A5,A13,A11,A10,NAT_1:13;
  end;
A14: X[0];
  thus for m being Element of NAT holds X[m] from NAT_1:sch 1(A14, A3);
end;

theorem
  for s being State of SCM+FSA, I being parahalting Program of SCM+FSA
st Initialize((intloc 0).-->1) c= s & I c= P
 holds for k being Element of NAT st k <= LifeSpan(P,s) holds
  CurInstr(P +* loop I,
   Comput(P+*loop I, s,k)) <> halt SCM+FSA
proof
  let s be State of SCM+FSA;
  let I be parahalting Program of SCM+FSA;
  set s2 = s,
      P2 = P +* loop I;
  assume
A1: Initialize((intloc 0).-->1) c= s;
  Start-At(0,SCM+FSA) c= Initialize((intloc 0).-->1) by FUNCT_4:25;
  then
 Start-At(0,SCM+FSA) c= s by A1,XBOOLE_1:1;
  then
A2: s is 0-started by MEMSTR_0:29;
   then reconsider s1 = s as 0-started State of SCM+FSA;
  assume
A3: I c= P;
   then
A4: P halts_on s by A2,AMISTD_1:def 11;
    let k be Element of NAT;
    assume
A5: k <= LifeSpan(P,s);
    set lk = IC Comput(P, s,k);
    assume
A6: CurInstr(P+*loop I,
 Comput(P+*loop I, s,k)) = halt SCM+FSA;
A7: dom I = dom loop I by FUNCT_4:99;
A8: IC Comput(P, s1,k) in dom I by A3,AMISTD_1:def 10;
    then
A9: (loop I).lk in rng loop I by A7,FUNCT_1:def 3;
A10:  P2/.IC Comput(P2,s2,k)
 = P2.IC Comput(P2,s2,k) by PBOOLE:143;
    Comput(P, s1,k) =  Comput(P +* loop I, s1,k)
     by A4,A5,Th80,A3;
   then CurInstr(P2,Comput(P2,s2,k))
     = P2.lk by A10
      .= (loop I).lk by A8,A7,FUNCT_4:13;
    hence contradiction by A6,A9,Th75;
end;

begin :: Times

definition
  let a be Int-Location;
  let I be Program of SCM+FSA;
  func Times(a,I) -> Program of SCM+FSA equals
  if>0(a,loop if=0(a,Goto 2,I ";" SubFrom(a,intloc 0)), Stop SCM+FSA);
  correctness;
end;

registration
  let a be Int-Location;
  let I be Program of SCM+FSA;
  cluster Times(a,I) -> non halt-free;
  coherence;
end;

theorem Th82:
  for I being good Program of SCM+FSA, a being read-write
  Int-Location holds if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)) is good
proof
  let I be good Program of SCM+FSA;
  let a be read-write Int-Location;
  reconsider J3 = Macro SubFrom(a,intloc 0) as good Program of SCM+FSA by Th70,
SCMFSA7B:8;
  I ";" SubFrom(a,intloc 0) = I ";" J3;
  then reconsider I1 = I ";" SubFrom(a,intloc 0) as good Program of SCM+FSA;
  reconsider J1 = Macro (a =0_goto  (card I1 + 3)) as good Program of
  SCM+FSA by Th70,SCMFSA7B:12;
  if=0(a,Goto  2,I1) = (a =0_goto  (card I1 + 3) ";" I1 ";"
  Goto  (card Goto  2 + 1)) ";" Goto  2 ";" Stop SCM+FSA by SCMFSA8B:def 1
    .= J1 ";" I1 ";" Goto  (card Goto  2 + 1) ";" Goto  2
  ";" Stop SCM+FSA;
  hence thesis;
end;

theorem Th83:
  for I,J being Program of SCM+FSA,a being Int-Location holds
if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)).  (card (I ";" SubFrom(a,
  intloc 0)) + 3) = goto  (card (I ";" SubFrom(a,intloc 0)) + 5)
proof
  let I,J be Program of SCM+FSA;
  let a be Int-Location;
  set I1 = I ";" SubFrom(a,intloc 0);
  set J3 = a =0_goto  (card I1 + 3) ";" I1 ";" Goto  (card Goto
   2 + 1);
  set J4 = (a =0_goto  (card I1 + 3) ";" I1 ";" Goto  (card Goto
   2 + 1)) ";" Goto  2;
A1: card Goto  (card Goto  2 + 1) = 1 by SCMFSA8A:15;
  card (a =0_goto  (card I1 + 3) ";" I1) = card Macro (a =0_goto
   (card I1 + 3)) + card I1 by SCMFSA6A:21
    .= 2 + card I1 by COMPOS_1:56;
  then
A2: card J3 = card I1 + 2 + 1 by A1,SCMFSA6A:21
    .= card I1 + (2 + 1);
  then card I1 + (2 + 1) -' card J3 = 0 by XREAL_1:232;
  then
A3: goto  2 = (Goto  2). (card I1 + (2 + 1) -' card J3 )
  by SCMFSA8A:31;
A4: card Goto  2 = 1 by SCMFSA8A:15;
  then card I1 + (2 + 1) < card J3 + card Goto  2 by A2,NAT_1:13;
  then
A5: J4. (card I1 + (2 + 1)) = IncAddr(goto  2,card J3) by A2,A3,Th2
    .= goto ( 2 + (card I1 + (2 + 1))) by A2,SCMFSA_4:1
    .= goto  (card I1 + (2 + 3));
  card J4 = card I1 + (2 + 1) + 1 by A2,A4,SCMFSA6A:21
    .= card I1 + (2 + 1 + 1);
  then card J4 = card I1 + 3 + 1;
  then card I1 + 3 < card J4 by NAT_1:13;
  then
A6:  (card I1 + 3) in dom J4 by AFINSQ_1:66;
  then
  (J4 ";" Stop SCM+FSA). (card I1 + 3) = (Directed J4). (card
  I1 + 3) by SCMFSA8A:14
    .= goto  (card I1 + 5) by A5,A6,SCMFSA8A:16;
  hence thesis by SCMFSA8B:def 1;
end;

theorem Th84:
  for s being State of SCM+FSA, I being good parahalting Program
of SCM+FSA, a being read-write Int-Location st I does not destroy a & s.intloc
  0 = 1 & s.a > 0 holds loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
  is_pseudo-closed_on s,P
proof
  let s be State of SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  set I2 = if=0(a,Goto  2,I ";" SubFrom(a,intloc 0));
  reconsider I1 = I ";" SubFrom(a,intloc 0) as parahalting Program of SCM+FSA;
  set i = a =0_goto  (card I1 + 3);
  defpred P[Nat] means
   for s being State of SCM+FSA
    st s.intloc 0 = 1 & s.a = $1 & s.a > 0
   holds
    Comput(P +* loop I2, Initialize s,
      (LifeSpan(P +* I2, Initialize s) + 1)).a = s.a - 1 &
    Comput(P +* loop I2, Initialize s,
       LifeSpan(P +* I2,Initialize s) + 1).intloc 0 = 1 &
   ex k being Element of NAT
    st IC Comput(P +* loop I2,Initialize s,k)
       =  card loop I2 &
   for n being Element of NAT st n < k
    holds IC Comput(P +* loop I2,Initialize s,n)
      in dom loop I2;
  assume
A1: I does not destroy a;
A2: for k being Element of NAT holds P[k] implies P[k + 1]
  proof
    let k be Element of NAT;
    assume
A3: P[k];
    let ss be State of SCM+FSA;
    assume
A4: ss.intloc 0 = 1;
    set s2 = Initialize ss,
        P2 = P +* loop I2;
    set s1 = Initialize ss,
        P1 = P +* I2;
A5: loop I2 c= P2 by FUNCT_4:25;
    assume
A6: ss.a = k + 1;
    set s3 = Comput(P2,s2,LifeSpan(P1,s1) + 1),
        P3 = P2;
    assume
A7: ss.a > 0;
A8: Comput(P2,s2,LifeSpan(P1,s1)+1)
     = Following(P2,Comput(P2,s2,LifeSpan(P1,s1))) by EXTPRO_1:3;
A9: I1 is_halting_on ss,P by SCMFSA7B:19;
A10: I1 is_closed_on ss,P by SCMFSA7B:18;
    then
A11: I2 is_closed_on ss,P by A7,A9,SCMFSA8B:15;
A12: I2 is_halting_on ss,P by A7,A10,A9,SCMFSA8B:15;
A13: I2 is_closed_on ss,P by A7,A10,A9,SCMFSA8B:15;
    then
A14: IC Comput(P2,s2,LifeSpan(P1,s1)+1) = Exec(goto
0,Comput(P2,s2,
    LifeSpan(P1,s1))).IC SCM+FSA by A12,A8,Lm1
      .=  0 by SCMFSA_2:69;
A15: Comput(P2,s2,LifeSpan(P1,s1)+1) = Exec(goto  0,
Comput(P2,s2,
    LifeSpan(P1,s1))) by A13,A12,A8,Lm1;
A16: now
A17:  I1 is_halting_on Initialized ss,P by SCMFSA7B:19;
A18:  I1 is_closed_on Initialized ss,P by SCMFSA7B:18;
      IExec(I2,P,ss) = IExec(I1,P,ss) +* Start-At((card Goto  2 +
      card I1 + 3),SCM+FSA) by A7,A17,A18,SCMFSA8B:16;
      then
A19:  IExec(I2,P,ss).a = IExec(I1,P,ss).a by SCMFSA_3:3;
A20:  card I2 = card Goto  2 + card I1 + 4 by SCMFSA8B:11
        .= card I1 + 1 + 4 by SCMFSA8A:15
        .= card I1 + 3 + 2;
A21:  card loop I2 = card dom loop I2
        .= card dom I2 by FUNCT_4:99
        .= card I2;
      hereby
        thus  0 in dom loop I2 by A21,AFINSQ_1:66;
        card I1 + 3 + (1 + 1) = (card I1 + 3 + 1) + 1;
        then card I1 + 3 + 1 < card I2 by A20,NAT_1:13;
        then card I1 + 3 < card loop I2 by A21,NAT_1:13;
        hence  (card I1 + 3) in dom loop I2 by AFINSQ_1:66;
      end;
      thus intloc 0 in dom ss by SCMFSA_2:42;
      then
A22:  ss +* Q = ss by A4,FUNCT_7:109;
A23:  I1 is_closed_on Initialized ss,P by SCMFSA7B:18;
A24:  I1 is_halting_on Initialized ss,P by SCMFSA7B:19;
A25:  (Initialized ss).a > 0 by A7,SCMFSA_M:37;
      then
A26:  I2 is_halting_on Initialized ss,P by A23,A24,SCMFSA8B:15;
A27:  I2 is_closed_on Initialized ss,P by A25,A23,A24,SCMFSA8B:15;
      consider Is being State of SCM+FSA such that
A28:  Is = Initialize Initialized ss;
      set IP = P +* I2;
A29:  Initialize Initialized ss
         = Initialize Initialized ss
        .= ss +* ((intloc 0) .--> 1) +* Start-At(0,SCM+FSA)
             +* Start-At(0,SCM+FSA) by FUNCT_4:14
        .= Initialize ss by A22
        .= Initialize ss;
A30:  now
        let b be Int-Location;
A31:  Comput(P +* I2, (Initialize ss),LifeSpan(IP,Is))
   =  Comput(P +* loop I2,(Initialize ss),LifeSpan(IP,Is))
        by A12,A11,A29,A28,Th76;
        Comput(P2,s2,LifeSpan(P1,s1)+1).b = Comput(
P2,s2,
LifeSpan(P1,s1)).b
        by A15,SCMFSA_2:69;
        hence Comput(P2,s2,LifeSpan(P1,s1)+1).b =
          Comput(IP, Is,LifeSpan(IP,Is)).b
        by A29,A28,A31;
      end;
      then Comput(P2,s2,LifeSpan(P1,s1)+1).a = Comput
(IP
, Is,LifeSpan(IP,Is)).a
        .= IExec(I2,P,ss).a by A28,A26,Th58;
      hence Comput(P2,s2,LifeSpan(P1,s1)+1).a =
Comput(P +* I1, (Initialized ss +* (
 Start-At(0,SCM+FSA))),
 (LifeSpan(P +* I1,Initialize Initialized ss))).a
  by A17,A19,Th58
        .= ss.a - 1 by A1,Th69;
A32:  I2 is good by Th82;
      Comput(P2,s2,LifeSpan(P1,s1)+1).intloc 0 =
Comput(IP, Is,LifeSpan (IP,
      Is)).intloc 0 by A30
        .= 1 by A28,A26,A27,A32,Th67;
      hence Comput(P2,s2,LifeSpan(P1,s1)+1).intloc 0 = 1;
    end;
    hence s3.a = ss.a - 1 & s3.intloc 0 = 1;
A33: now
A34:  (Macro i). 0 <> halt SCM+FSA by COMPOS_1:58;
A35:   0 in dom Macro i by COMPOS_1:60;
      I2 = i ";" I1 ";" Goto  (card Goto  2 + 1) ";" Goto
       2 ";" Stop SCM+FSA by SCMFSA8B:def 1
        .= i ";" (I1 ";" Goto  (card Goto  2 + 1)) ";" Goto
       2 ";" Stop SCM+FSA by SCMFSA6A:29
        .= i ";" (I1 ";" Goto  (card Goto  2 + 1) ";" Goto
       2) ";" Stop SCM+FSA by SCMFSA6A:29
        .= i ";" (I1 ";" Goto  (card Goto  2 + 1) ";" Goto
       2 ";" Stop SCM+FSA) by SCMFSA6A:29
        .= Macro i ";" (I1 ";" Goto  (card Goto  2 + 1) ";" Goto
       2 ";" Stop SCM+FSA);
      hence I2. 0 = (Macro i). 0 by A35,A34,SCMFSA6A:15
        .= i by COMPOS_1:58;
      hence I2. 0 <> halt SCM+FSA;
A36:  card I2 = card Goto  2 + card I1 + 4 by SCMFSA8B:11
        .= card I1 + 1 + 4 by SCMFSA8A:15
        .= card I1 + 3 + 2;
      hence  0 in dom I2 by AFINSQ_1:66;
      card loop I2 = card dom loop I2
        .= card dom I2 by FUNCT_4:99
        .= card I2;
      then card loop I2 = card I1 + (3 + 2) by A36;
      hence I2. (card I1 + 3) = goto  card loop I2
      by Th83;
      hence I2. (card I1 + 3) <> halt SCM+FSA;
      hereby
        card I1 + 3 + 0 < card I2 by A36,XREAL_1:6;
        hence  (card I1 + 3) in dom I2 by AFINSQ_1:66;
      end;
    end;
    hereby
      per cases;
      suppose
A37:    k = 0;
        take m = LifeSpan(P1,s1) + 1 + 1 + 1;
A38:    CurInstr(P2,
Comput(P2,s2,LifeSpan(P1,s1)+1))
           = P2. 0 by A14,PBOOLE:143
          .= (loop I2). 0 by A16,A5,GRFUNC_1:2
          .= i by A33,FUNCT_4:105;
A39:  P2/.IC Comput(P2,s2,LifeSpan(P1,s1)+1+1)
 = P2.IC Comput(P2,s2,LifeSpan(P1,s1)+1+1)
 by PBOOLE:143;
A40:    Comput(P2,s2,LifeSpan(P1,s1)+1+1)
           = Following(P2,Comput(P2,s2,LifeSpan(P1,s1)+1)) by EXTPRO_1:3
          .= Exec(i,Comput(P2,s2,LifeSpan(P1,s1)+1)) by A38;
        then
A41:    CurInstr(P2,Comput(P2,s2,LifeSpan(P1,s1)+1+1))
           = P2. (card I1 + 3) by A39,A6,A16,A37,SCMFSA_2:70
          .= (loop I2). (card I1 + 3) by A16,A5,GRFUNC_1:2
          .= goto  card loop I2 by A33,FUNCT_4:105;
        Comput(P2,s2,m)
           = Following(P2, Comput(P2,s2,LifeSpan(P1,s1)+1+1)) by EXTPRO_1:3
          .= Exec(goto  card loop I2, Comput(P2,s2,LifeSpan(P1,s1)+1+1))
               by A41;
        hence IC Comput(P2,s2,m) =  card loop I2 by SCMFSA_2:69;
        hereby
          let n be Element of NAT;
          assume n < m;
          then n <= LifeSpan(P1,s1) + 1 + 1 by NAT_1:13;
          then
A42:      n <= LifeSpan(P1,s1) + 1 or n = LifeSpan(P1
,s1) + 1 + 1 by NAT_1:8;
          per cases by A42,NAT_1:8;
          suppose
A43:        n <= LifeSpan(P1,s1);
A44:        I1 is_halting_on ss,P by SCMFSA7B:19;
A45:        I1 is_closed_on ss,P by SCMFSA7B:18;
            then
A46:        I2 is_closed_on ss,P by A7,A44,SCMFSA8B:15;
            I2 is_halting_on ss,P by A7,A45,A44,SCMFSA8B:15;
            then  Comput(P1,s1,n) =  Comput(P2,s2,n) by A43,A46,Th76;
            then
A47:        IC Comput(P2,s2,n) = IC Comput(P1,s1,n);

            IC Comput(P1,s1,n) in dom I2
             by A46,SCMFSA7B:def 6;
            hence IC Comput(P2,s2,n) in dom loop I2 by A47,FUNCT_4:99;
          end;
          suppose
            n = LifeSpan(P1,s1) + 1;
            hence IC Comput(P2,s2,n) in dom loop I2 by A14,A16;
          end;
          suppose
            n = LifeSpan(P1,s1) + 1 + 1;
            hence IC Comput(P2,s2,n) in dom loop I2 by A6,A16,A37,A40,
SCMFSA_2:70;
          end;
        end;
      end;
      suppose
A48:    k > 0;
        consider Is3 being State of SCM+FSA such that
A49:    Is3 = Initialized s3;
A50:    Initialize Initialized s3 = s3 +* (IC
        SCM+FSA .-->  0) by A14,A16,SCMFSA_M:8;
A51:    Is3.intloc 0 = 1 by A49,SCMFSA_M:9;
        Is3.a = k by A6,A16,A49,SCMFSA_M:37;
        then consider m0 being Element of NAT such that
A52:    IC Comput(P3 +* loop I2,(Initialize Is3),m0)
            = card loop I2 and
A53:    for n being Element of NAT st n < m0
          holds IC Comput(P3 +* loop I2, (
        Initialize Is3),n) in dom loop I2
        by A3,A48,A51;
        take m = LifeSpan(P1,s1) + 1 + m0;
A54:     IC SCM+FSA in dom s3 by MEMSTR_0:2;
A55:    Initialize Initialized s3
           = s3 +* (IC SCM+FSA .-->  0) by A50
          .= s3 +* Start-At(0,SCM+FSA)
          .= s3 by A14,A54,FUNCT_7:109;

        thus
        IC Comput(P2,s2,m)
         = card loop I2 by A49,A52,A55,EXTPRO_1:4;
        hereby
          let n be Element of NAT;
          assume
A56:      n < m;
A57:      I1 is_halting_on ss,P by SCMFSA7B:19;
A58:      I1 is_closed_on ss,P by SCMFSA7B:18;
          then
A59:      I2 is_closed_on ss,P by A7,A57,SCMFSA8B:15;
A60:      I2 is_halting_on ss,P by A7,A58,A57,SCMFSA8B:15;
          per cases by NAT_1:13;
          suppose
            n <= LifeSpan(P1,s1);
            then  Comput(P1,s1,n) =  Comput(P2,s2,n) by A59,A60,Th76;
            then
A61:        IC Comput(P2,s2,n) = IC Comput(P1,s1,n);
            IC Comput(P1,s1,n) in dom I2 by A59,SCMFSA7B:def 6;
            hence IC Comput(P2,s2,n) in dom loop I2 by A61,FUNCT_4:99;
          end;
          suppose
A62:        LifeSpan(P1,s1) + 1 <= n;
            consider mm being Element of NAT such that
A63:        mm = n -' (LifeSpan(P1,s1) + 1);
            n - (LifeSpan(P1,s1) + 1) >= 0 by A62,XREAL_1:48;
            then
A64:        mm = n - (LifeSpan(P1,s1) + 1) by A63,XREAL_0:def 2;
            mm + (LifeSpan(P1,s1) + 1) = n by A62,A63,XREAL_1:235;
            then
A65:        IC Comput(P2,s2,n) = IC Comput(P2, s3,mm) by EXTPRO_1:4;
            m0 = m - (LifeSpan(P1,s1) + 1);
            then mm < m0 by A56,A64,XREAL_1:9;
            hence IC Comput(P2,s2,n) in dom loop I2 by A49,A53,A55,A65;
          end;
        end;
      end;
    end;
  end;
  assume
A66: s.intloc 0 = 1;
  assume
A67: s.a > 0;
  then reconsider sa = s.a as Element of NAT by INT_1:3;
A68: P[0];
  for k being Element of NAT holds P[k] from NAT_1:sch 1(A68,A2);
  then P[sa];
  then ex k being Element of NAT
   st IC Comput(P +* loop I2, (Initialize s),k)
     = card loop I2 &
  for n being Element of NAT st n < k
     holds IC Comput(P +* loop I2,(Initialize s),n)
     in dom loop I2 by A66,A67;
  hence thesis by SCMFSA8A:def 2;
end;

theorem
  for s being State of SCM+FSA, I being good parahalting Program of
  SCM+FSA, a being read-write Int-Location st I does not destroy a & s.a > 0
  holds loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
  is_pseudo-closed_on Initialized s,P
proof
  let s be State of SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: I does not destroy a;
A2: (Initialized s).a = s.a by SCMFSA_M:37;
A3: (Initialized s).intloc 0 = 1 by SCMFSA_M:9;
  assume s.a > 0;
  hence thesis by A1,A2,A3,Th84;
end;

theorem
  for s being State of SCM+FSA, I being good parahalting Program of
SCM+FSA, a being read-write Int-Location st I does not destroy a & s.intloc 0 =
  1 holds Times(a,I) is_closed_on s,P & Times(a,I) is_halting_on s,P
proof
  let s be State of SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: I does not destroy a;
  assume
A2: s.intloc 0 = 1;
  per cases;
  suppose
A3: s.a > 0;
    Directed loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)) = loop
    if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)) by SCMFSA6A:22;
    then Directed loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
    is_pseudo-closed_on s,P by A1,A2,A3,Th84;
    hence thesis by A3,Th39;
  end;
  suppose
A4: s.a <= 0;
A5: Stop SCM+FSA is_halting_on s,P by SCMFSA7B:19;
    Stop SCM+FSA is_closed_on s,P by SCMFSA7B:18;
    hence thesis by A4,A5,SCMFSA8B:21;
  end;
end;

theorem
  for I being good parahalting Program of SCM+FSA, a being read-write
  Int-Location st I does not destroy a
   holds Initialize((intloc 0).-->1)  is Times(a,I)-halted
proof
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: I does not destroy a;
  now
    let s be State of SCM+FSA;
    let P be Instruction-Sequence of SCM+FSA;
    per cases;
    suppose
      s.a > 0;
      then
A2:   (Initialized s).a > 0 by SCMFSA_M:37;
A3:   Directed loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)) = loop
      if=0(a,Goto  2,I ";" SubFrom(a,intloc 0)) by SCMFSA6A:22;
      (Initialized s).intloc 0 = 1 by SCMFSA_M:9;
      then Directed loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
      is_pseudo-closed_on Initialized s,P by A1,A2,A3,Th84;
      hence Times(a,I) is_halting_on Initialized s,P by A2,Th39;
    end;
    suppose
A4:   s.a <= 0;
A5:   Stop SCM+FSA is_closed_on Initialized s,P by SCMFSA7B:18;
A6:   Stop SCM+FSA is_halting_on Initialized s,P by SCMFSA7B:19;
      (Initialized s).a <= 0 by A4,SCMFSA_M:37;
      hence Times(a,I) is_halting_on Initialized s,P by A5,A6,SCMFSA8B:21;
    end;
  end;
  hence thesis by Th6;
end;

theorem
  for I,J being Program of SCM+FSA, a,c being Int-Location st I
does not destroy c & J does not destroy c holds if=0(a,I,J) does not destroy c
  & if>0(a,I,J) does not destroy c
proof
  let I,J be Program of SCM+FSA;
  let a,c be Int-Location;
  assume
A1: I does not destroy c;
A2: Goto  (card I + 1) does not destroy c by Th57;
  assume
A3: J does not destroy c;
  then a =0_goto  (card J + 3) ";" J does not destroy c by Th53,SCMFSA7B:12;
  then a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  does not destroy c by A2,Th52;
  then
A4: a =0_goto  (card J + 3) ";" J ";" Goto  (card I + 1) ";" I
  does not destroy c by A1,Th52;
A5: Goto  (card I + 1) does not destroy c by Th57;
  a >0_goto  (card J + 3) ";" J does not destroy c by A3,Th53,SCMFSA7B:13
;
  then a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1)
  does not destroy c by A5,Th52;
  then
A6: a >0_goto  (card J + 3) ";" J ";" Goto  (card I + 1) ";" I
  does not destroy c by A1,Th52;
A7: if=0(a,I,J) = a =0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 1;
  Stop SCM+FSA does not destroy c by Th56;
  hence if=0(a,I,J) does not destroy c by A4,A7,Th52;
A8: if>0(a,I,J) = a >0_goto  (card J + 3) ";" J ";" Goto  (card
  I + 1) ";" I ";" Stop SCM+FSA by SCMFSA8B:def 2;
  Stop SCM+FSA does not destroy c by Th56;
  hence thesis by A6,A8,Th52;
end;

theorem Th89:
  for s being State of SCM+FSA, I being good parahalting Program of SCM+FSA,
      a being read-write Int-Location
       st I does not destroy a & s.intloc 0 = 1 & s.a > 0
 ex s2 being State of SCM+FSA,
    P2 being  Instruction-Sequence of SCM+FSA,
    k being Element of NAT st
  s2 = s +* Start-At(0,SCM+FSA) &
  P2 = P +* (loop if=0(a,Goto  2, I ";" SubFrom(a,intloc 0))) &
  k = LifeSpan(P +* (if=0(a,Goto  2, I ";" SubFrom(a,intloc 0))),
  s +* Start-At(0,SCM+FSA)) + 1 &
  Comput(P2, s2,k).a = s.a - 1 &
  Comput(P2, s2,k).intloc 0 = 1 &
  (for b being read-write Int-Location st b <> a holds
   Comput(P2, s2,k).b = IExec(I,P,s).b) &
  (for f being FinSeq-Location holds Comput(P2, s2,k).f = IExec(I,P,s).f) &
    IC Comput(P2,s2,k) =  0 &
  for n being Element of NAT st n <= k
   holds IC Comput(P2, s2,n)
    in dom loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
proof
  let s be State of SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: I does not destroy a;
  reconsider I1 = I ";" SubFrom(a,intloc 0) as parahalting Program of SCM+FSA;
  set I2 = if=0(a,Goto  2,I ";" SubFrom(a,intloc 0));
  set s1 = Initialize s,
      P1 = P +* I2;
A2: I1 is_halting_on s,P by SCMFSA7B:19;
  set Is = Initialize Initialized s,
      IP = P +* I2;
A3: intloc 0 in dom s by SCMFSA_2:42;
  assume s.intloc 0 = 1;
  then
A4: s +* Q = s by A3,FUNCT_7:109;
A5: I1 is_closed_on Initialized s,P by SCMFSA7B:18;
A6: I1 is_halting_on Initialized s,P by SCMFSA7B:19;
  assume
A7: s.a > 0;
  then
A8: (Initialized s).a > 0 by SCMFSA_M:37;
  then
A9: I2 is_halting_on Initialized s,P by A5,A6,SCMFSA8B:15;
A10: I2 is_closed_on Initialized s,P by A8,A5,A6,SCMFSA8B:15;
  take s2 = Initialize s,
       P2 = P +* loop I2;
   reconsider k = LifeSpan(P1,s1) + 1 as Element of NAT;
  take k;
  thus s2 = s +* Start-At(0,SCM+FSA);
  thus P2 = P +* (loop if=0(a,Goto  2, I ";" SubFrom(a,intloc 0)));
  thus k = LifeSpan(P +* (if=0(a,Goto  2, I ";" SubFrom(a,intloc 0))),
       s +* Start-At(0,SCM+FSA)) + 1;
A11: Initialize Initialized s
    = s +* ((intloc 0) .--> 1)
         +* Start-At(0,SCM+FSA) +* Start-At(0,SCM+FSA) by FUNCT_4:14
    .= s +* Start-At(0,SCM+FSA) by A4;
A12: I1 is_halting_on Initialized s,P by SCMFSA7B:19;
A13: I1 is_closed_on Initialized s,P by SCMFSA7B:18;
A14: IExec(I2,P,s) = IExec(I1,P,s) +* Start-At((card Goto  2 + card
  I1 + 3),SCM+FSA) by A7,A12,A13,SCMFSA8B:16;
  then
A15: IExec(I2,P,s).a = IExec(I1,P,s).a by SCMFSA_3:3;
A16: I1 is_closed_on s,P by SCMFSA7B:18;
  then
A17: I2 is_closed_on s,P by A7,A2,SCMFSA8B:15;
A18: I2 is_halting_on s,P by A7,A16,A2,SCMFSA8B:15;
A19: Comput(P2,s2,LifeSpan(P1,s1)+1)
     = Following(P2,Comput(P2,s2,LifeSpan(P1,s1))) by EXTPRO_1:3;
  then
A20: Comput(P2,s2,LifeSpan(P1,s1)+1) = Exec(goto  0,
Comput(P2,s2,LifeSpan(P1,s1))) by A17,A18,Lm1;
A21:  Comput(P +* I2,Initialize s,LifeSpan(IP,Is))
   =  Comput(P +* loop I2,Initialize s,LifeSpan(IP,Is))
           by A17,A18,A11,Th76;
A22: for b being Int-Location holds
       Comput(P2,s2,LifeSpan(P1,s1)+1).b = Comput(IP,Is,LifeSpan(IP,Is)).b
       by A11,A21,A20,SCMFSA_2:69;
  then Comput(P2,s2,LifeSpan(P1,s1)+1).a = Comput(IP, Is,LifeSpan(IP,Is)).a
    .= IExec(I2,P,s).a by A9,Th58;
  hence Comput(P2, s2,k).a =
  Comput(P +* I1, (Initialize Initialized s),
  (LifeSpan(P +* I1,Initialize Initialized s))).a by A12,A15,Th58
    .= s.a - 1 by A1,Th69;
A23: I2 is good by Th82;
  Comput(P2,s2,LifeSpan(P1,s1)+1).intloc 0
     = Comput(IP,Is,LifeSpan(IP,Is)).intloc 0 by A22
    .= 1 by A9,A10,A23,Th67;
  hence Comput(P2, s2,k).intloc 0 = 1;
  hereby
    let b be read-write Int-Location;
    assume
A24: b <> a;
    thus Comput(P2, s2,k).b = Comput(IP, Is,
LifeSpan(IP,Is)).b by A22
      .= IExec(I2,P,s).b by A9,Th58
      .= IExec(I1,P,s).b by A14,SCMFSA_3:3
      .= Exec(SubFrom(a,intloc 0),IExec(I,P,s)).b by SCMFSA6C:6
      .= IExec(I,P,s).b by A24,SCMFSA_2:65;
  end;
  hereby
    let f be FinSeq-Location;
    Comput(P2,s2,LifeSpan(P1,s1)+1).f = Comput(
P2,s2,
LifeSpan(P1,s1)).f by A20,SCMFSA_2:69;
    hence Comput(P2, s2,k).f = Comput(IP, Is,
LifeSpan(IP,Is)).f by A11,A21
      .= IExec(I2,P,s).f by A9,Th58
      .= IExec(I1,P,s).f by A14,SCMFSA_3:4
      .= Exec(SubFrom(a,intloc 0),IExec(I,P,s)).f by SCMFSA6C:7
      .= IExec(I,P,s).f by SCMFSA_2:65;
  end;
A25: IC Comput(P2,s2,LifeSpan(P1,s1)+1) = Exec(goto
0,Comput(
P2,s2,
  LifeSpan(P1,s1))).IC SCM+FSA by A17,A18,A19,Lm1
    .=  0 by SCMFSA_2:69;
  hence IC Comput(P2, s2,k) =  0;
:::  hereby
    let n be Element of NAT;
    assume
A26: n <= k;
    per cases by A26,NAT_1:8;
    suppose
A27:  n <= LifeSpan(P1,s1);
A28:  I1 is_halting_on s,P by SCMFSA7B:19;
A29:  I1 is_closed_on s,P by SCMFSA7B:18;
      then
A30:  I2 is_closed_on s,P by A7,A28,SCMFSA8B:15;
      I2 is_halting_on s,P by A7,A29,A28,SCMFSA8B:15;
      then  Comput(P1,s1,n) =  Comput(P2,s2,n) by A27,A30,Th76;
      then
A31:  IC Comput(P2,s2,n) = IC Comput(P1,s1,n);
      IC Comput(P1,s1,n) in dom I2 by A30,SCMFSA7B:def 6;
      hence IC Comput(P2, s2,n) in dom loop I2
       by A31,FUNCT_4:99;
    end;
    suppose
A32:  n = LifeSpan(P1,s1) + 1;
      card loop I2 = card dom loop I2
        .= card dom I2 by FUNCT_4:99
        .= card I2;
      hence IC Comput(P2, s2,n) in dom loop I2 by A25,A32,AFINSQ_1:66;
    end;
:::  end;
end;

theorem Th90:
  for s being State of SCM+FSA, I being good parahalting Program
of SCM+FSA, a being read-write Int-Location st s.intloc 0 = 1 & s.a <= 0 holds
  DataPart IExec(Times(a,I),P,s) = DataPart s
proof
  let s be State of SCM+FSA;
  set D = Data-Locations SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  assume
A1: s.intloc 0 = 1;
  set s0 = Initialized s;
A2: Stop SCM+FSA is_halting_on Initialized s,P by SCMFSA7B:19;
  assume s.a <= 0;
  then
A3: (Initialized s).a <= 0 by SCMFSA_M:37;
A4: IExec(Stop SCM+FSA ";" Stop SCM+FSA,P,s0)
 = IncIC(IExec(Stop SCM+FSA,P,IExec(Stop SCM+FSA,P,s0)),card Stop SCM+FSA)
   by SCMFSA6B:20;
A5: s0.intloc 0 = 1 by SCMFSA_M:9;
A6: Stop SCM+FSA is_closed_on Initialized s,P by SCMFSA7B:18;
A7: Stop SCM+FSA is_halting_on s0,P by SCMFSA7B:19;
A8: DataPart IExec(Stop SCM+FSA,P,s0) = DataPart(Initialized s0) by Th14
    .= DataPart s0;
  for I being Program of SCM+FSA st
  I is_closed_on s0,P & I is_halting_on s0,P
   holds Directed I is_pseudo-closed_on s0,P
              by SCMFSA8A:23;
    then
A9: Directed Stop SCM+FSA is_pseudo-closed_on s0,P
     by A6,A7;
  DataPart IExec(Times(a,I),P,s)
   = DataPart IExec(Times(a,I),P,s0)
    .= DataPart IExec(Stop SCM+FSA ";" Stop SCM+FSA,P,s0)
     by A3,A5,Th44,A9;
  hence DataPart IExec(Times(a,I),P,s)
   = DataPart IExec(Stop SCM+FSA,P,IExec(Stop SCM+FSA,P,s0)) by A4,MEMSTR_0:79
    .= DataPart IExec(Stop SCM+FSA,P,s0) by A6,A2,A5,A8,Th20
    .= DataPart s by A1,A8,SCMFSA_M:19;
end;

theorem Th91:
  for s being State of SCM+FSA, I being good parahalting Program
  of SCM+FSA, a being read-write Int-Location st I does not destroy a & s.a > 0
holds IExec(I ";" SubFrom(a,intloc 0),P,s).a = s.a - 1 &
   DataPart IExec(Times(a,I),P,s)
    = DataPart IExec(Times(a,I),P,IExec(I ";" SubFrom(a,intloc 0),P,s))
proof
  let s be State of SCM+FSA;
  let I be good parahalting Program of SCM+FSA;
  let a be read-write Int-Location;
  set I1 = I ";" SubFrom(a,intloc 0);
  set ss = IExec(I1,P,s),
      PP = P;
  set s0 = Initialized s;
  set ss0 = Initialized ss,
      PP0 = P;
  set I2 = if=0(a,Goto  2,I ";" SubFrom(a,intloc 0));
  set s21 = Initialize s0,
      P21 = P +* (loop I2 ";" Stop SCM+FSA);
  set s31 = Initialize Initialized ss0,
      P31 = PP0 +* (loop I2 ";" Stop SCM+FSA);
A1: loop I2 ";" Stop SCM+FSA c= P21 by FUNCT_4:25;
A2: I is_halting_on s0,P by SCMFSA7B:19;
A3: I1 is_halting_on Initialized s,P by SCMFSA7B:19;
  reconsider J3 = Macro SubFrom(a,intloc 0) as good Program of SCM+FSA by Th70,
SCMFSA7B:8;
  set D = Data-Locations SCM+FSA;
  assume
A4: I does not destroy a;
   0 in dom I2 by Th25;
  then
A5:  0 in dom loop I2 by FUNCT_4:99;
A6: I1 is_closed_on Initialized s,P by SCMFSA7B:18;
A7: I1 = I ";" J3;
  then
A8: ss.intloc 0 = 1 by A3,A6,Th67;
  assume
A9: s.a > 0;
  then
A10: s0.a > 0 by SCMFSA_M:37;
A11: s0.intloc 0 = 1 by SCMFSA_M:9;
  then
A12: loop I2 is_pseudo-closed_on s0,P by A4,A10,Th84;
A13: Directed loop I2 = loop I2 by SCMFSA6A:22;
  then
A14: Directed loop I2 is_pseudo-closed_on s0,P by A4,A11,A10,Th84;
  consider s2 being State of SCM+FSA,
    P2 being  Instruction-Sequence of SCM+FSA,
    k being Element of NAT such that
A15:  s2 = Initialize s0 and
A16:  P2 = P +* (loop if=0(a,Goto  2, I ";" SubFrom(a,intloc 0))) and
  k = LifeSpan(P +* I2,Initialize s0) + 1 and
A17: Comput(P2, s2,k).a = s0.a - 1 and
A18: Comput(P2, s2,k).intloc 0 = 1 and
A19: for b being read-write Int-Location st b <> a holds
   Comput(P2, s2,k).b = IExec(I,P,s0).b and
A20: for f being FinSeq-Location holds Comput(P2, s2,k).f = IExec(I,P,s0).f and
A21: IC Comput(P2,s2,k) =  0 and
A22:  for n being Element of NAT st n <= k
   holds IC Comput(P2, s2,n)
    in dom loop if=0(a,Goto  2,I ";" SubFrom(a,intloc 0))
    by A4,A11,A10,Th89;
A23: now
    let f be FinSeq-Location;
    thus Comput(P2,s2,k).f = IExec(I,P,s0).f by A20
      .= Exec(SubFrom(a,intloc 0),IExec(I,P,s0)).f by SCMFSA_2:65
      .= IExec(I1,P,s0).f by SCMFSA6C:7
      .= IExec(I1,P,s).f;
  end;
  thus
A24: ss.a = Exec(SubFrom(a,intloc 0),IExec(I,P,s)).a by SCMFSA6C:6
    .= IExec(I,P,s).a - IExec(I,P,s).intloc 0 by SCMFSA_2:65
    .= IExec(I,P,s).a - 1 by A2,Th63
    .= s0.a - 1 by A4,Th62
    .= s.a - 1 by SCMFSA_M:37;
  now
    let b be Int-Location;
    per cases;
    suppose
      b = intloc 0;
      hence Comput(P2,s2,k).b = IExec(I1,P,s).b
       by A18,A7,A3,A6,Th67
;
    end;
    suppose
      b = a;
      hence Comput(P2,s2,k).b = IExec(I1,P,s).b by A17,A24,SCMFSA_M:37;
    end;
    suppose
A25:  b <> a & b <> intloc 0;
      then reconsider bb = b as read-write Int-Location by SCMFSA_M:def 2;
      thus Comput(P2,s2,k).b = IExec(I,P,s0).bb by A19,A25
        .= Exec(SubFrom(a,intloc 0),IExec(I,P,s0)).b by A25,SCMFSA_2:65
        .= IExec(I1,P,s0).b by SCMFSA6C:6
        .= IExec(I1,P,s).b;
    end;
  end;
  then
A26: DataPart Comput(P2,s2,k) = DataPart ss by A23,SCMFSA_M:2;
A27: DataPart IExec(Times(a,I),P,s0)
 = DataPart IExec(loop I2 ";" Stop SCM+FSA,P,s0) by A4,A11,A10,A13,Th40,Th84;
  per cases;
  suppose
A28: ss.a = 0;
A29: I2. (card I1 + 3) = goto  (card I1 + 5) by Th36;
A30: card I1 + (3 + 2) = card I1 + 1 + 4
      .= card Goto  2 + card I1 + 4 by SCMFSA8A:15
      .= card I2 by SCMFSA8B:11
      .= card dom I2
      .= card dom loop I2 by FUNCT_4:99
      .= card loop I2;
    then card I1 + 3 + 0 < card loop I2 by XREAL_1:6;
    then
A31:  (card I1 + 3) in dom loop I2 by AFINSQ_1:66;
    P2. (card I1 + 3) = (loop I2). (card I1 + 3)
      by A31,A16,FUNCT_4:13
      .= (loop I2). (card I1 + 3);
    then
A32: P2. (card I1 + 3) = goto  (card I1 + 5)
    by A29,FUNCT_4:105;
    then InsCode(P2. (card I1 + 3)) = 6 by SCMFSA_2:23;
    then
A33: InsCode (P2. (card I1 + 3)) in {0,6,7,8} by ENUMSET1:def 2;
A34: Comput(P2,s2,k+1) = Following(P2,Comput(P2,s2,k)) by EXTPRO_1:3
        .= Exec(P2. 0,Comput(P2,s2,k)) by A21,PBOOLE:143;
A35: P2. 0 = (loop I2). 0 by A5,A16,FUNCT_4:13
      .= (loop I2). 0;
A36: I2. 0 = a =0_goto  (card I1 + 3) by Th26;
A37: P2. 0 = a =0_goto  (card I1 + 3) by A35,A36,FUNCT_4:105;
A38: Comput(P2,s2,k).a = 0 by A17,A24,A28,SCMFSA_M:37;
    then
A39: IC Comput(P2,s2,k+1) =  (card I1 + 3) by A34,A37,SCMFSA_2:70;
A40: now
      let n be Element of NAT;
      assume
A41:  not IC Comput(P2, s2,n) in dom loop I2;
      then k < n by A22;
      then k + 1 <= n by INT_1:7;
      then k + 1 < n by A39,A31,A41,XXREAL_0:1;
      then k + 1 + 1 <= n by INT_1:7;
      hence k + (1 + 1) <= n;
    end;
A42:  P2/.IC Comput(P2,s2,k+1)
 = P2.IC Comput(P2,s2,k+1) by PBOOLE:143;
A43: Comput(P2,s2,k+(1+1)) = Comput(P2,s2,k+1+1)
      .= Following(P2,Comput(P2,s2,k+1)) by EXTPRO_1:3
      .= Exec(P2. (card I1 + 3),Comput(P2,s2,k+1))
    by A38,A34,A37,A42,SCMFSA_2:70;
    then IC Comput(P2,s2,k+2)
      =  card loop I2 by A30,A32,SCMFSA_2:69;
    then
A44: k + 2 = pseudo-LifeSpan(s0,P,loop I2) by A15,A12,A40,A16,SCMFSA8A:def 4;

    InsCode P2. 0 = 7 by A37,SCMFSA_2:24;
    then InsCode P2. 0 in {0,6,7,8} by ENUMSET1:def 2
;
    then DataPart Comput(P2,s2,k) = DataPart Comput(P2,s2,k+1) by A34,Th12;
    then
A45: DataPart Comput(P2,s2,k) = DataPart Comput(P2,s2
,k+2) by A43,A33,Th12;
    thus DataPart IExec(Times(a,I),P,s)
     = DataPart IExec(Times(a,I),P,s0)
      .= DataPart IExec(loop I2 ";" Stop SCM+FSA,P,s) by A27
      .= DataPart(Result(P21,s21)) by MEMSTR_0:44
      .= DataPart Result(P21,s21)
      .= DataPart IExec(I1,P,s) by A4,A11,A10,A15,A13,A26,A44,A45,Th30,Th84
,A16
      .= DataPart IExec(Times(a,I),P,IExec(I1,P,s)) by A8,A28,Th90;
  end;
  suppose
A46: ss.a <> 0;
    s.a >= 0 + 1 by A9,INT_1:7;
    then
A47: ss.a > 0 by A24,A46,XREAL_1:19;
A48: DataPart s0 = DataPart s21 by MEMSTR_0:79;
A49: k < pseudo-LifeSpan(s0,P,loop I2)
 by A4,A11,A10,A15,A22,Th1,Th84,A16;
    then
A50: DataPart Comput(P21, s21,k) = DataPart ss by A15,A13,A14,A26,Th29,A16;
A51: now
A52:  DataPart ss0 = DataPart s31 by MEMSTR_0:79;
      hereby
        let a be Int-Location;
        per cases;
        suppose
A53:      a = intloc 0;
          thus Comput(P21, s21,k).a = ss.a by A50,SCMFSA_M:2
            .= 1 by A53,SCMFSA6B:11
            .= ss0.a by A53,SCMFSA_M:9
            .= s31.a by A52,SCMFSA_M:2;
        end;
        suppose
          a <> intloc 0;
          then
A54:      a is read-write Int-Location by SCMFSA_M:def 2;
          thus Comput(P21, s21,k).a = ss.a by A50,SCMFSA_M:2
            .= ss0.a by A54,SCMFSA_M:37
            .= s31.a by A52,SCMFSA_M:2;
        end;
      end;
      let f be FinSeq-Location;
      thus Comput(P21, s21,k).f = ss.f by A50,SCMFSA_M:2
        .= ss0.f by SCMFSA_M:37
        .= s31.f by A52,SCMFSA_M:2;
    end;
    IC Comput(P21, s21,k)
    = 0 by A21,A15,A13,A14,A49,Th29,A16
    .= IC s31 by FUNCT_4:113;
    then
A55:  Comput(P21, s21,k) =  s31 by A51,SCMFSA_2:61;
    Directed loop I2 = loop I2 by SCMFSA6A:22;
    then
A56: Directed loop I2 is_pseudo-closed_on s21,P21 by A4,A11,A10,A48,Th23,Th84;
    then
A57: loop I2 ";" Stop SCM+FSA is_closed_on s21,P21 by Th29;
A58: loop I2 ";" Stop SCM+FSA is_halting_on s21,P21 by A56,Th29;
A59: ss.intloc 0 = 1 by A7,A3,A6,Th67;
A60:  Result(P21,s21) =  Result(P31,s31)
 by A57,A58,A55,Th73,A1;
    DataPart IExec(loop I2 ";" Stop SCM+FSA,P,s0)
     = DataPart IExec(loop I2 ";" Stop SCM+FSA,P,s)
      .= DataPart(Result(P21,s21)) by MEMSTR_0:44
      .= DataPart Result(P21,s21)
      .= DataPart Result(P31,s31) by A60
      .= DataPart(Result(P31,s31))
      .= DataPart IExec(loop I2 ";" Stop SCM+FSA,P,IExec(I1,P,s))
            by MEMSTR_0:44
      .= DataPart IExec(Times(a,I),P,IExec(I1,P,s))
       by A4,A13,A59,A47,Th40,Th84;
    hence thesis by A27;
  end;
end;

begin :: Example

theorem
  for s being State of SCM+FSA, a,b,c being read-write Int-Location st a
<> b & a <> c & b <> c & s.a >= 0
 holds IExec(Times(a,Macro AddTo(b,c)),P,s).b =
  s.b + s.c * s.a
proof
  let s be State of SCM+FSA;
  let a,b,c be read-write Int-Location;
  set I2 = Times(a,Macro AddTo(b,c));
  defpred P[Nat] means for s being State of SCM+FSA st s.a = $1
  holds IExec(Times(a,Macro AddTo(b,c)),P,s).b = s.b + s.c * s.a;
  reconsider I = Macro AddTo(b,c) as good parahalting Program of SCM+FSA by
Th70,SCMFSA7B:7;
  set D = Data-Locations SCM+FSA;
  assume that
A1: a <> b and
A2: a <> c and
A3: b <> c;
A4: for k being Element of NAT st P[k] holds P[k + 1]
  proof
    let k be Element of NAT;
    assume
A5: P[k];
    let s be State of SCM+FSA;
    assume
A6: s.a = k + 1;
A7: I does not destroy a by A1,Th48,SCMFSA7B:7;
    then
A8: DataPart IExec(Times(a,I),P,s)
 = DataPart IExec(Times(a,I),P,IExec(I ";" SubFrom(a,intloc 0),P,s))
  by A6,Th91;
A9: IExec(I ";" SubFrom(a,intloc 0),P,s).c
     = Exec(SubFrom(a,intloc 0),IExec(I,P,s)).c by SCMFSA6C:6
      .= IExec(I,P,s).c by A2,SCMFSA_2:65
      .= ( IExec(I,P,s)).c
      .= ( Exec(AddTo(b,c),Initialized s)).c by SCMFSA6C:5
      .= Exec(AddTo(b,c),Initialized s).c
      .= (Initialized s).c by A3,SCMFSA_2:64
      .= s.c by SCMFSA_M:37;
A10: IExec(I ";" SubFrom(a,intloc 0),P,s).b
      = Exec(SubFrom(a,intloc 0),IExec(I,P,s)).b by SCMFSA6C:6
      .= IExec(I,P,s).b by A1,SCMFSA_2:65
      .= ( IExec(I,P,s)).b
      .= ( Exec(AddTo(b,c),Initialized s)).b by SCMFSA6C:5
      .= Exec(AddTo(b,c),Initialized s).b
      .= (Initialized s).b + (Initialized s).c by SCMFSA_2:64
      .= (Initialized s).b + s.c by SCMFSA_M:37
      .= s.b + s.c by SCMFSA_M:37;
    IExec(I ";" SubFrom(a,intloc 0),P,s).a = s.a - 1 by A6,A7,Th91;
    then IExec(Times(a,I),P,IExec(I ";" SubFrom(a,intloc 0),P,s)).b
     = s.b + s.c + s.c * (s.a - 1) by A5,A6,A10,A9
      .= s.b + s.c * s.a;
    hence thesis by A8,SCMFSA_M:2;
  end;
  assume s.a >= 0;
  then reconsider sa = s.a as Element of NAT by INT_1:3;
A11: P[0]
  proof
    let s be State of SCM+FSA;
    set s0 = Initialized s;
A12: s0.intloc 0 = 1 by SCMFSA_M:9;
    assume
A13: s.a = 0;
    then s0.a = 0 by SCMFSA_M:37;
    then
A14: DataPart IExec(Times(a,I),P,s0) = DataPart s0 by A12,Th90;
    thus IExec(I2,P,s).b = IExec(I2,P,s0).b
      .= s0.b by A14,SCMFSA_M:2
      .= s.b + s.c * s.a by A13,SCMFSA_M:37;
  end;
  for k being Element of NAT holds P[k] from NAT_1:sch 1(A11,A4);
  then P[sa];
  hence thesis;
end;

