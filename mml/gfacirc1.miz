:: Generalized Full Adder Circuits (GFAs). {P}art {I}
::  by Shin'nosuke Yamaguchi , Katsumi Wasaki and Nobuhiro Shimoi
::
:: Received December 7, 2005
:: Copyright (c) 2005 Association of Mizar Users

environ

 vocabularies BOOLE, RELAT_1, FUNCT_1, FINSEQ_1, FINSEQ_2, FUNCT_4, ZF_LANG,
      LATTICES, MARGREL1, MIDSP_3, BINARITH, CLASSES1, PARTFUN1, AMI_1,
      MSUALG_1, MSAFREE2, CIRCUIT1, CIRCUIT2, CIRCCOMB, FACIRC_1, TWOSCOMP,
      GFACIRC1;
 notations TARSKI, XBOOLE_0, ENUMSET1, SUBSET_1, NAT_1, RELAT_1, STRUCT_0,
      FUNCT_1, FUNCT_2, FINSEQ_1, FINSEQ_2, MARGREL1, CLASSES1, BINARITH,
      MSUALG_1, MSAFREE2, CIRCUIT1, CIRCUIT2, CIRCCOMB, FACIRC_1, TWOSCOMP;
 constructors ENUMSET1, CLASSES1, BINARITH, CIRCUIT1, CIRCUIT2, FACIRC_1,
      TWOSCOMP, XXREAL_0;
 registrations STRUCT_0, RELAT_1, RELSET_1, FINSEQ_2, FRAENKEL, MARGREL1,
      CARD_3, CIRCCOMB, FACIRC_1;
 requirements NUMERALS, REAL, BOOLE, SUBSET, ARITHM;
 definitions TARSKI, XBOOLE_0, CIRCUIT2, FACIRC_1, MSAFREE2;
 theorems TARSKI, XBOOLE_0, XBOOLE_1, ZFMISC_1, ENUMSET1, RELAT_1, ORDINAL1,
      FUNCT_1, FUNCT_2, FINSEQ_1, FINSEQ_2, FINSEQ_3, FINSEQ_6, MARGREL1,
      BINARITH, CIRCUIT1, CIRCUIT2, CIRCCOMB, FACIRC_1, TWOSCOMP, CIRCCMB2,
      FACIRC_2;
 schemes FUNCT_2, FACIRC_1;

begin :: Preliminaries

::========================================================================

::------------------------------------------
:: schemes for Boolean Operations (1 input)

scheme 1AryBooleEx {F(set) -> Element of BOOLEAN}:
 ex f being Function of 1-tuples_on BOOLEAN, BOOLEAN st
  for x being Element of BOOLEAN holds f.<*x*> = F(x)
proof
   deffunc G(Tuple of 1, BOOLEAN) = F($1.1);
   consider f being Function of 1-tuples_on BOOLEAN, BOOLEAN such that
A1:  for a being Tuple of 1, BOOLEAN holds f.a = G(a) from FUNCT_2:sch 4;
   hereby take f; let x be Element of BOOLEAN;
    reconsider a = <*x*> as Tuple of 1, BOOLEAN by FINSEQ_2:118;
    thus f.<*x*> = F(a.1) by A1
       .= F(x) by FINSEQ_1:def 8;
   end;
  end;

scheme 1AryBooleUniq {F(set) -> Element of BOOLEAN}:
 for f1,f2 being Function of 1-tuples_on BOOLEAN, BOOLEAN st
  (for x being Element of BOOLEAN holds f1.<*x*> = F(x)) &
  (for x being Element of BOOLEAN holds f2.<*x*> = F(x))
 holds f1 = f2
proof
   deffunc G(Tuple of 1, BOOLEAN) = F($1.1);
   let f1,f2 be Function of 1-tuples_on BOOLEAN, BOOLEAN such that
A1:  for x being Element of BOOLEAN holds f1.<*x*> = F(x) and
A2:  for x being Element of BOOLEAN holds f2.<*x*> = F(x);
       now let a be Tuple of 1, BOOLEAN;
     consider x being Element of BOOLEAN such that
A3:    a = <*x*> by FINSEQ_2:117;
     thus f1.a = F(x) by A1,A3 .= f2.a by A2,A3;
    end;
   hence f1 = f2 by FUNCT_2:113;
  end;

scheme 1AryBooleDef {F(set) -> Element of BOOLEAN}:
 (ex f being Function of 1-tuples_on BOOLEAN, BOOLEAN st
  for x being Element of BOOLEAN holds f.<*x*> = F(x)) &
 for f1,f2 being Function of 1-tuples_on BOOLEAN, BOOLEAN st
  (for x being Element of BOOLEAN holds f1.<*x*> = F(x)) &
  (for x being Element of BOOLEAN holds f2.<*x*> = F(x))
 holds f1 = f2
proof
   deffunc G(Tuple of 1, BOOLEAN) = F($1.1);
   consider f being Function of 1-tuples_on BOOLEAN, BOOLEAN such that
A1:  for a being Tuple of 1, BOOLEAN holds f.a = G(a) from FUNCT_2:sch 4;
   hereby take f; let x be Element of BOOLEAN;
    reconsider a = <*x*> as Tuple of 1, BOOLEAN by FINSEQ_2:118;
    thus f.<*x*> = F(a.1) by A1
       .= F(x) by FINSEQ_1:def 8;
   end;
   let f1,f2 be Function of 1-tuples_on BOOLEAN, BOOLEAN such that
A2:  for x being Element of BOOLEAN holds f1.<*x*> = F(x) and
A3:  for x being Element of BOOLEAN holds f2.<*x*> = F(x);
    now let a be Tuple of 1, BOOLEAN;
     consider x being Element of BOOLEAN such that
A4:  a = <*x*> by FINSEQ_2:117;
     thus f1.a = F(x) by A2,A4 .= f2.a by A3,A4;
    end;
   hence f1 = f2 by FUNCT_2:113;
  end;

::-------------------------------------
:: 1-Input Operators (inv1, buf1)

definition
  func inv1 -> Function of 1-tuples_on BOOLEAN, BOOLEAN means
:DefINV1:
    for x being Element of BOOLEAN holds it.<*x*> = 'not' x;
  existence
   proof
  deffunc U(Element of BOOLEAN) = 'not' $1;
    thus ex t being Function of 1-tuples_on BOOLEAN, BOOLEAN st
    for x being Element of BOOLEAN holds t.<*x*> = U(x) from 1AryBooleEx;
   end;
  uniqueness
   proof
  deffunc U(Element of BOOLEAN) = 'not' $1;
    thus for t1,t2 being Function of 1-tuples_on BOOLEAN, BOOLEAN st
      (for x being Element of BOOLEAN holds t1.<*x*> = U(x)) &
      (for x being Element of BOOLEAN holds t2.<*x*> = U(x))
         holds t1 = t2 from 1AryBooleUniq;
   end;
end;

theorem ThINV10:
  for x being Element of BOOLEAN holds
    inv1.<*x*> = 'not' x & inv1.<*x*> = nand2.<*x,x*> &
    inv1.<*0*> = 1 & inv1.<*1*> = 0
  proof
    let x be Element of BOOLEAN;
    thus inv1.<*x*> = 'not' x by DefINV1;
    thus inv1.<*x*> = 'not' x by DefINV1
         .= 'not' ( x '&' x ) by BINARITH:16
         .= nand2.<*x,x*> by TWOSCOMP:def 4;
    thus inv1.<*0*> = 'not' FALSE by DefINV1,MARGREL1:36
         .= 1 by MARGREL1:36,41;
    thus inv1.<*1*> = 'not' TRUE by DefINV1,MARGREL1:36
         .= 0 by MARGREL1:36,41;
  end;

definition
  func buf1 -> Function of 1-tuples_on BOOLEAN, BOOLEAN means
:DefBUF1:
    for x being Element of BOOLEAN holds it.<*x*> = x;
  existence
   proof
  deffunc U(Element of BOOLEAN) = $1;
    thus ex t being Function of 1-tuples_on BOOLEAN, BOOLEAN st
    for x being Element of BOOLEAN holds t.<*x*> = U(x) from 1AryBooleEx;
   end;
  uniqueness
   proof
  deffunc U(Element of BOOLEAN) = $1;
    thus for t1,t2 being Function of 1-tuples_on BOOLEAN, BOOLEAN st
      (for x being Element of BOOLEAN holds t1.<*x*> = U(x)) &
      (for x being Element of BOOLEAN holds t2.<*x*> = U(x))
         holds t1 = t2 from 1AryBooleUniq;
   end;
end;

theorem
  for x being Element of BOOLEAN holds
    buf1.<*x*> = x & buf1.<*x*> = and2.<*x,x*> &
    buf1.<*0*> = 0 & buf1.<*1*> = 1
  proof
    let x be Element of BOOLEAN;
    thus buf1.<*x*> = x by DefBUF1;
    thus buf1.<*x*> = x by DefBUF1
         .= x '&' x by BINARITH:16
         .= and2.<*x,x*> by TWOSCOMP:def 1;
    thus buf1.<*0*> = 0 by DefBUF1,MARGREL1:36;
    thus buf1.<*1*> = 1 by DefBUF1,MARGREL1:36;
  end;

::-------------------------------------
:: 2-Input Operators (and2c, xor2c)

definition
  func and2c -> Function of 2-tuples_on BOOLEAN, BOOLEAN means
:DefAND2C:
    for x,y being Element of BOOLEAN holds it.<*x,y*> = x '&' 'not' y;
  existence
   proof
  deffunc U(Element of BOOLEAN,Element of BOOLEAN) = $1 '&' 'not' $2;
    thus ex t being Function of 2-tuples_on BOOLEAN, BOOLEAN st
    for x,y being Element of BOOLEAN holds t.<*x,y*> = U(x,y)
       from FACIRC_1:sch 1;
   end;
  uniqueness
   proof
  deffunc U(Element of BOOLEAN,Element of BOOLEAN) = $1 '&' 'not' $2;
    thus for t1,t2 being Function of 2-tuples_on BOOLEAN, BOOLEAN st
      (for x,y being Element of BOOLEAN holds t1.<*x,y*> = U(x,y)) &
      (for x,y being Element of BOOLEAN holds t2.<*x,y*> = U(x,y))
         holds t1 = t2 from FACIRC_1:sch 2;
   end;
end;

theorem
  for x,y being Element of BOOLEAN holds
    and2c.<*x,y*> = x '&' 'not' y &
    and2c.<*x,y*> = and2a.<*y,x*> & and2c.<*x,y*> = nor2a.<*x,y*> &
    and2c.<*0,0*>=0 & and2c.<*0,1*>=0 & and2c.<*1,0*>=1 & and2c.<*1,1*>=0
  proof
    let x,y be Element of BOOLEAN;
    thus and2c.<*x,y*> = x '&' 'not' y by DefAND2C;
    thus and2c.<*x,y*>
          = x '&' 'not' y by DefAND2C
         .=and2a.<*y,x*> by TWOSCOMP:def 2;
    thus and2c.<*x,y*>
          = x '&' 'not' y by DefAND2C
         .= 'not' ('not' x 'or' 'not' 'not' y) by BINARITH:12
         .= nor2a.<*x,y*> by TWOSCOMP:def 11;
    thus and2c.<*0,0*>
          = FALSE '&' 'not' FALSE by DefAND2C,MARGREL1:36
         .= 0 by MARGREL1:36,45;
    thus and2c.<*0,1*>
          = FALSE '&' 'not' TRUE by DefAND2C,MARGREL1:36
         .= 0 by MARGREL1:36,45;
    thus and2c.<*1,0*>
          = TRUE '&' 'not' FALSE by DefAND2C,MARGREL1:36
         .= TRUE '&' TRUE by MARGREL1:41
         .= 1 by MARGREL1:36,45;
    thus and2c.<*1,1*>
          = TRUE '&' 'not' TRUE by DefAND2C,MARGREL1:36
         .= TRUE '&' FALSE by MARGREL1:41
         .= 0 by MARGREL1:36,45;
  end;

definition
  func xor2c -> Function of 2-tuples_on BOOLEAN, BOOLEAN means
:DefXOR2C:
    for x,y being Element of BOOLEAN holds it.<*x,y*> = x 'xor' 'not' y;
  existence
   proof
  deffunc U(Element of BOOLEAN,Element of BOOLEAN) = $1 'xor' 'not' $2;
    thus ex t being Function of 2-tuples_on BOOLEAN, BOOLEAN st
    for x,y being Element of BOOLEAN holds t.<*x,y*> = U(x,y)
       from FACIRC_1:sch 1;
   end;
  uniqueness
   proof
  deffunc U(Element of BOOLEAN,Element of BOOLEAN) = $1 'xor' 'not' $2;
    thus for t1,t2 being Function of 2-tuples_on BOOLEAN, BOOLEAN st
      (for x,y being Element of BOOLEAN holds t1.<*x,y*> = U(x,y)) &
      (for x,y being Element of BOOLEAN holds t2.<*x,y*> = U(x,y))
         holds t1 = t2 from FACIRC_1:sch 2;
   end;
end;

theorem ThXOR2C0:
  for x,y being Element of BOOLEAN holds
    xor2c.<*x,y*> = x 'xor' 'not' y &
    xor2c.<*x,y*> = xor2a.<*x,y*> &
    xor2c.<*x,y*> = or2.<*and2b.<*x,y*>,and2.<*x,y*> *> &
    xor2c.<*0,0*>=1 & xor2c.<*0,1*>=0 & xor2c.<*1,0*>=0 & xor2c.<*1,1*>=1
  proof
    let x,y be Element of BOOLEAN;
    thus xor2c.<*x,y*> = x 'xor' 'not' y by DefXOR2C;
    thus xor2c.<*x,y*>
      = x 'xor' 'not' y by DefXOR2C
     .= ('not' x '&' 'not' y) 'or' (x '&' 'not' 'not' y) by BINARITH:def 2
     .= ('not' 'not' x '&' y) 'or' ('not' x '&' 'not' y)
     .= 'not' x 'xor' y by BINARITH:def 2
     .= xor2a.<*x,y*> by TWOSCOMP:def 14;
    thus xor2c.<*x,y*>
      = x 'xor' 'not' y by DefXOR2C
     .= ('not' x '&' 'not' y) 'or' (x '&' 'not' 'not' y) by BINARITH:def 2
     .= or2.<*('not' x '&' 'not' y), (x '&' y) *> by TWOSCOMP:def 7
     .= or2.<*and2b.<*x,y*>, (x '&' y) *> by TWOSCOMP:def 3
     .= or2.<*and2b.<*x,y*>,and2.<*x,y*> *> by TWOSCOMP:def 1;
    thus xor2c.<*0,0*>
      = FALSE 'xor' 'not' FALSE by DefXOR2C,MARGREL1:36
     .= 1 by BINARITH:17,MARGREL1:36;
    thus xor2c.<*0,1*>
      = FALSE 'xor' 'not' TRUE by DefXOR2C,MARGREL1:36
     .= 'not' TRUE by BINARITH:14
     .= 0 by MARGREL1:36,41;
    thus xor2c.<*1,0*>
      = TRUE 'xor' 'not' FALSE by DefXOR2C,MARGREL1:36
     .= 'not' 'not' FALSE by BINARITH:13
     .= 0 by MARGREL1:36;
    thus xor2c.<*1,1*>
      = TRUE 'xor' 'not' TRUE by DefXOR2C,MARGREL1:36
     .= 'not' 'not' TRUE by BINARITH:13
     .= 1 by MARGREL1:36;
  end;

theorem ThXOR2C1:
  for x,y being Element of BOOLEAN holds
    'not' (x 'xor' y) = 'not' x 'xor' y &
    'not' (x 'xor' y) = x 'xor' 'not' y &
    'not' x 'xor' 'not' y = x 'xor' y
  proof
    let x,y be Element of BOOLEAN;
    thus 'not' (x 'xor' y)
       = 'not' (('not' x '&' y) 'or' (x '&' 'not' y)) by BINARITH:def 2
      .= 'not' ('not' x '&' y) '&' 'not' (x '&' 'not' y) by BINARITH:10
      .= ('not' 'not' x 'or' 'not' y) '&' 'not' (x '&' 'not' y) by BINARITH:9
      .= (x 'or' 'not' y) '&' ('not' x 'or' 'not' 'not' y) by BINARITH:9
      .= (x 'or' 'not' y) '&' 'not' x 'or' (x 'or' 'not' y) '&' y
           by BINARITH:22
      .= (x 'or' 'not' y) '&' 'not' x 'or' (x '&' y 'or' 'not' y '&' y)
           by BINARITH:22
      .= (x 'or' 'not' y) '&' 'not' x 'or' (x '&' y 'or' FALSE) by MARGREL1:46
      .= (x 'or' 'not' y) '&' 'not' x 'or' (x '&' y) by BINARITH:7
      .= (x '&' y) 'or' (x '&' 'not' x 'or' 'not' y '&' 'not' x) by BINARITH:22
      .= (x '&' y) 'or' (FALSE 'or' 'not' y '&' 'not' x) by MARGREL1:46
      .= ('not' 'not' x '&' y) 'or' ('not' x '&' 'not' y) by BINARITH:7
      .= 'not' x 'xor' y by BINARITH:def 2;
    hence 'not' (x 'xor' y) = xor2a.<*x,y*> by TWOSCOMP:def 14
      .= xor2c.<*x,y*> by ThXOR2C0
      .= x 'xor' 'not' y by DefXOR2C;
    thus 'not' x 'xor' 'not' y = xor2b.<*x,y*> by TWOSCOMP:def 15
      .= xor2.<*x,y*> by TWOSCOMP:10
      .= x 'xor' y by TWOSCOMP:def 13;
  end;

theorem
  for x,y being Element of BOOLEAN holds
    inv1.<* xor2.<*x,y*> *> = xor2a.<*x,y*> &
    inv1.<* xor2.<*x,y*> *> = xor2c.<*x,y*> &
    xor2.<* inv1.<*x*>, inv1.<*y*> *> = xor2.<*x,y*>
  proof
    let x,y be Element of BOOLEAN;
    thus inv1.<* xor2.<*x,y*> *>
       = inv1.<* x 'xor' y *> by TWOSCOMP:def 13
      .= 'not' (x 'xor' y) by DefINV1
      .= 'not' x 'xor' y by ThXOR2C1
      .= xor2a.<*x,y*> by TWOSCOMP:def 14;
    hence inv1.<* xor2.<*x,y*> *> = xor2c.<*x,y*> by ThXOR2C0;
    thus xor2.<* inv1.<*x*>, inv1.<*y*> *>
       = xor2.<* 'not' x, inv1.<*y*> *> by ThINV10
      .= xor2.<* 'not' x, 'not' y *> by ThINV10
      .= 'not' x 'xor' 'not' y by TWOSCOMP:def 13
      .= x 'xor' y by ThXOR2C1
      .= xor2.<*x,y*> by TWOSCOMP:def 13;
  end;

theorem
  for x,y,z being Element of BOOLEAN holds
    'not' ( ( x 'xor' 'not' y ) 'xor'       z )
        =   ( x 'xor' 'not' y ) 'xor' 'not' z by ThXOR2C1;

theorem
  for x,y,z being Element of BOOLEAN holds
    inv1.<* xor2.<* xor2c.<*x,y*>, z*> *>
     = xor2c.<* xor2c.<*x,y*>, z*>
  proof
    let x,y,z be Element of BOOLEAN;
    thus inv1.<* xor2.<* xor2c.<*x,y*>, z*> *>
      = inv1.<* xor2.<* x 'xor' 'not' y, z *> *> by DefXOR2C
     .= inv1.<* ( x 'xor' 'not' y ) 'xor' z *> by TWOSCOMP:def 13
     .= 'not' ( ( x 'xor' 'not' y ) 'xor' z ) by DefINV1
     .=  ( x 'xor' 'not' y ) 'xor' 'not' z by ThXOR2C1
     .=  xor2c.<* x 'xor' 'not' y, z *>  by DefXOR2C
     .=  xor2c.<* xor2c.<*x,y*>, z *>  by DefXOR2C;
  end;

theorem ThXOR2C3:
  for x,y,z being Element of BOOLEAN holds
       ( 'not' x 'xor'       y ) 'xor' 'not' z
     = (       x 'xor' 'not' y ) 'xor' 'not' z
  proof
    let x,y,z be Element of BOOLEAN;
    thus ( 'not' x 'xor' y ) 'xor' 'not' z
     = 'not' ( x 'xor' y ) 'xor' 'not' z by ThXOR2C1
    .= ( x 'xor' 'not' y ) 'xor' 'not' z by ThXOR2C1;
  end;

theorem
  for x,y,z being Element of BOOLEAN holds
       xor2c.<* xor2a.<*x,y*>, z *>
     = xor2c.<* xor2c.<*x,y*>, z *> by ThXOR2C0;

theorem ThXOR2C4:
  for x,y,z being Element of BOOLEAN holds
    'not' ( ( 'not' x 'xor' 'not' y ) 'xor' 'not' z )
     = ( x 'xor' y ) 'xor' z
  proof
    let x,y,z be Element of BOOLEAN;
    thus 'not' ( ( 'not' x 'xor' 'not' y ) 'xor' 'not' z )
      = ( 'not' x 'xor' 'not' y ) 'xor' 'not' 'not' z by ThXOR2C1
     .= ( x 'xor' y ) 'xor' z by ThXOR2C1;
  end;

theorem
  for x,y,z being Element of BOOLEAN holds
    inv1.<* xor2c.<* xor2b.<*x,y*>, z*> *>
     = xor2.<* xor2.<*x,y*>, z*>
  proof
    let x,y,z be Element of BOOLEAN;
    thus inv1.<* xor2c.<* xor2b.<*x,y*>, z*> *>
      = inv1.<* xor2c.<* 'not' x 'xor' 'not' y, z *> *> by TWOSCOMP:def 15
     .= inv1.<* ( 'not' x 'xor' 'not' y ) 'xor' 'not' z *> by DefXOR2C
     .= 'not' ( ( 'not' x 'xor' 'not' y ) 'xor' 'not' z ) by DefINV1
     .= ( x 'xor' y ) 'xor' z by ThXOR2C4
     .=  xor2.<* x 'xor' y, z *>  by TWOSCOMP:def 13
     .=  xor2.<* xor2.<*x,y*>, z *>  by TWOSCOMP:def 13;
  end;

Lemma1:
 for f1,f2,f3 being Function of 2-tuples_on BOOLEAN, BOOLEAN
  for x,y,z being set st
    x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1]
  holds
    not [<*x,y*>,f1] in {y,z} &
    not z in {[<*x,y*>,f1], [<*y,z*>,f2]} &
    not x in {[<*x,y*>,f1], [<*y,z*>,f2]} &
    not [<*z,x*>,f3] in {x,y,z}
  proof
     let f1,f2,f3 be Function of 2-tuples_on BOOLEAN, BOOLEAN;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     assume
A1:  x <> yz & y <> zx & z <> xy;
A4:  y in {1,y} & y in {2,y} by TARSKI:def 2;
A5:  {1,y} in [1,y] & {2,y} in [2,y] by TARSKI:def 2;
A8:  <*y,z*> in {<*y,z*>} & {<*y,z*>} in yz by TARSKI:def 1,def 2;
A10: z in {2,z} by TARSKI:def 2;
A11: {2,z} in [2,z] by TARSKI:def 2;
     2 in dom <*y,z*> & <*y,z*>.2 = z
      proof
       dom<*y,z*> = Seg 2 by FINSEQ_3:29;
       hence thesis by FINSEQ_1:3,61;
      end;
then [2,z] in <*y,z*> by FUNCT_1:8;
then A14:z <> yz by A8,A10,A11,ORDINAL1:5;
     2 in dom <*x,y*> & <*x,y*>.2 = y
      proof
       dom<*x,y*> = Seg 2 by FINSEQ_3:29;
       hence thesis by FINSEQ_1:3,61;
      end;
then A17: [2,y] in <*x,y*> by FUNCT_1:8;
     <*x,y*> in {<*x,y*>} & {<*x,y*>} in xy by TARSKI:def 1,def 2;
then y <> xy by A4,A5,A17,ORDINAL1:5;
     hence not xy in {y,z} by A1,TARSKI:def 2;
A19: x in {1,x} by TARSKI:def 2;
A20: {1,x} in [1,x] by TARSKI:def 2;
     <*x,y*> = <*x*>^<*y*> by FINSEQ_1:def 9;
then A21: <*x*> c= <*x,y*> by FINSEQ_6:12;
     <*x*> = {[1,x]} by FINSEQ_1:def 5;
then A22: [1,x] in <*x*> by TARSKI:def 1;
     <*x,y*> in {<*x,y*>} & {<*x,y*>} in xy by TARSKI:def 1,def 2;
then x <> xy by A19,A20,A21,A22,ORDINAL1:5;
     hence not z in {xy, yz} & not x in {xy, yz} by A1,A14,TARSKI:def 2;
A24: x in {2,x} by TARSKI:def 2;
A25: {2,x} in [2,x] by TARSKI:def 2;
     2 in dom <*z,x*> & <*z,x*>.2 = x
      proof
       dom<*z,x*> = Seg 2 by FINSEQ_3:29;
       hence thesis by FINSEQ_1:3,61;
      end;
then A28: [2,x] in <*z,x*> by FUNCT_1:8;
     <*z,x*> in {<*z,x*>} & {<*z,x*>} in zx by TARSKI:def 1,def 2;
then A29: x <> zx by A24,A25,A28,ORDINAL1:5;
A30: z in {1,z} by TARSKI:def 2;
A31: {1,z} in [1,z] by TARSKI:def 2;
     <*z,x*> = <*z*>^<*x*> by FINSEQ_1:def 9;
then A32: <*z*> c= <*z,x*> by FINSEQ_6:12;
     <*z*> = {[1,z]} by FINSEQ_1:def 5;
then A33: [1,z] in <*z*> by TARSKI:def 1;
     <*z,x*> in {<*z,x*>} & {<*z,x*>} in zx by TARSKI:def 1,def 2;
then z <> zx by A30,A31,A32,A33,ORDINAL1:5;
     hence not zx in {x,y,z} by A1,A29,ENUMSET1:def 1;
  end;

Lemma2:
 for f1,f2,f3 being Function of 2-tuples_on BOOLEAN, BOOLEAN
  for f4 being Function of 3-tuples_on BOOLEAN, BOOLEAN
   for x,y,z being set
   holds {x, y, z} \ {[<*[<*x,y*>,f1], [<*y,z*>,f2], [<*z,x*>,f3]*>,f4]}
       = {x, y, z}
   proof
     let f1,f2,f3 be Function of 2-tuples_on BOOLEAN, BOOLEAN;
     let f4 be Function of 3-tuples_on BOOLEAN, BOOLEAN;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     rng <*z,x*> = {z,x} by FINSEQ_2:147;
then A4: x in rng <*z,x*> by TARSKI:def 2;
     len <*xy, yz, zx*> = 3 by FINSEQ_1:62;
then A5: Seg 3 = dom <*xy, yz, zx*> by FINSEQ_1:def 3;
then A6: 3 in dom <*xy, yz, zx*> by FINSEQ_1:3;
     <*xy, yz, zx*>.3 = zx by FINSEQ_1:62;
then [3,zx] in <*xy, yz, zx*> by A6,FUNCT_1:8;
then zx in rng <*xy, yz, zx*> by RELAT_1:def 5;
then A7: the_rank_of zx in the_rank_of xyz by CIRCCOMB:50;
     rng <*x,y*> = {x,y} by FINSEQ_2:147;
then A8: y in rng <*x,y*> by TARSKI:def 2;
A9:  1 in dom <*xy, yz, zx*> by A5,FINSEQ_1:3;
     <*xy, yz, zx*>.1 = xy by FINSEQ_1:62;
then [1,xy] in <*xy, yz, zx*> by A9,FUNCT_1:8;
then xy in rng <*xy, yz, zx*> by RELAT_1:def 5;
then A10: the_rank_of xy in the_rank_of xyz by CIRCCOMB:50;
     rng <*y,z*> = {y,z} by FINSEQ_2:147;
then A11: z in rng <*y,z*> by TARSKI:def 2;
A12: 2 in dom <*xy, yz, zx*> by A5,FINSEQ_1:3;
     <*xy, yz, zx*>.2 = yz by FINSEQ_1:62;
then [2,yz] in <*xy, yz, zx*> by A12,FUNCT_1:8;
then yz in rng <*xy, yz, zx*> by RELAT_1:def 5;
then A13: the_rank_of yz in the_rank_of xyz by CIRCCOMB:50;
     thus {x,y,z} \ {xyz} c= {x,y,z} by XBOOLE_1:36;
     let a be set; assume
A16: a in {x,y,z};
     then a = x or a = y or a = z by ENUMSET1:def 1;
     then a <> xyz by A4,A7,A8,A10,A11,A13,CIRCCOMB:50;
     then not a in {xyz} by TARSKI:def 1;
     hence thesis by A16,XBOOLE_0:def 4;
  end;

Lemma3:
 for f being Function of 2-tuples_on BOOLEAN, BOOLEAN
  for x,y,c being set st c <> [<*x,y*>,f]
   for s being State of 2GatesCircuit(x,y,c,f) holds
      (Following s).2GatesCircOutput(x,y,c,f) = f.<*s.[<*x,y*>,f],s.c*> &
      (Following s).[<*x,y*>,f] = f.<*s.x, s.y*> &
      (Following s).x = s.x & (Following s).y = s.y & (Following s).c = s.c
   proof
     let f be Function of 2-tuples_on BOOLEAN, BOOLEAN;
     let x,y,c be set such that
AA:  c <> [<*x,y*>, f];
     set A = 2GatesCircuit(x,y,c,f);
     let s be State of A;
     set xyf = [<*x,y*>,f];
     set p = <*xyf, c*>;
     set S1 = 1GateCircStr(<*x,y*>,f), A1 = 1GateCircuit(x,y,f);
     set S2 = 1GateCircStr(p,f), A2 = 1GateCircuit(xyf,c,f);
     set S = 2GatesCircStr(x,y,c,f);
A2:  InputVertices S = {x,y,c} by AA,FACIRC_1:57;
A3:  InnerVertices S = {xyf, 2GatesCircOutput(x,y,c,f)} by FACIRC_1:56;
A5:  x in InputVertices S & y in InputVertices S & c in InputVertices S
       by A2,ENUMSET1:def 1;
     reconsider xyf as Element of InnerVertices S by A3,TARSKI:def 2;
     rng p = {xyf, c} by FINSEQ_2:147;
then xyf in rng p & c in rng p by TARSKI:def 2;
then A6: xyf in InputVertices S2 & c in InputVertices S2 by CIRCCOMB:49;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
A7:  dom s2 = the carrier of S2 by CIRCUIT1:4;
A8:  dom s1 = the carrier of S1 by CIRCUIT1:4;
     reconsider vx = x, vy = y as Vertex of S1 by FACIRC_1:43;
     reconsider xyf1 = xyf as Element of InnerVertices S1 by FACIRC_1:47;
     reconsider xyf' = xyf, c' = c as Vertex of S2 by A6;
     reconsider v2 = [p,f] as Element of InnerVertices S2 by FACIRC_1:47;
     thus (Following s).2GatesCircOutput(x,y,c,f)
        = (Following s2).v2 by CIRCCOMB:72
       .= f.<*s2.xyf', s2.c'*> by FACIRC_1:50
       .= f.<*s.[<*x,y*>,f], s2.c'*> by A7,FUNCT_1:70
       .= f.<*s.[<*x,y*>,f], s.c*> by A7,FUNCT_1:70;
     thus (Following s).[<*x,y*>,f]
        = (Following s1).xyf1 by CIRCCOMB:72
       .= f.<*s1.vx, s1.vy*> by FACIRC_1:50
       .= f.<*s.x, s1.vy*> by A8,FUNCT_1:70
       .= f.<*s.x, s.y*> by A8,FUNCT_1:70;
     thus thesis by A5,CIRCUIT2:def 5;
  end;

::========================================================================

begin :: Generalized Full Adder (GFA) Circuit (TYPE-0)

::========================================================================
:: << GFA TYPE-0 >>
::------------------------------------------------------------------------
::   Name     : Generalized Full Adder Type-0 (GFA0)
::   Function : x + y + z = 2 * c + s
::
::   Logic Symbol :      x      y      Combined : GFA0CarryIStr(x,y,z)
::                       |     /                  GFA0CarryStr(x,y,z)
::                       |    /                   GFA0AdderStr(x,y,z)
::                   +---*---*                  --->
::                   |  GFA  *-----z              BitGFA0Str(x,y,z)
::                   | TYPE0 |
::                   *---*---+          Outputs : BitGFA0CarryOutput(x,y,z)
::                  /    |                        BitGFA0AdderOutput(x,y,z)
::                 /     |
::                c      s          Calculation : Following(s,2) is stable.
::=========================================================================

::-------------------------------------------------
:: GFA0 Carry : Circuit Definition of Carry Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA0CarryIStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    1GateCircStr(<*x,y*>,and2) +* 1GateCircStr(<*y,z*>,and2) +*
    1GateCircStr(<*z,x*>,and2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0CarryICirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA0CarryIStr(x,y,z) equals
    1GateCircuit(x,y,and2) +* 1GateCircuit(y,z,and2) +*
    1GateCircuit(z,x,and2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0CarryStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    GFA0CarryIStr(x,y,z) +*
    1GateCircStr(<*[<*x,y*>,and2], [<*y,z*>,and2], [<*z,x*>,and2]*>,or3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0CarryCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA0CarryStr(x,y,z) equals
    GFA0CarryICirc(x,y,z) +*
    1GateCircuit([<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2],or3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0CarryOutput(x,y,z) -> Element of InnerVertices GFA0CarryStr(x,y,z)
  equals
   [<*[<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2]*>,or3];
  coherence
   proof
     [<*[<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2]*>,or3] in
      InnerVertices
       1GateCircStr(<*[<*x,y*>,and2],[<*y,z*>,and2], [<*z,x*>,and2]*>,or3)
       by FACIRC_1:47;
    hence thesis by FACIRC_1:21;
   end;
end;

::-------------------------------------------------------
:: GFA0 Carry : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA0C0:
  for x,y,z being set holds
  InnerVertices GFA0CarryIStr(x,y,z) =
   {[<*x,y*>,and2], [<*y,z*>,and2], [<*z,x*>,and2]}
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
A1:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A2:  Cxy tolerates Cyz by CIRCCOMB:55;
     InnerVertices GFA0CarryIStr(x,y,z)
       = InnerVertices(Cxy +* Cyz) \/ InnerVertices(Czx) by A1,CIRCCOMB:15
      .= InnerVertices(Cxy) \/ InnerVertices(Cyz) \/
         InnerVertices(Czx) by A2,CIRCCOMB:15
      .= {xy} \/ InnerVertices(Cyz) \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ {zx} by CIRCCOMB:49
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
    hence thesis;
   end;

theorem ThGFA0C1:
 for x,y,z being set holds
  InnerVertices GFA0CarryStr(x,y,z) =
   {[<*x,y*>,and2], [<*y,z*>,and2], [<*z,x*>,and2]} \/ {GFA0CarryOutput(x,y,z)}
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A1:  Cxy tolerates (Cyz +* Czx +* Cxyz) by CIRCCOMB:55;
A2:  Cyz tolerates (Czx +* Cxyz) by CIRCCOMB:55;
A3:  Czx tolerates Cxyz by CIRCCOMB:55;
A4:  InnerVertices (Cyz +* (Czx +* Cxyz))
      = InnerVertices Cyz \/ InnerVertices (Czx +* Cxyz) by A2,CIRCCOMB:15;
A5:  InnerVertices (Czx +* Cxyz)
      = InnerVertices Czx \/ InnerVertices Cxyz by A3,CIRCCOMB:15;
thus InnerVertices GFA0CarryStr(x,y,z)
      = InnerVertices (Cxy +* (Cyz +* Czx) +* Cxyz) by CIRCCOMB:10
     .= InnerVertices (Cxy +* (Cyz +* Czx +* Cxyz)) by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* Czx +* Cxyz)
          by A1,CIRCCOMB:15
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* (Czx +* Cxyz))
          by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
          (InnerVertices Czx \/ InnerVertices Cxyz) by A4,A5,XBOOLE_1:4
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by XBOOLE_1:4
     .= {xy} \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ {zx} \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy, yz} \/ {zx} \/ InnerVertices Cxyz by ENUMSET1:41
     .= {xy, yz, zx} \/ InnerVertices Cxyz by ENUMSET1:43
     .= {xy, yz, zx} \/ {GFA0CarryOutput(x,y,z)} by CIRCCOMB:49;
  end;

theorem ThGFA0C2:
  for x,y,z being set holds
  InnerVertices GFA0CarryStr(x,y,z) is Relation
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A1:  InnerVertices Cxy is Relation & InnerVertices Cyz is Relation &
     InnerVertices Czx is Relation by FACIRC_1:38;
then InnerVertices (Cxy +* Cyz) is Relation by FACIRC_1:3;
then InnerVertices Cxyz is Relation &
     InnerVertices GFA0CarryIStr(x,y,z) is Relation by A1,FACIRC_1:3,38;
    hence thesis by FACIRC_1:3;
   end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA0C3:
 for x,y,z being set st
   x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
  holds InputVertices GFA0CarryIStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     assume
A1:  x <> yz & y <> zx & z <> xy;
A2:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A3:  Cxy tolerates Cyz by CIRCCOMB:55;
A4:  y <> [<*y,z*>,f2] by FACIRC_2:3;
A5:  not xy in {y,z} by A1,Lemma1;
A6:  not z in {xy, yz} & not x in {xy, yz} by A1,Lemma1;
A7:  not zx in {x,y,z} by A1,Lemma1;
     InputVertices GFA0CarryIStr(x,y,z)
      = (InputVertices(Cxy +* Cyz) \ InnerVertices(Czx)) \/
        (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A2,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A3,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by A3,CIRCCOMB:15
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ InnerVertices(Cyz))) by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by CIRCCOMB:49
     .= (({x,y} \ {yz}) \/ (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ {xy,yz}) by ENUMSET1:41
     .= (({x,y} \/ ({y,z} \ {xy})) \ {zx}) \/ ({z,x} \ {xy,yz})
          by A1,A4,FACIRC_2:1
     .= ({x,y} \/ {y,z}) \ {zx} \/ ({z,x} \ {xy,yz}) by A5,ZFMISC_1:65
     .= ({x,y} \/ {y,z}) \ {zx} \/ {z,x} by A6,ZFMISC_1:72
     .= {x,y,y,z} \ {zx} \/ {z,x} by ENUMSET1:45
     .= {y,y,x,z} \ {zx} \/ {z,x} by ENUMSET1:110
     .= {y,x,z} \ {zx} \/ {z,x} by ENUMSET1:71
     .= {x,y,z} \ {zx} \/ {z,x} by ENUMSET1:99
     .= {x,y,z} \/ {z,x} by A7,ZFMISC_1:65
     .= {x,y,z,z,x} by ENUMSET1:49
     .= {x,y,z,z} \/ {x} by ENUMSET1:50
     .= {z,z,x,y} \/ {x} by ENUMSET1:118
     .= {z,x,y} \/ {x} by ENUMSET1:71
     .= {z,x,y,x} by ENUMSET1:46
     .= {x,x,y,z} by ENUMSET1:113
     .= {x,y,z} by ENUMSET1:71;
    hence thesis;
   end;

theorem ThGFA0C4:
 for x,y,z being set st
   x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
  holds InputVertices GFA0CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set MI = GFA0CarryIStr(x,y,z);
     assume
A1:  x <> yz & y <> zx & z <> xy;
A2:  InnerVertices S = {xyz} by CIRCCOMB:49;
A3:  InputVertices S = rng <*xy, yz, zx*> by CIRCCOMB:49
                    .= {xy, yz, zx} by FINSEQ_2:148;
A4:  {x, y, z} \ {xyz} = {x, y, z} by Lemma2;
A5:  {xy, yz, zx} \ {xy, yz, zx} = {} by XBOOLE_1:37;
     GFA0CarryStr(x,y,z) = MI +* S & MI tolerates S by CIRCCOMB:55;
    hence InputVertices GFA0CarryStr(x,y,z)
      = ((InputVertices MI) \ InnerVertices S) \/
         ((InputVertices S) \ InnerVertices MI) by CIRCCMB2:6
     .= {x,y,z} \/ ({xy, yz, zx} \ InnerVertices MI) by A1,A2,A3,A4,ThGFA0C3
     .= {x,y,z} \/ {} by A5,ThGFA0C0
     .= {x,y,z};
  end;

theorem ThGFA0C5:
 for x,y,z being non pair set holds
  InputVertices GFA0CarryStr(x,y,z) is without_pairs
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set M = GFA0CarryStr(x,y,z);
     set MI = GFA0CarryIStr(x,y,z);
A1:  InputVertices Cxy is without_pairs & InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A2: InputVertices MI is without_pairs by A1,FACIRC_1:9;
     InnerVertices S is Relation by FACIRC_1:38;
then A3: InputVertices M = (InputVertices MI) \/
          (InputVertices S \ InnerVertices MI) by A2,FACIRC_1:6;
     given xx being pair set such that
A4:  xx in InputVertices M;
A5:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A6:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A7: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A6,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A6,A7,CIRCCOMB:15
     .= {xy, yz} \/ {zx} by ENUMSET1:41
     .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A5,XBOOLE_1:37;
    hence thesis by A2,A3,A4,FACIRC_1:def 2;
  end;

::-------------------------------------------------------
:: Carrier and misc.

theorem ThGFA0C6:
  for x,y,z being set holds
    x in the carrier of GFA0CarryStr(x,y,z) &
    y in the carrier of GFA0CarryStr(x,y,z) &
    z in the carrier of GFA0CarryStr(x,y,z) &
    [<*x,y*>,and2] in the carrier of GFA0CarryStr(x,y,z) &
    [<*y,z*>,and2] in the carrier of GFA0CarryStr(x,y,z) &
    [<*z,x*>,and2] in the carrier of GFA0CarryStr(x,y,z) &
    [<*[<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2]*>,or3]
                   in the carrier of GFA0CarryStr(x,y,z)
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
     y in the carrier of Cxy by FACIRC_1:43;
then A0: y in the carrier of Cxy +* Cyz by FACIRC_1:20;
     x in the carrier of Czx & z in the carrier of Czx by FACIRC_1:43;
then A1: x in the carrier of GFA0CarryIStr(x,y,z) &
         y in the carrier of GFA0CarryIStr(x,y,z) &
         z in the carrier of GFA0CarryIStr(x,y,z) by A0,FACIRC_1:20;
     xy in the carrier of Cxy & yz in the carrier of Cyz by FACIRC_1:43;
then A2: xy in the carrier of Cxy +* Cyz & yz in the carrier of Cxy +* Cyz
       by FACIRC_1:20;
     zx in the carrier of Czx by FACIRC_1:43;
then A3: xy in the carrier of GFA0CarryIStr(x,y,z) &
         yz in the carrier of GFA0CarryIStr(x,y,z) &
         zx in the carrier of GFA0CarryIStr(x,y,z) by A2,FACIRC_1:20;
     set p = <*xy,yz,zx*>;
     the carrier of Cxyz = rng p \/ {xyz} & [p,f4] in {[p,f4]}
       by CIRCCOMB:def 6,TARSKI:def 1;
then xyz in the carrier of Cxyz by XBOOLE_0:def 2;
    hence thesis by A1,A3,FACIRC_1:20;
  end;

theorem ThGFA0C7:
 for x,y,z being set holds
   [<*x,y*>,and2] in InnerVertices GFA0CarryStr(x,y,z) &
   [<*y,z*>,and2] in InnerVertices GFA0CarryStr(x,y,z) &
   [<*z,x*>,and2] in InnerVertices GFA0CarryStr(x,y,z) &
   GFA0CarryOutput(x,y,z) in InnerVertices GFA0CarryStr(x,y,z)
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     InnerVertices GFA0CarryStr(x,y,z)
       = {xy,yz,zx} \/ {GFA0CarryOutput(x,y,z)} by ThGFA0C1
      .= {xy,yz,zx,GFA0CarryOutput(x,y,z)} by ENUMSET1:46;
    hence thesis by ENUMSET1:def 2;
  end;

theorem ThGFA0C8:
  for x,y,z being set st
     x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   holds
    x in InputVertices GFA0CarryStr(x,y,z) &
    y in InputVertices GFA0CarryStr(x,y,z) &
    z in InputVertices GFA0CarryStr(x,y,z)
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     InputVertices GFA0CarryStr(x,y,z) = {x,y,z} by A0,ThGFA0C4;
    hence thesis by ENUMSET1:def 1;
  end;

theorem ThGFA0C9:
 for x,y,z being non pair set holds
  InputVertices GFA0CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set M = GFA0CarryStr(x,y,z);
     set MI = GFA0CarryIStr(x,y,z);
     set S = 1GateCircStr(<*xy,yz,zx*>,f4);
A1:  InputVertices Cxy is without_pairs &
     InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then A2: InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A3: InputVertices MI is without_pairs by A1,FACIRC_1:9;
A4:  InputVertices Cxy = {x,y} & InputVertices Cyz = {y,z} &
     InputVertices Czx = {z,x} by FACIRC_1:40;
     InnerVertices S is Relation by FACIRC_1:38;
then A5: InputVertices M =
      (InputVertices MI) \/ (InputVertices S \ InnerVertices MI)
       by A3,FACIRC_1:6;
A6:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A7:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A8: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A7,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A7,A8,CIRCCOMB:15
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A6,XBOOLE_1:37;
    hence InputVertices M
       = (InputVertices(Cxy+*Cyz)) \/ InputVertices Czx
          by A1,A2,A7,A8,A5,FACIRC_1:7
      .= (InputVertices Cxy) \/ (InputVertices Cyz) \/ (InputVertices Czx)
          by A1,A7,FACIRC_1:7
      .= {x,y,y,z} \/ {z,x} by A4,ENUMSET1:45
      .= {y,y,x,z} \/ {z,x} by ENUMSET1:110
      .= {y,x,z} \/ {z,x} by ENUMSET1:71
      .= {x,y,z} \/ {z,x} by ENUMSET1:99
      .= {x,y,z} \/ ({z}\/{x}) by ENUMSET1:41
      .= {x,y,z} \/ {z} \/ {x} by XBOOLE_1:4
      .= {z,x,y} \/ {z} \/ {x} by ENUMSET1:100
      .= {z,z,x,y} \/ {x} by ENUMSET1:44
      .= {z,x,y} \/ {x} by ENUMSET1:71
      .= {x,y,z} \/ {x} by ENUMSET1:100
      .= {x,x,y,z} by ENUMSET1:44
      .= {x,y,z} by ENUMSET1:71;
  end;

::----------------------------------------------------
:: GFA0 Carry : Stability of the Carry Output Circuit
::----------------------------------------------------

theorem ThGFA0C22:
 for x,y,z being set for s being State of GFA0CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
   holds
    (Following s).[<*x,y*>,and2] = a1 '&' a2 &
    (Following s).[<*y,z*>,and2] = a2 '&' a3 &
    (Following s).[<*z,x*>,and2] = a3 '&' a1
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     let s be State of GFA0CarryCirc(x,y,z);
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA0CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
A4:  x in the carrier of S & y in the carrier of S & z in the carrier of S
      by ThGFA0C6;
     xy in InnerVertices GFA0CarryStr(x,y,z) by ThGFA0C7;
     hence (Following s).[<*x,y*>,f1] = f1.(s*<*x,y*>) by A2,FACIRC_1:35
         .= f1.<*a1,a2*> by A1,A3,A4,FINSEQ_2:145
         .= a1 '&' a2 by TWOSCOMP:def 1;
     yz in InnerVertices GFA0CarryStr(x,y,z) by ThGFA0C7;
     hence (Following s).[<*y,z*>,f2] = f2.(s*<*y,z*>) by A2,FACIRC_1:35
         .= f2.<*a2,a3*> by A1,A3,A4,FINSEQ_2:145
         .= a2 '&' a3 by TWOSCOMP:def 1;
     zx in InnerVertices GFA0CarryStr(x,y,z) by ThGFA0C7;
     hence (Following s).[<*z,x*>,f3] = f3.(s*<*z,x*>) by A2,FACIRC_1:35
         .= f3.<*a3,a1*> by A1,A3,A4,FINSEQ_2:145
         .= a3 '&' a1 by TWOSCOMP:def 1;
  end;

theorem ThGFA0C23:
 for x,y,z being set for s being State of GFA0CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st
    a1 = s.[<*x,y*>,and2] & a2 = s.[<*y,z*>,and2] & a3 = s.[<*z,x*>,and2]
   holds
    (Following s).GFA0CarryOutput(x,y,z) = a1 'or' a2 'or' a3
   proof
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     let s be State of GFA0CarryCirc(x,y,z);
     set xy =[<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.xy & a2 = s.yz & a3 = s.zx;
     set S = GFA0CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
     reconsider xy, yz, zx as Element of InnerVertices S by ThGFA0C7;
thus (Following s).GFA0CarryOutput(x,y,z)
          = f4.(s*<*xy, yz, zx*>) by A2,FACIRC_1:35
         .= f4.<*a1,a2,a3*> by A1,A3,FINSEQ_2:146
         .= a1 'or' a2 'or' a3 by TWOSCOMP:16;
  end;

theorem ThGFA0C24:
  for x,y,z being set st
    x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   for s being State of GFA0CarryCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA0CarryOutput(x,y,z) =
         (a1 '&' a2) 'or' (a2 '&' a3) 'or' (a3 '&' a1) &
      Following(s,2).[<*x,y*>,and2] = a1 '&' a2 &
      Following(s,2).[<*y,z*>,and2] = a2 '&' a3 &
      Following(s,2).[<*z,x*>,and2] = a3 '&' a1
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let s be State of GFA0CarryCirc(x,y,z);
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA0CarryStr(x,y,z);
     reconsider x' = x, y' = y, z' = z as Vertex of S by ThGFA0C6;
     x in InputVertices S & y in InputVertices S & z in InputVertices S
     by A0,ThGFA0C8;
then A2: (Following s).x' = s.x & (Following s).y' = s.y &
         (Following s).z' = s.z by CIRCUIT2:def 5;
A3:  Following(s,2) = Following Following s by FACIRC_1:15;
     (Following s).xy = a1 '&' a2 &
     (Following s).yz = a2 '&' a3 &
     (Following s).zx = a3 '&' a1 by A1,ThGFA0C22;
    hence Following(s,2).GFA0CarryOutput(x,y,z) =
        (a1 '&' a2) 'or' (a2 '&' a3) 'or' (a3 '&' a1) by A3,ThGFA0C23;
   thus thesis by A1,A2,A3,ThGFA0C22;
  end;

theorem ThGFA0C28:
  for x,y,z being set st
     x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   for s being State of GFA0CarryCirc(x,y,z)
    holds Following(s,2) is stable
   proof
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let s be State of GFA0CarryCirc(x,y,z);
     set S = GFA0CarryStr(x,y,z);
A1:  dom Following Following(s,2) = the carrier of S &
     dom Following(s,2) = the carrier of S by CIRCUIT1:4;
     reconsider xx = x, yy = y, zz = z as Vertex of S by ThGFA0C6;
     set a1 = s.xx, a2 = s.yy, a3 = s.zz;
     set ffs = Following(s,2), fffs = Following ffs;
     a1 = s.x & a2 = s.y & a3 = s.z;
then A2: ffs.GFA0CarryOutput(x,y,z) =
     a1 '&' a2 'or' a2 '&' a3 'or' a3 '&' a1 &
     ffs.xy = a1 '&' a2 &
     ffs.yz = a2 '&' a3 &
     ffs.zx = a1 '&' a3 by A0,ThGFA0C24;
A3:  ffs = Following Following s by FACIRC_1:15;
A4:  x in InputVertices S & y in InputVertices S & z in InputVertices S
      by A0,ThGFA0C8;
then (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
      by CIRCUIT2:def 5;
then A5: ffs.x = a1 & ffs.y = a2 & ffs.z = a3 by A3,A4,CIRCUIT2:def 5;
     now let a be set; assume
A6:  a in the carrier of S;
then reconsider v = a as Vertex of S;
A7:  v in InputVertices S \/ InnerVertices S by A6,XBOOLE_1:45;
     thus ffs.a = (fffs).a
      proof per cases by A7,XBOOLE_0:def 2;
        suppose v in InputVertices S;
          hence thesis by CIRCUIT2:def 5;
        end;
        suppose v in InnerVertices S;
           then v in {xy, yz, zx} \/ {GFA0CarryOutput(x,y,z)} by ThGFA0C1;
           then v in {xy, yz, zx} or
                v in {GFA0CarryOutput(x,y,z)} by XBOOLE_0:def 2;
           then v = xy or v = yz or v = zx or
                v = GFA0CarryOutput(x,y,z) by ENUMSET1:def 1,TARSKI:def 1;
          hence thesis by A2,A5,ThGFA0C22,ThGFA0C23;
        end;
      end;
     end;
    hence ffs = fffs by A1,FUNCT_1:9;
  end;

::=========================================================================

::-------------------------------------------------
:: GFA0 Adder : Circuit Definition of Adder Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA0AdderStr(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
   2GatesCircStr(x,y,z, xor2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0AdderCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA0AdderStr(x,y,z) equals
   2GatesCircuit(x,y,z, xor2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA0AdderOutput(x,y,z) ->
      Element of InnerVertices GFA0AdderStr(x,y,z) equals
   2GatesCircOutput(x,y,z, xor2);
  coherence;
end;

::-------------------------------------------------------
:: GFA0 Adder : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA0S0:
 for x,y,z being set holds
  InnerVertices GFA0AdderStr(x,y,z) =
    {[<*x,y*>,xor2]} \/ {GFA0AdderOutput(x,y,z)}
   proof
     set f = xor2;
     let x,y,z be set;
     set xy = [<*x,y*>,f];
     set S = GFA0AdderStr(x,y,z);
     thus InnerVertices S
       = {xy, GFA0AdderOutput(x,y,z)} by FACIRC_1:56
      .= {xy} \/ {GFA0AdderOutput(x,y,z)} by ENUMSET1:41;
   end;

theorem
 for x,y,z being set holds
  InnerVertices GFA0AdderStr(x,y,z) is Relation by FACIRC_1:58;

::-------------------------------------------------------
:: InputVertices

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2] holds
  InputVertices GFA0AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

theorem
 for x,y,z being non pair set holds
  InputVertices GFA0AdderStr(x,y,z) is without_pairs by FACIRC_1:59;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
   x in the carrier of GFA0AdderStr(x,y,z) &
   y in the carrier of GFA0AdderStr(x,y,z) &
   z in the carrier of GFA0AdderStr(x,y,z) &
   [<*x,y*>,xor2] in the carrier of GFA0AdderStr(x,y,z) &
   [<*[<*x,y*>,xor2], z*>, xor2] in the carrier of GFA0AdderStr(x,y,z)
   by FACIRC_1:60,61;

theorem ThGFA0S7:
 for x,y,z being set holds
   [<*x,y*>,xor2] in InnerVertices GFA0AdderStr(x,y,z) &
   GFA0AdderOutput(x,y,z) in InnerVertices GFA0AdderStr(x,y,z)
   proof
     set f = xor2;
     let x,y,z be set;
     set S = GFA0AdderStr(x,y,z);
     InnerVertices S
       = {[<*x,y*>,f]} \/ {GFA0AdderOutput(x,y,z)} by ThGFA0S0
      .= {[<*x,y*>,f],GFA0AdderOutput(x,y,z)} by ENUMSET1:41;
    hence thesis by TARSKI:def 2;
   end;

theorem ThGFA0S8:
 for x,y,z being set st z <> [<*x,y*>, xor2] holds
    x in InputVertices GFA0AdderStr(x,y,z) &
    y in InputVertices GFA0AdderStr(x,y,z) &
    z in InputVertices GFA0AdderStr(x,y,z)
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set S = GFA0AdderStr(x,y,z);
     InputVertices S = {x,y,z} by A0,FACIRC_1:57;
     hence thesis by ENUMSET1:def 1;
   end;

theorem
 for x,y,z being non pair set holds
   InputVertices GFA0AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

::----------------------------------------------------
:: GFA0 Adder : Stability of the Adder Output Circuit
::----------------------------------------------------

theorem ThGFA0S12:
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA0AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      (Following s).[<*x,y*>,xor2] = a1 'xor' a2 &
      (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA0AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
     (Following s).xy = f.<*a1, a2*> by A0,A2,Lemma3;
     hence (Following s).xy = a1 'xor' a2 by TWOSCOMP:def 13;
     thus (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
       by A0,A2,Lemma3;
   end;

theorem ThGFA0S13:
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA0AdderCirc(x,y,z)
   for a1a2,a1,a2,a3 being Element of BOOLEAN
     st a1a2 = s.[<*x,y*>,xor2] & a1 = s.x & a2 = s.y & a3 = s.z
    holds
     (Following s).GFA0AdderOutput(x,y,z) = a1a2 'xor' a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA0AdderCirc(x,y,z);
     let s be State of A;
     let a1a2,a1,a2,a3 be Element of BOOLEAN such that
A2:  a1a2 = s.xy & a1 = s.x & a2 = s.y & a3 = s.z;
     set C = GFA0AdderOutput(x,y,z);
     thus (Following s).GFA0AdderOutput(x,y,z)
         = f.<*s.xy, s.z*> by A0,Lemma3
        .= a1a2 'xor' a3 by A2,TWOSCOMP:def 13;
   end;

theorem ThGFA0S14:
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA0AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
    holds
     Following(s,2).GFA0AdderOutput(x,y,z) = a1 'xor' a2 'xor' a3 &
     Following(s,2).[<*x,y*>,xor2] = a1 'xor' a2 &
     Following(s,2).x = a1 & Following(s,2).y = a2 & Following(s,2).z = a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA0AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
     set C = GFA0AdderOutput(x,y,z);
     thus (Following(s,2)).GFA0AdderOutput(x,y,z)
         = f.<* f.<*a1, a2*>, a3*> by A0,A2,FACIRC_1:62
        .= f.<*a1 'xor' a2, a3*> by TWOSCOMP:def 13
        .= a1 'xor' a2 'xor' a3 by TWOSCOMP:def 13;
     (Following(s,2)).xy = f.<*a1, a2*> by A0,A2,FACIRC_1:62;
     hence (Following(s,2)).xy = a1 'xor' a2 by TWOSCOMP:def 13;
     thus (Following(s,2)).x = a1 & (Following(s,2)).y = a2 &
          (Following(s,2)).z = a3 by A0,A2,FACIRC_1:62;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2]
  for s being State of GFA0AdderCirc(x,y,z)
    holds Following(s,2) is stable by FACIRC_1:63;

::=====================================================================

::---------------------------------------------------
:: GFA0 : Circuit Definition of GFA Combined Circuit
::---------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA0Str(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
    GFA0AdderStr(x,y,z) +* GFA0CarryStr(x,y,z);
  coherence;
end;

definition
  let x,y,z be set;
 func BitGFA0Circ(x,y,z) ->
   strict Boolean gate`2=den Circuit of BitGFA0Str(x,y,z) equals
   GFA0AdderCirc(x,y,z) +* GFA0CarryCirc(x,y,z);
  coherence;
end;

::----------------------------------------------------------
:: GFA0 Combined : Carrier, InnerVertices and InputVertices
::----------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA0SC1:
  for x,y,z being set holds
   InnerVertices BitGFA0Str(x,y,z) =
     {[<*x,y*>,xor2]} \/ {GFA0AdderOutput(x,y,z)} \/
     {[<*x,y*>,and2], [<*y,z*>,and2], [<*z,x*>,and2]} \/
     {GFA0CarryOutput(x,y,z)}
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA0Str(x,y,z);
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
     set A1 = GFA0AdderOutput(x,y,z);
     set A2 = GFA0CarryOutput(x,y,z);
     thus InnerVertices S
       = (InnerVertices S1) \/ InnerVertices S2 by FACIRC_1:27
      .= {xyf0} \/ {A1} \/ InnerVertices S2 by ThGFA0S0
      .= {xyf0} \/ {A1} \/ ({xyf1, yzf2, zxf3} \/ {A2}) by ThGFA0C1
      .= {xyf0} \/ {A1} \/ {xyf1, yzf2, zxf3} \/ {A2} by XBOOLE_1:4;
   end;

theorem
  for x,y,z being set holds
    InnerVertices BitGFA0Str(x,y,z) is Relation
   proof
     let x,y,z be set;
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
     InnerVertices S1 is Relation & InnerVertices S2 is Relation
       by FACIRC_1:58,ThGFA0C2;
     hence thesis by FACIRC_1:3;
  end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA0SC5:
  for x,y,z being set  st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   holds
    InputVertices BitGFA0Str(x,y,z) = {x,y,z}
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] and
A2:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA0Str(x,y,z);
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
A3:  InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
A4:  InputVertices S2 = {x,y,z} by A2,ThGFA0C4;
     S1 tolerates S2 by CIRCCOMB:55;
    hence thesis by A3,A4,FACIRC_2:22;
   end;

theorem ThGFA0SC6:
 for x,y,z being non pair set holds
    InputVertices BitGFA0Str(x,y,z) = {x,y,z}
   proof
     let x,y,z be non pair set;
     set S = BitGFA0Str(x,y,z);
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
A1:  InputVertices S1 is without_pairs & InnerVertices S1 is Relation
      by FACIRC_1:58,FACIRC_1:59;
A2:  InputVertices S2 is without_pairs & InnerVertices S2 is Relation
      by ThGFA0C2,ThGFA0C5;
     InputVertices S1 = {x,y,z} & InputVertices S2 = {x,y,z}
      by FACIRC_1:57,ThGFA0C9;
    hence InputVertices S = {x,y,z} \/ {x,y,z} by A1,A2,FACIRC_1:7
                         .= {x,y,z};
  end;

theorem
 for x,y,z being non pair set holds
    InputVertices BitGFA0Str(x,y,z) is without_pairs
   proof
     let x,y,z be non pair set;
     InputVertices BitGFA0Str(x,y,z) = {x,y,z} by ThGFA0SC6;
    hence thesis;
   end;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
    x in the carrier of BitGFA0Str(x,y,z) &
    y in the carrier of BitGFA0Str(x,y,z) &
    z in the carrier of BitGFA0Str(x,y,z) &
    [<*x,y*>,xor2] in the carrier of BitGFA0Str(x,y,z) &
    [<*[<*x,y*>,xor2],z*>,xor2] in the carrier of BitGFA0Str(x,y,z) &
    [<*x,y*>,and2] in the carrier of BitGFA0Str(x,y,z) &
    [<*y,z*>,and2] in the carrier of BitGFA0Str(x,y,z) &
    [<*z,x*>,and2] in the carrier of BitGFA0Str(x,y,z) &
    [<*[<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2]*>,or3]
                                in the carrier of BitGFA0Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
A1:  x in the carrier of S1 & y in the carrier of S1 &
     z in the carrier of S1 &
     [<*x,y*>,f0] in the carrier of S1 &
     [<*[<*x,y*>,f0],z*>,f0] in the carrier of S1 by FACIRC_1:60,61;
     xy in the carrier of S2 & yz in the carrier of S2 &
     zx in the carrier of S2 &
     xyz in the carrier of S2 by ThGFA0C6;
    hence thesis by A1,FACIRC_1:20;
  end;

theorem ThGFA0SC7:
  for x,y,z being set holds
    [<*x,y*>,xor2] in InnerVertices BitGFA0Str(x,y,z) &
    GFA0AdderOutput(x,y,z) in InnerVertices BitGFA0Str(x,y,z) &
    [<*x,y*>,and2] in InnerVertices BitGFA0Str(x,y,z) &
    [<*y,z*>,and2] in InnerVertices BitGFA0Str(x,y,z) &
    [<*z,x*>,and2] in InnerVertices BitGFA0Str(x,y,z) &
    GFA0CarryOutput(x,y,z) in InnerVertices BitGFA0Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA0Str(x,y,z);
     set A1 = GFA0AdderOutput(x,y,z);
     set A2 = GFA0CarryOutput(x,y,z);
     InnerVertices S
       = {xyf0} \/ {A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ThGFA0SC1
      .= {xyf0,A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:41
      .= {xyf0,A1,xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:48
      .= {xyf0,A1,xyf1,yzf2,zxf3,A2} by ENUMSET1:55;
     hence thesis by ENUMSET1:def 4;
   end;

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   holds
    x in InputVertices BitGFA0Str(x,y,z) &
    y in InputVertices BitGFA0Str(x,y,z) &
    z in InputVertices BitGFA0Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA0Str(x,y,z);
     InputVertices S = {x,y,z} by A1,ThGFA0SC5;
    hence thesis by ENUMSET1:def 1;
   end;

::------------------------------------------------------------------
:: GFA0 : Carry and Adder Output Definition of GFA Combined Circuit
::------------------------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA0CarryOutput(x,y,z) ->
         Element of InnerVertices BitGFA0Str(x,y,z) equals
    [<*[<*x,y*>,and2],[<*y,z*>,and2],[<*z,x*>,and2]*>,or3];
  coherence
    proof
      GFA0CarryOutput(x,y,z)
        in InnerVertices BitGFA0Str(x,y,z) by ThGFA0SC7;
      hence thesis;
    end;
end;

definition
 let x,y,z be set;
 func BitGFA0AdderOutput(x,y,z) ->
         Element of InnerVertices BitGFA0Str(x,y,z) equals
    2GatesCircOutput(x,y,z, xor2);
  coherence
    proof
      GFA0AdderOutput(x,y,z)
        in InnerVertices BitGFA0Str(x,y,z) by ThGFA0SC7;
      hence thesis;
    end;
end;

::-------------------------------------------------------------
:: GFA0 Combined : Stability of the Adder/Carry Output Circuit
::-------------------------------------------------------------

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   for s being State of BitGFA0Circ(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA0AdderOutput(x,y,z) = a1 'xor' a2 'xor' a3 &
      Following(s,2).GFA0CarryOutput(x,y,z)
           = a1 '&' a2 'or' a2 '&' a3 'or' a3 '&' a1
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA0Str(x,y,z);
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
     set A = BitGFA0Circ(x,y,z);
     set A1 = GFA0AdderCirc(x,y,z);
     set A2 = GFA0CarryCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN; assume
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
A3:  x in the carrier of S1 & y in the carrier of S1 & z in the carrier of S1
     by FACIRC_1:60;
A4:  x in the carrier of S2 & y in the carrier of S2 & z in the carrier of S2
     by ThGFA0C6;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A6: InputVertices S1 = InputVertices S2 by A1,ThGFA0C4;
A7:  InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
     dom s1 = the carrier of S1 by CIRCUIT1:4;
then a1 = s1.x & a2 = s1.y & a3 = s1.z by A2,A3,FUNCT_1:70;
then Following(t,2).GFA0AdderOutput(x,y,z)
        = Following(s1,2).GFA0AdderOutput(x,y,z) &
     Following(s1,2).GFA0AdderOutput(x,y,z) = a1 'xor' a2 'xor' a3
       by A1,A6,A7,ThGFA0S14,FACIRC_1:32;
     hence Following(s,2).GFA0AdderOutput(x,y,z) = a1 'xor' a2 'xor' a3;
     dom s2 = the carrier of S2 by CIRCUIT1:4;
then a1 = s2.x & a2 = s2.y & a3 = s2.z by A2,A4,FUNCT_1:70;
then Following(t,2).GFA0CarryOutput(x,y,z)
        = Following(s2,2).GFA0CarryOutput(x,y,z) &
     Following(s2,2).GFA0CarryOutput(x,y,z)
        = a1 '&' a2 'or' a2 '&' a3 'or' a3 '&' a1
       by A1,A6,A7,ThGFA0C24,FACIRC_1:33;
     hence Following(s,2).GFA0CarryOutput(x,y,z)
        = a1 '&' a2 'or' a2 '&' a3 'or' a3 '&' a1;
   end;

theorem
 for x,y,z being set  st z <> [<*x,y*>,xor2] &
   x <> [<*y,z*>,and2] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2]
   for s being State of BitGFA0Circ(x,y,z)
    holds Following(s,2) is stable
   proof
     set f0 = xor2;
     set f1 = and2, f2 = and2, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA0Str(x,y,z);
     set S1 = GFA0AdderStr(x,y,z);
     set S2 = GFA0CarryStr(x,y,z);
     set A = BitGFA0Circ(x,y,z);
     set A1 = GFA0AdderCirc(x,y,z);
     set A2 = GFA0CarryCirc(x,y,z);
     let s be State of A;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A3: InputVertices S1 = InputVertices S2 by A1,ThGFA0C4;
     InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
then A4: Following(s1,2) = Following(t,2)|the carrier of S1 &
         Following(s1,3) = Following(t,3)|the carrier of S1 &
         Following(s2,2) = Following(t,2)|the carrier of S2 &
         Following(s2,3) = Following(t,3)|the carrier of S2
          by A3,FACIRC_1:30,31;
     Following(s1,2) is stable by A1,FACIRC_1:63;
then A5: Following(s1,2)
       = Following Following(s1,2) by CIRCUIT2:def 6
      .= Following(s1,2+1) by FACIRC_1:12;
     Following(s2,2) is stable by A1,ThGFA0C28;
then A6: Following(s2,2)
       = Following Following(s2,2) by CIRCUIT2:def 6
      .= Following(s2,2+1) by FACIRC_1:12;
A7:  Following(s,2+1) = Following Following(s,2) by FACIRC_1:12;
A8:  dom Following(s,2) = the carrier of S &
     dom Following(s,3) = the carrier of S &
     dom Following(s1,2) = the carrier of S1 &
     dom Following(s2,2) = the carrier of S2 by CIRCUIT1:4;
A9: the carrier of S = (the carrier of S1) \/ the carrier of S2
      by CIRCCOMB:def 2;
       now let a be set; assume a in the carrier of S;
       then a in the carrier of S1 or a in the carrier of S2
              by A9,XBOOLE_0:def 2;
       then (Following(s,2)).a = (Following(s1,2)).a &
            (Following(s,3)).a = (Following(s1,3)).a or
            (Following(s,2)).a = (Following(s2,2)).a &
            (Following(s,3)).a = (Following(s2,3)).a
              by A4,A5,A6,A8,FUNCT_1:70;
       hence (Following(s,2)).a = (Following Following(s,2)).a
              by A5,A6,FACIRC_1:12;
       end;
    hence Following(s,2) = Following Following(s,2) by A7,A8,FUNCT_1:9;
   end;

::========================================================================

begin :: Generalized Full Adder (GFA) Circuit (TYPE-1)

::========================================================================
:: << GFA TYPE-1 >>
::------------------------------------------------------------------------
::   Name     : Generalized Full Adder Type-1 (GFA1)
::   Function : x - y + z = 2 * c - s
::
::   Logic Symbol :      x     -y      Combined : GFA1CarryIStr(x,y,z)
::                       |     /                  GFA1CarryStr(x,y,z)
::                       |    /                   GFA1AdderStr(x,y,z)
::                   +---*---O                  --->
::                   |  GFA  *-----z              BitGFA1Str(x,y,z)
::                   | TYPE1 |
::                   *---O---+          Outputs : BitGFA1CarryOutput(x,y,z)
::                  /    |                        BitGFA1AdderOutput(x,y,z)
::                 /     |
::                c     -s          Calculation : Following(s,2) is stable.
::=========================================================================

::-------------------------------------------------
:: GFA1 Carry : Circuit Definition of Carry Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA1CarryIStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    1GateCircStr(<*x,y*>,and2c) +* 1GateCircStr(<*y,z*>,and2a) +*
    1GateCircStr(<*z,x*>,and2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1CarryICirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA1CarryIStr(x,y,z) equals
    1GateCircuit(x,y,and2c) +* 1GateCircuit(y,z,and2a) +*
    1GateCircuit(z,x,and2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1CarryStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    GFA1CarryIStr(x,y,z) +*
    1GateCircStr(<*[<*x,y*>,and2c], [<*y,z*>,and2a], [<*z,x*>,and2]*>,or3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1CarryCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA1CarryStr(x,y,z) equals
    GFA1CarryICirc(x,y,z) +*
    1GateCircuit([<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2],or3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1CarryOutput(x,y,z) -> Element of InnerVertices GFA1CarryStr(x,y,z)
  equals
   [<*[<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2]*>,or3];
  coherence
   proof
     [<*[<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2]*>,or3] in
      InnerVertices
       1GateCircStr(<*[<*x,y*>,and2c],[<*y,z*>,and2a], [<*z,x*>,and2]*>,or3)
       by FACIRC_1:47;
    hence thesis by FACIRC_1:21;
   end;
end;

::-------------------------------------------------------
:: GFA1 Carry : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA1C0:
  for x,y,z being set holds
  InnerVertices GFA1CarryIStr(x,y,z) =
   {[<*x,y*>,and2c], [<*y,z*>,and2a], [<*z,x*>,and2]}
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
A1:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A2:  Cxy tolerates Cyz by CIRCCOMB:55;
     InnerVertices GFA1CarryIStr(x,y,z)
       = InnerVertices(Cxy +* Cyz) \/ InnerVertices(Czx) by A1,CIRCCOMB:15
      .= InnerVertices(Cxy) \/ InnerVertices(Cyz) \/
         InnerVertices(Czx) by A2,CIRCCOMB:15
      .= {xy} \/ InnerVertices(Cyz) \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ {zx} by CIRCCOMB:49
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
    hence thesis;
   end;

theorem ThGFA1C1:
  for x,y,z being set holds
  InnerVertices GFA1CarryStr(x,y,z) =
     {[<*x,y*>,and2c], [<*y,z*>,and2a], [<*z,x*>,and2]} \/
     {GFA1CarryOutput(x,y,z)}
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A1:  Cxy tolerates (Cyz +* Czx +* Cxyz) by CIRCCOMB:55;
A2:  Cyz tolerates (Czx +* Cxyz) by CIRCCOMB:55;
A3:  Czx tolerates Cxyz by CIRCCOMB:55;
A4:  InnerVertices (Cyz +* (Czx +* Cxyz))
      = InnerVertices Cyz \/ InnerVertices (Czx +* Cxyz) by A2,CIRCCOMB:15;
A5:  InnerVertices (Czx +* Cxyz)
      = InnerVertices Czx \/ InnerVertices Cxyz by A3,CIRCCOMB:15;
thus InnerVertices GFA1CarryStr(x,y,z)
      = InnerVertices (Cxy +* (Cyz +* Czx) +* Cxyz) by CIRCCOMB:10
     .= InnerVertices (Cxy +* (Cyz +* Czx +* Cxyz)) by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* Czx +* Cxyz)
          by A1,CIRCCOMB:15
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* (Czx +* Cxyz))
          by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
          (InnerVertices Czx \/ InnerVertices Cxyz) by A4,A5,XBOOLE_1:4
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by XBOOLE_1:4
     .= {xy} \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ {zx} \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy, yz} \/ {zx} \/ InnerVertices Cxyz by ENUMSET1:41
     .= {xy, yz, zx} \/ InnerVertices Cxyz by ENUMSET1:43
     .= {xy, yz, zx} \/ {GFA1CarryOutput(x,y,z)} by CIRCCOMB:49;
  end;

theorem ThGFA1C2:
  for x,y,z being set holds
  InnerVertices GFA1CarryStr(x,y,z) is Relation
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A3:  InnerVertices Cxy is Relation & InnerVertices Cyz is Relation &
     InnerVertices Czx is Relation by FACIRC_1:38;
then InnerVertices (Cxy +* Cyz) is Relation by FACIRC_1:3;
then InnerVertices Cxyz is Relation &
     InnerVertices GFA1CarryIStr(x,y,z) is Relation by A3,FACIRC_1:3,38;
    hence thesis by FACIRC_1:3;
   end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA1C3:
 for x,y,z being set st
   x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
  holds InputVertices GFA1CarryIStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     assume
A1:  x <> yz & y <> zx & z <> xy;
A2:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A3:  Cxy tolerates Cyz by CIRCCOMB:55;
A4:  y <> yz by FACIRC_2:3;
A5:  not xy in {y,z} by A1,Lemma1;
A6:  not z in {xy, yz} & not x in {xy, yz} by A1,Lemma1;
A7:  not zx in {x,y,z} by A1,Lemma1;
     InputVertices GFA1CarryIStr(x,y,z)
      = (InputVertices(Cxy +* Cyz) \ InnerVertices(Czx)) \/
        (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A2,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A3,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by A3,CIRCCOMB:15
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ InnerVertices(Cyz))) by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by CIRCCOMB:49
     .= (({x,y} \ {yz}) \/ (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ {xy,yz}) by ENUMSET1:41
     .= (({x,y} \/ ({y,z} \ {xy})) \ {zx}) \/ ({z,x} \ {xy,yz})
          by A1,A4,FACIRC_2:1
     .= ({x,y} \/ {y,z}) \ {zx} \/ ({z,x} \ {xy,yz}) by A5,ZFMISC_1:65
     .= ({x,y} \/ {y,z}) \ {zx} \/ {z,x} by A6,ZFMISC_1:72
     .= {x,y,y,z} \ {zx} \/ {z,x} by ENUMSET1:45
     .= {y,y,x,z} \ {zx} \/ {z,x} by ENUMSET1:110
     .= {y,x,z} \ {zx} \/ {z,x} by ENUMSET1:71
     .= {x,y,z} \ {zx} \/ {z,x} by ENUMSET1:99
     .= {x,y,z} \/ {z,x} by A7,ZFMISC_1:65
     .= {x,y,z,z,x} by ENUMSET1:49
     .= {x,y,z,z} \/ {x} by ENUMSET1:50
     .= {z,z,x,y} \/ {x} by ENUMSET1:118
     .= {z,x,y} \/ {x} by ENUMSET1:71
     .= {z,x,y,x} by ENUMSET1:46
     .= {x,x,y,z} by ENUMSET1:113
     .= {x,y,z} by ENUMSET1:71;
    hence thesis;
   end;

theorem ThGFA1C4:
 for x,y,z being set st
   x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
  holds InputVertices GFA1CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set MI = GFA1CarryIStr(x,y,z);
A1:  InnerVertices S = {xyz} by CIRCCOMB:49;
A2:  InputVertices S = rng <*xy, yz, zx*> by CIRCCOMB:49
                    .= {xy, yz, zx} by FINSEQ_2:148;
     assume
A3:  x <> yz & y <> zx & z <> xy;
A4:  {x, y, z} \ {xyz} = {x, y, z} by Lemma2;
A5:  {xy, yz, zx} \ {xy, yz, zx} = {} by XBOOLE_1:37;
     GFA1CarryStr(x,y,z) = MI +* S & MI tolerates S by CIRCCOMB:55;
     hence InputVertices GFA1CarryStr(x,y,z)
      = ((InputVertices MI) \ InnerVertices S) \/
         ((InputVertices S) \ InnerVertices MI) by CIRCCMB2:6
     .= {x,y,z} \/ ({xy, yz, zx} \ InnerVertices MI) by A1,A2,A3,A4,ThGFA1C3
     .= {x,y,z} \/ {} by A5,ThGFA1C0
     .= {x,y,z};
  end;

theorem ThGFA1C5:
 for x,y,z being non pair set holds
  InputVertices GFA1CarryStr(x,y,z) is without_pairs
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set M = GFA1CarryStr(x,y,z);
     set MI = GFA1CarryIStr(x,y,z);
A1:  InputVertices Cxy is without_pairs & InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A2: InputVertices MI is without_pairs by A1,FACIRC_1:9;
     InnerVertices S is Relation by FACIRC_1:38;
then A3: InputVertices M = (InputVertices MI) \/
          (InputVertices S \ InnerVertices MI) by A2,FACIRC_1:6;
     given xx being pair set such that
A4:  xx in InputVertices M;
A5:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A6:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A7: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A6,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A6,A7,CIRCCOMB:15
     .= {xy, yz} \/ {zx} by ENUMSET1:41
     .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A5,XBOOLE_1:37;
    hence thesis by A2,A3,A4,FACIRC_1:def 2;
  end;

::-------------------------------------------------------
:: Carrier and misc.

theorem ThGFA1C6:
  for x,y,z being set holds
    x in the carrier of GFA1CarryStr(x,y,z) &
    y in the carrier of GFA1CarryStr(x,y,z) &
    z in the carrier of GFA1CarryStr(x,y,z) &
    [<*x,y*>,and2c] in the carrier of GFA1CarryStr(x,y,z) &
    [<*y,z*>,and2a] in the carrier of GFA1CarryStr(x,y,z) &
    [<*z,x*>,and2] in the carrier of GFA1CarryStr(x,y,z) &
    [<*[<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2]*>,or3]
                   in the carrier of GFA1CarryStr(x,y,z)
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
     y in the carrier of Cxy by FACIRC_1:43;
then A0: y in the carrier of Cxy +* Cyz by FACIRC_1:20;
     x in the carrier of Czx & z in the carrier of Czx by FACIRC_1:43;
then A1: x in the carrier of GFA1CarryIStr(x,y,z) &
         y in the carrier of GFA1CarryIStr(x,y,z) &
         z in the carrier of GFA1CarryIStr(x,y,z) by A0,FACIRC_1:20;
     xy in the carrier of Cxy & yz in the carrier of Cyz by FACIRC_1:43;
then A2: xy in the carrier of Cxy +* Cyz & yz in the carrier of Cxy +* Cyz
       by FACIRC_1:20;
     zx in the carrier of Czx by FACIRC_1:43;
then A3: xy in the carrier of GFA1CarryIStr(x,y,z) &
         yz in the carrier of GFA1CarryIStr(x,y,z) &
         zx in the carrier of GFA1CarryIStr(x,y,z) by A2,FACIRC_1:20;
     set p = <*xy,yz,zx*>;
     the carrier of Cxyz = rng p \/ {xyz} & [p,f4] in {[p,f4]}
       by CIRCCOMB:def 6,TARSKI:def 1;
then xyz in the carrier of Cxyz by XBOOLE_0:def 2;
    hence thesis by A1,A3,FACIRC_1:20;
  end;

theorem ThGFA1C7:
 for x,y,z being set holds
   [<*x,y*>,and2c] in InnerVertices GFA1CarryStr(x,y,z) &
   [<*y,z*>,and2a] in InnerVertices GFA1CarryStr(x,y,z) &
   [<*z,x*>,and2] in InnerVertices GFA1CarryStr(x,y,z) &
   GFA1CarryOutput(x,y,z) in InnerVertices GFA1CarryStr(x,y,z)
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     InnerVertices GFA1CarryStr(x,y,z)
       = {xy,yz,zx} \/ {GFA1CarryOutput(x,y,z)} by ThGFA1C1
      .= {xy,yz,zx,GFA1CarryOutput(x,y,z)} by ENUMSET1:46;
    hence thesis by ENUMSET1:def 2;
  end;

theorem ThGFA1C8:
  for x,y,z being set st
     x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   holds
    x in InputVertices GFA1CarryStr(x,y,z) &
    y in InputVertices GFA1CarryStr(x,y,z) &
    z in InputVertices GFA1CarryStr(x,y,z)
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     InputVertices GFA1CarryStr(x,y,z) = {x,y,z} by A0,ThGFA1C4;
    hence thesis by ENUMSET1:def 1;
  end;

theorem ThGFA1C9:
 for x,y,z being non pair set holds
  InputVertices GFA1CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set M = GFA1CarryStr(x,y,z);
     set MI = GFA1CarryIStr(x,y,z);
     set S = 1GateCircStr(<*xy,yz,zx*>,f4);
A1:  InputVertices Cxy is without_pairs &
     InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then A2: InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A3: InputVertices MI is without_pairs by A1,FACIRC_1:9;
A4:  InputVertices Cxy = {x,y} & InputVertices Cyz = {y,z} &
     InputVertices Czx = {z,x} by FACIRC_1:40;
     InnerVertices S is Relation by FACIRC_1:38;
then A5: InputVertices M =
      (InputVertices MI) \/ (InputVertices S \ InnerVertices MI)
       by A3,FACIRC_1:6;
A6:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A7:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A8: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A7,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A7,A8,CIRCCOMB:15
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A6,XBOOLE_1:37;
     hence InputVertices M
       = (InputVertices(Cxy+*Cyz)) \/ InputVertices Czx
          by A1,A2,A7,A8,A5,FACIRC_1:7
      .= (InputVertices Cxy) \/ (InputVertices Cyz) \/ (InputVertices Czx)
          by A1,A7,FACIRC_1:7
      .= {x,y,y,z} \/ {z,x} by A4,ENUMSET1:45
      .= {y,y,x,z} \/ {z,x} by ENUMSET1:110
      .= {y,x,z} \/ {z,x} by ENUMSET1:71
      .= {x,y,z} \/ {z,x} by ENUMSET1:99
      .= {x,y,z} \/ ({z}\/{x}) by ENUMSET1:41
      .= {x,y,z} \/ {z} \/ {x} by XBOOLE_1:4
      .= {z,x,y} \/ {z} \/ {x} by ENUMSET1:100
      .= {z,z,x,y} \/ {x} by ENUMSET1:44
      .= {z,x,y} \/ {x} by ENUMSET1:71
      .= {x,y,z} \/ {x} by ENUMSET1:100
      .= {x,x,y,z} by ENUMSET1:44
      .= {x,y,z} by ENUMSET1:71;
  end;

::----------------------------------------------------
:: GFA1 Carry : Stability of the Carry Output Circuit
::----------------------------------------------------

theorem ThGFA1C22:
 for x,y,z being set for s being State of GFA1CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
   holds
    (Following s).[<*x,y*>,and2c] = a1 '&' 'not' a2 &
    (Following s).[<*y,z*>,and2a] = 'not' a2 '&' a3 &
    (Following s).[<*z,x*>,and2]  = a3 '&' a1
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     let s be State of GFA1CarryCirc(x,y,z);
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA1CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
A4:  x in the carrier of S & y in the carrier of S & z in the carrier of S
      by ThGFA1C6;
     xy in InnerVertices GFA1CarryStr(x,y,z) by ThGFA1C7;
     hence (Following s).[<*x,y*>,f1] = f1.(s*<*x,y*>) by A2,FACIRC_1:35
         .= f1.<*a1,a2*> by A1,A3,A4,FINSEQ_2:145
         .= a1 '&' 'not' a2 by DefAND2C;
     yz in InnerVertices GFA1CarryStr(x,y,z) by ThGFA1C7;
     hence (Following s).[<*y,z*>,f2] = f2.(s*<*y,z*>) by A2,FACIRC_1:35
         .= f2.<*a2,a3*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a2 '&' a3 by TWOSCOMP:def 2;
     zx in InnerVertices GFA1CarryStr(x,y,z) by ThGFA1C7;
     hence (Following s).[<*z,x*>,f3] = f3.(s*<*z,x*>) by A2,FACIRC_1:35
         .= f3.<*a3,a1*> by A1,A3,A4,FINSEQ_2:145
         .= a3 '&' a1 by TWOSCOMP:def 1;
  end;

theorem ThGFA1C23:
 for x,y,z being set for s being State of GFA1CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st
    a1 = s.[<*x,y*>,and2c] & a2 = s.[<*y,z*>,and2a] & a3 = s.[<*z,x*>,and2]
   holds
    (Following s).GFA1CarryOutput(x,y,z) = a1 'or' a2 'or' a3
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     let s be State of GFA1CarryCirc(x,y,z);
     set xy =[<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.xy & a2 = s.yz & a3 = s.zx;
     set S = GFA1CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
     reconsider xy, yz, zx as Element of InnerVertices S by ThGFA1C7;
     thus (Following s).GFA1CarryOutput(x,y,z)
          = f4.(s*<*xy, yz, zx*>) by A2,FACIRC_1:35
         .= f4.<*a1,a2,a3*> by A1,A3,FINSEQ_2:146
         .= a1 'or' a2 'or' a3 by TWOSCOMP:16;
  end;

theorem ThGFA1C24:
  for x,y,z being set st
    x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   for s being State of GFA1CarryCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA1CarryOutput(x,y,z) =
        (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1) &
      Following(s,2).[<*x,y*>,and2c] = a1 '&' 'not' a2 &
      Following(s,2).[<*y,z*>,and2a] = 'not' a2 '&' a3 &
      Following(s,2).[<*z,x*>,and2]  = a3 '&' a1
   proof
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let s be State of GFA1CarryCirc(x,y,z);
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA1CarryStr(x,y,z);
     reconsider x' = x, y' = y, z' = z as Vertex of S by ThGFA1C6;
     x in InputVertices S & y in InputVertices S & z in InputVertices S
     by A0,ThGFA1C8;
then A2: (Following s).x' = s.x & (Following s).y' = s.y &
         (Following s).z' = s.z by CIRCUIT2:def 5;
A3:  Following(s,2) = Following Following s by FACIRC_1:15;
     (Following s).xy = a1 '&' 'not' a2 &
     (Following s).yz = 'not' a2 '&' a3 &
     (Following s).zx = a3 '&' a1 by A1,ThGFA1C22;
    hence Following(s,2).GFA1CarryOutput(x,y,z) =
        (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1)
          by A3,ThGFA1C23;
    thus thesis by A1,A2,A3,ThGFA1C22;
  end;

theorem ThGFA1C28:
  for x,y,z being set st
     x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   for s being State of GFA1CarryCirc(x,y,z)
    holds Following(s,2) is stable
   proof
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     let s be State of GFA1CarryCirc(x,y,z);
     set S = GFA1CarryStr(x,y,z);
A1:  dom Following Following(s,2) = the carrier of S &
     dom Following(s,2) = the carrier of S by CIRCUIT1:4;
     reconsider xx = x, yy = y, zz = z as Vertex of S by ThGFA1C6;
     set a1 = s.xx, a2 = s.yy, a3 = s.zz;
     set ffs = Following(s,2), fffs = Following ffs;
     a1 = s.x & a2 = s.y & a3 = s.z;
then A2: ffs.GFA1CarryOutput(x,y,z) =
         (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1)  &
     ffs.xy = a1 '&' 'not' a2 &
     ffs.yz = 'not' a2 '&' a3 &
     ffs.zx = a1 '&' a3 by A0,ThGFA1C24;
A3:  ffs = Following Following s by FACIRC_1:15;
A4:  x in InputVertices S & y in InputVertices S & z in InputVertices S
      by A0,ThGFA1C8;
then (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
      by CIRCUIT2:def 5;
then A5: ffs.x = a1 & ffs.y = a2 & ffs.z = a3 by A3,A4,CIRCUIT2:def 5;
     now let a be set; assume
A6:  a in the carrier of S;
then reconsider v = a as Vertex of S;
A7:  v in InputVertices S \/ InnerVertices S by A6,XBOOLE_1:45;
     thus ffs.a = (fffs).a
      proof per cases by A7,XBOOLE_0:def 2;
        suppose v in InputVertices S;
          hence thesis by CIRCUIT2:def 5;
        end;
        suppose v in InnerVertices S;
           then v in {xy, yz, zx} \/ {GFA1CarryOutput(x,y,z)} by ThGFA1C1;
           then v in {xy, yz, zx} or
                v in {GFA1CarryOutput(x,y,z)} by XBOOLE_0:def 2;
           then v = xy or v = yz or v = zx or
                v = GFA1CarryOutput(x,y,z) by ENUMSET1:def 1,TARSKI:def 1;
          hence thesis by A2,A5,ThGFA1C22,ThGFA1C23;
        end;
      end;
     end;
    hence ffs = fffs by A1,FUNCT_1:9;
  end;

::=========================================================================

::-------------------------------------------------
:: GFA1 Adder : Circuit Definition of Adder Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA1AdderStr(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
   2GatesCircStr(x,y,z, xor2c);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1AdderCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA1AdderStr(x,y,z) equals
   2GatesCircuit(x,y,z, xor2c);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA1AdderOutput(x,y,z) ->
      Element of InnerVertices GFA1AdderStr(x,y,z) equals
   2GatesCircOutput(x,y,z, xor2c);
  coherence;
end;

::-------------------------------------------------------
:: GFA1 Adder : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA1S0:
 for x,y,z being set holds
  InnerVertices GFA1AdderStr(x,y,z) =
    {[<*x,y*>,xor2c]} \/ {GFA1AdderOutput(x,y,z)}
   proof
     set f = xor2c;
     let x,y,z be set;
     set xy = [<*x,y*>,f];
     set S = GFA1AdderStr(x,y,z);
     thus InnerVertices S
       = {xy, GFA1AdderOutput(x,y,z)} by FACIRC_1:56
      .= {xy} \/ {GFA1AdderOutput(x,y,z)} by ENUMSET1:41;
   end;

theorem
 for x,y,z being set holds
  InnerVertices GFA1AdderStr(x,y,z) is Relation by FACIRC_1:58;

::-------------------------------------------------------
:: InputVertices

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2c] holds
  InputVertices GFA1AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

theorem
 for x,y,z being non pair set holds
  InputVertices GFA1AdderStr(x,y,z) is without_pairs by FACIRC_1:59;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
   x in the carrier of GFA1AdderStr(x,y,z) &
   y in the carrier of GFA1AdderStr(x,y,z) &
   z in the carrier of GFA1AdderStr(x,y,z) &
   [<*x,y*>,xor2c] in the carrier of GFA1AdderStr(x,y,z) &
   [<*[<*x,y*>,xor2c], z*>, xor2c] in the carrier of GFA1AdderStr(x,y,z)
   by FACIRC_1:60,61;

theorem ThGFA1S7:
 for x,y,z being set holds
   [<*x,y*>,xor2c] in InnerVertices GFA1AdderStr(x,y,z) &
   GFA1AdderOutput(x,y,z) in InnerVertices GFA1AdderStr(x,y,z)
   proof
     set f = xor2c;
     let x,y,z be set;
     set S = GFA1AdderStr(x,y,z);
     InnerVertices S
       = {[<*x,y*>,f]} \/ {GFA1AdderOutput(x,y,z)} by ThGFA1S0
      .= {[<*x,y*>,f],GFA1AdderOutput(x,y,z)} by ENUMSET1:41;
    hence thesis by TARSKI:def 2;
   end;

theorem ThGFA1S8:
 for x,y,z being set st z <> [<*x,y*>, xor2c] holds
    x in InputVertices GFA1AdderStr(x,y,z) &
    y in InputVertices GFA1AdderStr(x,y,z) &
    z in InputVertices GFA1AdderStr(x,y,z)
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set S = GFA1AdderStr(x,y,z);
     InputVertices S = {x,y,z} by A0,FACIRC_1:57;
     hence thesis by ENUMSET1:def 1;
   end;

theorem
 for x,y,z being non pair set holds
   InputVertices GFA1AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

::----------------------------------------------------
:: GFA1 Adder : Stability of the Adder Output Circuit
::----------------------------------------------------

theorem ThGFA1S12:
 for x,y,z being set st z <> [<*x,y*>, xor2c]
  for s being State of GFA1AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      (Following s).[<*x,y*>,xor2c] = a1 'xor' 'not' a2 &
      (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA1AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
     (Following s).xy = f.<*a1, a2*> by A0,A2,Lemma3;
     hence (Following s).xy = a1 'xor' 'not' a2 by DefXOR2C;
     thus (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
       by A0,A2,Lemma3;
   end;

theorem ThGFA1S13:
 for x,y,z being set st z <> [<*x,y*>, xor2c]
  for s being State of GFA1AdderCirc(x,y,z)
   for a1a2,a1,a2,a3 being Element of BOOLEAN
     st a1a2 = s.[<*x,y*>,xor2c] & a1 = s.x & a2 = s.y & a3 = s.z
    holds
     (Following s).GFA1AdderOutput(x,y,z) = a1a2 'xor' 'not' a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA1AdderCirc(x,y,z);
     let s be State of A;
     let a1a2,a1,a2,a3 be Element of BOOLEAN such that
A2:  a1a2 = s.xy & a1 = s.x & a2 = s.y & a3 = s.z;
     set C = GFA1AdderOutput(x,y,z);
     thus (Following s).GFA1AdderOutput(x,y,z)
         = f.<*s.xy, s.z*> by A0,Lemma3
        .= a1a2 'xor' 'not' a3 by A2,DefXOR2C;
   end;

theorem ThGFA1S14:
  for x,y,z being set st z <> [<*x,y*>, xor2c]
   for s being State of GFA1AdderCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA1AdderOutput(x,y,z)
             = a1 'xor' 'not' a2 'xor' 'not' a3 &
      Following(s,2).[<*x,y*>,xor2c] = a1 'xor' 'not' a2 &
      Following(s,2).x = a1 & Following(s,2).y = a2 & Following(s,2).z = a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA1AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
     set C = GFA1AdderOutput(x,y,z);
     thus (Following(s,2)).GFA1AdderOutput(x,y,z)
         = f.<* f.<*a1, a2*>, a3*> by A0,A2,FACIRC_1:62
        .= f.<*a1 'xor' 'not' a2, a3*> by DefXOR2C
        .= a1 'xor' 'not' a2 'xor' 'not' a3 by DefXOR2C;
     (Following(s,2)).xy = f.<*a1, a2*> by A0,A2,FACIRC_1:62;
     hence (Following(s,2)).xy = a1 'xor' 'not' a2 by DefXOR2C;
     thus (Following(s,2)).x = a1 & (Following(s,2)).y = a2 &
          (Following(s,2)).z = a3 by A0,A2,FACIRC_1:62;
   end;

theorem ThGFA1S14OUT:
  for x,y,z being set st z <> [<*x,y*>, xor2c]
   for s being State of GFA1AdderCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA1AdderOutput(x,y,z)
         = 'not' (a1 'xor' 'not' a2 'xor' a3)
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA1AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     thus (Following(s,2)).GFA1AdderOutput(x,y,z)
         = a1 'xor' 'not' a2 'xor' 'not' a3 by A0,A1,ThGFA1S14
        .= 'not' (a1 'xor' 'not' a2 'xor' a3) by ThXOR2C1;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2c]
  for s being State of GFA1AdderCirc(x,y,z)
    holds Following(s,2) is stable by FACIRC_1:63;

::=====================================================================

::---------------------------------------------------
:: GFA1 : Circuit Definition of GFA Combined Circuit
::---------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA1Str(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
    GFA1AdderStr(x,y,z) +* GFA1CarryStr(x,y,z);
  coherence;
end;

definition
  let x,y,z be set;
 func BitGFA1Circ(x,y,z) ->
   strict Boolean gate`2=den Circuit of BitGFA1Str(x,y,z) equals
   GFA1AdderCirc(x,y,z) +* GFA1CarryCirc(x,y,z);
  coherence;
end;

::----------------------------------------------------------
:: GFA1 Combined : Carrier, InnerVertices and InputVertices
::----------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA1SC1:
  for x,y,z being set holds
   InnerVertices BitGFA1Str(x,y,z) =
     {[<*x,y*>,xor2c]} \/ {GFA1AdderOutput(x,y,z)} \/
     {[<*x,y*>,and2c], [<*y,z*>,and2a], [<*z,x*>,and2]} \/
     {GFA1CarryOutput(x,y,z)}
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA1Str(x,y,z);
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
     set A1 = GFA1AdderOutput(x,y,z);
     set A2 = GFA1CarryOutput(x,y,z);
     thus InnerVertices S
       = (InnerVertices S1) \/ InnerVertices S2 by FACIRC_1:27
      .= {xyf0} \/ {A1} \/ InnerVertices S2 by ThGFA1S0
      .= {xyf0} \/ {A1} \/ ({xyf1, yzf2, zxf3} \/ {A2}) by ThGFA1C1
      .= {xyf0} \/ {A1} \/ {xyf1, yzf2, zxf3} \/ {A2} by XBOOLE_1:4;
   end;

theorem
  for x,y,z being set holds
    InnerVertices BitGFA1Str(x,y,z) is Relation
   proof
     let x,y,z be set;
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
     InnerVertices S1 is Relation & InnerVertices S2 is Relation
       by FACIRC_1:58,ThGFA1C2;
     hence thesis by FACIRC_1:3;
  end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA1SC5:
  for x,y,z being set  st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   holds
    InputVertices BitGFA1Str(x,y,z) = {x,y,z}
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] and
A2:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA1Str(x,y,z);
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
A4:  InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
A5:  InputVertices S2 = {x,y,z} by A2,ThGFA1C4;
     S1 tolerates S2 by CIRCCOMB:55;
    hence InputVertices S = {x,y,z} by A4,A5,FACIRC_2:22;
   end;

theorem ThGFA1SC6:
 for x,y,z being non pair set holds
    InputVertices BitGFA1Str(x,y,z) = {x,y,z}
   proof
     let x,y,z be non pair set;
     set S = BitGFA1Str(x,y,z);
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
A2:  InputVertices S1 is without_pairs & InnerVertices S1 is Relation
      by FACIRC_1:58,FACIRC_1:59;
A3:  InputVertices S2 is without_pairs & InnerVertices S2 is Relation
      by ThGFA1C2,ThGFA1C5;
     InputVertices S1 = {x,y,z} & InputVertices S2 = {x,y,z}
      by FACIRC_1:57,ThGFA1C9;
    hence InputVertices S = {x,y,z} \/ {x,y,z} by A2,A3,FACIRC_1:7
                         .= {x,y,z};
  end;

theorem
 for x,y,z being non pair set holds
    InputVertices BitGFA1Str(x,y,z) is without_pairs
   proof
     let x,y,z be non pair set;
     InputVertices BitGFA1Str(x,y,z) = {x,y,z} by ThGFA1SC6;
     hence thesis;
   end;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
    x in the carrier of BitGFA1Str(x,y,z) &
    y in the carrier of BitGFA1Str(x,y,z) &
    z in the carrier of BitGFA1Str(x,y,z) &
    [<*x,y*>,xor2c] in the carrier of BitGFA1Str(x,y,z) &
    [<*[<*x,y*>,xor2c],z*>,xor2c] in the carrier of BitGFA1Str(x,y,z) &
    [<*x,y*>,and2c] in the carrier of BitGFA1Str(x,y,z) &
    [<*y,z*>,and2a] in the carrier of BitGFA1Str(x,y,z) &
    [<*z,x*>,and2]  in the carrier of BitGFA1Str(x,y,z) &
    [<*[<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2]*>,or3]
                                in the carrier of BitGFA1Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2, f4 = or3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
A1:  x in the carrier of S1 & y in the carrier of S1 &
     z in the carrier of S1 &
     [<*x,y*>,f0] in the carrier of S1 &
     [<*[<*x,y*>,f0],z*>,f0] in the carrier of S1 by FACIRC_1:60,61;
     xy in the carrier of S2 & yz in the carrier of S2 &
     zx in the carrier of S2 &
     xyz in the carrier of S2 by ThGFA1C6;
    hence thesis by A1,FACIRC_1:20;
  end;

theorem ThGFA1SC7:
  for x,y,z being set holds
    [<*x,y*>,xor2c] in InnerVertices BitGFA1Str(x,y,z) &
    GFA1AdderOutput(x,y,z) in InnerVertices BitGFA1Str(x,y,z) &
    [<*x,y*>,and2c] in InnerVertices BitGFA1Str(x,y,z) &
    [<*y,z*>,and2a] in InnerVertices BitGFA1Str(x,y,z) &
    [<*z,x*>,and2] in InnerVertices BitGFA1Str(x,y,z) &
    GFA1CarryOutput(x,y,z) in InnerVertices BitGFA1Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA1Str(x,y,z);
     set A1 = GFA1AdderOutput(x,y,z);
     set A2 = GFA1CarryOutput(x,y,z);
     InnerVertices S
       = {xyf0} \/ {A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ThGFA1SC1
      .= {xyf0,A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:41
      .= {xyf0,A1,xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:48
      .= {xyf0,A1,xyf1,yzf2,zxf3,A2} by ENUMSET1:55;
     hence thesis by ENUMSET1:def 4;
   end;

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   holds
    x in InputVertices BitGFA1Str(x,y,z) &
    y in InputVertices BitGFA1Str(x,y,z) &
    z in InputVertices BitGFA1Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA1Str(x,y,z);
     InputVertices S = {x,y,z} by A1,ThGFA1SC5;
    hence thesis by ENUMSET1:def 1;
   end;

::------------------------------------------------------------------
:: GFA1 : Carry and Adder Output Definition of GFA Combined Circuit
::------------------------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA1CarryOutput(x,y,z) ->
         Element of InnerVertices BitGFA1Str(x,y,z) equals
    [<*[<*x,y*>,and2c],[<*y,z*>,and2a],[<*z,x*>,and2]*>,or3];
  coherence
    proof
      GFA1CarryOutput(x,y,z)
        in InnerVertices BitGFA1Str(x,y,z) by ThGFA1SC7;
      hence thesis;
    end;
end;

definition
 let x,y,z be set;
 func BitGFA1AdderOutput(x,y,z) ->
         Element of InnerVertices BitGFA1Str(x,y,z) equals
    2GatesCircOutput(x,y,z, xor2c);
  coherence
    proof
      GFA1AdderOutput(x,y,z)
        in InnerVertices BitGFA1Str(x,y,z) by ThGFA1SC7;
      hence thesis;
    end;
end;

::-------------------------------------------------------------
:: GFA1 Combined : Stability of the Adder/Carry Output Circuit
::-------------------------------------------------------------

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   for s being State of BitGFA1Circ(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA1AdderOutput(x,y,z)
           = 'not' (a1 'xor' 'not' a2 'xor' a3) &
      Following(s,2).GFA1CarryOutput(x,y,z)
           = (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1)
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA1Str(x,y,z);
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
     set A = BitGFA1Circ(x,y,z);
     set A1 = GFA1AdderCirc(x,y,z);
     set A2 = GFA1CarryCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN; assume
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
A3:  x in the carrier of S1 & y in the carrier of S1 & z in the carrier of S1
     by FACIRC_1:60;
A4:  x in the carrier of S2 & y in the carrier of S2 & z in the carrier of S2
     by ThGFA1C6;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A6: InputVertices S1 = InputVertices S2 by A1,ThGFA1C4;
A7:  InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
     dom s1 = the carrier of S1 by CIRCUIT1:4;
then a1 = s1.x & a2 = s1.y & a3 = s1.z by A2,A3,FUNCT_1:70;
then Following(t,2).GFA1AdderOutput(x,y,z)
        = Following(s1,2).GFA1AdderOutput(x,y,z) &
     Following(s1,2).GFA1AdderOutput(x,y,z)
        = 'not' (a1 'xor' 'not' a2 'xor' a3)
       by A1,A6,A7,ThGFA1S14OUT,FACIRC_1:32;
    hence
     Following(s,2).GFA1AdderOutput(x,y,z)
        = 'not' (a1 'xor' 'not' a2 'xor' a3);
     dom s2 = the carrier of S2 by CIRCUIT1:4;
then a1 = s2.x & a2 = s2.y & a3 = s2.z by A2,A4,FUNCT_1:70;
then Following(t,2).GFA1CarryOutput(x,y,z)
        = Following(s2,2).GFA1CarryOutput(x,y,z) &
     Following(s2,2).GFA1CarryOutput(x,y,z)
        = (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1)
       by A1,A6,A7,ThGFA1C24,FACIRC_1:33;
     hence Following(s,2).GFA1CarryOutput(x,y,z)
        = (a1 '&' 'not' a2) 'or' ('not' a2 '&' a3) 'or' (a3 '&' a1);
   end;

theorem
 for x,y,z being set  st z <> [<*x,y*>,xor2c] &
   x <> [<*y,z*>,and2a] & y <> [<*z,x*>,and2] & z <> [<*x,y*>,and2c]
   for s being State of BitGFA1Circ(x,y,z)
    holds Following(s,2) is stable
   proof
     set f0 = xor2c;
     set f1 = and2c, f2 = and2a, f3 = and2;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA1Str(x,y,z);
     set S1 = GFA1AdderStr(x,y,z);
     set S2 = GFA1CarryStr(x,y,z);
     set A = BitGFA1Circ(x,y,z);
     set A1 = GFA1AdderCirc(x,y,z);
     set A2 = GFA1CarryCirc(x,y,z);
     let s be State of A;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A3: InputVertices S1 = InputVertices S2 by A1,ThGFA1C4;
     InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
then A4: Following(s1,2) = Following(t,2)|the carrier of S1 &
         Following(s1,3) = Following(t,3)|the carrier of S1 &
         Following(s2,2) = Following(t,2)|the carrier of S2 &
         Following(s2,3) = Following(t,3)|the carrier of S2
          by A3,FACIRC_1:30,31;
     Following(s1,2) is stable by A1,FACIRC_1:63;
then A5: Following(s1,2)
       = Following Following(s1,2) by CIRCUIT2:def 6
      .= Following(s1,2+1) by FACIRC_1:12;
     Following(s2,2) is stable by A1,ThGFA1C28;
then A6: Following(s2,2)
       = Following Following(s2,2) by CIRCUIT2:def 6
      .= Following(s2,2+1) by FACIRC_1:12;
A7:  Following(s,2+1) = Following Following(s,2) by FACIRC_1:12;
A8:  dom Following(s,2) = the carrier of S &
     dom Following(s,3) = the carrier of S &
     dom Following(s1,2) = the carrier of S1 &
     dom Following(s2,2) = the carrier of S2 by CIRCUIT1:4;
     A9: the carrier of S = (the carrier of S1) \/ the carrier of S2
      by CIRCCOMB:def 2;
       now let a be set; assume a in the carrier of S;
       then a in the carrier of S1 or a in the carrier of S2
              by A9,XBOOLE_0:def 2;
       then (Following(s,2)).a = (Following(s1,2)).a &
            (Following(s,3)).a = (Following(s1,3)).a or
            (Following(s,2)).a = (Following(s2,2)).a &
            (Following(s,3)).a = (Following(s2,3)).a
              by A4,A5,A6,A8,FUNCT_1:70;
       hence (Following(s,2)).a = (Following Following(s,2)).a
              by A5,A6,FACIRC_1:12;
       end;
    hence Following(s,2) = Following Following(s,2) by A7,A8,FUNCT_1:9;
   end;

::========================================================================

begin :: Generalized Full Adder (GFA) Circuit (TYPE-2)

::========================================================================
:: << GFA TYPE-2 >>
::------------------------------------------------------------------------
::   Name     : Generalized Full Adder Type-2 (GFA2)
::   Function : - x + y - z = - 2 * c + s
::
::   Logic Symbol :     -x      y      Combined : GFA2CarryIStr(x,y,z)
::                       |     /                  GFA2CarryStr(x,y,z)
::                       |    /                   GFA2AdderStr(x,y,z)
::                   +---O---*                  --->
::                   |  GFA  O---- -z             BitGFA2Str(x,y,z)
::                   | TYPE2 |
::                   O---*---+          Outputs : BitGFA2CarryOutput(x,y,z)
::                  /    |                        BitGFA2AdderOutput(x,y,z)
::                 /     |
::               -c      s          Calculation : Following(s,2) is stable.
::=========================================================================

::-------------------------------------------------
:: GFA2 Carry : Circuit Definition of Carry Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA2CarryIStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    1GateCircStr(<*x,y*>,and2a) +* 1GateCircStr(<*y,z*>,and2c) +*
    1GateCircStr(<*z,x*>,and2b);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2CarryICirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA2CarryIStr(x,y,z) equals
    1GateCircuit(x,y,and2a) +* 1GateCircuit(y,z,and2c) +*
    1GateCircuit(z,x,and2b);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2CarryStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    GFA2CarryIStr(x,y,z) +*
    1GateCircStr(<*[<*x,y*>,and2a], [<*y,z*>,and2c], [<*z,x*>,and2b]*>,nor3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2CarryCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA2CarryStr(x,y,z) equals
    GFA2CarryICirc(x,y,z) +*
    1GateCircuit([<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b],nor3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2CarryOutput(x,y,z) -> Element of InnerVertices GFA2CarryStr(x,y,z)
  equals
   [<*[<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b]*>,nor3];
  coherence
   proof
     [<*[<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b]*>,nor3] in
      InnerVertices
       1GateCircStr(<*[<*x,y*>,and2a],[<*y,z*>,and2c], [<*z,x*>,and2b]*>,nor3)
       by FACIRC_1:47;
    hence thesis by FACIRC_1:21;
   end;
end;

::-------------------------------------------------------
:: GFA2 Carry : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA2C0:
  for x,y,z being set holds
  InnerVertices GFA2CarryIStr(x,y,z) =
   {[<*x,y*>,and2a], [<*y,z*>,and2c], [<*z,x*>,and2b]}
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
A1:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A2:  Cxy tolerates Cyz by CIRCCOMB:55;
     InnerVertices GFA2CarryIStr(x,y,z)
       = InnerVertices(Cxy +* Cyz) \/ InnerVertices(Czx) by A1,CIRCCOMB:15
      .= InnerVertices(Cxy) \/ InnerVertices(Cyz) \/
         InnerVertices(Czx) by A2,CIRCCOMB:15
      .= {xy} \/ InnerVertices(Cyz) \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ {zx} by CIRCCOMB:49
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
    hence thesis;
   end;

theorem ThGFA2C1:
  for x,y,z being set holds
  InnerVertices GFA2CarryStr(x,y,z) =
    {[<*x,y*>,and2a], [<*y,z*>,and2c], [<*z,x*>,and2b]} \/
    {GFA2CarryOutput(x,y,z)}
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A1:  Cxy tolerates (Cyz +* Czx +* Cxyz) by CIRCCOMB:55;
A2:  Cyz tolerates (Czx +* Cxyz) by CIRCCOMB:55;
A3:  Czx tolerates Cxyz by CIRCCOMB:55;
A4:  InnerVertices (Cyz +* (Czx +* Cxyz))
      = InnerVertices Cyz \/ InnerVertices (Czx +* Cxyz) by A2,CIRCCOMB:15;
A5:  InnerVertices (Czx +* Cxyz)
      = InnerVertices Czx \/ InnerVertices Cxyz by A3,CIRCCOMB:15;
thus InnerVertices GFA2CarryStr(x,y,z)
      = InnerVertices (Cxy +* (Cyz +* Czx) +* Cxyz) by CIRCCOMB:10
     .= InnerVertices (Cxy +* (Cyz +* Czx +* Cxyz)) by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* Czx +* Cxyz)
          by A1,CIRCCOMB:15
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* (Czx +* Cxyz))
          by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
          (InnerVertices Czx \/ InnerVertices Cxyz) by A4,A5,XBOOLE_1:4
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by XBOOLE_1:4
     .= {xy} \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ {zx} \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy, yz} \/ {zx} \/ InnerVertices Cxyz by ENUMSET1:41
     .= {xy, yz, zx} \/ InnerVertices Cxyz by ENUMSET1:43
     .= {xy, yz, zx} \/ {GFA2CarryOutput(x,y,z)} by CIRCCOMB:49;
  end;

theorem ThGFA2C2:
  for x,y,z being set holds
  InnerVertices GFA2CarryStr(x,y,z) is Relation
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A3:  InnerVertices Cxy is Relation & InnerVertices Cyz is Relation &
     InnerVertices Czx is Relation by FACIRC_1:38;
then InnerVertices (Cxy +* Cyz) is Relation by FACIRC_1:3;
then InnerVertices Cxyz is Relation &
     InnerVertices GFA2CarryIStr(x,y,z) is Relation by A3,FACIRC_1:3,38;
    hence thesis by FACIRC_1:3;
   end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA2C3:
 for x,y,z being set st
   x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
  holds InputVertices GFA2CarryIStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     assume
A1:  x <> yz & y <> zx & z <> xy;
A2:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A3:  Cxy tolerates Cyz by CIRCCOMB:55;
A4:  y <> yz by FACIRC_2:3;
A5:  not xy in {y,z} by A1,Lemma1;
A6:  not z in {xy, yz} & not x in {xy, yz} by A1,Lemma1;
A7:  not zx in {x,y,z} by A1,Lemma1;
     InputVertices GFA2CarryIStr(x,y,z)
      = (InputVertices(Cxy +* Cyz) \ InnerVertices(Czx)) \/
        (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A2,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A3,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by A3,CIRCCOMB:15
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ InnerVertices(Cyz))) by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by CIRCCOMB:49
     .= (({x,y} \ {yz}) \/ (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ {xy,yz}) by ENUMSET1:41
     .= (({x,y} \/ ({y,z} \ {xy})) \ {zx}) \/ ({z,x} \ {xy,yz})
          by A1,A4,FACIRC_2:1
     .= ({x,y} \/ {y,z}) \ {zx} \/ ({z,x} \ {xy,yz}) by A5,ZFMISC_1:65
     .= ({x,y} \/ {y,z}) \ {zx} \/ {z,x} by A6,ZFMISC_1:72
     .= {x,y,y,z} \ {zx} \/ {z,x} by ENUMSET1:45
     .= {y,y,x,z} \ {zx} \/ {z,x} by ENUMSET1:110
     .= {y,x,z} \ {zx} \/ {z,x} by ENUMSET1:71
     .= {x,y,z} \ {zx} \/ {z,x} by ENUMSET1:99
     .= {x,y,z} \/ {z,x} by A7,ZFMISC_1:65
     .= {x,y,z,z,x} by ENUMSET1:49
     .= {x,y,z,z} \/ {x} by ENUMSET1:50
     .= {z,z,x,y} \/ {x} by ENUMSET1:118
     .= {z,x,y} \/ {x} by ENUMSET1:71
     .= {z,x,y,x} by ENUMSET1:46
     .= {x,x,y,z} by ENUMSET1:113
     .= {x,y,z} by ENUMSET1:71;
    hence thesis;
   end;

theorem ThGFA2C4:
 for x,y,z being set st
   x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
  holds InputVertices GFA2CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set MI = GFA2CarryIStr(x,y,z);
A1:  InnerVertices S = {xyz} by CIRCCOMB:49;
A2:  InputVertices S = rng <*xy, yz, zx*> by CIRCCOMB:49
                    .= {xy, yz, zx} by FINSEQ_2:148;
     assume
A3:  x <> yz & y <> zx & z <> xy;
A4:  {x, y, z} \ {xyz} = {x, y, z} by Lemma2;
A5:  {xy, yz, zx} \ {xy, yz, zx} = {} by XBOOLE_1:37;
     GFA2CarryStr(x,y,z) = MI +* S & MI tolerates S by CIRCCOMB:55;
     hence InputVertices GFA2CarryStr(x,y,z)
      = ((InputVertices MI) \ InnerVertices S) \/
         ((InputVertices S) \ InnerVertices MI) by CIRCCMB2:6
     .= {x,y,z} \/ ({xy, yz, zx} \ InnerVertices MI) by A1,A2,A3,A4,ThGFA2C3
     .= {x,y,z} \/ {} by A5,ThGFA2C0
     .= {x,y,z};
  end;

theorem ThGFA2C5:
 for x,y,z being non pair set holds
  InputVertices GFA2CarryStr(x,y,z) is without_pairs
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set M = GFA2CarryStr(x,y,z);
     set MI = GFA2CarryIStr(x,y,z);
A3:  InputVertices Cxy is without_pairs & InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A4: InputVertices MI is without_pairs by A3,FACIRC_1:9;
     InnerVertices S is Relation by FACIRC_1:38;
then A5: InputVertices M = (InputVertices MI) \/
          (InputVertices S \ InnerVertices MI) by A4,FACIRC_1:6;
     given xx being pair set such that
A6:  xx in InputVertices M;
A7:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A8:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A9: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A8,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A8,A9,CIRCCOMB:15
     .= {xy, yz} \/ {zx} by ENUMSET1:41
     .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A7,XBOOLE_1:37;
    hence thesis by A4,A5,A6,FACIRC_1:def 2;
  end;

::-------------------------------------------------------
:: Carrier and misc.

theorem ThGFA2C6:
  for x,y,z being set holds
    x in the carrier of GFA2CarryStr(x,y,z) &
    y in the carrier of GFA2CarryStr(x,y,z) &
    z in the carrier of GFA2CarryStr(x,y,z) &
    [<*x,y*>,and2a] in the carrier of GFA2CarryStr(x,y,z) &
    [<*y,z*>,and2c] in the carrier of GFA2CarryStr(x,y,z) &
    [<*z,x*>,and2b] in the carrier of GFA2CarryStr(x,y,z) &
    [<*[<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b]*>,nor3]
                   in the carrier of GFA2CarryStr(x,y,z)
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
     y in the carrier of Cxy by FACIRC_1:43;
then A0: y in the carrier of Cxy +* Cyz by FACIRC_1:20;
     x in the carrier of Czx & z in the carrier of Czx by FACIRC_1:43;
then A1: x in the carrier of GFA2CarryIStr(x,y,z) &
         y in the carrier of GFA2CarryIStr(x,y,z) &
         z in the carrier of GFA2CarryIStr(x,y,z) by A0,FACIRC_1:20;
     xy in the carrier of Cxy & yz in the carrier of Cyz by FACIRC_1:43;
then A2: xy in the carrier of Cxy +* Cyz & yz in the carrier of Cxy +* Cyz
       by FACIRC_1:20;
     zx in the carrier of Czx by FACIRC_1:43;
then A3: xy in the carrier of GFA2CarryIStr(x,y,z) &
         yz in the carrier of GFA2CarryIStr(x,y,z) &
         zx in the carrier of GFA2CarryIStr(x,y,z) by A2,FACIRC_1:20;
     set p = <*xy,yz,zx*>;
     the carrier of Cxyz = rng p \/ {xyz} & [p,f4] in {[p,f4]}
       by CIRCCOMB:def 6,TARSKI:def 1;
then xyz in the carrier of Cxyz by XBOOLE_0:def 2;
    hence thesis by A1,A3,FACIRC_1:20;
  end;

theorem ThGFA2C7:
 for x,y,z being set holds
   [<*x,y*>,and2a] in InnerVertices GFA2CarryStr(x,y,z) &
   [<*y,z*>,and2c] in InnerVertices GFA2CarryStr(x,y,z) &
   [<*z,x*>,and2b] in InnerVertices GFA2CarryStr(x,y,z) &
   GFA2CarryOutput(x,y,z) in InnerVertices GFA2CarryStr(x,y,z)
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     InnerVertices GFA2CarryStr(x,y,z)
       = {xy,yz,zx} \/ {GFA2CarryOutput(x,y,z)} by ThGFA2C1
      .= {xy,yz,zx,GFA2CarryOutput(x,y,z)} by ENUMSET1:46;
    hence thesis by ENUMSET1:def 2;
  end;

theorem ThGFA2C8:
  for x,y,z being set st
     x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   holds
    x in InputVertices GFA2CarryStr(x,y,z) &
    y in InputVertices GFA2CarryStr(x,y,z) &
    z in InputVertices GFA2CarryStr(x,y,z)
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     InputVertices GFA2CarryStr(x,y,z) = {x,y,z} by A0,ThGFA2C4;
    hence thesis by ENUMSET1:def 1;
  end;

theorem ThGFA2C9:
 for x,y,z being non pair set holds
  InputVertices GFA2CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set M = GFA2CarryStr(x,y,z);
     set MI = GFA2CarryIStr(x,y,z);
     set S = 1GateCircStr(<*xy,yz,zx*>,f4);
A3:  InputVertices Cxy is without_pairs &
     InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then A4: InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A5: InputVertices MI is without_pairs by A3,FACIRC_1:9;
A6:  InputVertices Cxy = {x,y} & InputVertices Cyz = {y,z} &
     InputVertices Czx = {z,x} by FACIRC_1:40;
     InnerVertices S is Relation by FACIRC_1:38;
then A7: InputVertices M =
      (InputVertices MI) \/ (InputVertices S \ InnerVertices MI)
       by A5,FACIRC_1:6;
A8:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A9:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A10: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A9,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A9,A10,CIRCCOMB:15
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A8,XBOOLE_1:37;
     hence InputVertices M
       = (InputVertices(Cxy+*Cyz)) \/ InputVertices Czx
          by A3,A4,A9,A10,A7,FACIRC_1:7
      .= (InputVertices Cxy) \/ (InputVertices Cyz) \/ (InputVertices Czx)
          by A3,A9,FACIRC_1:7
      .= {x,y,y,z} \/ {z,x} by A6,ENUMSET1:45
      .= {y,y,x,z} \/ {z,x} by ENUMSET1:110
      .= {y,x,z} \/ {z,x} by ENUMSET1:71
      .= {x,y,z} \/ {z,x} by ENUMSET1:99
      .= {x,y,z} \/ ({z}\/{x}) by ENUMSET1:41
      .= {x,y,z} \/ {z} \/ {x} by XBOOLE_1:4
      .= {z,x,y} \/ {z} \/ {x} by ENUMSET1:100
      .= {z,z,x,y} \/ {x} by ENUMSET1:44
      .= {z,x,y} \/ {x} by ENUMSET1:71
      .= {x,y,z} \/ {x} by ENUMSET1:100
      .= {x,x,y,z} by ENUMSET1:44
      .= {x,y,z} by ENUMSET1:71;
  end;

::----------------------------------------------------
:: GFA2 Carry : Stability of the Carry Output Circuit
::----------------------------------------------------

theorem ThGFA2C22:
 for x,y,z being set for s being State of GFA2CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
   holds
    (Following s).[<*x,y*>,and2a] = 'not' a1 '&' a2 &
    (Following s).[<*y,z*>,and2c] = a2 '&' 'not' a3 &
    (Following s).[<*z,x*>,and2b] = 'not' a3 '&' 'not' a1
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     let s be State of GFA2CarryCirc(x,y,z);
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA2CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
A4:  x in the carrier of S & y in the carrier of S & z in the carrier of S
      by ThGFA2C6;
     xy in InnerVertices GFA2CarryStr(x,y,z) by ThGFA2C7;
     hence (Following s).[<*x,y*>,f1] = f1.(s*<*x,y*>) by A2,FACIRC_1:35
         .= f1.<*a1,a2*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a1 '&' a2 by TWOSCOMP:def 2;
     yz in InnerVertices GFA2CarryStr(x,y,z) by ThGFA2C7;
     hence (Following s).[<*y,z*>,f2] = f2.(s*<*y,z*>) by A2,FACIRC_1:35
         .= f2.<*a2,a3*> by A1,A3,A4,FINSEQ_2:145
         .= a2 '&' 'not' a3 by DefAND2C;
     zx in InnerVertices GFA2CarryStr(x,y,z) by ThGFA2C7;
     hence (Following s).[<*z,x*>,f3] = f3.(s*<*z,x*>) by A2,FACIRC_1:35
         .= f3.<*a3,a1*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a3 '&' 'not' a1 by TWOSCOMP:def 3;
  end;

theorem ThGFA2C23:
 for x,y,z being set for s being State of GFA2CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st
    a1 = s.[<*x,y*>,and2a] & a2 = s.[<*y,z*>,and2c] & a3 = s.[<*z,x*>,and2b]
   holds
    (Following s).GFA2CarryOutput(x,y,z) = 'not' (a1 'or' a2 'or' a3)
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     let s be State of GFA2CarryCirc(x,y,z);
     set xy =[<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.xy & a2 = s.yz & a3 = s.zx;
     set S = GFA2CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
     reconsider xy, yz, zx as Element of InnerVertices S by ThGFA2C7;
     thus (Following s).GFA2CarryOutput(x,y,z)
          = f4.(s*<*xy, yz, zx*>) by A2,FACIRC_1:35
         .= f4.<*a1,a2,a3*> by A1,A3,FINSEQ_2:146
         .= 'not' (a1 'or' a2 'or' a3) by TWOSCOMP:def 28;
  end;

theorem ThGFA2C24:
  for x,y,z being set st
    x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   for s being State of GFA2CarryCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA2CarryOutput(x,y,z) =
          'not' (('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
                 ('not' a3 '&' 'not' a1)) &
      Following(s,2).[<*x,y*>,and2a] = 'not' a1 '&' a2 &
      Following(s,2).[<*y,z*>,and2c] = a2 '&' 'not' a3 &
      Following(s,2).[<*z,x*>,and2b] = 'not' a3 '&' 'not' a1
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let s be State of GFA2CarryCirc(x,y,z);
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA2CarryStr(x,y,z);
     reconsider x' = x, y' = y, z' = z as Vertex of S by ThGFA2C6;
     x in InputVertices S & y in InputVertices S & z in InputVertices S
     by A0,ThGFA2C8;
then A2: (Following s).x' = s.x & (Following s).y' = s.y &
         (Following s).z' = s.z by CIRCUIT2:def 5;
A3:  Following(s,2) = Following Following s by FACIRC_1:15;
     (Following s).xy = 'not' a1 '&' a2 &
     (Following s).yz = a2 '&' 'not' a3 &
     (Following s).zx = 'not' a3 '&' 'not' a1 by A1,ThGFA2C22;
    hence Following(s,2).GFA2CarryOutput(x,y,z) =
      'not'(('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
            ('not' a3 '&' 'not' a1))
          by A3,ThGFA2C23;
    thus thesis by A1,A2,A3,ThGFA2C22;
  end;

theorem ThGFA2C28:
  for x,y,z being set st
     x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   for s being State of GFA2CarryCirc(x,y,z)
    holds Following(s,2) is stable
   proof
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     let s be State of GFA2CarryCirc(x,y,z);
     set S = GFA2CarryStr(x,y,z);
A1:  dom Following Following(s,2) = the carrier of S &
     dom Following(s,2) = the carrier of S by CIRCUIT1:4;
     reconsider xx = x, yy = y, zz = z as Vertex of S by ThGFA2C6;
     set a1 = s.xx, a2 = s.yy, a3 = s.zz;
     set ffs = Following(s,2), fffs = Following ffs;
     a1 = s.x & a2 = s.y & a3 = s.z;
then A2: ffs.GFA2CarryOutput(x,y,z) =
         'not'(('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
                                      ('not' a3 '&' 'not' a1)) &
     ffs.xy = 'not' a1 '&' a2 &
     ffs.yz = a2 '&' 'not' a3 &
     ffs.zx = 'not' a1 '&' 'not' a3 by A0,ThGFA2C24;
A3:  ffs = Following Following s by FACIRC_1:15;
A4:  x in InputVertices S & y in InputVertices S & z in InputVertices S
      by A0,ThGFA2C8;
then (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
      by CIRCUIT2:def 5;
then A5: ffs.x = a1 & ffs.y = a2 & ffs.z = a3 by A3,A4,CIRCUIT2:def 5;
     now let a be set; assume
A6:  a in the carrier of S;
then reconsider v = a as Vertex of S;
A7:  v in InputVertices S \/ InnerVertices S by A6,XBOOLE_1:45;
     thus ffs.a = (fffs).a
      proof per cases by A7,XBOOLE_0:def 2;
        suppose v in InputVertices S;
          hence thesis by CIRCUIT2:def 5;
        end;
        suppose v in InnerVertices S;
           then v in {xy, yz, zx} \/ {GFA2CarryOutput(x,y,z)} by ThGFA2C1;
           then v in {xy, yz, zx} or
                v in {GFA2CarryOutput(x,y,z)} by XBOOLE_0:def 2;
           then v = xy or v = yz or v = zx or
                v = GFA2CarryOutput(x,y,z) by ENUMSET1:def 1,TARSKI:def 1;
          hence thesis by A2,A5,ThGFA2C22,ThGFA2C23;
        end;
      end;
     end;
    hence ffs = fffs by A1,FUNCT_1:9;
  end;

::=========================================================================

::-------------------------------------------------
:: GFA2 Adder : Circuit Definition of Adder Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA2AdderStr(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
   2GatesCircStr(x,y,z, xor2c);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2AdderCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA2AdderStr(x,y,z) equals
   2GatesCircuit(x,y,z, xor2c);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA2AdderOutput(x,y,z) ->
      Element of InnerVertices GFA2AdderStr(x,y,z) equals
   2GatesCircOutput(x,y,z, xor2c);
  coherence;
end;

::-------------------------------------------------------
:: GFA2 Adder : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA2S0:
 for x,y,z being set holds
  InnerVertices GFA2AdderStr(x,y,z) =
    {[<*x,y*>,xor2c]} \/ {GFA2AdderOutput(x,y,z)}
   proof
     let x,y,z be set;
     set S2 = GFA2AdderStr(x,y,z), A2 = GFA2AdderOutput(x,y,z);
     set S1 = GFA1AdderStr(x,y,z), A1 = GFA1AdderOutput(x,y,z);
     S2 = S1 & A2 = A1;
    hence thesis by ThGFA1S0;
   end;

theorem
 for x,y,z being set holds
  InnerVertices GFA2AdderStr(x,y,z) is Relation by FACIRC_1:58;

::-------------------------------------------------------
:: InputVertices

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2c] holds
  InputVertices GFA2AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

theorem
 for x,y,z being non pair set holds
  InputVertices GFA2AdderStr(x,y,z) is without_pairs by FACIRC_1:59;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
   x in the carrier of GFA2AdderStr(x,y,z) &
   y in the carrier of GFA2AdderStr(x,y,z) &
   z in the carrier of GFA2AdderStr(x,y,z) &
   [<*x,y*>,xor2c] in the carrier of GFA2AdderStr(x,y,z) &
   [<*[<*x,y*>,xor2c], z*>, xor2c] in the carrier of GFA2AdderStr(x,y,z)
   by FACIRC_1:60,61;

theorem
 for x,y,z being set holds
   [<*x,y*>,xor2c] in InnerVertices GFA2AdderStr(x,y,z) &
   GFA2AdderOutput(x,y,z) in InnerVertices GFA2AdderStr(x,y,z)
   proof
     let x,y,z be set;
     set S1 = GFA1AdderStr(x,y,z);
     GFA2AdderStr(x,y,z) = S1;
    hence thesis by ThGFA1S7;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2c] holds
    x in InputVertices GFA2AdderStr(x,y,z) &
    y in InputVertices GFA2AdderStr(x,y,z) &
    z in InputVertices GFA2AdderStr(x,y,z)
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set S1 = GFA1AdderStr(x,y,z);
     GFA2AdderStr(x,y,z) = S1;
    hence thesis by A0,ThGFA1S8;
   end;

theorem
 for x,y,z being non pair set holds
   InputVertices GFA2AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

::----------------------------------------------------
:: GFA2 Adder : Stability of the Adder Output Circuit
::----------------------------------------------------

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2c]
  for s being State of GFA2AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      (Following s).[<*x,y*>,xor2c] = a1 'xor' 'not' a2 &
      (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A1 = GFA1AdderCirc(x,y,z);
     GFA2AdderCirc(x,y,z) = A1;
     hence thesis by A0,ThGFA1S12;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2c]
  for s being State of GFA2AdderCirc(x,y,z)
   for a1a2,a1,a2,a3 being Element of BOOLEAN
     st a1a2 = s.[<*x,y*>,xor2c] & a1 = s.x & a2 = s.y & a3 = s.z
    holds
     (Following s).GFA2AdderOutput(x,y,z) = a1a2 'xor' 'not' a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A2 = GFA2AdderCirc(x,y,z);
     set A1 = GFA1AdderCirc(x,y,z);
     set O2 = GFA2AdderOutput(x,y,z);
     set O1 = GFA1AdderOutput(x,y,z);
     A2 = A1 & O2 = O1;
     hence thesis by A0,ThGFA1S13;
   end;

theorem ThGFA2S14:
 for x,y,z being set st z <> [<*x,y*>, xor2c]
  for s being State of GFA2AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
    holds
     Following(s,2).GFA2AdderOutput(x,y,z)
         = a1 'xor' 'not' a2 'xor' 'not' a3 &
     Following(s,2).[<*x,y*>,xor2c] = a1 'xor' 'not' a2 &
     Following(s,2).x = a1 & Following(s,2).y = a2 & Following(s,2).z = a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A2 = GFA2AdderCirc(x,y,z);
     set A1 = GFA1AdderCirc(x,y,z);
     set O2 = GFA2AdderOutput(x,y,z);
     set O1 = GFA1AdderOutput(x,y,z);
     A2 = A1 & O2 = O1;
     hence thesis by A0,ThGFA1S14;
   end;

theorem ThGFA2S14OUT:
  for x,y,z being set st z <> [<*x,y*>, xor2c]
   for s being State of GFA2AdderCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA2AdderOutput(x,y,z)
         = 'not' a1 'xor' a2 'xor' 'not' a3
   proof
     set f = xor2c;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA2AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     thus (Following(s,2)).GFA2AdderOutput(x,y,z)
         = a1 'xor' 'not' a2 'xor' 'not' a3 by A0,A1,ThGFA2S14
        .= 'not' a1 'xor' a2 'xor' 'not' a3 by ThXOR2C3;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2c]
  for s being State of GFA2AdderCirc(x,y,z)
    holds Following(s,2) is stable by FACIRC_1:63;

::=====================================================================

::---------------------------------------------------
:: GFA2 : Circuit Definition of GFA Combined Circuit
::---------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA2Str(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
    GFA2AdderStr(x,y,z) +* GFA2CarryStr(x,y,z);
  coherence;
end;

definition
 let x,y,z be set;
 func BitGFA2Circ(x,y,z) ->
   strict Boolean gate`2=den Circuit of BitGFA2Str(x,y,z) equals
   GFA2AdderCirc(x,y,z) +* GFA2CarryCirc(x,y,z);
  coherence;
end;

::----------------------------------------------------------
:: GFA2 Combined : Carrier, InnerVertices and InputVertices
::----------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA2SC1:
  for x,y,z being set holds
   InnerVertices BitGFA2Str(x,y,z) =
     {[<*x,y*>,xor2c]} \/ {GFA2AdderOutput(x,y,z)} \/
     {[<*x,y*>,and2a], [<*y,z*>,and2c], [<*z,x*>,and2b]} \/
     {GFA2CarryOutput(x,y,z)}
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA2Str(x,y,z);
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
     set A1 = GFA2AdderOutput(x,y,z);
     set A2 = GFA2CarryOutput(x,y,z);
     thus InnerVertices S
       = (InnerVertices S1) \/ InnerVertices S2 by FACIRC_1:27
      .= {xyf0} \/ {A1} \/ InnerVertices S2 by ThGFA2S0
      .= {xyf0} \/ {A1} \/ ({xyf1, yzf2, zxf3} \/ {A2}) by ThGFA2C1
      .= {xyf0} \/ {A1} \/ {xyf1, yzf2, zxf3} \/ {A2} by XBOOLE_1:4;
   end;

theorem
 for x,y,z being set holds
   InnerVertices BitGFA2Str(x,y,z) is Relation
   proof
     let x,y,z be set;
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
     InnerVertices S1 is Relation & InnerVertices S2 is Relation
       by FACIRC_1:58,ThGFA2C2;
     hence thesis by FACIRC_1:3;
  end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA2SC5:
  for x,y,z being set  st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   holds
    InputVertices BitGFA2Str(x,y,z) = {x,y,z}
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] and
A2:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA2Str(x,y,z);
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
A4:  InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
A5:  InputVertices S2 = {x,y,z} by A2,ThGFA2C4;
     S1 tolerates S2 by CIRCCOMB:55;
    hence InputVertices S = {x,y,z} by A4,A5,FACIRC_2:22;
   end;

theorem ThGFA2SC6:
 for x,y,z being non pair set holds
    InputVertices BitGFA2Str(x,y,z) = {x,y,z}
   proof
     let x,y,z be non pair set;
     set S = BitGFA2Str(x,y,z);
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
A2:  InputVertices S1 is without_pairs & InnerVertices S1 is Relation
      by FACIRC_1:58,FACIRC_1:59;
A3:  InputVertices S2 is without_pairs & InnerVertices S2 is Relation
      by ThGFA2C2,ThGFA2C5;
     InputVertices S1 = {x,y,z} & InputVertices S2 = {x,y,z}
      by FACIRC_1:57,ThGFA2C9;
    hence InputVertices S = {x,y,z} \/ {x,y,z} by A2,A3,FACIRC_1:7
                         .= {x,y,z};
  end;

theorem
 for x,y,z being non pair set holds
    InputVertices BitGFA2Str(x,y,z) is without_pairs
   proof
     let x,y,z be non pair set;
     InputVertices BitGFA2Str(x,y,z) = {x,y,z} by ThGFA2SC6;
     hence thesis;
   end;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
    x in the carrier of BitGFA2Str(x,y,z) &
    y in the carrier of BitGFA2Str(x,y,z) &
    z in the carrier of BitGFA2Str(x,y,z) &
    [<*x,y*>,xor2c] in the carrier of BitGFA2Str(x,y,z) &
    [<*[<*x,y*>,xor2c],z*>,xor2c] in the carrier of BitGFA2Str(x,y,z) &
    [<*x,y*>,and2a] in the carrier of BitGFA2Str(x,y,z) &
    [<*y,z*>,and2c] in the carrier of BitGFA2Str(x,y,z) &
    [<*z,x*>,and2b] in the carrier of BitGFA2Str(x,y,z) &
    [<*[<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b]*>,nor3]
                                in the carrier of BitGFA2Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
A1:  x in the carrier of S1 & y in the carrier of S1 &
     z in the carrier of S1 &
     [<*x,y*>,f0] in the carrier of S1 &
     [<*[<*x,y*>,f0],z*>,f0] in the carrier of S1 by FACIRC_1:60,61;
     xy in the carrier of S2 & yz in the carrier of S2 &
     zx in the carrier of S2 &
     xyz in the carrier of S2 by ThGFA2C6;
    hence thesis by A1,FACIRC_1:20;
  end;

theorem ThGFA2SC7:
  for x,y,z being set holds
    [<*x,y*>,xor2c] in InnerVertices BitGFA2Str(x,y,z) &
    GFA2AdderOutput(x,y,z) in InnerVertices BitGFA2Str(x,y,z) &
    [<*x,y*>,and2a] in InnerVertices BitGFA2Str(x,y,z) &
    [<*y,z*>,and2c] in InnerVertices BitGFA2Str(x,y,z) &
    [<*z,x*>,and2b] in InnerVertices BitGFA2Str(x,y,z) &
    GFA2CarryOutput(x,y,z) in InnerVertices BitGFA2Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA2Str(x,y,z);
     set A1 = GFA2AdderOutput(x,y,z);
     set A2 = GFA2CarryOutput(x,y,z);
     InnerVertices S
       = {xyf0} \/ {A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ThGFA2SC1
      .= {xyf0,A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:41
      .= {xyf0,A1,xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:48
      .= {xyf0,A1,xyf1,yzf2,zxf3,A2} by ENUMSET1:55;
     hence thesis by ENUMSET1:def 4;
   end;

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   holds
    x in InputVertices BitGFA2Str(x,y,z) &
    y in InputVertices BitGFA2Str(x,y,z) &
    z in InputVertices BitGFA2Str(x,y,z)
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA2Str(x,y,z);
     InputVertices S = {x,y,z} by A1,ThGFA2SC5;
    hence thesis by ENUMSET1:def 1;
   end;

::------------------------------------------------------------------
:: GFA2 : Carry and Adder Output Definition of GFA Combined Circuit
::------------------------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA2CarryOutput(x,y,z) ->
         Element of InnerVertices BitGFA2Str(x,y,z) equals
    [<*[<*x,y*>,and2a],[<*y,z*>,and2c],[<*z,x*>,and2b]*>,nor3];
  coherence
    proof
      GFA2CarryOutput(x,y,z)
        in InnerVertices BitGFA2Str(x,y,z) by ThGFA2SC7;
      hence thesis;
    end;
end;

definition
 let x,y,z be set;
 func BitGFA2AdderOutput(x,y,z) ->
         Element of InnerVertices BitGFA2Str(x,y,z) equals
    2GatesCircOutput(x,y,z, xor2c);
  coherence
    proof
      GFA2AdderOutput(x,y,z)
        in InnerVertices BitGFA2Str(x,y,z) by ThGFA2SC7;
      hence thesis;
    end;
end;

::-------------------------------------------------------------
:: GFA2 Combined : Stability of the Adder/Carry Output Circuit
::-------------------------------------------------------------

theorem
  for x,y,z being set st z <> [<*x,y*>,xor2c] &
    x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   for s being State of BitGFA2Circ(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA2AdderOutput(x,y,z)
           = 'not' a1 'xor' a2 'xor' 'not' a3 &
      Following(s,2).GFA2CarryOutput(x,y,z)
           = 'not' (('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
                    ('not' a3 '&' 'not' a1))
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA2Str(x,y,z);
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
     set A = BitGFA2Circ(x,y,z);
     set A1 = GFA2AdderCirc(x,y,z);
     set A2 = GFA2CarryCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN; assume
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
A3:  x in the carrier of S1 & y in the carrier of S1 & z in the carrier of S1
     by FACIRC_1:60;
A4:  x in the carrier of S2 & y in the carrier of S2 & z in the carrier of S2
     by ThGFA2C6;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A6: InputVertices S1 = InputVertices S2 by A1,ThGFA2C4;
A7:  InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
     dom s1 = the carrier of S1 by CIRCUIT1:4;
then a1 = s1.x & a2 = s1.y & a3 = s1.z by A2,A3,FUNCT_1:70;
then Following(t,2).GFA2AdderOutput(x,y,z)
        = Following(s1,2).GFA2AdderOutput(x,y,z) &
     Following(s1,2).GFA2AdderOutput(x,y,z) = 'not' a1 'xor' a2 'xor' 'not' a3
       by A1,A6,A7,ThGFA2S14OUT,FACIRC_1:32;
    hence
     Following(s,2).GFA2AdderOutput(x,y,z) = 'not' a1 'xor' a2 'xor' 'not' a3;
     dom s2 = the carrier of S2 by CIRCUIT1:4;
then a1 = s2.x & a2 = s2.y & a3 = s2.z by A2,A4,FUNCT_1:70;
then Following(t,2).GFA2CarryOutput(x,y,z)
        = Following(s2,2).GFA2CarryOutput(x,y,z) &
     Following(s2,2).GFA2CarryOutput(x,y,z) =
       'not' (('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
              ('not' a3 '&' 'not' a1))
       by A1,A6,A7,ThGFA2C24,FACIRC_1:33;
     hence Following(s,2).GFA2CarryOutput(x,y,z) =
       'not' (('not' a1 '&' a2) 'or' (a2 '&' 'not' a3) 'or'
              ('not' a3 '&' 'not' a1));
   end;

theorem
 for x,y,z being set  st z <> [<*x,y*>,xor2c] &
   x <> [<*y,z*>,and2c] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2a]
   for s being State of BitGFA2Circ(x,y,z)
    holds Following(s,2) is stable
   proof
     set f0 = xor2c;
     set f1 = and2a, f2 = and2c, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA2Str(x,y,z);
     set S1 = GFA2AdderStr(x,y,z);
     set S2 = GFA2CarryStr(x,y,z);
     set A = BitGFA2Circ(x,y,z);
     set A1 = GFA2AdderCirc(x,y,z);
     set A2 = GFA2CarryCirc(x,y,z);
     let s be State of A;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A3: InputVertices S1 = InputVertices S2 by A1,ThGFA2C4;
     InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
then A4: Following(s1,2) = Following(t,2)|the carrier of S1 &
         Following(s1,3) = Following(t,3)|the carrier of S1 &
         Following(s2,2) = Following(t,2)|the carrier of S2 &
         Following(s2,3) = Following(t,3)|the carrier of S2
          by A3,FACIRC_1:30,31;
     Following(s1,2) is stable by A1,FACIRC_1:63;
then A5: Following(s1,2)
       = Following Following(s1,2) by CIRCUIT2:def 6
      .= Following(s1,2+1) by FACIRC_1:12;
     Following(s2,2) is stable by A1,ThGFA2C28;
then A6: Following(s2,2)
       = Following Following(s2,2) by CIRCUIT2:def 6
      .= Following(s2,2+1) by FACIRC_1:12;
A7:  Following(s,2+1) = Following Following(s,2) by FACIRC_1:12;
A8:  dom Following(s,2) = the carrier of S &
     dom Following(s,3) = the carrier of S &
     dom Following(s1,2) = the carrier of S1 &
     dom Following(s2,2) = the carrier of S2 by CIRCUIT1:4;
     A9: the carrier of S = (the carrier of S1) \/ the carrier of S2
      by CIRCCOMB:def 2;
       now let a be set; assume a in the carrier of S;
       then a in the carrier of S1 or a in the carrier of S2
              by A9,XBOOLE_0:def 2;
       then (Following(s,2)).a = (Following(s1,2)).a &
            (Following(s,3)).a = (Following(s1,3)).a or
            (Following(s,2)).a = (Following(s2,2)).a &
            (Following(s,3)).a = (Following(s2,3)).a
              by A4,A5,A6,A8,FUNCT_1:70;
       hence (Following(s,2)).a = (Following Following(s,2)).a
              by A5,A6,FACIRC_1:12;
       end;
    hence Following(s,2) = Following Following(s,2) by A7,A8,FUNCT_1:9;
   end;

::========================================================================

begin :: Generalized Full Adder (GFA) Circuit (TYPE-3)

::========================================================================
:: << GFA TYPE-3 >>
::------------------------------------------------------------------------
::   Name     : Generalized Full Adder Type-3 (GFA3)
::   Function : - x - y - z = - 2 * c - s
::
::   Logic Symbol :     -x     -y      Combined : GFA3CarryIStr(x,y,z)
::                       |     /                  GFA3CarryStr(x,y,z)
::                       |    /                   GFA3AdderStr(x,y,z)
::                   +---O---O                  --->
::                   |  GFA  O---- -z             BitGFA3Str(x,y,z)
::                   | TYPE3 |
::                   O---O---+          Outputs : BitGFA3CarryOutput(x,y,z)
::                  /    |                        BitGFA3AdderOutput(x,y,z)
::                 /     |
::               -c     -s          Calculation : Following(s,2) is stable.
::=========================================================================

::-------------------------------------------------
:: GFA3 Carry : Circuit Definition of Carry Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA3CarryIStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    1GateCircStr(<*x,y*>,and2b) +* 1GateCircStr(<*y,z*>,and2b) +*
    1GateCircStr(<*z,x*>,and2b);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3CarryICirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA3CarryIStr(x,y,z) equals
    1GateCircuit(x,y,and2b) +* 1GateCircuit(y,z,and2b) +*
    1GateCircuit(z,x,and2b);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3CarryStr(x,y,z) ->
    unsplit gate`1=arity gate`2isBoolean
    non void strict non empty ManySortedSign equals
    GFA3CarryIStr(x,y,z) +*
    1GateCircStr(<*[<*x,y*>,and2b], [<*y,z*>,and2b], [<*z,x*>,and2b]*>,nor3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3CarryCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA3CarryStr(x,y,z) equals
    GFA3CarryICirc(x,y,z) +*
    1GateCircuit([<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b],nor3);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3CarryOutput(x,y,z) -> Element of InnerVertices GFA3CarryStr(x,y,z)
  equals
   [<*[<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b]*>,nor3];
  coherence
   proof
     [<*[<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b]*>,nor3] in
      InnerVertices
       1GateCircStr(<*[<*x,y*>,and2b],[<*y,z*>,and2b], [<*z,x*>,and2b]*>,nor3)
       by FACIRC_1:47;
    hence thesis by FACIRC_1:21;
   end;
end;

::-------------------------------------------------------
:: GFA3 Carry : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA3C0:
  for x,y,z being set holds
  InnerVertices GFA3CarryIStr(x,y,z) =
   {[<*x,y*>,and2b], [<*y,z*>,and2b], [<*z,x*>,and2b]}
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
A1:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A2:  Cxy tolerates Cyz by CIRCCOMB:55;
     InnerVertices GFA3CarryIStr(x,y,z)
       = InnerVertices(Cxy +* Cyz) \/ InnerVertices(Czx) by A1,CIRCCOMB:15
      .= InnerVertices(Cxy) \/ InnerVertices(Cyz) \/
         InnerVertices(Czx) by A2,CIRCCOMB:15
      .= {xy} \/ InnerVertices(Cyz) \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ InnerVertices(Czx) by CIRCCOMB:49
      .= {xy} \/ {yz} \/ {zx} by CIRCCOMB:49
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
    hence thesis;
   end;

theorem ThGFA3C1:
  for x,y,z being set holds
  InnerVertices GFA3CarryStr(x,y,z) =
    {[<*x,y*>,and2b], [<*y,z*>,and2b], [<*z,x*>,and2b]} \/
    {GFA3CarryOutput(x,y,z)}
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A1:  Cxy tolerates (Cyz +* Czx +* Cxyz) by CIRCCOMB:55;
A2:  Cyz tolerates (Czx +* Cxyz) by CIRCCOMB:55;
A3:  Czx tolerates Cxyz by CIRCCOMB:55;
A4:  InnerVertices (Cyz +* (Czx +* Cxyz))
      = InnerVertices Cyz \/ InnerVertices (Czx +* Cxyz) by A2,CIRCCOMB:15;
A5:  InnerVertices (Czx +* Cxyz)
      = InnerVertices Czx \/ InnerVertices Cxyz by A3,CIRCCOMB:15;
thus InnerVertices GFA3CarryStr(x,y,z)
      = InnerVertices (Cxy +* (Cyz +* Czx) +* Cxyz) by CIRCCOMB:10
     .= InnerVertices (Cxy +* (Cyz +* Czx +* Cxyz)) by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* Czx +* Cxyz)
          by A1,CIRCCOMB:15
     .= InnerVertices Cxy \/ InnerVertices (Cyz +* (Czx +* Cxyz))
          by CIRCCOMB:10
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
          (InnerVertices Czx \/ InnerVertices Cxyz) by A4,A5,XBOOLE_1:4
     .= InnerVertices Cxy \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by XBOOLE_1:4
     .= {xy} \/ InnerVertices Cyz \/
           InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ InnerVertices Czx \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy} \/ {yz} \/ {zx} \/ InnerVertices Cxyz by CIRCCOMB:49
     .= {xy, yz} \/ {zx} \/ InnerVertices Cxyz by ENUMSET1:41
     .= {xy, yz, zx} \/ InnerVertices Cxyz by ENUMSET1:43
     .= {xy, yz, zx} \/ {GFA3CarryOutput(x,y,z)} by CIRCCOMB:49;
  end;

theorem ThGFA3C2:
  for x,y,z being set holds
  InnerVertices GFA3CarryStr(x,y,z) is Relation
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
A3:  InnerVertices Cxy is Relation & InnerVertices Cyz is Relation &
     InnerVertices Czx is Relation by FACIRC_1:38;
then InnerVertices (Cxy +* Cyz) is Relation by FACIRC_1:3;
then InnerVertices Cxyz is Relation &
     InnerVertices GFA3CarryIStr(x,y,z) is Relation by A3,FACIRC_1:3,38;
    hence thesis by FACIRC_1:3;
   end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA3C3:
 for x,y,z being set st
   x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
  holds InputVertices GFA3CarryIStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     assume
A1:  x <> yz & y <> zx & z <> xy;
A2:  Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
A3:  Cxy tolerates Cyz by CIRCCOMB:55;
A4:  y <> yz by FACIRC_2:3;
A5:  not xy in {y,z} by A1,Lemma1;
A6:  not z in {xy, yz} & not x in {xy, yz} by A1,Lemma1;
A7:  not zx in {x,y,z} by A1,Lemma1;
     InputVertices GFA3CarryIStr(x,y,z)
      = (InputVertices(Cxy +* Cyz) \ InnerVertices(Czx)) \/
        (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A2,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ InnerVertices(Cxy +* Cyz)) by A3,CIRCCMB2:6
     .= ((InputVertices(Cxy) \ InnerVertices(Cyz)) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by A3,CIRCCOMB:15
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ InnerVertices(Cxy))) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ InnerVertices(Czx) \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ (InnerVertices(Cxy) \/ InnerVertices(Cyz)))
          by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ InnerVertices(Cyz))) by CIRCCOMB:49
     .= ((InputVertices(Cxy) \ {yz}) \/
         (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by CIRCCOMB:49
     .= (({x,y} \ {yz}) \/ (InputVertices(Cyz) \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         (InputVertices(Czx) \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ ({xy} \/ {yz})) by FACIRC_1:40
     .= (({x,y} \ {yz}) \/ ({y,z} \ {xy})) \ {zx} \/
         ({z,x} \ {xy,yz}) by ENUMSET1:41
     .= (({x,y} \/ ({y,z} \ {xy})) \ {zx}) \/ ({z,x} \ {xy,yz})
          by A1,A4,FACIRC_2:1
     .= ({x,y} \/ {y,z}) \ {zx} \/ ({z,x} \ {xy,yz}) by A5,ZFMISC_1:65
     .= ({x,y} \/ {y,z}) \ {zx} \/ {z,x} by A6,ZFMISC_1:72
     .= {x,y,y,z} \ {zx} \/ {z,x} by ENUMSET1:45
     .= {y,y,x,z} \ {zx} \/ {z,x} by ENUMSET1:110
     .= {y,x,z} \ {zx} \/ {z,x} by ENUMSET1:71
     .= {x,y,z} \ {zx} \/ {z,x} by ENUMSET1:99
     .= {x,y,z} \/ {z,x} by A7,ZFMISC_1:65
     .= {x,y,z,z,x} by ENUMSET1:49
     .= {x,y,z,z} \/ {x} by ENUMSET1:50
     .= {z,z,x,y} \/ {x} by ENUMSET1:118
     .= {z,x,y} \/ {x} by ENUMSET1:71
     .= {z,x,y,x} by ENUMSET1:46
     .= {x,x,y,z} by ENUMSET1:113
     .= {x,y,z} by ENUMSET1:71;
    hence thesis;
   end;

theorem ThGFA3C4:
 for x,y,z being set st
   x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
  holds InputVertices GFA3CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set MI = GFA3CarryIStr(x,y,z);
A1:  InnerVertices S = {xyz} by CIRCCOMB:49;
A2:  InputVertices S = rng <*xy, yz, zx*> by CIRCCOMB:49
                    .= {xy, yz, zx} by FINSEQ_2:148;
     assume
A3:  x <> yz & y <> zx & z <> xy;
A4:  {x, y, z} \ {xyz} = {x, y, z} by Lemma2;
A5:  {xy, yz, zx} \ {xy, yz, zx} = {} by XBOOLE_1:37;
     GFA3CarryStr(x,y,z) = MI +* S & MI tolerates S by CIRCCOMB:55;
     hence InputVertices GFA3CarryStr(x,y,z)
      = ((InputVertices MI) \ InnerVertices S) \/
         ((InputVertices S) \ InnerVertices MI) by CIRCCMB2:6
     .= {x,y,z} \/ ({xy, yz, zx} \ InnerVertices MI) by A1,A2,A3,A4,ThGFA3C3
     .= {x,y,z} \/ {} by A5,ThGFA3C0
     .= {x,y,z};
  end;

theorem ThGFA3C5:
 for x,y,z being non pair set holds
  InputVertices GFA3CarryStr(x,y,z) is without_pairs
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set S = 1GateCircStr(<*xy, yz, zx*>,f4);
     set M = GFA3CarryStr(x,y,z);
     set MI = GFA3CarryIStr(x,y,z);
A3:  InputVertices Cxy is without_pairs & InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A4: InputVertices MI is without_pairs by A3,FACIRC_1:9;
     InnerVertices S is Relation by FACIRC_1:38;
then A5: InputVertices M = (InputVertices MI) \/
          (InputVertices S \ InnerVertices MI) by A4,FACIRC_1:6;
     given xx being pair set such that
A6:  xx in InputVertices M;
A7:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A8:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A9: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A8,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A8,A9,CIRCCOMB:15
     .= {xy, yz} \/ {zx} by ENUMSET1:41
     .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A7,XBOOLE_1:37;
    hence thesis by A4,A5,A6,FACIRC_1:def 2;
  end;

::-------------------------------------------------------
:: Carrier and misc.

theorem ThGFA3C6:
  for x,y,z being set holds
    x in the carrier of GFA3CarryStr(x,y,z) &
    y in the carrier of GFA3CarryStr(x,y,z) &
    z in the carrier of GFA3CarryStr(x,y,z) &
    [<*x,y*>,and2b] in the carrier of GFA3CarryStr(x,y,z) &
    [<*y,z*>,and2b] in the carrier of GFA3CarryStr(x,y,z) &
    [<*z,x*>,and2b] in the carrier of GFA3CarryStr(x,y,z) &
    [<*[<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b]*>,nor3]
                    in the carrier of GFA3CarryStr(x,y,z)
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set Cxyz = 1GateCircStr(<*xy, yz, zx*>,f4);
     y in the carrier of Cxy by FACIRC_1:43;
then A0: y in the carrier of Cxy +* Cyz by FACIRC_1:20;
     x in the carrier of Czx & z in the carrier of Czx by FACIRC_1:43;
then A1: x in the carrier of GFA3CarryIStr(x,y,z) &
         y in the carrier of GFA3CarryIStr(x,y,z) &
         z in the carrier of GFA3CarryIStr(x,y,z) by A0,FACIRC_1:20;
     xy in the carrier of Cxy & yz in the carrier of Cyz by FACIRC_1:43;
then A2: xy in the carrier of Cxy +* Cyz & yz in the carrier of Cxy +* Cyz
       by FACIRC_1:20;
     zx in the carrier of Czx by FACIRC_1:43;
then A3: xy in the carrier of GFA3CarryIStr(x,y,z) &
         yz in the carrier of GFA3CarryIStr(x,y,z) &
         zx in the carrier of GFA3CarryIStr(x,y,z) by A2,FACIRC_1:20;
     set p = <*xy,yz,zx*>;
     the carrier of Cxyz = rng p \/ {xyz} & [p,f4] in {[p,f4]}
       by CIRCCOMB:def 6,TARSKI:def 1;
then xyz in the carrier of Cxyz by XBOOLE_0:def 2;
    hence thesis by A1,A3,FACIRC_1:20;
  end;

theorem ThGFA3C7:
 for x,y,z being set holds
   [<*x,y*>,and2b] in InnerVertices GFA3CarryStr(x,y,z) &
   [<*y,z*>,and2b] in InnerVertices GFA3CarryStr(x,y,z) &
   [<*z,x*>,and2b] in InnerVertices GFA3CarryStr(x,y,z) &
   GFA3CarryOutput(x,y,z) in InnerVertices GFA3CarryStr(x,y,z)
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     InnerVertices GFA3CarryStr(x,y,z)
       = {xy,yz,zx} \/ {GFA3CarryOutput(x,y,z)} by ThGFA3C1
      .= {xy,yz,zx,GFA3CarryOutput(x,y,z)} by ENUMSET1:46;
    hence thesis by ENUMSET1:def 2;
  end;

theorem ThGFA3C8:
  for x,y,z being set st
     x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   holds
    x in InputVertices GFA3CarryStr(x,y,z) &
    y in InputVertices GFA3CarryStr(x,y,z) &
    z in InputVertices GFA3CarryStr(x,y,z)
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     InputVertices GFA3CarryStr(x,y,z) = {x,y,z} by A0,ThGFA3C4;
    hence thesis by ENUMSET1:def 1;
  end;

theorem ThGFA3C9:
 for x,y,z being non pair set holds
  InputVertices GFA3CarryStr(x,y,z) = {x,y,z}
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be non pair set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set Cxy = 1GateCircStr(<*x,y*>,f1);
     set Cyz = 1GateCircStr(<*y,z*>,f2);
     set Czx = 1GateCircStr(<*z,x*>,f3);
     set M = GFA3CarryStr(x,y,z);
     set MI = GFA3CarryIStr(x,y,z);
     set S = 1GateCircStr(<*xy,yz,zx*>,f4);
A3:  InputVertices Cxy is without_pairs &
     InputVertices Cyz is without_pairs &
     InputVertices Czx is without_pairs by FACIRC_1:41;
then A4: InputVertices (Cxy+*Cyz) is without_pairs by FACIRC_1:9;
then A5: InputVertices MI is without_pairs by A3,FACIRC_1:9;
A6:  InputVertices Cxy = {x,y} & InputVertices Cyz = {y,z} &
     InputVertices Czx = {z,x} by FACIRC_1:40;
     InnerVertices S is Relation by FACIRC_1:38;
then A7: InputVertices M =
      (InputVertices MI) \/ (InputVertices S \ InnerVertices MI)
       by A5,FACIRC_1:6;
A8:  InputVertices S = {xy, yz, zx} by FACIRC_1:42;
A9:  InnerVertices Cxy = {xy} & InnerVertices Cyz = {yz} &
     InnerVertices Czx = {zx} by CIRCCOMB:49;
     Cxy tolerates Cyz & Cxy tolerates Czx & Cyz tolerates Czx by CIRCCOMB:55;
then A10: InnerVertices (Cxy +* Cyz) = {xy} \/ {yz} by A9,CIRCCOMB:15;
     Cxy +* Cyz tolerates Czx by CIRCCOMB:55;
then InnerVertices MI = {xy} \/ {yz} \/ {zx} by A9,A10,CIRCCOMB:15
      .= {xy, yz} \/ {zx} by ENUMSET1:41
      .= {xy, yz, zx} by ENUMSET1:43;
then InputVertices S \ InnerVertices MI = {} by A8,XBOOLE_1:37;
     hence InputVertices M
       = (InputVertices(Cxy+*Cyz)) \/ InputVertices Czx
          by A3,A4,A9,A10,A7,FACIRC_1:7
      .= (InputVertices Cxy) \/ (InputVertices Cyz) \/ (InputVertices Czx)
          by A3,A9,FACIRC_1:7
      .= {x,y,y,z} \/ {z,x} by A6,ENUMSET1:45
      .= {y,y,x,z} \/ {z,x} by ENUMSET1:110
      .= {y,x,z} \/ {z,x} by ENUMSET1:71
      .= {x,y,z} \/ {z,x} by ENUMSET1:99
      .= {x,y,z} \/ ({z}\/{x}) by ENUMSET1:41
      .= {x,y,z} \/ {z} \/ {x} by XBOOLE_1:4
      .= {z,x,y} \/ {z} \/ {x} by ENUMSET1:100
      .= {z,z,x,y} \/ {x} by ENUMSET1:44
      .= {z,x,y} \/ {x} by ENUMSET1:71
      .= {x,y,z} \/ {x} by ENUMSET1:100
      .= {x,x,y,z} by ENUMSET1:44
      .= {x,y,z} by ENUMSET1:71;
  end;

::----------------------------------------------------
:: GFA3 Carry : Stability of the Carry Output Circuit
::----------------------------------------------------

theorem ThGFA3C22:
 for x,y,z being set for s being State of GFA3CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
   holds
    (Following s).[<*x,y*>,and2b] = 'not' a1 '&' 'not' a2 &
    (Following s).[<*y,z*>,and2b] = 'not' a2 '&' 'not' a3 &
    (Following s).[<*z,x*>,and2b] = 'not' a3 '&' 'not' a1
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     let s be State of GFA3CarryCirc(x,y,z);
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA3CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
A4:  x in the carrier of S & y in the carrier of S & z in the carrier of S
      by ThGFA3C6;
     xy in InnerVertices GFA3CarryStr(x,y,z) by ThGFA3C7;
     hence (Following s).[<*x,y*>,f1] = f1.(s*<*x,y*>) by A2,FACIRC_1:35
         .= f1.<*a1,a2*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a1 '&' 'not' a2 by TWOSCOMP:def 3;
     yz in InnerVertices GFA3CarryStr(x,y,z) by ThGFA3C7;
     hence (Following s).[<*y,z*>,f2] = f2.(s*<*y,z*>) by A2,FACIRC_1:35
         .= f2.<*a2,a3*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a2 '&' 'not' a3 by TWOSCOMP:def 3;
     zx in InnerVertices GFA3CarryStr(x,y,z) by ThGFA3C7;
     hence (Following s).[<*z,x*>,f3] = f3.(s*<*z,x*>) by A2,FACIRC_1:35
         .= f3.<*a3,a1*> by A1,A3,A4,FINSEQ_2:145
         .= 'not' a3 '&' 'not' a1 by TWOSCOMP:def 3;
  end;

theorem ThGFA3C23:
 for x,y,z being set for s being State of GFA3CarryCirc(x,y,z)
  for a1,a2,a3 being Element of BOOLEAN st
    a1 = s.[<*x,y*>,and2b] & a2 = s.[<*y,z*>,and2b] & a3 = s.[<*z,x*>,and2b]
   holds
    (Following s).GFA3CarryOutput(x,y,z) = 'not' (a1 'or' a2 'or' a3)
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     let s be State of GFA3CarryCirc(x,y,z);
     set xy =[<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.xy & a2 = s.yz & a3 = s.zx;
     set S = GFA3CarryStr(x,y,z);
A2:  InnerVertices S = the OperSymbols of S by FACIRC_1:37;
A3:  dom s = the carrier of S by CIRCUIT1:4;
     reconsider xy, yz, zx as Element of InnerVertices S by ThGFA3C7;
     thus (Following s).GFA3CarryOutput(x,y,z)
          = f4.(s*<*xy, yz, zx*>) by A2,FACIRC_1:35
         .= f4.<*a1,a2,a3*> by A1,A3,FINSEQ_2:146
         .= 'not' (a1 'or' a2 'or' a3) by TWOSCOMP:def 28;
  end;

theorem ThGFA3C24:
  for x,y,z being set st
    x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   for s being State of GFA3CarryCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA3CarryOutput(x,y,z) =
          'not' (('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
                 ('not' a3 '&' 'not' a1)) &
      Following(s,2).[<*x,y*>,and2b] = 'not' a1 '&' 'not' a2 &
      Following(s,2).[<*y,z*>,and2b] = 'not' a2 '&' 'not' a3 &
      Following(s,2).[<*z,x*>,and2b] = 'not' a3 '&' 'not' a1
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     let s be State of GFA3CarryCirc(x,y,z);
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     set S = GFA3CarryStr(x,y,z);
     reconsider x' = x, y' = y, z' = z as Vertex of S by ThGFA3C6;
     x in InputVertices S & y in InputVertices S & z in InputVertices S
     by A0,ThGFA3C8;
then A2: (Following s).x' = s.x & (Following s).y' = s.y &
         (Following s).z' = s.z by CIRCUIT2:def 5;
A3:  Following(s,2) = Following Following s by FACIRC_1:15;
     (Following s).xy = 'not' a1 '&' 'not' a2 &
     (Following s).yz = 'not' a2 '&' 'not' a3 &
     (Following s).zx = 'not' a3 '&' 'not' a1 by A1,ThGFA3C22;
    hence Following(s,2).GFA3CarryOutput(x,y,z) =
    'not'(('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
          ('not' a3 '&' 'not' a1)) by A3,ThGFA3C23;
    thus thesis by A1,A2,A3,ThGFA3C22;
  end;

theorem ThGFA3C28:
  for x,y,z being set st
     x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   for s being State of GFA3CarryCirc(x,y,z)
    holds Following(s,2) is stable
   proof
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set such that
A0:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     let s be State of GFA3CarryCirc(x,y,z);
     set S = GFA3CarryStr(x,y,z);
A1:  dom Following Following(s,2) = the carrier of S &
     dom Following(s,2) = the carrier of S by CIRCUIT1:4;
     reconsider xx = x, yy = y, zz = z as Vertex of S by ThGFA3C6;
     set a1 = s.xx, a2 = s.yy, a3 = s.zz;
     set ffs = Following(s,2), fffs = Following ffs;
     a1 = s.x & a2 = s.y & a3 = s.z;
then A2: ffs.GFA3CarryOutput(x,y,z) =
         'not'(('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
               ('not' a3 '&' 'not' a1)) &
     ffs.xy = 'not' a1 '&' 'not' a2 &
     ffs.yz = 'not' a2 '&' 'not' a3 &
     ffs.zx = 'not' a1 '&' 'not' a3 by A0,ThGFA3C24;
A3:  ffs = Following Following s by FACIRC_1:15;
A4:  x in InputVertices S & y in InputVertices S & z in InputVertices S
      by A0,ThGFA3C8;
then (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
      by CIRCUIT2:def 5;
then A5: ffs.x = a1 & ffs.y = a2 & ffs.z = a3 by A3,A4,CIRCUIT2:def 5;
     now let a be set; assume
A6:  a in the carrier of S;
then reconsider v = a as Vertex of S;
A7:  v in InputVertices S \/ InnerVertices S by A6,XBOOLE_1:45;
     thus ffs.a = (fffs).a
      proof per cases by A7,XBOOLE_0:def 2;
        suppose v in InputVertices S;
          hence thesis by CIRCUIT2:def 5;
        end;
        suppose v in InnerVertices S;
           then v in {xy, yz, zx} \/ {GFA3CarryOutput(x,y,z)} by ThGFA3C1;
           then v in {xy, yz, zx} or
                v in {GFA3CarryOutput(x,y,z)} by XBOOLE_0:def 2;
           then v = xy or v = yz or v = zx or
                v = GFA3CarryOutput(x,y,z) by ENUMSET1:def 1,TARSKI:def 1;
          hence thesis by A2,A5,ThGFA3C22,ThGFA3C23;
        end;
      end;
     end;
    hence ffs = fffs by A1,FUNCT_1:9;
  end;

::=========================================================================

::-------------------------------------------------
:: GFA3 Adder : Circuit Definition of Adder Output
::-------------------------------------------------

definition
 let x,y,z be set;
 func GFA3AdderStr(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
   2GatesCircStr(x,y,z, xor2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3AdderCirc(x,y,z) ->
      strict Boolean gate`2=den Circuit of GFA3AdderStr(x,y,z) equals
   2GatesCircuit(x,y,z, xor2);
  coherence;
end;

definition
 let x,y,z be set;
 func GFA3AdderOutput(x,y,z) ->
      Element of InnerVertices GFA3AdderStr(x,y,z) equals
   2GatesCircOutput(x,y,z, xor2);
  coherence;
end;

::-------------------------------------------------------
:: GFA3 Adder : Carrier, InnerVertices and InputVertices
::-------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA3S0:
 for x,y,z being set holds
  InnerVertices GFA3AdderStr(x,y,z) =
    {[<*x,y*>,xor2]} \/ {GFA3AdderOutput(x,y,z)}
   proof
     let x,y,z be set;
     set S3 = GFA3AdderStr(x,y,z), O3 = GFA3AdderOutput(x,y,z);
     set S0 = GFA0AdderStr(x,y,z), O0 = GFA0AdderOutput(x,y,z);
     S3 = S0 & O3 = O0;
    hence thesis by ThGFA0S0;
   end;

theorem
 for x,y,z being set holds
  InnerVertices GFA3AdderStr(x,y,z) is Relation by FACIRC_1:58;

::-------------------------------------------------------
:: InputVertices

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2] holds
  InputVertices GFA3AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

theorem
 for x,y,z being non pair set holds
  InputVertices GFA3AdderStr(x,y,z) is without_pairs by FACIRC_1:59;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
   x in the carrier of GFA3AdderStr(x,y,z) &
   y in the carrier of GFA3AdderStr(x,y,z) &
   z in the carrier of GFA3AdderStr(x,y,z) &
   [<*x,y*>,xor2] in the carrier of GFA3AdderStr(x,y,z) &
   [<*[<*x,y*>,xor2], z*>, xor2] in the carrier of GFA3AdderStr(x,y,z)
   by FACIRC_1:60,61;

theorem
 for x,y,z being set holds
   [<*x,y*>,xor2] in InnerVertices GFA3AdderStr(x,y,z) &
   GFA3AdderOutput(x,y,z) in InnerVertices GFA3AdderStr(x,y,z)
   proof
     let x,y,z be set;
     set S0 = GFA0AdderStr(x,y,z);
     GFA3AdderStr(x,y,z) = S0;
    hence thesis by ThGFA0S7;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2] holds
    x in InputVertices GFA3AdderStr(x,y,z) &
    y in InputVertices GFA3AdderStr(x,y,z) &
    z in InputVertices GFA3AdderStr(x,y,z)
   proof
     let x,y,z be set such that
A0:  z <> [<*x,y*>,xor2];
     set S0 = GFA0AdderStr(x,y,z);
     GFA3AdderStr(x,y,z) = S0;
     hence thesis by A0,ThGFA0S8;
   end;

theorem
 for x,y,z being non pair set holds
   InputVertices GFA3AdderStr(x,y,z) = {x,y,z} by FACIRC_1:57;

::----------------------------------------------------
:: GFA3 Adder : Stability of the Adder Output Circuit
::----------------------------------------------------

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA3AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      (Following s).[<*x,y*>,xor2] = a1 'xor' a2 &
      (Following s).x = a1 & (Following s).y = a2 & (Following s).z = a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A3 = GFA3AdderCirc(x,y,z);
     set A0 = GFA0AdderCirc(x,y,z);
     A3 = A0;
     hence thesis by A0,ThGFA0S12;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA3AdderCirc(x,y,z)
   for a1a2,a1,a2,a3 being Element of BOOLEAN
     st a1a2 = s.[<*x,y*>,xor2] & a1 = s.x & a2 = s.y & a3 = s.z
    holds
     (Following s).GFA3AdderOutput(x,y,z) = a1a2 'xor' a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A3 = GFA3AdderCirc(x,y,z);
     set A0 = GFA0AdderCirc(x,y,z);
     set O3 = GFA3AdderOutput(x,y,z);
     set O0 = GFA0AdderOutput(x,y,z);
     A3 = A0 & O3 = O0;
     hence thesis by A0,ThGFA0S13;
   end;

theorem ThGFA3S14:
 for x,y,z being set st z <> [<*x,y*>, xor2]
  for s being State of GFA3AdderCirc(x,y,z)
   for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
    holds
     Following(s,2).GFA3AdderOutput(x,y,z) = a1 'xor' a2 'xor' a3 &
     Following(s,2).[<*x,y*>,xor2] = a1 'xor' a2 &
     Following(s,2).x = a1 & Following(s,2).y = a2 & Following(s,2).z = a3
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set A3 = GFA3AdderCirc(x,y,z);
     set A0 = GFA0AdderCirc(x,y,z);
     set O3 = GFA3AdderOutput(x,y,z);
     set O0 = GFA0AdderOutput(x,y,z);
     A3 = A0 & O3 = O0;
     hence thesis by A0,ThGFA0S14;
   end;

theorem ThGFA3S14OUT:
  for x,y,z being set st z <> [<*x,y*>, xor2]
   for s being State of GFA3AdderCirc(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA3AdderOutput(x,y,z)
         = 'not' ('not' a1 'xor' 'not' a2 'xor' 'not' a3)
   proof
     set f = xor2;
     let x,y,z be set such that
A0:  z <> [<*x,y*>,f];
     set xy = [<*x,y*>,f];
     set A = GFA3AdderCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN such that
A1:  a1 = s.x & a2 = s.y & a3 = s.z;
     thus (Following(s,2)).GFA3AdderOutput(x,y,z)
         = a1 'xor' a2 'xor' a3 by A0,A1,ThGFA3S14
        .= 'not' ('not' a1 'xor' 'not' a2 'xor' 'not' a3) by ThXOR2C4;
   end;

theorem
 for x,y,z being set st z <> [<*x,y*>,xor2]
  for s being State of GFA3AdderCirc(x,y,z)
    holds Following(s,2) is stable by FACIRC_1:63;

::=====================================================================

::---------------------------------------------------
:: GFA3 : Circuit Definition of GFA Combined Circuit
::---------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA3Str(x,y,z) ->
      unsplit gate`1=arity gate`2isBoolean
      non void strict non empty ManySortedSign equals
    GFA3AdderStr(x,y,z) +* GFA3CarryStr(x,y,z);
  coherence;
end;

definition
 let x,y,z be set;
 func BitGFA3Circ(x,y,z) ->
   strict Boolean gate`2=den Circuit of BitGFA3Str(x,y,z) equals
   GFA3AdderCirc(x,y,z) +* GFA3CarryCirc(x,y,z);
  coherence;
end;

::----------------------------------------------------------
:: GFA3 Combined : Carrier, InnerVertices and InputVertices
::----------------------------------------------------------

::-------------------------------------------------------
:: InnerVertices

theorem ThGFA3SC1:
  for x,y,z being set holds
   InnerVertices BitGFA3Str(x,y,z) =
     {[<*x,y*>,xor2]} \/ {GFA3AdderOutput(x,y,z)} \/
     {[<*x,y*>,and2b], [<*y,z*>,and2b], [<*z,x*>,and2b]} \/
     {GFA3CarryOutput(x,y,z)}
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA3Str(x,y,z);
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
     set A1 = GFA3AdderOutput(x,y,z);
     set A2 = GFA3CarryOutput(x,y,z);
     thus InnerVertices S
       = (InnerVertices S1) \/ InnerVertices S2 by FACIRC_1:27
      .= {xyf0} \/ {A1} \/ InnerVertices S2 by ThGFA3S0
      .= {xyf0} \/ {A1} \/ ({xyf1, yzf2, zxf3} \/ {A2}) by ThGFA3C1
      .= {xyf0} \/ {A1} \/ {xyf1, yzf2, zxf3} \/ {A2} by XBOOLE_1:4;
   end;

theorem
 for x,y,z being set holds
   InnerVertices BitGFA3Str(x,y,z) is Relation
   proof
     let x,y,z be set;
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
     InnerVertices S1 is Relation & InnerVertices S2 is Relation
       by FACIRC_1:58,ThGFA3C2;
     hence thesis by FACIRC_1:3;
  end;

::-------------------------------------------------------
:: InputVertices

theorem ThGFA3SC5:
  for x,y,z being set  st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   holds
    InputVertices BitGFA3Str(x,y,z) = {x,y,z}
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] and
A2:  x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA3Str(x,y,z);
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
A4:  InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
A5:  InputVertices S2 = {x,y,z} by A2,ThGFA3C4;
     S1 tolerates S2 by CIRCCOMB:55;
    hence InputVertices S = {x,y,z} by A4,A5,FACIRC_2:22;
   end;

theorem ThGFA3SC6:
 for x,y,z being non pair set holds
    InputVertices BitGFA3Str(x,y,z) = {x,y,z}
   proof
     let x,y,z be non pair set;
     set S = BitGFA3Str(x,y,z);
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
A2:  InputVertices S1 is without_pairs & InnerVertices S1 is Relation
      by FACIRC_1:58,FACIRC_1:59;
A3:  InputVertices S2 is without_pairs & InnerVertices S2 is Relation
      by ThGFA3C2,ThGFA3C5;
     InputVertices S1 = {x,y,z} & InputVertices S2 = {x,y,z}
      by FACIRC_1:57,ThGFA3C9;
    hence InputVertices S = {x,y,z} \/ {x,y,z} by A2,A3,FACIRC_1:7
                         .= {x,y,z};
  end;

theorem
 for x,y,z being non pair set holds
   InputVertices BitGFA3Str(x,y,z) is without_pairs
   proof
     let x,y,z be non pair set;
     InputVertices BitGFA3Str(x,y,z) = {x,y,z} by ThGFA3SC6;
     hence thesis;
   end;

::-------------------------------------------------------
:: Carrier and misc.

theorem
 for x,y,z being set holds
    x in the carrier of BitGFA3Str(x,y,z) &
    y in the carrier of BitGFA3Str(x,y,z) &
    z in the carrier of BitGFA3Str(x,y,z) &
    [<*x,y*>,xor2] in the carrier of BitGFA3Str(x,y,z) &
    [<*[<*x,y*>,xor2],z*>,xor2] in the carrier of BitGFA3Str(x,y,z) &
    [<*x,y*>,and2b] in the carrier of BitGFA3Str(x,y,z) &
    [<*y,z*>,and2b] in the carrier of BitGFA3Str(x,y,z) &
    [<*z,x*>,and2b] in the carrier of BitGFA3Str(x,y,z) &
    [<*[<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b]*>,nor3]
                                in the carrier of BitGFA3Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b, f4 = nor3;
     let x,y,z be set;
     set xy = [<*x,y*>,f1], yz = [<*y,z*>,f2], zx = [<*z,x*>,f3];
     set xyz = [<*xy, yz, zx*>,f4];
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
A1:  x in the carrier of S1 & y in the carrier of S1 &
     z in the carrier of S1 &
     [<*x,y*>,f0] in the carrier of S1 &
     [<*[<*x,y*>,f0],z*>,f0] in the carrier of S1 by FACIRC_1:60,61;
     xy in the carrier of S2 & yz in the carrier of S2 &
     zx in the carrier of S2 &
     xyz in the carrier of S2 by ThGFA3C6;
    hence thesis by A1,FACIRC_1:20;
  end;

theorem ThGFA3SC7:
  for x,y,z being set holds
    [<*x,y*>,xor2] in InnerVertices BitGFA3Str(x,y,z) &
    GFA3AdderOutput(x,y,z) in InnerVertices BitGFA3Str(x,y,z) &
    [<*x,y*>,and2b] in InnerVertices BitGFA3Str(x,y,z) &
    [<*y,z*>,and2b] in InnerVertices BitGFA3Str(x,y,z) &
    [<*z,x*>,and2b] in InnerVertices BitGFA3Str(x,y,z) &
    GFA3CarryOutput(x,y,z) in InnerVertices BitGFA3Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set;
     set xyf0 = [<*x,y*>,f0];
     set xyf1 = [<*x,y*>,f1], yzf2 = [<*y,z*>,f2], zxf3 = [<*z,x*>,f3];
     set S = BitGFA3Str(x,y,z);
     set A1 = GFA3AdderOutput(x,y,z);
     set A2 = GFA3CarryOutput(x,y,z);
     InnerVertices S
       = {xyf0} \/ {A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ThGFA3SC1
      .= {xyf0,A1} \/ {xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:41
      .= {xyf0,A1,xyf1,yzf2,zxf3} \/ {A2} by ENUMSET1:48
      .= {xyf0,A1,xyf1,yzf2,zxf3,A2} by ENUMSET1:55;
     hence thesis by ENUMSET1:def 4;
   end;

theorem
  for x,y,z being set  st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   holds
    x in InputVertices BitGFA3Str(x,y,z) &
    y in InputVertices BitGFA3Str(x,y,z) &
    z in InputVertices BitGFA3Str(x,y,z)
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA3Str(x,y,z);
     InputVertices S = {x,y,z} by A1,ThGFA3SC5;
    hence thesis by ENUMSET1:def 1;
   end;

::------------------------------------------------------------------
:: GFA3 : Carry and Adder Output Definition of GFA Combined Circuit
::------------------------------------------------------------------

definition
 let x,y,z be set;
 func BitGFA3CarryOutput(x,y,z) ->
         Element of InnerVertices BitGFA3Str(x,y,z) equals
    [<*[<*x,y*>,and2b],[<*y,z*>,and2b],[<*z,x*>,and2b]*>,nor3];
  coherence
    proof
      GFA3CarryOutput(x,y,z)
        in InnerVertices BitGFA3Str(x,y,z) by ThGFA3SC7;
      hence thesis;
    end;
end;

definition
 let x,y,z be set;
 func BitGFA3AdderOutput(x,y,z) ->
         Element of InnerVertices BitGFA3Str(x,y,z) equals
    2GatesCircOutput(x,y,z, xor2);
  coherence
    proof
      GFA3AdderOutput(x,y,z)
        in InnerVertices BitGFA3Str(x,y,z) by ThGFA3SC7;
      hence thesis;
    end;
end;

::-------------------------------------------------------------
:: GFA3 Combined : Stability of the Adder/Carry Output Circuit
::-------------------------------------------------------------

theorem
  for x,y,z being set st z <> [<*x,y*>,xor2] &
    x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   for s being State of BitGFA3Circ(x,y,z)
    for a1,a2,a3 being Element of BOOLEAN st a1 = s.x & a2 = s.y & a3 = s.z
     holds
      Following(s,2).GFA3AdderOutput(x,y,z)
           = 'not' ('not' a1 'xor' 'not' a2 'xor' 'not' a3) &
      Following(s,2).GFA3CarryOutput(x,y,z)
           = 'not' (('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
                    ('not' a3 '&' 'not' a1))
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA3Str(x,y,z);
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
     set A = BitGFA3Circ(x,y,z);
     set A1 = GFA3AdderCirc(x,y,z);
     set A2 = GFA3CarryCirc(x,y,z);
     let s be State of A;
     let a1,a2,a3 be Element of BOOLEAN; assume
A2:  a1 = s.x & a2 = s.y & a3 = s.z;
A3:  x in the carrier of S1 & y in the carrier of S1 & z in the carrier of S1
     by FACIRC_1:60;
A4:  x in the carrier of S2 & y in the carrier of S2 & z in the carrier of S2
     by ThGFA3C6;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A6: InputVertices S1 = InputVertices S2 by A1,ThGFA3C4;
A7:  InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
     dom s1 = the carrier of S1 by CIRCUIT1:4;
then a1 = s1.x & a2 = s1.y & a3 = s1.z by A2,A3,FUNCT_1:70;
then Following(t,2).GFA3AdderOutput(x,y,z)
        = Following(s1,2).GFA3AdderOutput(x,y,z) &
     Following(s1,2).GFA3AdderOutput(x,y,z)
        = 'not' ('not' a1 'xor' 'not' a2 'xor' 'not' a3)
          by A1,A6,A7,ThGFA3S14OUT,FACIRC_1:32;
    hence Following(s,2).GFA3AdderOutput(x,y,z)
        = 'not' ('not' a1 'xor' 'not' a2 'xor' 'not' a3);
     dom s2 = the carrier of S2 by CIRCUIT1:4;
then a1 = s2.x & a2 = s2.y & a3 = s2.z by A2,A4,FUNCT_1:70;
then Following(t,2).GFA3CarryOutput(x,y,z)
        = Following(s2,2).GFA3CarryOutput(x,y,z) &
     Following(s2,2).GFA3CarryOutput(x,y,z) =
     'not' (('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
            ('not' a3 '&' 'not' a1)) by A1,A6,A7,ThGFA3C24,FACIRC_1:33;
     hence Following(s,2).GFA3CarryOutput(x,y,z) =
     'not' (('not' a1 '&' 'not' a2) 'or' ('not' a2 '&' 'not' a3) 'or'
            ('not' a3 '&' 'not' a1));
   end;

theorem
 for x,y,z being set  st z <> [<*x,y*>,xor2] &
   x <> [<*y,z*>,and2b] & y <> [<*z,x*>,and2b] & z <> [<*x,y*>,and2b]
   for s being State of BitGFA3Circ(x,y,z)
    holds Following(s,2) is stable
   proof
     set f0 = xor2;
     set f1 = and2b, f2 = and2b, f3 = and2b;
     let x,y,z be set such that
A1:  z <> [<*x,y*>,f0] &
     x <> [<*y,z*>,f2] & y <> [<*z,x*>,f3] & z <> [<*x,y*>,f1];
     set S = BitGFA3Str(x,y,z);
     set S1 = GFA3AdderStr(x,y,z);
     set S2 = GFA3CarryStr(x,y,z);
     set A = BitGFA3Circ(x,y,z);
     set A1 = GFA3AdderCirc(x,y,z);
     set A2 = GFA3CarryCirc(x,y,z);
     let s be State of A;
     reconsider s1 = s|the carrier of S1 as State of A1 by FACIRC_1:26;
     reconsider s2 = s|the carrier of S2 as State of A2 by FACIRC_1:26;
     reconsider t = s as State of A1+*A2;
     InputVertices S1 = {x,y,z} by A1,FACIRC_1:57;
then A3: InputVertices S1 = InputVertices S2 by A1,ThGFA3C4;
     InnerVertices S1 misses InputVertices S1 &
     InnerVertices S2 misses InputVertices S2 by XBOOLE_1:79;
then A4: Following(s1,2) = Following(t,2)|the carrier of S1 &    
         Following(s1,3) = Following(t,3)|the carrier of S1 &
         Following(s2,2) = Following(t,2)|the carrier of S2 &
         Following(s2,3) = Following(t,3)|the carrier of S2
          by A3,FACIRC_1:30,31;
     Following(s1,2) is stable by A1,FACIRC_1:63;
then A5: Following(s1,2)
       = Following Following(s1,2) by CIRCUIT2:def 6
      .= Following(s1,2+1) by FACIRC_1:12;
     Following(s2,2) is stable by A1,ThGFA3C28;
then A6: Following(s2,2)
       = Following Following(s2,2) by CIRCUIT2:def 6
      .= Following(s2,2+1) by FACIRC_1:12;
A7:  Following(s,2+1) = Following Following(s,2) by FACIRC_1:12;
A8:  dom Following(s,2) = the carrier of S &
     dom Following(s,3) = the carrier of S &
     dom Following(s1,2) = the carrier of S1 &
     dom Following(s2,2) = the carrier of S2 by CIRCUIT1:4;
A9: the carrier of S = (the carrier of S1) \/ the carrier of S2
      by CIRCCOMB:def 2;
       now let a be set; assume a in the carrier of S;
       then a in the carrier of S1 or a in the carrier of S2
         by A9,XBOOLE_0:def 2;
       then (Following(s,2)).a = (Following(s1,2)).a &
            (Following(s,3)).a = (Following(s1,3)).a or
            (Following(s,2)).a = (Following(s2,2)).a &
            (Following(s,3)).a = (Following(s2,3)).a
              by A4,A5,A6,A8,FUNCT_1:70;
       hence (Following(s,2)).a = (Following Following(s,2)).a
              by A5,A6,FACIRC_1:12;
       end;
    hence Following(s,2) = Following Following(s,2) by A7,A8,FUNCT_1:9;
   end;
