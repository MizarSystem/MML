:: Binary Operations Applied to Functions
::  by Andrzej Trybulec
::
:: Received September 4, 1989
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies FUNCT_1, FUNCT_3, PARTFUN1, RELAT_1, ZFMISC_1, XBOOLE_0, TARSKI,
      SUBSET_1, BINOP_1, MCART_1, FUNCOP_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, MCART_1, RELAT_1, FUNCT_1,
      RELSET_1, PARTFUN1, FUNCT_2, FUNCT_3, BINOP_1;
 constructors PARTFUN1, BINOP_1, FUNCT_3, RELSET_1;
 registrations XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, FUNCT_2, RELSET_1;
 requirements SUBSET, BOOLE;
 definitions TARSKI, RELAT_1, BINOP_1, FUNCT_1;
 theorems ZFMISC_1, RELAT_1, RELSET_1, FUNCT_1, FUNCT_2, FUNCT_3, TARSKI,
      BINOP_1, MCART_1, XBOOLE_0, XBOOLE_1, GRFUNC_1, PARTFUN1;
 schemes FUNCT_1;

begin

reserve f,g,h for Function,
  A for set;

canceled;

theorem Th2:
  delta A = <:id A, id A:>
proof
  thus delta A = id [:A,A:]*delta A by FUNCT_2:23
    .= [:id A, id A:]*delta A by FUNCT_3:90
    .= <:id A, id A:> by FUNCT_3:99;
end;

reserve F for Function,
  B,x,y,y1,y2,z for set;

definition
  let f;
  func f~ -> Function means
  :Def1:
  dom it = dom f & for x st x in dom f holds
(for y,z st f.x = [y,z] holds it.x = [z,y]) & (f.x = it.x or ex y,z st f.x =[y,
  z]);
  existence
  proof
    defpred P[set,set] means (for y,z st f.$1 = [y,z] holds $2 = [z,y]) & (f.
    $1 = $2 or ex y,z st f.$1 = [y,z]);
A1: now
      let x such that
      x in dom f;
      now
        per cases;
        suppose
A2:       ex y,z st f.x = [y,z];
          then consider y,z such that
A3:       f.x = [y,z];
          take y1 = [z,y];
          thus for y,z st f.x = [y,z] holds y1 = [z,y]
          proof
            let y9,z9 be set;
            assume
A4:         f.x = [y9,z9];
            then z = z9 by A3,ZFMISC_1:33;
            hence thesis by A3,A4,ZFMISC_1:33;
          end;
          thus f.x = y1 or ex y,z st f.x = [y,z] by A2;
        end;
        suppose
A5:       not ex y,z st f.x = [y,z];
          take y1 = f.x;
          thus (for y,z st f.x = [y,z] holds y1 = [z,y]) & (f.x = y1 or ex y,z
          st f.x = [y,z]) by A5;
        end;
      end;
      hence ex y st P[x,y];
    end;
A6: now
      let x,y1,y2 such that
      x in dom f;
      assume that
A7:   P[x,y1] and
A8:   P[x,y2];
      now
        per cases;
        suppose
          ex y,z st f.x = [y,z];
          then consider y,z such that
A9:       f.x = [y,z];
          y1 = [z,y] by A7,A9;
          hence y1 = y2 by A8,A9;
        end;
        suppose
          not ex y,z st f.x = [y,z];
          hence y1 = y2 by A7,A8;
        end;
      end;
      hence y1 = y2;
    end;
    thus ex g st dom g = dom f & for x st x in dom f holds P[x,g.x] from
    FUNCT_1:sch 2(A6,A1);
  end;
  uniqueness
  proof
    defpred P[Function] means for x st x in dom f holds (for y,z st f.x = [y,z
    ] holds $1.x = [z,y]) & (f.x = $1.x or ex y,z st f.x =[y,z]);
    let g1,g2 be Function such that
A10: dom g1 = dom f and
A11: P[g1] and
A12: dom g2 = dom f and
A13: P[g2];
    now
      let x;
      assume
A14:  x in dom f;
      now
        per cases;
        suppose
          ex y,z st f.x = [y,z];
          then consider y,z such that
A15:      f.x = [y,z];
          g1.x = [z,y] by A11,A14,A15;
          hence g1.x = g2.x by A13,A14,A15;
        end;
        suppose
A16:      not ex y,z st f.x = [y,z];
          then g1.x = f.x by A11,A14;
          hence g1.x = g2.x by A13,A14,A16;
        end;
      end;
      hence g1.x = g2.x;
    end;
    hence thesis by A10,A12,FUNCT_1:9;
  end;
  involutiveness
  proof
    let g,f be Function;
    assume that
A17: dom g = dom f and
A18: for x st x in dom f holds (for y,z st f.x = [y,z] holds g.x = [z,
    y]) & (f.x = g.x or ex y,z st f.x =[y,z]);
    thus dom f = dom g by A17;
    let x;
    assume
A19: x in dom g;
    thus for y,z st g.x = [y,z] holds f.x = [z,y]
    proof
      let y,z such that
A20:  g.x = [y,z];
      per cases;
      suppose
        ex z,y st f.x =[z,y];
        then consider y1,y2 such that
A21:    f.x = [y1,y2];
A22:    g.x = [y2,y1] by A17,A18,A19,A21;
        then y = y2 by A20,ZFMISC_1:33;
        hence thesis by A20,A21,A22,ZFMISC_1:33;
      end;
      suppose
        not ex z,y st f.x =[z,y];
        then f.x = g.x by A17,A18,A19;
        hence thesis by A17,A18,A19,A20;
      end;
    end;
    assume
    g.x <> f.x;
    then consider y,z such that
A23: f.x = [y,z] by A17,A18,A19;
    take z,y;
    thus thesis by A17,A18,A19,A23;
  end;
end;

canceled 3;

theorem Th6:
  <:f,g:> = <:g,f:>~
proof
A1: dom <:f,g:> = dom g /\ dom f by FUNCT_3:def 8
    .= dom <:g,f:> by FUNCT_3:def 8;
A2: now
    let x;
    assume
A3: x in dom <:f,g:>;
    then
A4: <:g,f:>.x = [g.x, f.x] by A1,FUNCT_3:def 8;
    thus <:f,g:>.x = [f.x, g.x] by A3,FUNCT_3:def 8
      .= <:g,f:>~.x by A1,A3,A4,Def1;
  end;
  dom <:f,g:> = dom (<:g,f:>~) by A1,Def1;
  hence thesis by A2,FUNCT_1:9;
end;

theorem Th7:
  (f|A)~ = f~|A
proof
A1: dom (f|A) = dom f /\ A by RELAT_1:90
    .= dom (f~) /\ A by Def1
    .= dom (f~|A) by RELAT_1:90;
A2: now
    let x such that
A3: x in dom(f~|A);
A4: dom (f|A) c= dom f by RELAT_1:89;
    now
      per cases;
      suppose
        ex y,z st (f|A).x = [y,z];
        then consider y,z such that
A5:     (f|A).x = [y,z];
A6:     f.x = [y,z] by A1,A3,A5,FUNCT_1:70;
        thus (f|A)~.x = [z,y] by A1,A3,A5,Def1
          .= f~.x by A1,A3,A4,A6,Def1
          .= (f~|A).x by A3,FUNCT_1:70;
      end;
      suppose
A7:     not ex y,z st (f|A).x = [y,z];
A8:     (f|A).x = f.x by A1,A3,FUNCT_1:70;
        (f|A)~.x = (f|A).x by A1,A3,A7,Def1;
        hence (f|A)~.x = f~.x by A1,A3,A4,A7,A8,Def1
          .= (f~|A).x by A3,FUNCT_1:70;
      end;
    end;
    hence (f|A)~.x = (f~|A).x;
  end;
  dom ((f|A)~) = dom (f|A) by Def1;
  hence thesis by A1,A2,FUNCT_1:9;
end;

canceled;

theorem
  (delta A)~ = delta A
proof
  thus (delta A)~ = <:id A, id A:>~ by Th2
    .= <:id A, id A:> by Th6
    .= delta A by Th2;
end;

theorem Th10:
  <:f,g:>|A = <:f|A,g:>
proof
A1: dom (<:f,g:>|A) = dom <:f,g:> /\ A by RELAT_1:90
    .= dom f /\ dom g /\ A by FUNCT_3:def 8
    .= dom f /\ A /\ dom g by XBOOLE_1:16
    .= dom (f|A) /\ dom g by RELAT_1:90;
  now
A2: dom (<:f,g:>|A) c= dom <:f,g:> by RELAT_1:89;
    let x such that
A3: x in dom (<:f,g:>|A);
A4: x in dom (f|A) by A1,A3,XBOOLE_0:def 4;
    thus (<:f,g:>|A).x = <:f,g:>.x by A3,FUNCT_1:70
      .= [f.x, g.x] by A3,A2,FUNCT_3:def 8
      .= [(f|A).x, g.x] by A4,FUNCT_1:70;
  end;
  hence thesis by A1,FUNCT_3:def 8;
end;

theorem Th11:
  <:f,g:>|A = <:f,g|A:>
proof
  thus <:f,g:>|A = <:g,f:>~|A by Th6
    .= (<:g,f:>|A)~ by Th7
    .= <:g|A,f:>~ by Th10
    .= <:f,g|A:> by Th6;
end;

definition
  let A, z be set;
  func A --> z -> set equals
  [:A, {z}:];
  coherence;
end;

registration
  let A, z be set;
  cluster A --> z -> Function-like Relation-like;
  coherence
  proof
    thus A --> z is Function-like
    proof
      let x,y1,y2;
      assume that
A1:   [x,y1] in A --> z and
A2:   [x,y2] in A --> z;
      y1 in {z} by A1,ZFMISC_1:106;
      then
A3:   y1 = z by TARSKI:def 1;
      y2 in {z} by A2,ZFMISC_1:106;
      hence thesis by A3,TARSKI:def 1;
    end;
    thus for x st x in A --> z ex y1,y2 st [y1,y2] =x by RELAT_1:def 1;
  end;
end;

canceled;

theorem Th13:
  x in A implies (A --> z).x = z
proof
  assume
A1: x in A;
  z in {z} by TARSKI:def 1;
  then [x,z] in (A --> z) by A1,ZFMISC_1:106;
  hence thesis by FUNCT_1:8;
end;

theorem
  A <> {} implies rng (A --> x) = {x} by RELAT_1:195;

theorem Th15:
  rng f = {x} implies f = (dom f) --> x
proof
  assume
A1: rng f = {x};
  then dom f <> {} by RELAT_1:65;
  then dom((dom f) --> x) = dom f & rng((dom f) -->x) = {x} by
  RELAT_1:195;
  hence thesis by A1,FUNCT_1:17;
end;

registration
  let x;
  cluster {} --> x -> empty;
  coherence by ZFMISC_1:113;
end;

registration
  let x;
  let A be empty set;
  cluster A --> x -> empty;
  coherence;
end;

registration
  let x;
  let A be non empty set;
  cluster A --> x -> non empty;
  coherence;
end;

theorem
  dom ({} --> x) = {} & rng ({} --> x) = {};

theorem Th17:
  (for z st z in dom f holds f.z = x) implies f = dom f --> x
proof
  assume
A1: for z st z in dom f holds f.z = x;
  now
    per cases;
    suppose
A2:   dom f = {};
      dom ({} --> x) = {};
      hence thesis by A2;
    end;
    suppose
A3:   dom f <> {};
      consider z being Element of dom f;
      now
        let y;
        thus y in {x} implies ex y1 st y1 in dom f & y = f.y1
        proof
          assume
          y in {x};
          then y = x by TARSKI:def 1;
          then f.z = y by A1,A3;
          hence thesis by A3;
        end;
        assume
        ex y1 st y1 in dom f & y = f.y1;
        then y = x by A1;
        hence y in {x} by TARSKI:def 1;
      end;
      then rng f = {x} by FUNCT_1:def 5;
      hence thesis by Th15;
    end;
  end;
  hence thesis;
end;

theorem Th18:
  (A --> x)|B = A /\ B --> x
proof
A1: A = {} or A <> {};
A2: A /\ B = {} or A /\ B <> {};
A3: dom ((A --> x)|B) = dom (A --> x) /\ B by RELAT_1:90
    .= A /\ B by A1,RELAT_1:195
    .= dom (A /\ B --> x) by A2,RELAT_1:195;
  now
    let z such that
A4: z in dom (A /\ B --> x);
    A /\ B = {} or A /\ B <> {};
    then
A5: z in A /\ B by A4,RELAT_1:195;
    then
A6: z in A by XBOOLE_0:def 4;
    thus ((A --> x)|B).z = (A --> x).z by A3,A4,FUNCT_1:70
      .= x by A6,Th13
      .= (A /\ B --> x).z by A5,Th13;
  end;
  hence thesis by A3,FUNCT_1:9;
end;

theorem Th19:
  dom (A --> x) = A & rng (A --> x) c= {x}
proof
  now
    per cases;
    suppose
A1:   A = {};
      rng ({} --> x) = {};
      hence thesis by A1,XBOOLE_1:2;
    end;
    suppose
      A <> {};
      hence thesis by RELAT_1:195;
    end;
  end;
  hence thesis;
end;

theorem Th20:
  x in B implies (A --> x)"B = A
proof
  assume
A1: x in B;
  now
    per cases;
    suppose
A2:   A = {};
      rng ({} --> x) = {};
      then rng (A -->x) /\ B = {} by A2;
      then rng (A -->x) misses B by XBOOLE_0:def 7;
      hence thesis by A2,RELAT_1:173;
    end;
    suppose
      A <> {};
      then
A3:   rng (A --> x) = {x} by RELAT_1:195;
      {x} c= B by A1,ZFMISC_1:37;
      then {x} /\ B = {x} by XBOOLE_1:28;
      hence (A --> x)"B = (A --> x)"{x} by A3,RELAT_1:168
        .= dom (A -->x) by A3,RELAT_1:169
        .= A by Th19;
    end;
  end;
  hence thesis;
end;

theorem
  (A --> x)"{x} = A
proof
  x in {x} by TARSKI:def 1;
  hence thesis by Th20;
end;

theorem
  not x in B implies (A --> x)"B = {}
proof
  assume
A1: not x in B;
  rng (A --> x) c= {x} by Th19;
  then rng (A --> x) misses B by A1,XBOOLE_1:63,ZFMISC_1:56;
  hence thesis by RELAT_1:173;
end;

theorem
  x in dom h implies h*(A --> x) = A --> h.x
proof
  assume
A1: x in dom h;
A2: now
    let z;
    assume
A3: z in dom (h*(A --> x));
    then z in dom (A --> x) by FUNCT_1:21;
    then
A4: z in A by Th19;
    thus (h*(A --> x)).z = h.((A --> x).z) by A3,FUNCT_1:22
      .= h.x by A4,Th13
      .= (A --> h.x).z by A4,Th13;
  end;
  dom (h*(A --> x)) = (A --> x)"dom h by RELAT_1:182
    .= A by A1,Th20
    .= dom (A --> h.x) by Th19;
  hence thesis by A2,FUNCT_1:9;
end;

theorem
  A <> {} & x in dom h implies dom(h*(A --> x)) <> {}
proof
  assume that
A1: A <> {} and
A2: x in dom h;
  consider y being Element of A;
  y in A by A1;
  then
A3: y in dom (A -->x) by Th19;
  (A --> x).y = x by A1,Th13;
  hence thesis by A2,A3,FUNCT_1:21;
end;

theorem
  (A --> x)*h = h"A --> x
proof
A1: dom ((A --> x)*h) = h"dom(A --> x) by RELAT_1:182
    .= h"A by Th19;
A2: now
    let z;
    assume
A3: z in dom ((A --> x)*h);
    then h.z in dom (A --> x) by FUNCT_1:21;
    then
A4: h.z in A by Th19;
    thus ((A --> x)*h).z = (A --> x).(h.z) by A3,FUNCT_1:22
      .= x by A4,Th13
      .= (h"A --> x).z by A1,A3,Th13;
  end;
  dom ((A --> x)*h) = dom (h"A --> x) by A1,Th19;
  hence thesis by A2,FUNCT_1:9;
end;

theorem
  (A --> [x,y])~ = A --> [y,x]
proof
A1: dom ((A --> [x,y])~) = dom (A --> [x,y]) by Def1;
  then
A2: dom ((A --> [x,y])~) = A by Th19;
A3: now
    let z;
    assume
A4: z in dom ((A --> [x,y])~);
    then (A --> [x,y]).z = [x,y] by A2,Th13;
    hence ((A --> [x,y])~).z = [y,x] by A1,A4,Def1
      .= (A --> [y,x]).z by A2,A4,Th13;
  end;
  dom ((A --> [x,y])~) = dom (A --> [y,x]) by A2,Th19;
  hence thesis by A3,FUNCT_1:9;
end;

definition
  let F,f,g;
  func F.:(f,g) -> set equals
  F * <:f,g:>;
  correctness;
end;

registration
  let F,f,g;
  cluster F.:(f,g) -> Function-like Relation-like;
  coherence;
end;

Lm1: x in dom (F*<:f,g:>) implies (F*<:f,g:>).x = F.(f.x,g.x)
proof
  assume
A1: x in dom (F*<:f,g:>);
  then
A2: x in dom <:f,g:> by FUNCT_1:21;
  thus (F*<:f,g:>).x = F.(<:f,g:>.x) by A1,FUNCT_1:22
    .= F.(f.x,g.x) by A2,FUNCT_3:def 8;
end;

theorem
  for h st dom h = dom(F.:(f,g)) & for z being set st z in dom (F.:(f,g)
  ) holds h.z = F.(f.z,g.z) holds h = F.:(f,g)
proof
  let h;
  assume that
A1: dom h = dom(F.:(f,g)) and
A2: for z being set st z in dom (F.:(f,g)) holds h.z = F.(f.z,g.z);
  now
    let z be set;
    assume
A3: z in dom (F.:(f,g));
    hence h.z = F.(f.z,g.z) by A2
      .= (F.:(f,g)).z by A3,Lm1;
  end;
  hence thesis by A1,FUNCT_1:9;
end;

theorem
  x in dom (F.:(f,g)) implies (F.:(f,g)).x = F.(f.x,g.x) by Lm1;

theorem Th29:
  f|A = g|A implies (F.:(f,h))|A = (F.:(g,h))|A
proof
  assume
A1: f|A = g|A;
  thus (F.:(f,h))|A = F*<:f,h:>|A by RELAT_1:112
    .= F*<:f|A,h:> by Th10
    .= F*<:g,h:>|A by A1,Th10
    .= (F.:(g,h))|A by RELAT_1:112;
end;

theorem Th30:
  f|A = g|A implies (F.:(h,f))|A = (F.:(h,g))|A
proof
  assume
A1: f|A = g|A;
  thus (F.:(h,f))|A = F*<:h,f:>|A by RELAT_1:112
    .= F*<:h,f|A:> by Th11
    .= F*<:h,g:>|A by A1,Th11
    .= (F.:(h,g))|A by RELAT_1:112;
end;

theorem Th31:
  F.:(f,g)*h = F.:(f*h, g*h)
proof
  thus F.:(f,g)*h = F*(<:f,g:>*h) by RELAT_1:55
    .= F.:(f*h, g*h) by FUNCT_3:75;
end;

definition
  let F,f,x;
  func F[:](f,x) -> set equals
  F * <:f, dom f --> x:>;
  correctness;
end;

registration
  let F,f,x;
  cluster F[:](f,x) -> Function-like Relation-like;
  coherence;
end;

canceled 2;

theorem
  F[:](f,x) = F.:(f, dom f --> x);

theorem Th35:
  x in dom (F[:](f,z)) implies (F[:](f,z)).x = F.(f.x,z)
proof
A1: dom <:f, dom f --> z:> = dom f /\ dom (dom f --> z) by FUNCT_3:def 8;
  assume
A2: x in dom (F[:](f,z));
  then x in dom <:f, dom f --> z:> by FUNCT_1:21;
  then
A3: x in dom f by A1,XBOOLE_0:def 4;
  thus (F[:](f,z)).x = F.(f.x,(dom f --> z).x) by A2,Lm1
    .= F.(f.x,z) by A3,Th13;
end;

theorem
  f|A = g|A implies (F[:](f,x))|A = (F[:](g,x))|A
proof
  assume
A1: f|A = g|A;
  dom f /\ A = dom (f|A) by RELAT_1:90
    .= dom g /\ A by A1,RELAT_1:90;
  then
A2: (dom f --> x)|A = dom g /\ A --> x by Th18
    .= (dom g -->x)|A by Th18;
  thus (F[:](f,x))|A = (F.:(f, dom f --> x))|A
    .= (F.:(g, dom f --> x))|A by A1,Th29
    .= (F.:(g, dom g --> x))|A by A2,Th30
    .= (F[:](g,x))|A;
end;

theorem Th37:
  F[:](f,x)*h = F[:](f*h,x)
proof
A1: dom (dom f -->x) = dom f by Th19;
  then
A2: dom ((dom f --> x)*h) = dom (f*h) by RELAT_1:198;
A3: now
    let z;
    assume
A4: z in dom ((dom f --> x)*h);
    then
A5: h.z in dom(dom f -->x) by FUNCT_1:21;
    thus ((dom f --> x)*h).z = (dom f --> x).(h.z) by A4,FUNCT_1:22
      .= x by A1,A5,Th13;
  end;
  thus F[:](f,x)*h = F.:(f, dom f --> x)*h
    .= F.:(f*h, (dom f --> x)*h) by Th31
    .= F[:](f*h,x) by A2,A3,Th17;
end;

canceled;

theorem
  F[:](f,x)*id A = F[:](f|A,x)
proof
  thus F[:](f,x)*id A = F[:](f*id A, x) by Th37
    .= F[:](f|A, x) by RELAT_1:94;
end;

definition
  let F,x,g;
  func F[;](x,g) -> set equals
  F * <:dom g --> x, g:>;
  correctness;
end;

registration
  let F,x,g;
  cluster F[;](x,g) -> Function-like Relation-like;
  coherence;
end;

canceled;

theorem
  F[;](x,g) = F.:(dom g --> x, g);

theorem Th42:
  x in dom (F[;](z,f)) implies (F[;](z,f)).x = F.(z,f.x)
proof
A1: dom <:dom f --> z, f:> = dom (dom f --> z) /\ dom f by FUNCT_3:def 8;
  assume
A2: x in dom (F[;](z,f));
  then x in dom <:dom f --> z, f:> by FUNCT_1:21;
  then
A3: x in dom f by A1,XBOOLE_0:def 4;
  thus (F[;](z,f)).x = F.((dom f --> z).x, f.x) by A2,Lm1
    .= F.(z, f.x) by A3,Th13;
end;

theorem
  f|A = g|A implies (F[;](x,f))|A = (F[;](x,g))|A
proof
  assume
A1: f|A = g|A;
  dom f /\ A = dom (f|A) by RELAT_1:90
    .= dom g /\ A by A1,RELAT_1:90;
  then
A2: (dom f --> x)|A = dom g /\ A --> x by Th18
    .= (dom g -->x)|A by Th18;
  thus (F[;](x,f))|A = (F.:(dom f --> x, f))|A
    .= (F.:(dom f --> x, g))|A by A1,Th30
    .= (F.:(dom g --> x, g))|A by A2,Th29
    .= (F[;](x,g))|A;
end;

theorem Th44:
  F[;](x,f)*h = F[;](x,f*h)
proof
A1: dom (dom f -->x) = dom f by Th19;
  then
A2: dom ((dom f --> x)*h) = dom (f*h) by RELAT_1:198;
A3: now
    let z;
    assume
A4: z in dom ((dom f --> x)*h);
    then
A5: h.z in dom(dom f -->x) by FUNCT_1:21;
    thus ((dom f --> x)*h).z = (dom f --> x).(h.z) by A4,FUNCT_1:22
      .= x by A1,A5,Th13;
  end;
  thus F[;](x,f)*h = F.:(dom f --> x, f)*h
    .= F.:((dom f --> x)*h, f*h) by Th31
    .= F[;](x,f*h) by A2,A3,Th17;
end;

canceled;

theorem
  F[;](x,f)*id A = F[;](x,f|A)
proof
  thus F[;](x,f)*id A = F[;](x,f*id A) by Th44
    .= F[;](x,f|A) by RELAT_1:94;
end;

reserve X for non empty set,
  Y for set,
  F for BinOp of X,
  f,g,h for Function
  of Y,X,
  x,x1,x2 for Element of X;

theorem Th47:
  F.:(f,g) is Function of Y,X
proof
  F*<:f,g:> is Function of Y,X;
  hence thesis;
end;

definition
  let X be non empty set, Z be set;
  let F be BinOp of X, f,g be Function of Z,X;
  redefine func F.:(f,g) -> Function of Z,X;
  coherence by Th47;
end;

reserve X,Y for non empty set,
  F for BinOp of X,
  f,g,h for Function of Y,X,
  x,
  x1,x2 for Element of X;

theorem Th48:
  for z being Element of Y holds (F.:(f,g)).z = F.(f.z,g.z)
proof
  let z be Element of Y;
  dom (F.:(f,g)) = Y by FUNCT_2:def 1;
  hence thesis by Lm1;
end;

theorem Th49:
  for h being Function of Y,X holds (for z being Element of Y
  holds h.z = F.(f.z,g.z)) implies h = F.:(f,g)
proof
  let h be Function of Y,X;
  assume
A1: for z being Element of Y holds h.z = F.(f.z,g.z);
  now
    let z be Element of Y;
    thus h.z = F.(f.z,g.z) by A1
      .= (F.:(f,g)).z by Th48;
  end;
  hence thesis by FUNCT_2:113;
end;

canceled;

theorem
  for g being Function of X,X holds F.:(id X, g)*f = F.:(f,g*f)
proof
  let g be Function of X,X;
  thus F.:(id X, g)*f = F.:(id X*f, g*f) by Th31
    .= F.:(f,g*f) by FUNCT_2:23;
end;

theorem
  for g being Function of X,X holds F.:(g, id X)*f = F.:(g*f,f)
proof
  let g be Function of X,X;
  thus F.:(g, id X)*f = F.:(g*f, id X*f) by Th31
    .= F.:(g*f, f) by FUNCT_2:23;
end;

theorem
  F.:(id X, id X)*f = F.:(f,f)
proof
  thus F.:(id X, id X)*f = F.:(id X*f, id X*f) by Th31
    .= F.:(id X*f, f) by FUNCT_2:23
    .= F.:(f,f) by FUNCT_2:23;
end;

theorem
  for g being Function of X,X holds F.:(id X, g).x = F.(x,g.x)
proof
  let g be Function of X,X;
  thus F.:(id X, g).x = F.(id X.x, g.x) by Th48
    .= F.(x,g.x) by FUNCT_1:35;
end;

theorem
  for g being Function of X,X holds F.:(g, id X).x = F.(g.x,x)
proof
  let g be Function of X,X;
  thus F.:(g, id X).x = F.(g.x, id X.x) by Th48
    .= F.(g.x, x) by FUNCT_1:35;
end;

theorem
  F.:(id X, id X).x = F.(x,x)
proof
  thus F.:(id X, id X).x = F.(id X.x, id X.x) by Th48
    .= F.(id X.x, x) by FUNCT_1:35
    .= F.(x,x) by FUNCT_1:35;
end;

theorem Th57:
  for A,B for x being set st x in B holds A --> x is Function of A
  , B
proof
  let A,B;
  let x be set;
A1: rng (A --> x) c= {x} by Th19;
A2: dom (A --> x) = A by Th19;
  assume
A3: x in B;
  then {x} c= B by ZFMISC_1:37;
  then rng (A --> x) c= B by A1,XBOOLE_1:1;
  hence thesis by A3,A2,FUNCT_2:def 1,RELSET_1:11;
end;

definition
  let I,i be set;
  redefine func I --> i -> Function of I,{i};
  coherence
  proof
    dom (I --> i) = I & rng (I --> i) c= {i} by Th19;
    hence thesis by FUNCT_2:def 1,RELSET_1:11;
  end;
end;

definition
  let B be non empty set, A be set, b be Element of B;
  redefine func A --> b -> Function of A,B;
  coherence by Th57;
end;

theorem
  for A,X,x holds A --> x is Function of A, X;

reserve X for non empty set,
  Y for set,
  F for BinOp of X,
  f,g,h for Function
  of Y,X,
  x,x1,x2 for Element of X;

theorem Th59:
  F[:](f,x) is Function of Y,X
proof
  dom f = Y by FUNCT_2:def 1;
  then reconsider g = dom f --> x as Function of Y,X;
  F*<:f,g:> is Function of Y,X;
  hence thesis;
end;

definition
  let X be non empty set, Z be set;
  let F be BinOp of X, f be Function of Z,X, x be Element of X;
  redefine func F[:](f,x) -> Function of Z,X;
  coherence by Th59;
end;

reserve X,Y for non empty set,
  F for BinOp of X,
  f,g,h for Function of Y,X,
  x,
  x1,x2 for Element of X;

theorem Th60:
  for y being Element of Y holds (F[:](f,x)).y = F.(f.y,x)
proof
  let y be Element of Y;
  dom (F[:](f,x)) = Y by FUNCT_2:def 1;
  hence thesis by Th35;
end;

theorem Th61:
  (for y being Element of Y holds g.y = F.(f.y,x)) implies g = F
  [:](f,x)
proof
  assume
A1: for y being Element of Y holds g.y = F.(f.y,x);
  now
    let y be Element of Y;
    thus g.y = F.(f.y,x) by A1
      .= (F[:](f,x)).y by Th60;
  end;
  hence thesis by FUNCT_2:113;
end;

canceled;

theorem
  F[:](id X, x)*f = F[:](f,x)
proof
  thus F[:](id X, x)*f = F[:](id X*f, x) by Th37
    .= F[:](f,x) by FUNCT_2:23;
end;

theorem
  F[:](id X, x).x = F.(x,x)
proof
  thus F[:](id X, x).x = F.(id X.x, x) by Th60
    .= F.(x,x) by FUNCT_1:35;
end;

reserve X for non empty set,
  Y for set,
  F for BinOp of X,
  f,g,h for Function
  of Y,X,
  x,x1,x2 for Element of X;

theorem Th65:
  F[;](x,g) is Function of Y,X
proof
  dom g = Y by FUNCT_2:def 1;
  then reconsider f = dom g --> x as Function of Y,X;
  F*<:f,g:> is Function of Y,X;
  hence thesis;
end;

definition
  let X be non empty set, Z be set;
  let F be BinOp of X, x be Element of X;
  let g be Function of Z,X;
  redefine func F[;](x,g) -> Function of Z,X;
  coherence by Th65;
end;

reserve X,Y for non empty set,
  F for BinOp of X,
  f,g,h for Function of Y,X,
  x,
  x1,x2 for Element of X;

theorem Th66:
  for y being Element of Y holds (F[;](x,f)).y = F.(x,f.y)
proof
  let y be Element of Y;
  dom (F[;](x,f)) = Y by FUNCT_2:def 1;
  hence thesis by Th42;
end;

theorem Th67:
  (for y being Element of Y holds g.y = F.(x,f.y)) implies g = F
  [;](x,f)
proof
  assume
A1: for y being Element of Y holds g.y = F.(x,f.y);
  now
    let y be Element of Y;
    thus g.y = F.(x,f.y) by A1
      .= (F[;](x,f)).y by Th66;
  end;
  hence thesis by FUNCT_2:113;
end;

reserve X for non empty set,
  Y for set,
  F for BinOp of X,
  f,g,h for Function
  of Y,X,
  x,x1,x2 for Element of X;

canceled;

theorem
  F[;](x, id X)*f = F[;](x,f)
proof
  thus F[;](x, id X)*f = F[;](x, id X*f) by Th44
    .= F[;](x,f) by FUNCT_2:23;
end;

theorem
  F[;](x, id X).x = F.(x,x)
proof
  thus F[;](x, id X).x = F.(x, id X.x) by Th66
    .= F.(x,x) by FUNCT_1:35;
end;

theorem
  for X,Y,Z being non empty set for f being Function of X, [:Y,Z:] for x
  being Element of X holds f~.x =[(f.x)`2,(f.x)`1]
proof
  let X,Y,Z be non empty set;
  let f be Function of X, [:Y,Z:];
  let x be Element of X;
  x in X;
  then
A1: x in dom f by FUNCT_2:def 1;
  f.x = [(f.x)`1, (f.x)`2] by MCART_1:24;
  hence thesis by A1,Def1;
end;

definition
  let X,Y,Z be non empty set;
  let f be Function of X, [:Y,Z:];
  redefine func rng f -> Relation of Y,Z;
  coherence by RELAT_1:def 19;
end;

definition
  let X,Y,Z be non empty set;
  let f be Function of X, [:Y,Z:];
  redefine func f~ -> Function of X, [:Z,Y:];
  coherence
  proof
A1: rng (f~) c= [:Z,Y:]
    proof
      let x be set;
      assume
      x in rng (f~);
      then consider y being set such that
A2:   y in dom (f~) and
A3:   x = f~.y by FUNCT_1:def 5;
A4:   y in dom f by A2,Def1;
      then reconsider y as Element of X;
A5:   f.y = [(f.y)`1,(f.y)`2] by MCART_1:23;
      then f~.y = [(f.y)`2,(f.y)`1] by A4,Def1;
      hence thesis by A3,A5,ZFMISC_1:107;
    end;
    X = dom f by FUNCT_2:def 1
      .= dom (f~) by Def1;
    hence thesis by A1,FUNCT_2:def 1,RELSET_1:11;
  end;
end;

canceled;

theorem
  for X,Y,Z being non empty set for f being Function of X, [:Y,Z:] holds
  rng (f~) = (rng f)~
proof
  let X,Y,Z be non empty set;
  let f be Function of X, [:Y,Z:];
  let x,y be set;
  thus [x,y] in rng (f~) implies [x,y] in (rng f)~
  proof
    assume
    [x,y] in rng (f~);
    then consider z being set such that
A1: z in dom (f~) and
A2: [x,y] = f~.z by FUNCT_1:def 5;
A3: z in dom f by A1,Def1;
    f.z = f~~.z
      .= [y,x] by A1,A2,Def1;
    then [y,x] in rng f by A3,FUNCT_1:def 5;
    hence thesis by RELAT_1:def 7;
  end;
  assume
  [x,y] in (rng f)~;
  then [y,x] in rng f by RELAT_1:def 7;
  then consider z being set such that
A4: z in dom f & [y,x] = f.z by FUNCT_1:def 5;
  z in dom (f~) & f~.z = [x,y] by A4,Def1;
  hence thesis by FUNCT_1:def 5;
end;

reserve y for Element of Y;

theorem
  F is associative implies F[:](F[;](x1,f),x2) = F[;](x1,F[:](f,x2))
proof
  assume
A1: F is associative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x3 = f.y as Element of X by A2,FUNCT_2:7;
      thus (F[:](F[;](x1,f),x2)).y = F.((F[;](x1,f)).y,x2) by A2,Th60
        .= F.(F.(x1,x3),x2) by A2,Th66
        .= F.(x1,F.(x3,x2)) by A1,BINOP_1:def 3
        .= F.(x1,(F[:](f,x2)).y) by A2,Th60;
    end;
    hence thesis by A2,Th67;
  end;
end;

theorem
  F is associative implies F.:(F[:](f,x),g) = F.:(f,F[;](x,g))
proof
  assume
A1: F is associative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x1 = f.y, x2 = g.y as Element of X by A2,FUNCT_2:7;
      thus (F.:(F[:](f,x),g)).y = F.((F[:](f,x)).y,g.y) by A2,Th48
        .= F.(F.(x1,x),x2) by A2,Th60
        .= F.(x1,F.(x,x2)) by A1,BINOP_1:def 3
        .= F.(f.y,(F[;](x,g)).y) by A2,Th66;
    end;
    hence thesis by A2,Th49;
  end;
end;

theorem
  F is associative implies F.:(F.:(f,g),h) = F.:(f,F.:(g,h))
proof
  assume
A1: F is associative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x1 = f.y, x2 = g.y, x3 = h.y as Element of X by A2,FUNCT_2:7;
      thus (F.:(F.:(f,g),h)).y = F.((F.:(f,g)).y,h.y) by A2,Th48
        .= F.(F.(f.y,g.y),h.y) by A2,Th48
        .= F.(x1,F.(x2,x3)) by A1,BINOP_1:def 3
        .= F.(f.y,(F.:(g,h)).y) by A2,Th48;
    end;
    hence thesis by A2,Th49;
  end;
end;

theorem
  F is associative implies F[;](F.(x1,x2),f) = F[;](x1,F[;](x2,f))
proof
  assume
A1: F is associative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x3 = f.y as Element of X by A2,FUNCT_2:7;
      thus (F[;](F.(x1,x2),f)).y = F.(F.(x1,x2),f.y) by A2,Th66
        .= F.(x1,F.(x2,x3)) by A1,BINOP_1:def 3
        .= F.(x1,(F[;](x2,f)).y) by A2,Th66;
    end;
    hence thesis by A2,Th67;
  end;
end;

theorem
  F is associative implies F[:](f, F.(x1,x2)) = F[:](F[:](f,x1),x2)
proof
  assume
A1: F is associative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x3 = f.y as Element of X by A2,FUNCT_2:7;
      thus (F[:](f, F.(x1,x2))).y = F.(f.y, F.(x1,x2)) by A2,Th60
        .= F.(F.(x3,x1),x2) by A1,BINOP_1:def 3
        .= F.(F[:](f,x1).y,x2) by A2,Th60;
    end;
    hence thesis by A2,Th61;
  end;
end;

theorem
  F is commutative implies F[;](x,f) = F[:](f,x)
proof
  assume
A1: F is commutative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x1 = f.y as Element of X by A2,FUNCT_2:7;
      thus (F[;](x,f)).y = F.(x,x1) by A2,Th66
        .= F.(f.y,x) by A1,BINOP_1:def 2;
    end;
    hence thesis by A2,Th61;
  end;
end;

theorem
  F is commutative implies F.:(f,g) = F.:(g,f)
proof
  assume
A1: F is commutative;
  per cases;
  suppose
    Y = {};
    hence thesis;
  end;
  suppose
A2: Y <> {};
    now
      let y;
      reconsider x1 = f.y, x2 = g.y as Element of X by A2,FUNCT_2:7;
      thus (F.:(f,g)).y = F.(x1,x2) by A2,Th48
        .= F.(g.y,f.y) by A1,BINOP_1:def 2;
    end;
    hence thesis by A2,Th49;
  end;
end;

theorem
  F is idempotent implies F.:(f,f) = f
proof
  assume
A1: F is idempotent;
  per cases;
  suppose
A2: Y = {};
    hence F.:(f,f) = {}
      .= f by A2;
  end;
  suppose
A3: Y <> {};
    now
      let y;
      reconsider x = f.y as Element of X by A3,FUNCT_2:7;
      thus f.y = F.(x,x) by A1,BINOP_1:def 4
        .= F.(f.y,f.y);
    end;
    hence thesis by A3,Th49;
  end;
end;

reserve X,Y for non empty set,
  F for BinOp of X,
  f for Function of Y,X,
  x for
  Element of X,
  y for Element of Y;

theorem
  F is idempotent implies F[;](f.y,f).y = f.y
proof
  assume
A1: F is idempotent;
  thus F[;](f.y,f).y = F.(f.y,f.y) by Th66
    .= f.y by A1,BINOP_1:def 4;
end;

theorem
  F is idempotent implies F[:](f,f.y).y = f.y
proof
  assume
A1: F is idempotent;
  thus F[:](f,f.y).y = F.(f.y,f.y) by Th60
    .= f.y by A1,BINOP_1:def 4;
end;

:: Addendum, 2002.07.08

theorem
  for F,f,g being Function st [:rng f, rng g:] c= dom F holds dom(F.:(f,
  g)) = dom f /\ dom g
proof
  let F,f,g be Function such that
A1: [:rng f, rng g:] c= dom F;
  rng<:f,g:> c= [:rng f, rng g:] by FUNCT_3:71;
  hence dom(F.:(f,g)) = dom<:f,g:> by A1,RELAT_1:46,XBOOLE_1:1
    .= dom f /\ dom g by FUNCT_3:def 8;
end;

:: from PRALG_1, 2004.07.23

definition
  let IT be Function;
  attr IT is Function-yielding means
  :Def6:
  for x being set st x in dom IT
  holds IT.x is Function;
end;

registration
  cluster Function-yielding Function;
  existence
  proof
    consider f being Function,I be set;
    take F = I --> f;
    let x be set;
    dom (I --> f) = I by Th19;
    hence thesis by Th13;
  end;
end;

registration
  let B be Function-yielding Function, j be set;
  cluster B.j -> Function-like Relation-like;
  coherence
  proof
    per cases;
    suppose
      j in dom B;
      hence thesis by Def6;
    end;
    suppose
      not j in dom B;
      hence thesis by FUNCT_1:def 4;
    end;
  end;
end;

registration
  let F be Function-yielding Function, f be Function;
  cluster F * f -> Function-yielding;
  coherence
  proof
    thus F * f is Function-yielding
    proof
      let x be set;
      assume
      x in dom (F*f);
      then (F*f).x = F.(f.x) by FUNCT_1:22;
      hence thesis;
    end;
  end;
end;

:: missing, 2005.11.13, A.T.

registration
  let B;
  let c be non empty set;
  cluster B --> c -> non-empty;
  coherence
  proof
    not {} in rng(B --> c) by TARSKI:def 1;
    hence thesis by RELAT_1:def 9;
  end;
end;

:: missing, 2005.12.20, A.T.

theorem
  ([:X,Y:] --> z).(x,y) = z
proof
  [x,y] in [:X,Y:] by ZFMISC_1:106;
  hence thesis by Th13;
end;

:: from CAT_1, 2007.02.11, A.T.

reserve a,b,c for set;

definition
  let a,b,c;
  func (a,b).-->c -> Function equals
  {[a,b]} --> c;
  coherence;
end;

theorem
  ((a,b).-->c).(a,b) = c
proof
  [a,b] in {[a,b]} by TARSKI:def 1;
  hence thesis by Th13;
end;

:: from CQC_LANG, 2007.03.13, A.T.

definition
  let x,y,a,b be set;
  func IFEQ(x,y,a,b) -> set equals
  :Def8:
  a if x = y otherwise b;
  correctness;
end;

definition
  let D be set;
  let x,y be set, a,b be Element of D;
  redefine func IFEQ(x,y,a,b) -> Element of D;
  coherence
  proof
    x = y or x <> y;
    hence thesis by Def8;
  end;
end;

definition
  let x,y be set;
  func x .--> y -> set equals
  {x} --> y;
  coherence;
end;

registration
  let x,y be set;
  cluster x .--> y -> Function-like Relation-like;
  coherence;
end;

registration
  let x,y be set;
  cluster x .--> y -> one-to-one;
  coherence
  proof
    let x1,x2 be set;
    set f = x .--> y;
    assume that
A1: x1 in dom f and
A2: x2 in dom f;
A3: dom f = {x} by Th19;
    then x1 =x by A1,TARSKI:def 1;
    hence thesis by A3,A2,TARSKI:def 1;
  end;
end;

theorem Th87:
  for x,y be set holds (x .--> y).x = y
proof
  let x,y be set;
  x in {x} by TARSKI:def 1;
  hence thesis by Th13;
end;

:: from SCMFSA6A, 2007.07.22, A.T.

theorem
  for a,b being set, f being Function holds a.-->b c= f iff a in dom f &
  f.a = b
proof
  let a,b be set, f be Function;
A1: dom(a.-->b) = {a} by Th19;
  then
A2: a in dom(a.-->b) by TARSKI:def 1;
  hereby
    assume
A3: a.-->b c= f;
    then {a} c= dom f by A1,GRFUNC_1:8;
    hence a in dom f by ZFMISC_1:37;
    thus f.a = (a.-->b).a by A2,A3,GRFUNC_1:8
      .= b by Th87;
  end;
  assume that
A4: a in dom f and
A5: f.a = b;
A6: now
    let x be set;
    assume
    x in dom(a.-->b);
    then x = a by A1,TARSKI:def 1;
    hence (a.-->b).x = f.x by A5,Th87;
  end;
  dom(a.-->b) c= dom f by A1,A4,ZFMISC_1:37;
  hence thesis by A6,GRFUNC_1:8;
end;

:: from FUNCT_2, 2007.11.22, A.T., :: from CAT_4

notation
  let o,m,r be set;
  synonym (o,m) :-> r for (o,m) .--> r;
end;

Lm2: for o,m,r be set holds (o,m) :-> r is Function of [:{o},{m}:],{r}
proof
  let o,m,r be set;
  dom((o,m) :-> r) = {[o,m]} by Th19
    .= [:{o},{m}:] by ZFMISC_1:35;
  hence thesis by FUNCT_2:def 1;
end;

definition
  let o,m,r be set;
  redefine func (o,m) :-> r -> Function of [:{o},{m}:],{r} means
  not
  contradiction;
  coherence by Lm2;
  compatibility
  proof
    let f be Function of [:{o},{m}:],{r};
    thus f = (o,m) .--> r implies not contradiction;
    (o,m) .--> r is Function of [:{o},{m}:],{r} by Lm2;
    hence thesis by FUNCT_2:66;
  end;
end;

:: missing, 2008.03.20, A.T.

reserve x,y,z for set;

theorem
  x in dom(x .--> y)
proof
  dom(x .--> y) = {x} by Th19;
  hence thesis by TARSKI:def 1;
end;

theorem
  z in dom(x .--> y) implies z = x
proof
  dom(x .--> y) = {x} by Th19;
  hence thesis by TARSKI:def 1;
end;

:: missing, 2008.04.15, A.T.

theorem
  not x in A implies (x .--> y)|A = {}
proof
  assume
  not x in A;
  then {x} misses A by ZFMISC_1:56;
  then dom(x .--> y) misses A by Th19;
  hence thesis by RELAT_1:95;
end;

:: from CAT_1, (new notation), 2008.06.30. A.T.

notation
  let x,y;
  synonym x :-> y for x .--> y;
end;

definition
  let m,o be set;
  redefine func m :-> o -> Function of {m}, {o};
  coherence;
end;

theorem
  for x being Element of {a} for y being Element of {b} holds ((a,b):->c
  ).(x,y) = c by TARSKI:def 1;

:: from MSUHOM_1, ALTCAT_1, 2008.07.06, A.T.

registration
  let f be Function-yielding Function, C be set;
  cluster f|C -> Function-yielding;
  coherence
  proof
    let i be set;
    f.i is Function;
    hence thesis by FUNCT_1:70;
  end;
end;

:: from CIRCCOMB, 2008.07.06, A.T.

registration
  let A be set;
  let f be Function;
  cluster A --> f -> Function-yielding;
  coherence
  proof
    set g = A --> f;
    g is Function-yielding
    proof
      let a be set;
      assume
      a in dom g;
      hence thesis by Th13;
    end;
    hence thesis;
  end;
end;

:: from SEQM_3, 2008.07.17, A.T.

registration
  let X,a be set;
  cluster X --> a -> constant;
  coherence
  proof
    let x,y be set;
    assume that
A1: x in dom(X --> a) and
A2: y in dom(X --> a);
    thus (X --> a).x = a by A1,Th13
      .= (X --> a).y by A2,Th13;
  end;
end;
:: from YELLOW_6, 2008.07.17, A.T.

registration
  cluster non empty constant Function;
  existence
  proof
    take f = {{}} --> {};
    thus thesis;
  end;
end;
:: missing, 2008.07.17, A.T.

registration
  let f be constant Function, X be set;
  cluster f|X -> constant;
  coherence
  proof
    let x,y be set;
A1: dom(f|X) c= dom f by RELAT_1:89;
    assume that
A2: x in dom(f|X) and
A3: y in dom (f|X);
    thus (f|X).x = f.x by A2,FUNCT_1:70
      .= f.y by A1,A2,A3,FUNCT_1:def 16
      .= (f|X).y by A3,FUNCT_1:70;
  end;
end;
:: missing, 2008.08.14, A.T.

theorem
  for f being non empty constant Function ex y st for x st x in dom f
  holds f.x = y
proof
  let f be non empty constant Function;
  consider y such that
A1: y in rng f by XBOOLE_0:def 1;
  take y;
  ex x0 being set st x0 in dom f & f.x0 = y by A1,FUNCT_1:def 5;
  hence thesis by FUNCT_1:def 16;
end;
:: from YELLOW_6, 2008.12.26, A.T.

theorem
  for X being non empty set, x being set holds the_value_of (X --> x) =
  x
proof
  let X be non empty set, x be set;
  set f = X --> x;
  ex i being set st i in dom f & the_value_of f = f.i by FUNCT_1:def 18;
  hence thesis by Th13;
end;

:: from CIRCCMB3, 2008.12.26, A.T.

theorem
  for f being constant Function holds f = (dom f) --> the_value_of f
proof
  let f be constant Function;
  thus dom ((dom f) --> the_value_of f) = dom f by Th19;
  let x be set;
  assume
A1: x in dom f;
  then f <> {} & ((dom f) --> the_value_of f).x = the_value_of f by Th13;
  hence thesis by A1,FUNCT_1:def 18;
end;

:: missing, 2009.01.21, A.T.

registration
  let X be set, Y be non empty set;
  cluster total PartFunc of X,Y;
  existence
  proof
    consider y being set such that
A1: y in Y by XBOOLE_0:def 1;
    reconsider y as Element of Y by A1;
    take X --> y;
    thus thesis;
  end;
end;

:: new, 2009.02.14, A.T.

registration
  let I, A be set;
  cluster I --> A -> I-defined;
  coherence;
end;

registration
  let I, A be set;
  cluster I .--> A -> {I}-defined;
  coherence;
end;

:: BORSUK_1:6, 2009.06.11, A.K.

theorem
  (A --> x).:B c= {x};

registration
  let I be set, f be Function;
  cluster I .--> f -> Function-yielding;
  coherence;
end;

:: 2009.10.03, A.T.

registration let I be set;
 cluster total (I-defined non-empty Function);
 existence
  proof
   take I --> 1;
    dom(I --> 1) = I by Th19;
    hence thesis by PARTFUN1:def 4;
  end;
end;

