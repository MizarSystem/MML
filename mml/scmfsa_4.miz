:: Modifying addresses of instructions of { \bf SCM_FSA }
::  by Andrzej Trybulec and Yatsuka Nakamura
::
:: Received February 14, 1996
:: Copyright (c) 1996 Association of Mizar Users

environ

 vocabularies AMI_1, FINSET_1, AMI_3, BOOLE, RELAT_1, FUNCT_1, FUNCT_4,
      SCMFSA_2, ARYTM_1, CAT_1, RELOC, AMI_5, AMI_2, NAT_1, ABSVALUE, FINSEQ_1,
      FINSEQ_2, SCMFSA_4, CARD_3, FINSEQ_4, ARYTM;
 notations TARSKI, XBOOLE_0, ENUMSET1, SUBSET_1, NUMBERS, CARD_3, XCMPLX_0,
      NAT_1, BINARITH, INT_1, INT_2, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2,
      FUNCT_4, FUNCOP_1, FUNCT_7, FINSEQ_1, FINSET_1, FINSEQ_2, FINSEQ_4,
      STRUCT_0, AMI_1, AMI_3, RELOC, SCMFSA_2, XXREAL_0;
 constructors DOMAIN_1, XXREAL_0, NAT_1, INT_2, FINSEQ_4, BINARITH, AMI_5,
      PARTFUN1, RELOC, SCMFSA_2;
 registrations XBOOLE_0, SUBSET_1, SETFAM_1, FUNCT_1, ORDINAL1, RELSET_1,
      FUNCOP_1, FRAENKEL, NUMBERS, XREAL_0, INT_1, CARD_3, TREES_2, AMI_1,
      AMI_3, SCMFSA_2;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions TARSKI, AMI_1, AMI_3, XBOOLE_0, SCMFSA_2, FUNCOP_1;
 theorems SCMFSA_2, BINARITH, ZFMISC_1, RELOC, ENUMSET1, NAT_1, FUNCOP_1,
      RELAT_1, FUNCT_1, TARSKI, FUNCT_4, FUNCT_2, AMI_1, FINSET_1, GRFUNC_1,
      SCMFSA_3, RELSET_1, XBOOLE_0, XBOOLE_1, CARD_3;
 schemes CLASSES1, FUNCT_7;

begin  :: Incrementing and decrementing the instruction locations

reserve j, k, l, m, n, p, q for Element of NAT;

definition
let loc be Instruction-Location of SCM+FSA , k be Element of NAT;
func loc + k -> Instruction-Location of SCM+FSA means
:Def1:
ex m being Element of NAT st loc = insloc m & it = insloc(m+k);
existence
 proof
  consider m being Element of NAT such that A1: loc = insloc m by SCMFSA_2:21;
  take IT = insloc(m+k);
  take m;
  thus loc = insloc m & IT = insloc(m+k) by A1;
 end;
uniqueness;

func loc -' k -> Instruction-Location of SCM+FSA means
:Def2:
ex m being Element of NAT st loc = insloc m & it = insloc(m -' k);
existence
 proof
  consider m being Element of NAT such that A2: loc = insloc m by SCMFSA_2:21;
  take IT = insloc(m -' k);
  take m;
  thus loc = insloc m & IT = insloc(m -' k) by A2;
 end;
uniqueness;
end;

canceled 2;

theorem Th3:
 for l being Instruction-Location of SCM+FSA, m,n
   holds l+m+n = l+(m+n)
proof let l be Instruction-Location of SCM+FSA, m,n;
  consider i being Element of NAT such that
A1:  l = insloc i and
A2:  l+m = insloc(i+m) by Def1;
      l+m+n = insloc(i+m+n) by A2,Def1
         .= insloc(i+(m+n));
 hence l+m+n = l+(m+n) by A1,Def1;
end;

theorem Th4:
 for loc being Instruction-Location of SCM+FSA ,k being Element of NAT
  holds loc + k -' k = loc
  proof
   let loc be Instruction-Location of SCM+FSA,
       k   be Element of NAT;
   consider m being Element of NAT such that
A1:  insloc m = loc by SCMFSA_2:21;
   thus loc + k -' k = insloc(m + k) -' k by A1,Def1
                     .= insloc(m + k -' k) by Def2
                     .= loc by A1,BINARITH:39;
  end;

reserve L for Instruction-Location of SCM,
        A for Data-Location,
        I for Instruction of SCM;

theorem Th5:
 for l being Instruction-Location of SCM+FSA, L st L = l
  holds l+k = L+k
proof let l be Instruction-Location of SCM+FSA, L such that
A1: L = l;
  consider m being Element of NAT such that
A2: l = insloc m & l+k = insloc(m+k) by Def1;
  consider M being Element of NAT such that
A3: L = il.M & L+k = il.(M+k) by RELOC:def 1;
 thus l+k = L+k by A1,A2,A3;
end;

theorem
     for l1,l2 being Instruction-Location of SCM+FSA , k being Element of NAT
  holds
    Start-At(l1 + k) = Start-At(l2 +k) iff Start-At l1 = Start-At l2
  proof
   let l1,l2 be Instruction-Location of SCM+FSA, k be Element of NAT;
   hereby
    assume
A1: Start-At(l1 + k) = Start-At(l2 + k);
A2: Start-At(l1 + k) = IC SCM+FSA .--> (l1 + k) &
    Start-At(l2 + k) = IC SCM+FSA .--> (l2 + k);
     {[IC SCM+FSA, l1 + k]} = IC SCM+FSA .--> (l2 + k) by A1,AMI_1:96;
    then {[IC SCM+FSA, l1 + k]} = {[IC SCM+FSA, l2 + k]} by A2,AMI_1:96;
      then [IC SCM+FSA, l1 + k] = [IC SCM+FSA, l2 + k] by ZFMISC_1:6;
                then l1 + k = l2 + k by ZFMISC_1:33;
                then l1 = l2 + k -' k by Th4;
    hence Start-At l1 = Start-At l2 by Th4;
   end;
   assume Start-At l1 = Start-At l2;
           then {[IC SCM+FSA, l1]} = Start-At l2 by AMI_1:96;
           then {[IC SCM+FSA, l1]} = {[IC SCM+FSA, l2]} by AMI_1:96;
             then [IC SCM+FSA, l1] = [IC SCM+FSA, l2] by ZFMISC_1:6;
   hence Start-At(l1 + k) = Start-At(l2 + k) by ZFMISC_1:33;
  end;

theorem
     for l1,l2 being Instruction-Location of SCM+FSA , k being Element of NAT
  st Start-At l1 = Start-At l2
  holds
    Start-At(l1 -' k) = Start-At(l2 -' k)
   proof
   let l1,l2 be Instruction-Location of SCM+FSA, k be Element of NAT;
   assume Start-At l1 = Start-At l2;
            then {[IC SCM+FSA, l1]} = Start-At l2 by AMI_1:96;
            then {[IC SCM+FSA, l1]} = {[IC SCM+FSA, l2]} by AMI_1:96;
              then [IC SCM+FSA, l1] = [IC SCM+FSA, l2] by ZFMISC_1:6;
   hence Start-At(l1 -' k) = Start-At(l2 -' k) by ZFMISC_1:33;
  end;

begin :: Incrementing addresses

definition
  let i be Instruction of SCM+FSA , k be Element of NAT;
  func IncAddr (i,k) -> Instruction of SCM+FSA means
:Def3:
   ex I being Instruction of SCM st I = i & it = IncAddr(I,k)
                   if InsCode i in {6,7,8}
  otherwise it = i;
 existence
  proof
   hereby assume InsCode i in {6,7,8};
     then InsCode i = 6 or InsCode i = 7 or InsCode i = 8 by ENUMSET1:def 1;
     then reconsider I = i as Instruction of SCM by SCMFSA_2:34;
     reconsider ii = IncAddr(I,k) as Instruction of SCM+FSA by SCMFSA_2:38;
    take ii,I;
    thus I = i & ii = IncAddr(I,k);
   end;
   thus thesis;
  end;
 correctness;
end;

theorem Th8:
  for k being Element of NAT
   holds IncAddr(halt SCM+FSA,k) = halt SCM+FSA
   proof
        not 0 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(halt SCM+FSA,k) = halt SCM+FSA
      by Def3,SCMFSA_2:124;
   end;

theorem Th9:
  for k being Element of NAT, a,b being Int-Location
   holds IncAddr(a:=b ,k) = a:=b
   proof
    let k be Element of NAT,
       a,b be Int-Location;
A1:  InsCode (a := b) = 1 by SCMFSA_2:42;
        not 1 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(a:=b ,k) = a:=b by A1,Def3;
   end;

theorem Th10:
  for k being Element of NAT, a,b being Int-Location
   holds IncAddr(AddTo(a,b),k) = AddTo(a,b)
   proof
    let k be Element of NAT,
       a,b be Int-Location;
A1:  InsCode (AddTo(a,b)) = 2 by SCMFSA_2:43;
        not 2 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(AddTo(a,b),k) = AddTo(a,b) by A1,Def3;
   end;

theorem Th11:
  for k being Element of NAT, a,b being Int-Location
   holds IncAddr(SubFrom(a,b),k) = SubFrom(a,b)
   proof
    let k be Element of NAT,
       a,b be Int-Location;
A1:  InsCode (SubFrom(a,b)) = 3 by SCMFSA_2:44;
        not 3 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(SubFrom(a,b),k) = SubFrom(a,b) by A1,Def3;
   end;

theorem Th12:
  for k being Element of NAT, a,b being Int-Location
   holds IncAddr(MultBy(a,b),k) = MultBy(a,b)
   proof
    let k be Element of NAT,
       a,b be Int-Location;
A1:  InsCode (MultBy(a,b)) = 4 by SCMFSA_2:45;
        not 4 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(MultBy(a,b),k) = MultBy(a,b) by A1,Def3;
   end;

theorem Th13:
  for k being Element of NAT, a,b being Int-Location
   holds IncAddr(Divide(a,b),k) = Divide(a,b)
   proof
    let k be Element of NAT,
       a,b be Int-Location;
A1:  InsCode (Divide(a,b)) = 5 by SCMFSA_2:46;
        not 5 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(Divide(a,b),k) = Divide(a,b) by A1,Def3;
   end;

theorem Th14:
  for k being Element of NAT,loc being Instruction-Location of SCM+FSA
   holds IncAddr(goto loc,k) = goto (loc + k)
    proof
     let k be Element of NAT, loc be Instruction-Location of SCM+FSA;
         InsCode (goto loc) = 6 by SCMFSA_2:47;
     then InsCode (goto loc) in {6,7,8} by ENUMSET1:def 1;
     then consider I being Instruction of SCM such that
A1:   I = goto loc and
A2:   IncAddr(goto loc,k) = IncAddr(I,k) by Def3;
     consider L such that
A3:   loc = L and
A4:   goto loc = goto L by SCMFSA_2:def 16;
A5:    L+k = loc+k by A3,Th5;
      reconsider i = goto(L+k) as Instruction of SCM+FSA by SCMFSA_2:38;
     thus IncAddr(goto loc,k) = i by A1,A2,A4,RELOC:10
          .= goto (loc + k) by A5,SCMFSA_2:def 16;
    end;

theorem Th15:
  for k being Element of NAT,loc being Instruction-Location of SCM+FSA,
      a being Int-Location
   holds IncAddr(a=0_goto loc,k) = a=0_goto (loc + k)
    proof
     let k be Element of NAT, loc be Instruction-Location of SCM+FSA,
         a be Int-Location;
         InsCode (a=0_goto loc) = 7 by SCMFSA_2:48;
     then InsCode (a=0_goto loc) in {6,7,8} by ENUMSET1:def 1;
     then consider I being Instruction of SCM such that
A1:   I = a=0_goto loc and
A2:   IncAddr(a=0_goto loc,k) = IncAddr(I,k) by Def3;
     consider A,L such that
A3:   a = A & loc = L and
A4:   a=0_goto loc = A=0_goto L by SCMFSA_2:def 17;
A5:    L+k = loc+k by A3,Th5;
      reconsider i = A=0_goto(L+k) as Instruction of SCM+FSA by SCMFSA_2:38;
     thus IncAddr(a=0_goto loc,k) = i by A1,A2,A4,RELOC:11
          .= a=0_goto (loc + k) by A3,A5,SCMFSA_2:def 17;
    end;

theorem Th16:
  for k being Element of NAT,loc being Instruction-Location of SCM+FSA,
      a being Int-Location
   holds IncAddr(a>0_goto loc,k) = a>0_goto (loc + k)
   proof
     let k be Element of NAT, loc be Instruction-Location of SCM+FSA,
         a be Int-Location;
         InsCode (a>0_goto loc) = 8 by SCMFSA_2:49;
     then InsCode (a>0_goto loc) in {6,7,8} by ENUMSET1:def 1;
     then consider I being Instruction of SCM such that
A1:   I = a>0_goto loc and
A2:   IncAddr(a>0_goto loc,k) = IncAddr(I,k) by Def3;
     consider A,L such that
A3:   a = A & loc = L and
A4:   a>0_goto loc = A>0_goto L by SCMFSA_2:def 18;
A5:    L+k = loc+k by A3,Th5;
      reconsider i = A>0_goto(L+k) as Instruction of SCM+FSA by SCMFSA_2:38;
     thus IncAddr(a>0_goto loc,k) = i by A1,A2,A4,RELOC:12
          .= a>0_goto (loc + k) by A3,A5,SCMFSA_2:def 18;
    end;

theorem Th17:
  for k being Element of NAT, a,b being Int-Location, f being FinSeq-Location
   holds IncAddr(b:=(f,a),k) = b:=(f,a)
   proof
    let k be Element of NAT,
       a,b be Int-Location,
       f be FinSeq-Location;
A1:  InsCode (b:=(f,a)) = 9 by SCMFSA_2:50;
        not 9 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(b:=(f,a),k) = b:=(f,a) by A1,Def3;
   end;

theorem Th18:
  for k being Element of NAT, a,b being Int-Location, f being FinSeq-Location
   holds IncAddr((f,a):=b,k) = (f,a):=b
   proof
    let k be Element of NAT,
       a,b be Int-Location,
       f be FinSeq-Location;
A1:  InsCode ((f,a):=b) = 10 by SCMFSA_2:51;
        not 10 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr((f,a):=b,k) = (f,a):=b by A1,Def3;
   end;

theorem Th19:
  for k being Element of NAT, a being Int-Location, f being FinSeq-Location
   holds IncAddr(a:=len f,k) = a:=len f
   proof
    let k be Element of NAT,
       a be Int-Location,
       f be FinSeq-Location;
A1:  InsCode (a:=len f) = 11 by SCMFSA_2:52;
        not 11 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(a:=len f,k) = a:=len f by A1,Def3;
   end;

theorem Th20:
  for k being Element of NAT, a being Int-Location, f being FinSeq-Location
   holds IncAddr(f:=<0,...,0>a,k) = f:=<0,...,0>a
   proof
    let k be Element of NAT,
       a be Int-Location,
       f be FinSeq-Location;
A1:  InsCode (f:=<0,...,0>a) = 12 by SCMFSA_2:53;
        not 12 in {6,7,8} by ENUMSET1:def 1;
    hence IncAddr(f:=<0,...,0>a,k) = f:=<0,...,0>a by A1,Def3;
   end;

theorem Th21:
 for i being Instruction of SCM+FSA, I st i = I holds
   IncAddr(i,k) = IncAddr(I,k)
proof
 let i be Instruction of SCM+FSA, I; assume
A1: i = I;
 per cases;
 suppose InsCode i in {6,7,8};
   then ex I being Instruction of SCM st I = i & IncAddr(i,k) = IncAddr(I,k)
      by Def3;
  hence thesis by A1;
 end;
 suppose
A2:  not InsCode i in {6,7,8};
then A3: InsCode I <> 6 & InsCode I <> 7 & InsCode I <> 8 by A1,ENUMSET1:def 1;
 thus IncAddr(i,k) = i by A2,Def3
       .= IncAddr(I,k) by A1,A3,RELOC:def 3;
end;
end;

theorem Th22:
 for I being Instruction of SCM+FSA, k being Element of NAT
  holds InsCode (IncAddr (I, k)) = InsCode I
   proof
    let I be Instruction of SCM+FSA, k be Element of NAT;
   A1: InsCode I <= 11+1 by SCMFSA_2:35;
A2: InsCode I <= 10+1 implies InsCode I <= 10 or InsCode I = 11 by NAT_1:8;
A3: InsCode I <= 9+1 implies InsCode I <= 8+1 or InsCode I = 10 by NAT_1:8;
  per cases by A1,A2,A3,NAT_1:8;
  suppose InsCode I <= 8;
   then reconsider i = I as Instruction of SCM by SCMFSA_2:34;
        IncAddr (I, k) = IncAddr (i, k) by Th21;
   hence InsCode (IncAddr (I, k)) = InsCode I by RELOC:13;
  end;
  suppose InsCode I=9 or InsCode I=10 or InsCode I=11 or InsCode I=12;
   then not InsCode I in {6,7,8} by ENUMSET1:def 1;
  hence thesis by Def3;
 end;
 end;

definition let IT be FinPartState of SCM+FSA;
 attr IT is initial means
      for m,n st insloc n in dom IT & m < n holds insloc m in dom IT;
end;

definition
 func SCM+FSA-Stop -> FinPartState of SCM+FSA equals
  (insloc 0).--> halt SCM+FSA;
 correctness;
end;

registration
 cluster SCM+FSA-Stop -> non empty initial programmed;
 coherence
  proof
   thus SCM+FSA-Stop is non empty;
A1:  dom SCM+FSA-Stop = {insloc 0} by FUNCOP_1:19;
   thus SCM+FSA-Stop is initial
    proof let m,n such that
A2:   insloc n in dom SCM+FSA-Stop and
A3:   m < n;
          insloc n = insloc 0 by A1,A2,TARSKI:def 1;
     hence insloc m in dom SCM+FSA-Stop by A3,NAT_1:2;
    end;
   thus dom SCM+FSA-Stop c= the Instruction-Locations of SCM+FSA
          by A1,ZFMISC_1:37;
  end;
end;

registration
 cluster initial programmed non empty FinPartState of SCM+FSA;
 existence proof take SCM+FSA-Stop; thus thesis; end;
end;

reserve i for Instruction of SCM+FSA;

theorem Th23:
 IncAddr(IncAddr(i,m),n) = IncAddr(i,m+n)
proof
 per cases by ENUMSET1:def 1;
 suppose InsCode i = 6;
  then consider l being Instruction-Location of SCM+FSA such that
A1: i = goto l by SCMFSA_2:59;
      IncAddr(i,m) = goto(l+m) by A1,Th14;
 hence IncAddr(IncAddr(i,m),n) = goto(l+m+n) by Th14
             .= goto (l+(m+n)) by Th3
             .= IncAddr(i,m+n) by A1,Th14;
 end;
 suppose InsCode i = 7;
  then consider l being Instruction-Location of SCM+FSA,
                a being Int-Location such that
A2: i = a=0_goto l by SCMFSA_2:60;
      IncAddr(i,m) = a=0_goto(l+m) by A2,Th15;
 hence IncAddr(IncAddr(i,m),n) = a=0_goto(l+m+n) by Th15
             .= a=0_goto (l+(m+n)) by Th3
             .= IncAddr(i,m+n) by A2,Th15;
 end;
 suppose InsCode i = 8;
  then consider l being Instruction-Location of SCM+FSA,
                a being Int-Location such that
A3: i = a>0_goto l by SCMFSA_2:61;
      IncAddr(i,m) = a>0_goto(l+m) by A3,Th16;
 hence IncAddr(IncAddr(i,m),n) = a>0_goto(l+m+n) by Th16
             .= a>0_goto (l+(m+n)) by Th3
             .= IncAddr(i,m+n) by A3,Th16;
 end;
 suppose
A4: not InsCode i in {6,7,8};
  then not InsCode IncAddr(i,m) in {6,7,8} by Th22;
  then IncAddr(IncAddr(i,m),n) = IncAddr(i,m) by Def3
               .= i by A4,Def3
               .= IncAddr(i,m+n) by A4,Def3;
 hence thesis;
end;
end;

begin :: Incrementing Addresses in a finite partial state

definition
 let p be programmed FinPartState of SCM+FSA, k be Element of NAT;
 func IncAddr(p,k) -> programmed FinPartState of SCM+FSA means
:Def6:
 dom it = dom p &
 for m st insloc m in dom p holds it.insloc m = IncAddr(pi(p,insloc m),k);
 existence
  proof
   defpred P [set,set] means ex m st $1 = insloc m &
           $2 = IncAddr(pi(p,insloc m),k);
   A1:for e being set st e in dom p ex u being set st P[e,u]
    proof
     let e be set;
     assume
A2:         e in dom p;
         dom p c= the Instruction-Locations of SCM+FSA by AMI_1:def 40;
     then reconsider e as Instruction-Location of SCM+FSA by A2,AMI_1:def 4;
     consider m such that A3:e = insloc m by SCMFSA_2:21;
     take IncAddr(pi(p,insloc m),k);
     thus thesis by A3;
    end;
   consider f being Function such that
A4:  dom f = dom p and
A5:  for e being set st e in dom p holds P[e,f.e] from CLASSES1:sch 1(A1);
A6: dom p c= the Instruction-Locations of SCM+FSA by AMI_1:def 40;
     then dom p c= the carrier of SCM+FSA by XBOOLE_1:1;
then A7:  dom f c= dom the Object-Kind of SCM+FSA by A4,FUNCT_2:def 1;
         for x being set st x in dom f holds f.x in (the Object-Kind of SCM+FSA
)
.
x
      proof
       let x be set;
       assume
A8:         x in dom f;
       then consider m such that x = insloc m and
A9:       f.x = IncAddr(pi(p,insloc m),k) by A4,A5;
       reconsider y = x as Instruction-Location of SCM+FSA
                by A4,A6,A8,AMI_1:def 4;
           (the Object-Kind of SCM+FSA).y = ObjectKind y
                                 .= the Instructions of SCM+FSA
                                         by AMI_1:def 14;
       hence f.x in (the Object-Kind of SCM+FSA).x by A9;
      end;
   then reconsider f as Element of sproduct the Object-Kind of SCM+FSA
                                         by A7,CARD_3:def 9;
        f is finite by A4,FINSET_1:29;
    then reconsider f as FinPartState of SCM+FSA by AMI_1:77;
        f is programmed
     proof
      let x be set;
      assume x in dom f;
      hence x in the Instruction-Locations of SCM+FSA by A4,A6;
     end;
   then reconsider IT = f as programmed FinPartState of SCM+FSA;
    take IT;
    thus dom IT = dom p by A4;
    let m;
    assume insloc m in dom p;
    then consider j such that
A10:     insloc m = insloc j and
A11:     f.insloc m = IncAddr(pi(p,insloc j),k) by A5;
    thus IT.insloc m = IncAddr(pi(p,insloc m) ,k) by A10,A11;
  end;

 uniqueness
  proof
  let IT1,IT2 be programmed FinPartState of SCM+FSA such that
A12:  dom IT1 = dom p and
A13:  for m st insloc m in
 dom p holds IT1.insloc m = IncAddr(pi(p,insloc m) ,k)
     and
A14:  dom IT2 = dom p and
A15:  for m st insloc m in dom p holds IT2.insloc m = IncAddr(pi(p,insloc m) ,
k);
         for x being set st x in dom p holds
      IT1.x = IT2.x
       proof
        let x be set;
        assume A16: x in dom p;
            dom p c= the Instruction-Locations of SCM+FSA by AMI_1:def 40;
        then reconsider l = x as Instruction-Location of SCM+FSA
                   by A16,AMI_1:def 4;
        consider m such that A17:l = insloc m by SCMFSA_2:21;
        thus IT1.x = IncAddr(pi(p,insloc m),k) by A13,A16,A17
                   .= IT2.x by A15,A16,A17;
       end;
    hence IT1=IT2 by A12,A14,FUNCT_1:9;
  end;
end;

theorem Th24:
  for p being programmed FinPartState of SCM+FSA , k being Element of NAT
  for l being Instruction-Location of SCM+FSA st l in dom p
    holds IncAddr (p,k).l = IncAddr(pi(p,l),k)
   proof
    let p be programmed FinPartState of SCM+FSA , k be Element of NAT;
    let l be Instruction-Location of SCM+FSA such that A1: l in dom p;
    consider m being Element of NAT such that A2: l = insloc m by SCMFSA_2:21;
    thus IncAddr (p,k).l = IncAddr(pi(p,l),k) by A1,A2,Def6;
   end;

theorem
    for I,J being programmed FinPartState of SCM+FSA holds
 IncAddr(I +* J, n) = IncAddr(I,n) +* IncAddr(J,n)
proof let I,J be programmed FinPartState of SCM+FSA;
A1: dom IncAddr(J,n) = dom J by Def6;
     dom IncAddr(I,n) = dom I by Def6;
then A2: dom(IncAddr(I,n) +* IncAddr(J,n)) = dom I \/ dom J by A1,FUNCT_4:def 1
     .= dom(I +* J) by FUNCT_4:def 1;
     now let m such that
A3: insloc m in dom(I +* J);
  per cases;
  suppose
A4: insloc m in dom J;
A5: pi(I +* J,insloc m) = (I +* J).insloc m by A3,AMI_1:def 47
          .= J.insloc m by A4,FUNCT_4:14
          .= pi(J,insloc m) by A4,AMI_1:def 47;
  thus (IncAddr(I,n) +* IncAddr(J,n)).insloc m
        = IncAddr(J,n).insloc m by A1,A4,FUNCT_4:14
       .= IncAddr(pi(I +* J,insloc m),n) by A4,A5,Def6;
  end;
  suppose
A6: not insloc m in dom J;
       insloc m in dom I \/ dom J by A3,FUNCT_4:def 1;
then A7: insloc m in dom I by A6,XBOOLE_0:def 2;
A8: pi(I +* J,insloc m) = (I +* J).insloc m by A3,AMI_1:def 47
          .= I.insloc m by A6,FUNCT_4:12
          .= pi(I,insloc m) by A7,AMI_1:def 47;
  thus (IncAddr(I,n) +* IncAddr(J,n)).insloc m
        = IncAddr(I,n).insloc m by A1,A6,FUNCT_4:12
       .= IncAddr(pi(I +* J,insloc m),n) by A7,A8,Def6;
 end;
 end;
 hence IncAddr(I +* J, n) = IncAddr(I,n) +* IncAddr(J,n) by A2,Def6;
end;

theorem
     for f being Function of the Instructions of SCM+FSA,
                         the Instructions of SCM+FSA
  st f = (id the Instructions of SCM+FSA) +* (halt SCM+FSA .--> i)
 for s being programmed FinPartState of SCM+FSA
 holds IncAddr(f*s,n) =
  ((id the Instructions of SCM+FSA) +* (halt SCM+FSA .--> IncAddr(i,n)))*
               IncAddr(s,n)
proof
 let f be Function of the Instructions of SCM+FSA,
                      the Instructions of SCM+FSA such that
A1: f = (id the Instructions of SCM+FSA) +* (halt SCM+FSA .--> i);
A2: dom(halt SCM+FSA .--> IncAddr(i,n)) = {halt SCM+FSA}
                 by FUNCOP_1:19;
A3: dom(halt SCM+FSA .--> i) = {halt SCM+FSA} by FUNCOP_1:19;
A4: rng(halt SCM+FSA .--> IncAddr(i,n)) = {IncAddr(i,n)}
                 by FUNCOP_1:14;
A5: dom(id the Instructions of SCM+FSA) = the Instructions of SCM+FSA
                    by RELAT_1:71;
A6: dom((id the Instructions of SCM+FSA) +*
          (halt SCM+FSA .--> IncAddr(i,n)))
      = dom(id the Instructions of SCM+FSA) \/ {halt SCM+FSA}
                   by A2,FUNCT_4:def 1
     .= the Instructions of SCM+FSA by A5,ZFMISC_1:46;
A7: rng(id the Instructions of SCM+FSA) = the Instructions of SCM+FSA
                    by RELAT_1:71;
A8:  rng((id the Instructions of SCM+FSA) +*
          (halt SCM+FSA .--> IncAddr(i,n)))
      c= rng(id the Instructions of SCM+FSA) \/ {IncAddr(i,n)}
                   by A4,FUNCT_4:18;
         rng(id the Instructions of SCM+FSA) \/ {IncAddr(i,n)}
      = the Instructions of SCM+FSA by A7,ZFMISC_1:46;
  then reconsider g = (id the Instructions of SCM+FSA) +*
                 (halt SCM+FSA .--> IncAddr(i,n)) as
      Function of the Instructions of SCM+FSA,the Instructions of SCM+FSA
            by A6,A8,FUNCT_2:def 1,RELSET_1:11;
 let s be programmed FinPartState of SCM+FSA;
A9: dom(g*IncAddr(s,n)) = dom IncAddr(s,n) by AMI_1:119;
A10: dom IncAddr(s,n) = dom s by Def6 .= dom(f*s) by AMI_1:119;
     now let m; assume
A11:  insloc m in dom(f*s);
then A12: insloc m in dom s by AMI_1:119;
  per cases;
  suppose
A13:   s.insloc m = halt SCM+FSA;
A14: IncAddr(s,n).insloc m = IncAddr(pi(s,insloc m),n) by A12,Th24
        .= IncAddr(halt SCM+FSA,n) by A12,A13,AMI_1:def 47
        .= halt SCM+FSA by Th8;
A15: halt SCM+FSA in {halt SCM+FSA} by TARSKI:def 1;
A16: pi(f*s,insloc m) = (f*s).insloc m by A11,AMI_1:def 47
       .= f.halt SCM+FSA by A12,A13,FUNCT_1:23
       .= (halt SCM+FSA .--> i).halt SCM+FSA by A1,A3,A15,FUNCT_4:14
       .= i by FUNCOP_1:87;
  thus (g*IncAddr(s,n)).insloc m
     = g.(IncAddr(s,n).insloc m) by A10,A11,FUNCT_1:23
    .= (halt SCM+FSA .--> IncAddr(i,n)).(IncAddr(s,n).insloc m)
               by A2,A14,A15,FUNCT_4:14
    .= IncAddr(pi(f*s,insloc m),n) by A14,A16,FUNCOP_1:87;
  end;
  suppose
A17:  s.insloc m <> halt SCM+FSA;
A18: pi(s,insloc m) = s.insloc m by A12,AMI_1:def 47;
then A19: InsCode pi(s,insloc m) <> 0 by A17,SCMFSA_2:122;
       InsCode IncAddr(pi(s,insloc m),n) = InsCode pi(s,insloc m) by Th22;
then A20: not IncAddr(pi(s,insloc m),n) in {halt SCM+FSA} by A19,SCMFSA_2:124
,TARSKI:def 1;
A21: not pi(s,insloc m) in {halt SCM+FSA} by A17,A18,TARSKI:def 1;
A22: pi(f*s,insloc m) = (f*s).insloc m by A11,AMI_1:def 47
           .= f.(s.insloc m) by A12,FUNCT_1:23
           .= (id the Instructions of SCM+FSA).pi(s,insloc m)
                       by A1,A3,A18,A21,FUNCT_4:12
           .= pi(s,insloc m) by FUNCT_1:35;
  thus (g*IncAddr(s,n)).insloc m
     = g.(IncAddr(s,n).insloc m) by A10,A11,FUNCT_1:23
    .= g.IncAddr(pi(s,insloc m),n) by A12,Def6
    .= (id the Instructions of SCM+FSA).IncAddr(pi(s,insloc m),n)
               by A2,A20,FUNCT_4:12
    .= IncAddr(pi(f*s,insloc m),n) by A22,FUNCT_1:35;
 end;
 end;
 hence IncAddr(f*s,n) =
  ((id the Instructions of SCM+FSA) +* (halt SCM+FSA .--> IncAddr(i,n)))*
               IncAddr(s,n) by A9,A10,Def6;
end;

theorem
     for I being programmed FinPartState of SCM+FSA
  holds IncAddr(IncAddr(I,m),n) = IncAddr(I,m+n)
proof let I be programmed FinPartState of SCM+FSA;
A1: dom IncAddr(IncAddr(I,m),n) = dom IncAddr(I,m) by Def6;
A2: dom IncAddr(I,m) = dom I by Def6;
      now let l; assume
A3:  insloc l in dom I;
then pi(IncAddr(I,m),insloc l) = IncAddr(I,m).insloc l by A2,AMI_1:def 47
            .= IncAddr(pi(I,insloc l),m) by A3,Th24;
   hence IncAddr(IncAddr(I,m),n).insloc l
            = IncAddr(IncAddr(pi(I,insloc l),m),n) by A2,A3,Th24
           .= IncAddr(pi(I,insloc l),m+n) by Th23;
  end;
 hence IncAddr(IncAddr(I,m),n) = IncAddr(I,m+n) by A1,A2,Def6;
end;

theorem
     for s being State of SCM+FSA
  holds Exec(IncAddr(CurInstr s,k),s +* Start-At (IC s + k))
      = Following(s) +* Start-At (IC Following(s) + k)
  proof
   let s be State of SCM+FSA;
   set INS = CurInstr s;
     consider m being Element of NAT such that
A1:     IC s = insloc m by SCMFSA_2:21;
     consider m1 being Element of NAT such that
A2:     IC s = insloc m1 & IC s + k = insloc(m1 + k) by Def1;

A3:  Next IC (s +* Start-At (IC s + k))
     = Next (insloc(m + k)) by A1,A2,AMI_1:111
    .= insloc((m + k) + 1) by SCMFSA_2:32
    .= insloc(m + 1 + k)
    .= insloc(m + 1) + k by Def1
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) + k by A1,SCMFSA_2:32
    .= IC (Exec(INS, s) +*
    Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                        by AMI_1:111;

A4:  now let d be Instruction-Location of SCM+FSA;
      thus Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by AMI_1:def 13
         .= s.d by AMI_1:112
         .= Exec(INS, s).d by AMI_1:def 13
         .= (Exec(INS, s) +*
       Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by AMI_1:112;
     end;
   A5: InsCode INS <= 11+1 by SCMFSA_2:35;
A6: InsCode INS <= 10+1 implies InsCode INS <=
 10 or InsCode INS = 11 by NAT_1:8;
A7: InsCode INS <= 9+1 implies InsCode INS <=
 8+1 or InsCode INS = 10 by NAT_1:8;
A8: InsCode INS <= 8+1 implies InsCode INS <=
 7+1 or InsCode INS = 9 by NAT_1:8;
    per cases by A5,A6,A7,A8,NAT_1:8,33;
    suppose InsCode INS = 0;
then A9: INS = halt SCM+FSA by SCMFSA_2:122;
then A10: Following(s) = Exec(halt SCM+FSA, s)
                .= s by AMI_1:def 8;
    thus Exec(IncAddr(CurInstr s,k),s +* Start-At (IC s + k))
          = Exec(halt SCM+FSA, s +* Start-At (IC s + k )) by A9,Th8
         .= Following(s) +* Start-At (IC Following(s) + k) by A10,AMI_1:def 8;

   end;
   suppose InsCode INS = 1;
     then consider da,db being Int-Location such that
A11:   INS = da := db by SCMFSA_2:54;
A12:   IncAddr(INS,k) = INS by A11,Th9;
A13:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A11,SCMFSA_2:89;

A14:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                by A3,A11,SCMFSA_2:89;
A15:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A11,A12,SCMFSA_2:89
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A11,SCMFSA_2:89
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A16:         da = d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).db by A11,SCMFSA_2:89
         .= s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A11,A16,SCMFSA_2:89
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     suppose
A17:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A11,SCMFSA_2:89
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A11,A17,SCMFSA_2:89
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
    hence thesis by A4,A12,A13,A14,A15,SCMFSA_2:86;
   end;
   suppose InsCode INS = 2;
     then consider da,db being Int-Location such that
A18:   INS = AddTo(da, db) by SCMFSA_2:55;
A19:   IncAddr(INS, k) = INS by A18,Th10;
A20:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                     .= Next IC s by A18,SCMFSA_2:90;

A21:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                     by A3,A18,SCMFSA_2:90;
A22:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A18,A19,SCMFSA_2:90
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A18,SCMFSA_2:90
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;

        now let d be Int-Location;
     per cases;
     suppose
A23:         da = d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da + (s +* Start-At (IC s + k)).db
                                                            by A18,SCMFSA_2:90
         .= s.da + (s +* Start-At (IC s + k)).db by SCMFSA_3:11
         .= s.da + s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A18,A23,SCMFSA_2:90
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     suppose
A24:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A18,SCMFSA_2:90
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A18,A24,SCMFSA_2:90
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
   hence thesis by A4,A19,A20,A21,A22,SCMFSA_2:86;
   end;
   suppose InsCode INS = 3;
     then consider da,db being Int-Location such that
A25:   INS = SubFrom(da, db) by SCMFSA_2:56;
A26:   IncAddr(INS, k) = INS by A25,Th11;
A27:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A25,SCMFSA_2:91;

A28:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
              by A3,A25,SCMFSA_2:91;

A29:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A25,A26,SCMFSA_2:91
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A25,SCMFSA_2:91
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
       now let d be Int-Location;
     per cases;
     suppose
A30:         da = d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da - (s +* Start-At (IC s + k)).db
                                                            by A25,SCMFSA_2:91
         .= s.da - (s +* Start-At (IC s + k)).db by SCMFSA_3:11
         .= s.da - s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A25,A30,SCMFSA_2:91
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     suppose
A31:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A25,SCMFSA_2:91
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A25,A31,SCMFSA_2:91
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
   hence thesis by A4,A26,A27,A28,A29,SCMFSA_2:86;
   end;
   suppose InsCode INS = 4;
     then consider da,db being Int-Location such that
A32:   INS = MultBy(da, db) by SCMFSA_2:57;
A33:   IncAddr(INS, k) = INS by A32,Th12;
A34:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A32,SCMFSA_2:92;

A35:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
              by A3,A32,SCMFSA_2:92;

A36:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A32,A33,SCMFSA_2:92
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A32,SCMFSA_2:92
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A37:         da = d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da * (s +* Start-At (IC s + k)).db
                                                            by A32,SCMFSA_2:92
         .= s.da * (s +* Start-At (IC s + k)).db by SCMFSA_3:11
         .= s.da * s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A32,A37,SCMFSA_2:92
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     suppose
A38:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A32,SCMFSA_2:92
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A32,A38,SCMFSA_2:92
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
   hence thesis by A4,A33,A34,A35,A36,SCMFSA_2:86;
   end;
   suppose InsCode INS = 5;
     then consider da,db being Int-Location such that
A39:   INS = Divide(da, db) by SCMFSA_2:58;
A40:   IncAddr(INS,k) = INS by A39,Th13;

A41:  now
      thus IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                           .= Next IC s by A39,SCMFSA_2:93;
    end;
A42:  now
         IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
             by A3,A39,SCMFSA_2:93;

     hence IC Exec(INS, s +* Start-At (IC s + k))
       = IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k));

    end;

A43:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A39,A40,SCMFSA_2:93
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A39,SCMFSA_2:93
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
       now let d be Int-Location;
   per cases;
   suppose
A44: da <> db;
    hereby per cases;
       suppose
A45:            da = d;
       hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da div (s +* Start-At (IC s + k)).db
                                                       by A39,A44,SCMFSA_2:93
         .= s.da div (s +* Start-At (IC s + k)).db by SCMFSA_3:11
         .= s.da div s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A39,A44,A45,SCMFSA_2:93
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
       end;
       suppose
A46:           db = d;
       hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da mod (s +* Start-At (IC s + k)).db
                                                       by A39,SCMFSA_2:93
         .= s.da mod (s +* Start-At (IC s + k)).db by SCMFSA_3:11
         .= s.da mod s.db by SCMFSA_3:11
         .= Exec(INS, s).d by A39,A46,SCMFSA_2:93
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
       end;
       suppose
A47:           (da <> d) & (db <> d);
       hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A39,SCMFSA_2:93
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A39,A47,SCMFSA_2:93
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;

    end;
    suppose
A48:        da = db;
    hereby per cases;

       suppose
A49:           da = d;
       hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).da mod (s +* Start-At (IC s + k)).da
                                                   by A39,A48,SCMFSA_2:94
         .= s.da mod (s +* Start-At (IC s + k)).da by SCMFSA_3:11
         .= s.da mod s.da by SCMFSA_3:11
         .= Exec(INS, s).d by A39,A48,A49,SCMFSA_2:94
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;

       end;
       suppose
A50:           da <> d;
       hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A39,A48,SCMFSA_2:94
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A39,A48,A50,SCMFSA_2:94
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
      end;
      end;
   end;
   end;
  hence thesis by A4,A40,A41,A42,A43,SCMFSA_2:86;

  end;
  suppose InsCode INS = 6;
     then consider loc being Instruction-Location of SCM+FSA such that
A51:   INS = goto loc by SCMFSA_2:59;
A52:   IncAddr(INS, k) = goto (loc + k) by A51,Th14;
A53:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= loc by A51,SCMFSA_2:95;

A54:   IC Exec(IncAddr(INS, k), s +* Start-At (IC s + k))
      = Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).IC SCM+FSA
     .= loc + k by A52,SCMFSA_2:95
     .= IC (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)) by A53,AMI_1:111;

A55:  now let d be Int-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A52,SCMFSA_2:95
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A51,SCMFSA_2:95
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:11;
     end;
A56:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A52,SCMFSA_2:95
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A51,SCMFSA_2:95
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
            by SCMFSA_3:12;
     end;

         now let d be Instruction-Location of SCM+FSA;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
         = (s +* Start-At (IC s + k)).d by AMI_1:def 13
        .= s.d by AMI_1:112
        .= Exec(INS, s).d by AMI_1:def 13
        .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d by AMI_1:112;
     end;
    hence thesis by A54,A55,A56,SCMFSA_2:86;

    end;
    suppose InsCode INS = 7;
     then consider loc being Instruction-Location of SCM+FSA,
              da  being Int-Location such that
A57:   INS = da=0_goto loc by SCMFSA_2:60;
A58:   IncAddr(INS, k) = da=0_goto (loc + k) by A57,Th15;

         now per cases;
       suppose
A59:           s.da=0;
then A60:        (s +* Start-At(IC s + k)).da=0 by SCMFSA_3:11;
A61:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= loc by A57,A59,SCMFSA_2:96;

A62:   IC Exec(IncAddr(INS, k), s +* Start-At (IC s + k))
       = Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).IC SCM+FSA
      .= loc + k by A58,A60,SCMFSA_2:96
      .= IC (Exec(INS,s) +* Start-At (IC Exec(INS, s) + k)) by A61,AMI_1:111;

A63:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A57,SCMFSA_2:96
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
A64:   now let d be Int-Location;
      thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A57,SCMFSA_2:96
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:11;
      end;

          now let d be Instruction-Location of SCM+FSA;
      thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
         = (s +* Start-At (IC s + k)).d by AMI_1:def 13
        .= s.d by AMI_1:112
        .= Exec(INS, s).d by AMI_1:def 13
        .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d by AMI_1:112;
     end;
   hence Exec(IncAddr(INS, k), s +* Start-At (IC s + k))
         = Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)
                                     by A62,A63,A64,SCMFSA_2:86;

      end;
      suppose
A65:         s.da<>0;
then A66:        (s +* Start-At(IC s + k)).da<>0 by SCMFSA_3:11;
A67:    IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                       .= Next IC s by A57,A65,SCMFSA_2:96;
A68:   IC Exec(IncAddr(INS, k), s +* Start-At (IC s + k))
       = Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).IC SCM+FSA
      .= IC (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)) by A3,A58,A66,A67,
SCMFSA_2:96;

A69:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A57,SCMFSA_2:96
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
A70:   now let d be Int-Location;
      thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A57,SCMFSA_2:96
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:11;
      end;

          now let d be Instruction-Location of SCM+FSA;
      thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by AMI_1:def 13
         .= s.d by AMI_1:112
         .= Exec(INS, s).d by AMI_1:def 13
          .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
            by AMI_1:112;
      end;

     hence Exec(IncAddr(INS, k), s +* Start-At (IC s + k))
          = (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k))
                                     by A68,A69,A70,SCMFSA_2:86;
     end;
     end;
    hence thesis;

    end;
    suppose InsCode INS = 8;
     then consider loc being Instruction-Location of SCM+FSA,
              da  being Int-Location such that
A71:   INS = da>0_goto loc by SCMFSA_2:61;
         now per cases;
       suppose
A72:           s.da > 0;
then A73:        (s +* Start-At(IC s + k)).da > 0 by SCMFSA_3:11;

A74:    IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                       .= loc by A71,A72,SCMFSA_2:97;

A75:    IC Exec(da>0_goto (loc + k), s +* Start-At (IC s + k))
       = Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).IC SCM+FSA
      .= loc + k by A73,SCMFSA_2:97
      .= IC (Exec(INS,s) +* Start-At (IC Exec(INS, s) + k)) by A74,AMI_1:111;

A76:  now let d be FinSeq-Location;
     thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by SCMFSA_2:97
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A71,SCMFSA_2:97
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;

A77:  now let d be Int-Location;
     thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
        = (s +* Start-At (IC s + k)).d by SCMFSA_2:97
       .= s.d by SCMFSA_3:11
       .= Exec(INS, s).d by A71,SCMFSA_2:97
       .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
         by SCMFSA_3:11;
      end;

          now let d be Instruction-Location of SCM+FSA;
      thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
         = (s +* Start-At (IC s + k)).d by AMI_1:def 13
        .= s.d by AMI_1:112
        .= Exec(INS, s).d by AMI_1:def 13
        .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d by AMI_1:112;
     end;

    hence Exec(da>0_goto (loc + k), s +* Start-At (IC s + k))
        = Exec(INS,s) +* Start-At (IC Exec(INS, s) + k)
                                            by A75,A76,A77,SCMFSA_2:86;

      end;
      suppose
A78:         s.da <= 0;
then A79:        (s +* Start-At(IC s + k)).da <= 0 by SCMFSA_3:11;
A80:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A71,A78,SCMFSA_2:97;

A81:   IC Exec(da>0_goto (loc + k), s +* Start-At (IC s + k))
       = Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).IC SCM+FSA
      .= IC (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)) by A3,A79,A80,
SCMFSA_2:97;

A82:  now let d be FinSeq-Location;
     thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by SCMFSA_2:97
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A71,SCMFSA_2:97
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
A83:   now let d be Int-Location;
      thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by SCMFSA_2:97
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A71,SCMFSA_2:97
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
            by SCMFSA_3:11;
      end;

          now let d be Instruction-Location of SCM+FSA;
      thus Exec(da>0_goto (loc + k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by AMI_1:def 13
         .= s.d by AMI_1:112
         .= Exec(INS, s).d by AMI_1:def 13
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d by AMI_1:112;
      end;

     hence Exec(da>0_goto (loc + k), s +* Start-At (IC s + k))
         = Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)
                by A81,A82,A83,SCMFSA_2:86;
     end;
     end;
    hence thesis by A71,Th16;
   end;
   suppose InsCode INS = 9;
     then consider db,da being Int-Location, f being FinSeq-Location such that
A84:   INS = da :=(f, db) by SCMFSA_2:62;
A85:   IncAddr(INS,k) = INS by A84,Th17;
A86:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A84,SCMFSA_2:98;

A87:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                by A3,A84,SCMFSA_2:98;
A88:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A84,A85,SCMFSA_2:98
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A84,SCMFSA_2:98
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     consider m being Element of NAT such that
A89:   m = abs(s.db) and
A90:   Exec(INS, s).da = (s.f)/.m by A84,SCMFSA_2:98;
     consider m' being Element of NAT such that
A91:   m' = abs((s +* Start-At (IC s + k)).db) and
A92:   Exec(INS,s +* Start-At (IC s + k)).da
           = ((s +* Start-At (IC s + k)).f)/.m' by A84,SCMFSA_2:98;
     per cases;
     suppose
A93:         da = d;
          (s +* Start-At (IC s + k)).db = s.db by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s.f)/.m by A89,A91,A92,A93,SCMFSA_3:12
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by A90,A93,SCMFSA_3:11;
     end;
     suppose
A94:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A84,SCMFSA_2:98
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A84,A94,SCMFSA_2:98
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
    hence thesis by A4,A85,A86,A87,A88,SCMFSA_2:86;

   end;
   suppose InsCode INS = 10;
     then consider db,da being Int-Location, f being FinSeq-Location such that
A95:   INS = (f, db):=da by SCMFSA_2:63;
A96:   IncAddr(INS,k) = INS by A95,Th18;
A97:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A95,SCMFSA_2:99;

A98:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                by A3,A95,SCMFSA_2:99;
A99:  now let d be Int-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A95,A96,SCMFSA_2:99
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A95,SCMFSA_2:99
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:11;
     end;
        now let g be FinSeq-Location;
     consider m being Element of NAT such that
A100:   m = abs(s.db) and
A101:   Exec(INS, s).f = s.f+*(m,s.da) by A95,SCMFSA_2:99;
     consider m' being Element of NAT such that
A102:   m' = abs((s +* Start-At (IC s + k)).db) and
A103:   Exec(INS,s +* Start-At (IC s + k)).f
           = (s +* Start-At (IC s + k)).f
             +*(m',(s +* Start-At (IC s + k)).da) by A95,SCMFSA_2:99;
     per cases;
     suppose
A104:         f = g;
A105:    (s +* Start-At (IC s + k)).f = s.f by SCMFSA_3:12;
          (s +* Start-At (IC s + k)).db = s.db by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s + k)).g
          = s.f+*(m,s.da) by A100,A102,A103,A104,A105,SCMFSA_3:11
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).g
                                                    by A101,A104,SCMFSA_3:12;
     end;
     suppose
A106:         f <> g;
     hence Exec(INS, s +* Start-At (IC s + k)).g
          = (s +* Start-At (IC s + k)).g by A95,SCMFSA_2:99
         .= s.g by SCMFSA_3:12
         .= Exec(INS, s).g by A95,A106,SCMFSA_2:99
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).g
                                                      by SCMFSA_3:12;
     end;
     end;
    hence thesis by A4,A96,A97,A98,A99,SCMFSA_2:86;

   end;
   suppose InsCode INS = 11;
     then consider da being Int-Location, f being FinSeq-Location such that
A107:   INS = da :=len f by SCMFSA_2:64;
A108:   IncAddr(INS,k) = INS by A107,Th19;
A109:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A107,SCMFSA_2:100;

A110:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                by A3,A107,SCMFSA_2:100;
A111:  now let d be FinSeq-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A107,A108,SCMFSA_2:100
         .= s.d by SCMFSA_3:12
         .= Exec(INS, s).d by A107,SCMFSA_2:100
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A112:         da = d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = len((s +* Start-At (IC s + k)).f) by A107,SCMFSA_2:100
         .= len(s.f) by SCMFSA_3:12
         .= Exec(INS, s).d by A107,A112,SCMFSA_2:100
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     suppose
A113:         da <> d;
     hence Exec(INS, s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A107,SCMFSA_2:100
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A107,A113,SCMFSA_2:100
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).d
                                                      by SCMFSA_3:11;
     end;
     end;
    hence thesis by A4,A108,A109,A110,A111,SCMFSA_2:86;

   end;
   suppose InsCode INS = 12;
     then consider da being Int-Location, f being FinSeq-Location such that
A114:   INS = f:=<0,...,0>da by SCMFSA_2:65;
A115:   IncAddr(INS,k) = INS by A114,Th20;
A116:   IC Exec(INS, s) = Exec(INS, s).IC SCM+FSA
                      .= Next IC s by A114,SCMFSA_2:101;

A117:   IC Exec(INS, s +* Start-At (IC s + k))
      = Exec(INS, s +* Start-At (IC s + k)).IC SCM+FSA
     .= IC (Exec(INS, s) +*
         Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k))
                by A3,A114,SCMFSA_2:101;
A118:  now let d be Int-Location;
     thus Exec(IncAddr(INS, k), s +* Start-At (IC s + k)).d
          = (s +* Start-At (IC s + k)).d by A114,A115,SCMFSA_2:101
         .= s.d by SCMFSA_3:11
         .= Exec(INS, s).d by A114,SCMFSA_2:101
         .= (Exec(INS, s) +* Start-At (IC Exec(INS, s) + k)).d
           by SCMFSA_3:11;
     end;
        now let g be FinSeq-Location;
     consider m being Element of NAT such that
A119:   m = abs(s.da) and
A120:   Exec(INS, s).f = m |-> 0 by A114,SCMFSA_2:101;
     consider m' being Element of NAT such that
A121:   m' = abs((s +* Start-At (IC s + k)).da) and
A122:   Exec(INS,s +* Start-At (IC s + k)).f = m' |-> 0 by A114,SCMFSA_2:101;
     per cases;
     suppose
A123:         f = g;
          (s +* Start-At (IC s + k)).da = s.da by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s + k)).g
          = (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).g
                        by A119,A120,A121,A122,A123,SCMFSA_3:12;
     end;
     suppose
A124:         f <> g;
     hence Exec(INS, s +* Start-At (IC s + k)).g
          = (s +* Start-At (IC s + k)).g by A114,SCMFSA_2:101
         .= s.g by SCMFSA_3:12
         .= Exec(INS, s).g by A114,A124,SCMFSA_2:101
         .= (Exec(INS, s) +*
            Start-At (((Next IC s) qua Instruction-Location of SCM+FSA) + k)).g
                                                      by SCMFSA_3:12;
     end;
     end;
    hence thesis by A4,A115,A116,A117,A118,SCMFSA_2:86;

  end;
  end;

theorem
     for INS being Instruction of SCM+FSA,
     s being State of SCM+FSA,
     p being FinPartState of SCM+FSA,
     i, j, k being Element of NAT
  st IC s = insloc(j+k)
 holds Exec(INS, s +* Start-At (IC s -' k))
     = Exec(IncAddr(INS, k), s) +* Start-At (IC Exec(IncAddr(INS,k), s) -' k)
 proof
  let INS be Instruction of SCM+FSA,
        s be State of SCM+FSA,
        p be FinPartState of SCM+FSA,
        i, j, k be Element of NAT;
  assume
A1: IC s = insloc(j+k);
then A2: Next (IC s -' k)
    = Next (insloc j + k -' k) by Def1
   .= Next (insloc j) by Th4
   .= insloc(j+1) by SCMFSA_2:32
   .= insloc(j+1) + k -' k by Th4
   .= insloc(j+1+k) -' k by Def1
   .= insloc(j+k+1) -' k
   .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k
           by A1,SCMFSA_2:32;

A3: now let d be Instruction-Location of SCM+FSA;
      thus Exec(INS, s +* Start-At (IC s -' k)).d
         = (s +* Start-At (IC s -' k)).d by AMI_1:def 13
        .= s.d by AMI_1:112
        .= Exec(IncAddr(INS, k), s).d by AMI_1:def 13
        .= (Exec(IncAddr(INS, k), s)
           +* Start-At (IC Exec(IncAddr(INS,k), s) -' k)).d by AMI_1:112;
     end;

   A4: InsCode INS <= 11+1 by SCMFSA_2:35;
A5: InsCode INS <= 10+1 implies InsCode INS <=
 10 or InsCode INS = 11 by NAT_1:8;
A6: InsCode INS <= 9+1 implies InsCode INS <=
 8+1 or InsCode INS = 10 by NAT_1:8;
A7: InsCode INS <= 8+1 implies InsCode INS <=
 7+1 or InsCode INS = 9 by NAT_1:8;
    per cases by A4,A5,A6,A7,NAT_1:8,33;

 suppose InsCode INS = 0;
then A8: INS = halt SCM+FSA by SCMFSA_2:122;
A9: IncAddr (halt SCM+FSA, k) = halt SCM+FSA by Th8;

 thus Exec(INS, s +* Start-At (IC s -' k))
    = s +* Start-At (IC s -' k) by A8,AMI_1:def 8
   .= s +* Start-At (IC Exec(IncAddr(INS,k), s) -' k)
     by A8,A9,AMI_1:def 8
   .= Exec(IncAddr(INS, k), s) +* Start-At (IC Exec(IncAddr(INS,k), s) -' k)
                                         by A8,A9,AMI_1:def 8;

 end;
 suppose InsCode INS = 1;
    then consider da,db being Int-Location such that
A10: INS = da := db by SCMFSA_2:54;
A11: IncAddr(INS, k) = da := db by A10,Th9;
then A12: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:89;

A13: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A10,SCMFSA_2:89
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A12
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                         by AMI_1:111;
A14: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A10,SCMFSA_2:89
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A11,SCMFSA_2:89
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A15:         da = d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).db by A10,SCMFSA_2:89
         .= s.db by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A11,A15,SCMFSA_2:89
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     suppose
A16:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A10,SCMFSA_2:89
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A11,A16,SCMFSA_2:89
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
   hence thesis by A3,A13,A14,SCMFSA_2:86;

 end;
 suppose InsCode INS = 2;
    then consider da,db being Int-Location such that
A17:  INS = AddTo(da, db) by SCMFSA_2:55;
A18:  IncAddr(INS, k) = AddTo(da, db) by A17,Th10;
then A19:  Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:90;

A20: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A17,SCMFSA_2:90
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A19
  .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                              by AMI_1:111;
A21: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A17,SCMFSA_2:90
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A18,SCMFSA_2:90
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A22:         da = d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).da
            + (s +* Start-At (IC s -' k)).db by A17,SCMFSA_2:90
         .= s.da + (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
         .= s.da + s.db by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A18,A22,SCMFSA_2:90
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     suppose
A23:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A17,SCMFSA_2:90
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A18,A23,SCMFSA_2:90
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
    hence thesis by A3,A20,A21,SCMFSA_2:86;

 end;
 suppose InsCode INS = 3;
     then consider da,db being Int-Location such that
A24:   INS = SubFrom(da, db) by SCMFSA_2:56;
A25:   IncAddr(INS, k) = SubFrom(da, db) by A24,Th11;
then A26:   Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:91;

A27: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A24,SCMFSA_2:91
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A26
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                          by AMI_1:111;
A28: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A24,SCMFSA_2:91
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A25,SCMFSA_2:91
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A29:         da = d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).da
            - (s +* Start-At (IC s -' k)).db by A24,SCMFSA_2:91
         .= s.da - (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
         .= s.da - s.db by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A25,A29,SCMFSA_2:91
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     suppose
A30:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A24,SCMFSA_2:91
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A25,A30,SCMFSA_2:91
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
    hence thesis by A3,A27,A28,SCMFSA_2:86;

 end;
 suppose InsCode INS = 4;
     then consider da,db being Int-Location such that
A31:   INS = MultBy(da, db) by SCMFSA_2:57;
A32:   IncAddr(INS, k) = MultBy(da, db) by A31,Th12;
then A33:   Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:92;

A34: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A31,SCMFSA_2:92
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A33
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                           by AMI_1:111;
A35: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A31,SCMFSA_2:92
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A32,SCMFSA_2:92
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
         now let d be Int-Location;
     per cases;
     suppose
A36:         da = d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).da
            * (s +* Start-At (IC s -' k)).db by A31,SCMFSA_2:92
         .= s.da * (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
         .= s.da * s.db by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A32,A36,SCMFSA_2:92
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     suppose
A37:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A31,SCMFSA_2:92
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A32,A37,SCMFSA_2:92
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
    hence thesis by A3,A34,A35,SCMFSA_2:86;

 end;
 suppose InsCode INS = 5;
     then consider da,db being Int-Location such that
A38:   INS = Divide(da, db) by SCMFSA_2:58;
A39:   IncAddr(INS, k) = Divide(da, db) by A38,Th13;

        now per cases;
     suppose
A40:          da <> db;
A41: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by A39,SCMFSA_2:93;
A42: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A38,SCMFSA_2:93
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A41
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                           by AMI_1:111;
A43:  now let d be FinSeq-Location;
       thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A38,SCMFSA_2:93
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS,k), s).d by A39,SCMFSA_2:93
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
      per cases;
       suppose
A44:            da = d;
       hence Exec(INS, s +* Start-At (IC s -' k)).d
        = (s +* Start-At(IC s -' k)).da div (s +* Start-At(IC s -' k)).db
                                                         by A38,A40,SCMFSA_2:93
       .= s.da div (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
       .= s.da div s.db by SCMFSA_3:11
       .= Exec(IncAddr(INS,k), s).d by A39,A40,A44,SCMFSA_2:93
       .= (Exec(IncAddr(INS,k), s) +*
               Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
        end;
        suppose
A45:           db = d;
       hence Exec(INS, s +* Start-At (IC s -' k)).d
      = (s +* Start-At (IC s -' k)).da mod (s +* Start-At (IC s -' k)).db
                                                    by A38,SCMFSA_2:93
         .= s.da mod (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
         .= s.da mod s.db by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A39,A45,SCMFSA_2:93
         .= (Exec(IncAddr(INS,k), s) +*
                Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
        end;
        suppose
A46:           (da <> d) & (db <> d);
       hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A38,SCMFSA_2:93
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A39,A46,SCMFSA_2:93
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
   hence Exec(INS, s +* Start-At (IC s -' k))
       = Exec(IncAddr(INS,k), s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k)
                                      by A3,A42,A43,SCMFSA_2:86;
     end;
     suppose
A47:       da = db;
then A48:  Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by A39,SCMFSA_2:94;
A49: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A38,A47,SCMFSA_2:94
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A48
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                              by AMI_1:111;
A50:  now let d be FinSeq-Location;
       thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A38,A47,SCMFSA_2:94
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS,k), s).d by A39,A47,SCMFSA_2:94
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
      per cases;
       suppose
A51:            da = d;
       hence Exec(INS, s +* Start-At (IC s -' k)).d
        = (s +* Start-At(IC s -' k)).da mod (s +* Start-At(IC s -' k)).db
                                                         by A38,A47,SCMFSA_2:94
       .= s.da mod (s +* Start-At (IC s -' k)).db by SCMFSA_3:11
       .= s.da mod s.db by SCMFSA_3:11
       .= Exec(IncAddr(INS,k), s).d by A39,A47,A51,SCMFSA_2:94
       .= (Exec(IncAddr(INS,k), s) +*
                Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
       end;
       suppose
A52:           da <> d;
       hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A38,A47,SCMFSA_2:94
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A39,A47,A52,SCMFSA_2:94
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
    hence Exec(INS, s +* Start-At (IC s -' k))
        = Exec(IncAddr(INS,k), s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k)
                                     by A3,A49,A50,SCMFSA_2:86;
    end;
    end;
   hence thesis;

 end;
 suppose InsCode INS = 6;
  then consider loc being Instruction-Location of SCM+FSA such that
A53:  INS = goto loc by SCMFSA_2:59;
A54:  IncAddr(INS, k) = goto (loc + k) by A53,Th14;
A55:  IC Exec(IncAddr(INS,k), s)=Exec(IncAddr(INS,k), s).IC SCM+FSA
                              .= loc + k by A54,SCMFSA_2:95;
A56:  IC Exec(INS, s +* Start-At (IC s -' k))
      = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
     .= loc by A53,SCMFSA_2:95
     .= IC Exec(IncAddr(INS,k), s) -' k by A55,Th4
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                       by AMI_1:111;
A57: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A53,SCMFSA_2:95
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A54,SCMFSA_2:95
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
       now let d be Int-Location;
    thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A53,SCMFSA_2:95
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A54,SCMFSA_2:95
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
   end;
 hence thesis by A3,A56,A57,SCMFSA_2:86;

 end;
 suppose InsCode INS = 7;
  then consider loc being Instruction-Location of SCM+FSA,
            da being Int-Location such that
A58:   INS = da=0_goto loc by SCMFSA_2:60;
A59:   IncAddr(INS, k) = da=0_goto (loc + k) by A58,Th15;

A60: now per cases;
   suppose
A61:  s.da = 0;
then A62: (s +* Start-At (IC s -' k)).da = 0 by SCMFSA_3:11;
A63: IC Exec(IncAddr(INS,k), s)=Exec(IncAddr(INS,k), s).IC SCM+FSA
                             .= loc + k by A59,A61,SCMFSA_2:96;
        IC Exec(INS, s +* Start-At (IC s -' k))
       = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
      .= loc by A58,A62,SCMFSA_2:96
      .= IC Exec(IncAddr(INS,k), s) -' k by A63,Th4
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                               by AMI_1:111;
 hence IC Exec(INS, s +* Start-At (IC s -' k))
     = IC(Exec(IncAddr(INS,k),s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k));

    end;
    suppose
A64:  s.da <> 0;
then A65: (s +* Start-At (IC s -' k)).da <> 0 by SCMFSA_3:11;
A66:   Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by A59,A64,SCMFSA_2:96;
         IC Exec(INS, s +* Start-At (IC s -' k))
       = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
      .= Next IC (s +* Start-At (IC s -' k)) by A58,A65,SCMFSA_2:96
      .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
      .= IC Exec(IncAddr(INS,k), s) -' k by A66
 .= IC(Exec(IncAddr(INS,k),s) +* Start-At(IC Exec(IncAddr(INS,k),s) -' k))
                                                by AMI_1:111;
 hence IC Exec(INS, s +* Start-At (IC s -' k))
     = IC(Exec(IncAddr(INS,k),s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k));
  end;
  end;

A67: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A59,SCMFSA_2:96
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
       now let d be Int-Location;
    thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A58,SCMFSA_2:96
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A59,SCMFSA_2:96
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
    end;
   hence thesis by A3,A60,A67,SCMFSA_2:86;

 end;
 suppose InsCode INS = 8;
  then consider loc being Instruction-Location of SCM+FSA,
           da being Int-Location such that
A68:   INS = da>0_goto loc by SCMFSA_2:61;
A69:   IncAddr(INS, k) = da>0_goto (loc + k) by A68,Th16;

A70: now per cases;
   suppose
A71:   s.da > 0;
then A72: (s +* Start-At (IC s -' k)).da > 0 by SCMFSA_3:11;
A73:  IC Exec(IncAddr(INS,k), s)=Exec(IncAddr(INS,k), s).IC SCM+FSA
                              .= loc + k by A69,A71,SCMFSA_2:97;

        IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= loc by A68,A72,SCMFSA_2:97
    .= IC Exec(IncAddr(INS,k), s) -' k by A73,Th4
.= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                          by AMI_1:111;
 hence IC Exec(INS, s +* Start-At (IC s -' k))
     = IC (Exec(IncAddr(INS,k),s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k));

   end;
   suppose
A74:  s.da <= 0;
then A75: (s +* Start-At (IC s -' k)).da <= 0 by SCMFSA_3:11;
A76:   Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by A69,A74,SCMFSA_2:97;

        IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A68,A75,SCMFSA_2:97
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A76
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                by AMI_1:111;
 hence IC Exec(INS, s +* Start-At (IC s -' k))
     = IC (Exec(IncAddr(INS,k),s) +* Start-At(IC Exec(IncAddr(INS,k),s)-'k));
   end;
   end;

A77: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A68,SCMFSA_2:97
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A69,SCMFSA_2:97
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
       now let d be Int-Location;
    thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A68,SCMFSA_2:97
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS,k), s).d by A69,SCMFSA_2:97
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
   end;
 hence thesis by A3,A70,A77,SCMFSA_2:86;
 end;
 suppose InsCode INS = 9;
    then consider db,da being Int-Location, f being FinSeq-Location such that
A78: INS = da := (f,db) by SCMFSA_2:62;
A79: IncAddr(INS, k) = da := (f,db) by A78,Th17;
then A80: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:98;

A81: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A78,SCMFSA_2:98
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A80
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                         by AMI_1:111;
A82: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A78,SCMFSA_2:98
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A79,SCMFSA_2:98
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A83:         da = d;
     consider m being Element of NAT such that
A84:   m = abs(s.db) and
A85:   Exec(IncAddr(INS,k), s).da = (s.f)/.m by A79,SCMFSA_2:98;
     consider m' being Element of NAT such that
A86:   m' = abs((s +* Start-At (IC s -' k)).db) and
A87:   Exec(INS,s +* Start-At (IC s -' k)).da
           = ((s +* Start-At (IC s -' k)).f)/.m' by A78,SCMFSA_2:98;
          (s +* Start-At (IC s -' k)).db = s.db by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s.f)/.m by A83,A84,A86,A87,SCMFSA_3:12
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d
              by A83,A85,SCMFSA_3:11;
     end;
     suppose
A88:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A78,SCMFSA_2:98
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A79,A88,SCMFSA_2:98
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
   hence thesis by A3,A81,A82,SCMFSA_2:86;

 end;
 suppose InsCode INS = 10;
    then consider db,da being Int-Location, f being FinSeq-Location such that
A89: INS = (f,db):= da by SCMFSA_2:63;
A90: IncAddr(INS, k) = (f,db):=da by A89,Th18;
then A91: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:99;

A92: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A89,SCMFSA_2:99
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A91
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                         by AMI_1:111;
A93: now let d be Int-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A89,SCMFSA_2:99
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A90,SCMFSA_2:99
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
        now let d be FinSeq-Location;
     per cases;
     suppose
A94:         f = d;
     consider m being Element of NAT such that
A95:   m = abs(s.db) and
A96:   Exec(IncAddr(INS,k), s).f = s.f+*(m,s.da) by A90,SCMFSA_2:99;
     consider m' being Element of NAT such that
A97:   m' = abs((s +* Start-At (IC s -' k)).db) and
A98:   Exec(INS,s +* Start-At (IC s -' k)).f
           = (s +* Start-At (IC s -' k)).f
              +*(m',(s +* Start-At (IC s -' k)).da) by A89,SCMFSA_2:99;
A99:    (s +* Start-At (IC s -' k)).da = s.da by SCMFSA_3:11;
          (s +* Start-At (IC s -' k)).db = s.db by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = s.f+*(m,s.da) by A94,A95,A97,A98,A99,SCMFSA_3:12
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d
              by A94,A96,SCMFSA_3:12;
     end;
     suppose
A100:         f <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A89,SCMFSA_2:99
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A90,A100,SCMFSA_2:99
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
     end;
   hence thesis by A3,A92,A93,SCMFSA_2:86;

 end;
 suppose InsCode INS = 11;
    then consider da being Int-Location, f being FinSeq-Location such that
A101: INS = da :=len f by SCMFSA_2:64;
A102: IncAddr(INS, k) = da :=len f by A101,Th19;
then A103: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:100;

A104: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A101,SCMFSA_2:100
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A103
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                         by AMI_1:111;
A105: now let d be FinSeq-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A101,SCMFSA_2:100
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A102,SCMFSA_2:100
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
        now let d be Int-Location;
     per cases;
     suppose
A106:         da = d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = len((s +* Start-At (IC s -' k)).f) by A101,SCMFSA_2:100
         .= len(s.f) by SCMFSA_3:12
         .= Exec(IncAddr(INS,k), s).d by A102,A106,SCMFSA_2:100
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     suppose
A107:         da <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A101,SCMFSA_2:100
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A102,A107,SCMFSA_2:100
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
     end;
   hence thesis by A3,A104,A105,SCMFSA_2:86;

 end;
 suppose InsCode INS = 12;
    then consider da being Int-Location, f being FinSeq-Location such that
A108: INS = f:=<0,...,0> da by SCMFSA_2:65;
A109: IncAddr(INS, k) = f:=<0,...,0>da by A108,Th20;
then A110: Exec(IncAddr(INS,k), s).IC SCM+FSA = Next IC s by SCMFSA_2:101;

A111: IC Exec(INS, s +* Start-At (IC s -' k))
     = Exec(INS, s +* Start-At (IC s -' k)).IC SCM+FSA
    .= Next IC (s +* Start-At (IC s -' k)) by A108,SCMFSA_2:101
    .= ((Next IC s) qua Instruction-Location of SCM+FSA) -' k by A2,AMI_1:111
    .= IC Exec(IncAddr(INS,k), s) -' k by A110
 .= IC (Exec(IncAddr(INS,k),s) +* Start-At (IC Exec(IncAddr(INS,k),s) -' k))
                                                         by AMI_1:111;
A112: now let d be Int-Location;
     thus Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A108,SCMFSA_2:101
         .= s.d by SCMFSA_3:11
         .= Exec(IncAddr(INS, k), s).d by A109,SCMFSA_2:101
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:11;
     end;
        now let d be FinSeq-Location;
     per cases;
     suppose
A113:         f = d;
     consider m being Element of NAT such that
A114:   m = abs(s.da) and
A115:   Exec(IncAddr(INS,k), s).f = m |-> 0 by A109,SCMFSA_2:101;
     consider m' being Element of NAT such that
A116:   m' = abs((s +* Start-At (IC s -' k)).da) and
A117:   Exec(INS,s +* Start-At (IC s -' k)).f
           = m' |-> 0 by A108,SCMFSA_2:101;
         (s +* Start-At (IC s -' k)).da = s.da by SCMFSA_3:11;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by A113,A114,A115
,A116,A117,SCMFSA_3:12;
     end;
     suppose
A118:         f <> d;
     hence Exec(INS, s +* Start-At (IC s -' k)).d
          = (s +* Start-At (IC s -' k)).d by A108,SCMFSA_2:101
         .= s.d by SCMFSA_3:12
         .= Exec(IncAddr(INS, k), s).d by A109,A118,SCMFSA_2:101
         .= (Exec(IncAddr(INS,k), s) +*
             Start-At (IC Exec(IncAddr(INS,k),s) -' k)).d by SCMFSA_3:12;
     end;
     end;
   hence thesis by A3,A111,A112,SCMFSA_2:86;
end;
end;

begin :: Shifting the finite partial state

definition
 let p be FinPartState of SCM+FSA , k be Element of NAT;
 func Shift(p,k) -> programmed FinPartState of SCM+FSA means
:Def7:
 dom it = { insloc(m+k):insloc m in dom p } &
 for m st insloc m in dom p holds it.insloc(m+k) = p.insloc m;

 existence
  proof
   deffunc U(Element of NAT) = insloc $1;
   deffunc V(Element of NAT) = insloc($1+k);
   set A = { V(m): U(m) in dom p };
   defpred P [set,set] means ex m st $1 = insloc(m+k) & $2 = p.insloc m;
   A1:for e being set st e in A ex u being set st P[e,u]
    proof
     let e be set;
     assume e in A;
     then consider m such that A2: e = V(m) & U(m) in dom p;
     take p.insloc m;
     thus thesis by A2;
    end;
   consider f being Function such that
A3:  dom f = A and
A4:  for e being set st e in A holds P[e,f.e] from CLASSES1:sch 1(A1);

A5: A c= the Instruction-Locations of SCM+FSA
      proof
       let x be set;
       assume x in A;
       then ex m st x = insloc(m+k) & insloc m in dom p;
       hence x in the Instruction-Locations of SCM+FSA;
      end;
         then A c= the carrier of SCM+FSA by XBOOLE_1:1;
then A6:  dom f c= dom the Object-Kind of SCM+FSA by A3,FUNCT_2:def 1;
        for x being set st x in dom f holds f.x in (the Object-Kind of SCM+FSA)
.
x
      proof
       let x be set;
       assume
A7:          x in dom f;
       then consider m such that
A8:       x = insloc(m+k) and
A9:       f.x = p.insloc m by A3,A4;
       reconsider y = x as Instruction-Location of SCM+FSA
               by A3,A5,A7,AMI_1:def 4;
A10:   (the Object-Kind of SCM+FSA).y = ObjectKind y
                    .= the Instructions of SCM+FSA by AMI_1:def 14;
       consider s being State of SCM+FSA such that
A11:       p c= s by AMI_1:82;
       consider j such that
A12:       insloc(m+k) = insloc(j+k) and
A13:       insloc j in dom p by A3,A7,A8;
           s.insloc m in the Instructions of SCM+FSA;
       hence f.x in (the Object-Kind of SCM+FSA).x
              by A9,A10,A11,A12,A13,GRFUNC_1:8;
      end;
    then reconsider f as Element of sproduct the Object-Kind of SCM+FSA
              by A6,CARD_3:def 9;
A14: dom p is finite;
A15: for m1,m2 being Element of NAT st U(m1) = U(m2) holds m1 = m2;
        A is finite from FUNCT_7:sch 2(A14,A15);
    then f is finite by A3,FINSET_1:29;
    then reconsider f as FinPartState of SCM+FSA by AMI_1:77;
        f is programmed
     proof
      let x be set;
      assume x in dom f;
      then ex m st x = insloc(m+k) & insloc m in dom p by A3;
      hence x in the Instruction-Locations of SCM+FSA;
     end;
    then reconsider IT = f as programmed FinPartState of SCM+FSA;
    take IT;
    thus dom IT = { insloc(m+k):insloc m in dom p } by A3;
    let m;
    assume insloc m in dom p;
    then insloc(m+k) in A;
    then consider j such that
A16:     insloc(m+k) = insloc(j+k) and
A17:     f.insloc(m+k) = p.insloc j by A4;
   thus IT.insloc(m+k) = p.insloc m by A16,A17;
  end;

 uniqueness
  proof
   let IT1,IT2 be programmed FinPartState of SCM+FSA such that
A18:  dom IT1 = { insloc(m+k):insloc m in dom p } and
A19:  for m st insloc m in dom p holds IT1.insloc(m+k) = p.insloc m and
A20:  dom IT2 = { insloc(m+k):insloc m in dom p } and
A21:  for m st insloc m in dom p holds IT2.insloc(m+k) = p.insloc m;
         for x being set st x in { insloc(m+k):insloc m in dom p } holds
      IT1.x = IT2.x
       proof
        let x be set;
        assume x in { insloc(m+k):insloc m in dom p };
        then consider m such that
A22:         x = insloc(m+k) and
A23:         insloc m in dom p;
        thus IT1.x = p.insloc m by A19,A22,A23
                   .= IT2.x by A21,A22,A23;
       end;
    hence IT1=IT2 by A18,A20,FUNCT_1:9;
  end;
end;

theorem Th30:
 for l being Instruction-Location of SCM+FSA , k being Element of NAT,
     p being FinPartState of SCM+FSA st l in dom p
   holds Shift(p,k).(l + k) = p.l
 proof
  let l be Instruction-Location of SCM+FSA , k be Element of NAT,
      p be FinPartState of SCM+FSA such that A1: l in dom p;
   consider m being Element of NAT such that A2: l = insloc m by SCMFSA_2:21;
  thus Shift(p,k).(l + k) = Shift(p,k).(insloc(m+k)) by A2,Def1
                         .= p.l by A1,A2,Def7;
 end;

theorem
     for p being FinPartState of SCM+FSA, k being Element of NAT
  holds dom Shift(p,k) =
         { il+k where il is Instruction-Location of SCM+FSA: il in dom p}
    proof
     let p be FinPartState of SCM+FSA, k be Element of NAT;
A1: dom Shift(p,k) = { insloc(m+k):insloc m in dom p } by Def7;
     hereby
      let e be set;
      assume e in dom Shift(p,k);
      then consider m being Element of NAT such that
A2:       e = insloc(m+k) and
A3:       insloc m in dom p by A1;
          (insloc m)+k = insloc(m+k) by Def1;
     hence e in { il+k where il is Instruction-Location of SCM+FSA: il in
 dom p}
                                              by A2,A3;
    end;
    let e be set;
    assume e in { il+k where il is Instruction-Location of SCM+FSA: il in
 dom p};
   then consider il being Instruction-Location of SCM+FSA such that
A4:     e = il+k and
A5:     il in dom p;
    consider m being Element of NAT such that
A6:     il = insloc m and
A7:     il+k = insloc(m+k) by Def1;
   thus e in dom Shift(p,k) by A1,A4,A5,A6,A7;
  end;

theorem
     for I being FinPartState of SCM+FSA
  holds Shift(Shift(I,m),n) = Shift(I,m+n)
proof let I be FinPartState of SCM+FSA;
  set A = {insloc(l+m):insloc l in dom I };
A1: dom Shift(I,m) = A by Def7;
       {insloc(p+n):insloc p in A } = { insloc(q+(m+n)):insloc q in dom I}
    proof
     thus {insloc(p+n):insloc p in A } c= { insloc(q+(m+n)):insloc q in dom I}
      proof let x be set;
       assume x in {insloc(p+n):insloc p in A };
        then consider p such that
A2:      x = insloc(p+n) and
A3:      insloc p in A;
        consider l such that
A4:      insloc p = insloc(l+m) and
A5:      insloc l in dom I by A3;
         x = insloc(l+(m+n)) by A2,A4;
       hence x in { insloc(q+(m+n)):insloc q in dom I} by A5;
      end;
     let x be set;
     assume x in { insloc(q+(m+n)):insloc q in dom I};
      then consider q such that
A6:    x = insloc(q+(m+n)) and
A7:    insloc q in dom I;
A8:    x = insloc((q+m)+n) by A6;
          insloc(q+m) in A by A7;
     hence x in {insloc(p+n):insloc p in A } by A8;
    end;
then A9: dom Shift(Shift(I,m),n)
         = { insloc(l+(m+n)):insloc l in dom I} by A1,Def7;
      now let l; assume
A10:  insloc l in dom I;
then A11:  insloc(l+m) in dom Shift(I,m) by A1;
   thus Shift(Shift(I,m),n).insloc(l+(m+n))
               = Shift(Shift(I,m),n).insloc(l+m+n)
              .= Shift(I,m).insloc(l+m) by A11,Def7
              .= I.insloc l by A10,Def7;
  end;
 hence Shift(Shift(I,m),n) = Shift(I,m+n) by A9,Def7;
end;

theorem
     for s be programmed FinPartState of SCM+FSA,
     f be Function of the Instructions of SCM+FSA, the Instructions of SCM+FSA
 for n holds Shift(f*s,n) = f*Shift(s,n)
proof let s be programmed FinPartState of SCM+FSA,
          f be Function of the Instructions of SCM+FSA,
                           the Instructions of SCM+FSA;
 let n;
A1: dom(f*s) = dom s by AMI_1:119;
A2: dom(f*Shift(s,n)) = dom Shift(s,n) by AMI_1:119;
A3: dom Shift(s,n) = { insloc(m+n):insloc m in dom(f*s) } by A1,Def7;
      now let m; assume
A4: insloc m in dom(f*s);
    then insloc(m+n) in dom Shift(s,n) by A3;
   hence (f*Shift(s,n)).insloc(m+n) = f.(Shift(s,n).insloc(m+n)) by FUNCT_1:23
              .= f.(s.insloc m) by A1,A4,Def7
              .= (f*s).insloc m by A1,A4,FUNCT_1:23;
  end;
 hence Shift(f*s,n) = f*Shift(s,n) by A2,A3,Def7;
end;

theorem
    for I,J being FinPartState of SCM+FSA holds
 Shift(I +* J, n) = Shift(I,n) +* Shift(J,n)
proof let I,J be FinPartState of SCM+FSA;
A1: dom(I +* J) = dom I \/ dom J by FUNCT_4:def 1;
A2: dom Shift(J,n) = { insloc(m+n):insloc m in dom J } by Def7;
A3: dom Shift(I,n) = { insloc(m+n):insloc m in dom I } by Def7;
      dom Shift(I,n) \/ dom Shift(J,n) = { insloc(m+n):insloc m in dom I \/ dom
J
}
   proof
    hereby let x be set;
     assume x in dom Shift(I,n) \/ dom Shift(J,n);
      then x in dom Shift(I,n) or x in dom Shift(J,n) by XBOOLE_0:def 2;
      then consider m such that
A4:     x = insloc(m+n) & insloc m in dom J or
       x = insloc(m+n) & insloc m in dom I by A2,A3;
          insloc m in dom I \/ dom J by A4,XBOOLE_0:def 2;
     hence x in { insloc(l+n):insloc l in dom I \/ dom J } by A4;
    end;
    let x be set;
    assume x in { insloc(m+n):insloc m in dom I \/ dom J };
     then consider m such that
A5:   x = insloc(m+n) and
A6:   insloc m in dom I \/ dom J;
         insloc m in dom I or insloc m in dom J by A6,XBOOLE_0:def 2;
     then x in dom Shift(I,n) or x in dom Shift(J,n) by A2,A3,A5;
    hence thesis by XBOOLE_0:def 2;
   end;
then A7: dom(Shift(I,n) +* Shift(J,n)) = { insloc(m+n):insloc m in dom(I +* J)
}
                                   by A1,FUNCT_4:def 1;
      now let m such that
A8: insloc m in dom(I +* J);
   per cases;
   suppose
A9:  insloc m in dom J;
    then insloc(m+n) in dom Shift(J,n) by A2;
   hence (Shift(I,n) +* Shift(J,n)).insloc(m+n)
              = Shift(J,n).insloc(m+n) by FUNCT_4:14
             .= J.insloc m by A9,Def7
             .= (I +* J).insloc m by A9,FUNCT_4:14;
   end;
   suppose
A10:  not insloc m in dom J;
        now given l such that
A11:  insloc(m+n) = insloc(l+n) and
A12:  insloc l in dom J;
     thus contradiction by A10,A11,A12;
    end;
then A13:  not insloc(m+n) in dom Shift(J,n) by A2;
        insloc m in dom I \/ dom J by A8,FUNCT_4:def 1;
then A14:  insloc m in dom I by A10,XBOOLE_0:def 2;
   thus (Shift(I,n) +* Shift(J,n)).insloc(m+n)
              = Shift(I,n).insloc(m+n) by A13,FUNCT_4:12
             .= I.insloc m by A14,Def7
             .= (I +* J).insloc m by A10,FUNCT_4:12;
  end;
  end;
 hence Shift(I +* J, n) = Shift(I,n) +* Shift(J,n) by A7,Def7;
end;

theorem
     for i,j being Element of NAT, p being programmed FinPartState of SCM+FSA
   holds Shift(IncAddr(p,i),j) = IncAddr(Shift(p,j),i)
  proof
     let i,j be Element of NAT, p be programmed FinPartState of SCM+FSA;
A1: dom(IncAddr(Shift(p,j),i)) = dom (Shift(p,j)) by Def6;
    dom(IncAddr(p,i)) = dom p by Def6;
    then A2: dom(Shift(p,j))
    = { insloc(m+j):insloc m in dom (IncAddr(p,i)) } by Def7
   .= dom (Shift(IncAddr(p,i),j)) by Def7;
        now
     let x be set;
A3:  dom (Shift(IncAddr(p,i),j)) c= the Instruction-Locations of SCM+FSA
                                            by AMI_1:def 40;
     assume
A4:   x in dom (Shift(IncAddr(p,i),j));
     then reconsider x'=x as Instruction-Location of SCM+FSA by A3,AMI_1:def 4;
         x in { insloc(m+j) where m
         is Element of NAT:insloc m in dom IncAddr(p,i) }
                                            by A4,Def7;
     then consider m being Element of NAT such that
A5:     x = insloc(m+j) & insloc m in dom IncAddr(p,i);
A6:     x = insloc m+j by A5,Def1;
A7:     insloc m in dom p by A5,Def6;
      dom Shift(p,j) = { insloc(mm+j)
      where mm is Element of NAT : insloc mm in dom p}
                                                       by Def7;
then A8:     x' in dom Shift(p,j) by A5,A7;
A9:   pi(p,insloc m) = p.(insloc m) by A7,AMI_1:def 47
               .= Shift(p,j).((insloc m)+j) by A7,Th30
               .= Shift(p,j).(insloc(m+j)) by Def1
               .= pi(Shift(p,j),x') by A5,A8,AMI_1:def 47;
     thus Shift(IncAddr(p,i),j).x = IncAddr(p,i).(insloc m) by A5,A6,Th30
              .= IncAddr(pi(Shift(p,j),x'),i) by A7,A9,Th24
              .= IncAddr(Shift(p,j),i).x by A8,Th24;
    end;
   hence Shift(IncAddr(p,i),j) = IncAddr(Shift(p,j),i) by A1,A2,FUNCT_1:9;
  end;

