:: The Construction of { \bf SCM } over Ring
::  by Artur Korni{\l}owicz
::
:: Received November 29, 1998
:: Copyright (c) 1998-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, CARD_1, AMI_2, XBOOLE_0, STRUCT_0, ZFMISC_1,
      ARYTM_3, SUPINF_2, RELAT_1, FINSEQ_1, SCMFSA7B, FUNCSDOM, FUNCT_1,
      CARD_3, AMI_1, NAT_1, FUNCT_4, FUNCOP_1, MCART_1, PARTFUN1, ORDINAL1,
      ARYTM_1, FUNCT_2, FUNCT_5, TARSKI, SCMRING1, GROUP_9, RECDEF_2;
 notations TARSKI, XBOOLE_0, ENUMSET1, ZFMISC_1, SUBSET_1, RELAT_1, FUNCT_1,
      PARTFUN1, FUNCT_2, BINOP_1, CARD_1, NAT_1, RECDEF_2, NUMBERS, STRUCT_0,
      ALGSTR_0, FUNCSDOM, MCART_1, CARD_3, FINSEQ_1, FINSEQ_4, FUNCOP_1,
      FUNCT_4, CAT_2, AMI_2;
 constructors XXREAL_0, FINSEQ_4, REALSET2, CAT_2, RELSET_1, AMI_2, FUNCOP_1,
      SETFAM_1, FINSEQ_2, RECDEF_2;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, ORDINAL1, FUNCOP_1, FINSEQ_1,
      CARD_3, STRUCT_0, GR_CY_1, GCD_1, AMI_2, CARD_1, ORDINAL2, FUNCT_1,
      CARD_2, ALGSTR_0, ALGSTR_1, FUNCT_2, RELSET_1, FINSET_1;
 requirements NUMERALS, REAL, SUBSET, BOOLE;
 definitions TARSKI, FINSEQ_1, FUNCOP_1, CARD_1, AMI_2, MCART_1;
 theorems AMI_2, CAT_2, CARD_3, FUNCOP_1, ENUMSET1, FINSEQ_1, FINSEQ_3,
      FINSEQ_4, FUNCT_1, FUNCT_2, FUNCT_4, MCART_1, TARSKI, SUBSET_1, ZFMISC_1,
      XBOOLE_0, XBOOLE_1, ORDINAL1, NAT_1, RELAT_1, FUNCT_7, RECDEF_2;
 schemes FUNCT_2, BINOP_1;

begin  :: The construction of { \bf SCM } over ring

reserve i, j, k for Element of NAT,
  I for Element of Segm 8,
  i1, i2 for
  Element of NAT,
  d1, d2, d3, d4 for Element of SCM-Data-Loc,
  S for non empty
  1-sorted;

registration
  cluster SCM-Instr -> non trivial;
  coherence
  proof
    set e = the Element of SCM-Data-Loc;
    1 in {1,2,3,4,5} & 1 is Element of Segm 9 by ENUMSET1:def 3,NAT_1:44;
    then [1,{},<*e,e*>] in { [K,{},<*b,c*>]
     where K is Element of Segm 9, b, c is
    Element of SCM-Data-Loc : K in {1,2,3,4,5} };
    then
A1: [1,{},<*e,e*>] in SCM-Instr by XBOOLE_0:def 3;
    2 in {1,2,3,4,5} & 2 is Element of Segm 9 by ENUMSET1:def 3,NAT_1:44;
    then [2,{},<*e,e*>] in { [K,{},<*b,c*>]
     where K is Element of Segm 9, b, c is
    Element of SCM-Data-Loc : K in {1,2,3,4,5} };
    then
A2: [2,{},<*e,e*>] in SCM-Instr by XBOOLE_0:def 3;
    [1,{},<*e,e*>] <> [2,{},<*e,e*>] by MCART_1:25;
    hence thesis by A1,A2,SUBSET_1:def 7;
  end;
end;

definition
  let S be non empty 1-sorted;
  func SCM-Instr S -> non empty set equals
  { [0,{},{}] }
   \/ { [I,{},<*a,b*>] where I is Element of Segm 8,
    a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
   \/ { [6,<*i*>,{}] where i is Element of NAT: not contradiction }
   \/ { [7,<*i*>,<*a*>] where i is Element of NAT,a is Element of SCM-Data-Loc:
        not contradiction }
   \/ { [5,{},<*a,r*>] where a is
  Element of SCM-Data-Loc, r is Element of S: not contradiction };
  coherence;
end;

registration
  let S be non empty 1-sorted;
  cluster SCM-Instr S -> non trivial;
  coherence
  proof
    set e1 = the Element of SCM-Data-Loc;
A1: SCM-Instr S = ({ [0,{},{}] } \/ { [I,{},<*d1,d2*>] : I in { 1,2,3,4 } }
      \/ {[6,<*i1*>,{}] : not contradiction })
      \/ ({ [7,<*i2*>,<*d3*>] : not contradiction }
      \/ { [5,{},<*d4,r*>] where r is Element of S: not contradiction })
       by XBOOLE_1:4
      .= ({ [0,{},{}] } \/ { [I,{},<*d1,d2*>] : I in { 1,2,3,4 } })
      \/ ({ [6,<*i1*>,{}] : not contradiction }
      \/ ({ [7,<*i2*>,<*d3*>] : not contradiction }
      \/ { [5,{},<*d4,r*>] where r is Element of S: not contradiction}))
    by XBOOLE_1:4
      .= { [I,{},<*d1,d2*>] : I in { 1,2,3,4 } } \/ ({ [0,{},{}] }
      \/ (({ [6,<*i1*>,{}] : not contradiction }
      \/ ({ [7,<*i2*>,<*d3*>] : not contradiction }
      \/ { [5,{},<*d4,r*>] where r is Element of S: not contradiction}))))
       by XBOOLE_1:4;
    2 in Segm 8 & 2 in {1,2,3,4} by ENUMSET1:def 2,NAT_1:44;
    then [2,{},<*e1,e1*>] in { [I,{},<*d1,d2*>] where
     I is Element of Segm 8, d1,d2
    is Element of SCM-Data-Loc: I in { 1,2,3,4 } };
    then
A2: [2,{},<*e1,e1*>] in SCM-Instr S by A1,XBOOLE_0:def 3;
A3: [1,{},<*e1,e1*>] <> [2,{},<*e1,e1*>] by MCART_1:25;
    1 in Segm 8 & 1 in {1,2,3,4} by ENUMSET1:def 2,NAT_1:44;
    then [1,{},<*e1,e1*>] in { [I,{},<*d1,d2*>] where d1,d2 is Element of
    SCM-Data-Loc : I in { 1,2,3,4 } };
    then [1,{},<*e1,e1*>] in SCM-Instr S by A1,XBOOLE_0:def 3;
    hence thesis by A2,A3,SUBSET_1:def 7;
  end;
end;

definition
  let S be 1-sorted;
  attr S is good means
  :Def2:
  the carrier of S <> NAT;
end;

registration
  cluster trivial -> good for 1-sorted;
  coherence
  proof
    let S be 1-sorted;
    assume
Z:   S is trivial;
    assume S is non good;
    then
A1: the carrier of S = NAT by Def2;
    the carrier of S is trivial by Z;
    hence contradiction by A1;
  end;
end;

reserve G for good non empty 1-sorted;

Lm1: now
  let k be Element of SCM-Memory;
  k in {NAT} \/ SCM-Data-Loc by XBOOLE_0:def 3;
  then k in {NAT} or k in SCM-Data-Loc by XBOOLE_0:def 3;
  hence k = NAT or k in SCM-Data-Loc by TARSKI:def 1;
end;

definition
  let S be non empty 1-sorted;
  func SCM-OK S -> Function of SCM-Memory, {the carrier of S} \/ { NAT } means
  :Def3:
  for k being Element of SCM-Memory holds (k = NAT implies
  it.k = NAT) & (k in SCM-Data-Loc implies it.k = the carrier of S);
  existence
  proof
    defpred P[set,set] means $1 = NAT & $2 = NAT or $1 in SCM-Data-Loc & $2 =
    the carrier of S;
A1: now
      let k be Element of SCM-Memory;
A2:   {the carrier of S} \/ { NAT } = { the carrier of S, NAT } by ENUMSET1:1;
      then
A3:   NAT in {the carrier of S} \/ { NAT } by TARSKI:def 2;
A4:   P[k,NAT] or P[k,the carrier of S] or P[k,SCM-Instr S] by Lm1;
      the carrier of S in {the carrier of S} \/ { NAT }
            by A2,TARSKI:def 2;
      hence
      ex b being Element of {the carrier of S} \/ { NAT } st
      P[k,b] by A3,A4;
    end;
    consider h being Function of SCM-Memory, {the carrier of S} \/ { NAT }
     such that
A5: for a being Element of SCM-Memory holds P[a,h.a] from FUNCT_2:sch
    3(A1);
    take h;
    let k be Element of SCM-Memory;
A6: P[k,h.k] by A5;
    hence k = NAT implies h.k = NAT by AMI_2:20;
    thus k in SCM-Data-Loc implies h.k = the carrier of S by A6,AMI_2:20,21
,XBOOLE_0:3;
    thus thesis by A6,AMI_2:21,XBOOLE_0:3;
  end;
  uniqueness
  proof
    let f, g be Function of SCM-Memory, {the carrier of S} \/ {
    NAT } such that
A7: for k being Element of SCM-Memory holds (k = NAT implies f.k = NAT
) & (k in SCM-Data-Loc implies f.k = the carrier of S) and
A8: for k being Element of SCM-Memory holds (k = NAT implies g.k = NAT
) & (k in SCM-Data-Loc implies g.k = the carrier of S);
     now let k be Element of SCM-Memory;
      now
        per cases by Lm1;
        suppose
A9:       k = NAT;
          hence f.k = NAT by A7
            .= g.k by A8,A9;
        end;
        suppose
A10:      k in SCM-Data-Loc;
          hence f.k = the carrier of S by A7
            .= g.k by A8,A10;
        end;
      end;
      hence f.k = g.k;
    end;
    hence thesis by FUNCT_2:63;
  end;
end;

definition
  let S be non empty 1-sorted;
  mode SCM-State of S is Element of product SCM-OK S;
end;

theorem Th1:
  NAT <> SCM-Instr S
proof
  now
    assume 2 in SCM-Instr S;
    then
    2 in { [0,{},{}] }
     \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc:
        I in { 1,2,3,4 } }
     \/ { [6,<*i*>,{}] where i is Element of NAT: not contradiction}
     \/ { [7,<*i*>,<*a*>] where i is Element of NAT,
         a is Element of SCM-Data-Loc: not contradiction } or
     2 in { [5,{},<*i,r*>] where i is Element of SCM-Data-Loc, r is
    Element of S: not contradiction } by XBOOLE_0:def 3;
    then
    2 in { [0,{},{}] }
     \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc:
I in { 1,2,3,4 } }
 \/ { [6,<*i*>,{}] where i is Element of NAT: not contradiction
} or 2 in { [7,<*i*>,<*a*>] where i is Element of NAT,
a is Element of SCM-Data-Loc
: not contradiction } or 2 in { [5,{},<*i,r*>]
 where i is Element of SCM-Data-Loc,
    r is Element of S: not contradiction } by XBOOLE_0:def 3;
    then
    2 in { [0,{},{}] }
     \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc:
    I in { 1,2,3,4 } } or 2 in { [6,<*i*>,{}] where i is Element of NAT: not
contradiction } or 2 in { [7,<*i*>,<*a*>]
 where i is Element of NAT, a is Element
of SCM-Data-Loc: not contradiction } or
2 in { [5,{},<*i,r*>] where i is Element
    of SCM-Data-Loc, r is Element of S: not contradiction } by XBOOLE_0:def 3;
    then 2 in { [0,{},{}] } or 2 in { [I,{},<*a,b*>] where a,b is Element of
SCM-Data-Loc: I in { 1,2,3,4 } } or
 2 in { [6,<*i*>,{}] where i is Element of NAT:
    not contradiction } or 2 in { [7,<*i*>,<*a*>]
     where i is Element of NAT, a is
Element of SCM-Data-Loc: not contradiction } or
2 in { [5,{},<*i,r*>] where i is
Element of SCM-Data-Loc, r is Element of S: not contradiction } by
XBOOLE_0:def 3;
    then
    2 = [0,{},{}] or (ex I,d1,d2 st 2 = [I,{},<*d1,d2*>] & I in { 1,2,3,4 }) or
(ex i1 st 2 = [6,<*i1*>,{}] & not contradiction) or
 (ex i2,d3 st 2 = [7,<*i2*>,<*d3*>]
& not contradiction) or
 ex d4 st ex r being Element of S st 2 = [5,{},<*d4,r*>] &
    not contradiction by TARSKI:def 1;
    hence contradiction;
  end;
  hence thesis;
end;

theorem Th2:
  for i being Element of SCM-Memory holds (SCM-OK G).i = NAT iff i
  = NAT
proof
  let i be Element of SCM-Memory;
  thus (SCM-OK G).i = NAT implies i = NAT
  proof
    assume
A1: (SCM-OK G).i = NAT;
    assume
A2: i <> NAT;
    per cases by A2,Lm1;
    suppose
      i in SCM-Data-Loc;
      then (SCM-OK G).i = the carrier of G by Def3;
      hence contradiction by A1,Def2;
    end;
  end;
  thus thesis by Def3;
end;

theorem Th3:
  for i being Element of SCM-Memory holds (SCM-OK G).i = the
  carrier of G iff i in SCM-Data-Loc
proof
  let i be Element of SCM-Memory;
  thus (SCM-OK G).i = the carrier of G implies i in SCM-Data-Loc
  proof
    assume
A1: (SCM-OK G).i = the carrier of G;
    assume
A2: not i in SCM-Data-Loc;
    per cases by A2,Lm1;
    suppose
      i = NAT;
      then (SCM-OK G).i = NAT by Def3;
      hence contradiction by A1,Def2;
    end;
  end;
  thus thesis by Def3;
end;

theorem
  (SCM-OK G).d1 = the carrier of G by Th3;

theorem Th7:
  pi(product SCM-OK S,NAT) = NAT
proof
  dom (SCM-OK S) = SCM-Memory by FUNCT_2:def 1;
  hence pi(product SCM-OK S,NAT) = (SCM-OK S).NAT by AMI_2:22,CARD_3:12
    .= NAT by Def3,AMI_2:22;
end;

theorem Th8:
  pi(product SCM-OK G,d1) = the carrier of G
proof
  dom (SCM-OK G) = SCM-Memory by FUNCT_2:def 1;
  hence pi(product SCM-OK G,d1) = (SCM-OK G).d1 by CARD_3:12
    .= the carrier of G by Th3;
end;

definition
  let S be non empty 1-sorted, s be SCM-State of S;
  func IC s -> Element of NAT equals
  s.NAT;
  coherence
  proof
    s.NAT in pi(product SCM-OK S,NAT) by CARD_3:def 6;
    hence thesis by Th7;
  end;
end;

definition
  let R be good non empty 1-sorted, s be SCM-State of R, u be Nat;
  func SCM-Chg(s,u) -> SCM-State of R equals
  s +* (NAT .--> u);
  coherence
  proof
A1: now
      let x be set;
      assume
A2:   x in dom(SCM-OK R);
      then
A3:   x in SCM-Memory by FUNCT_2:def 1;
      now
        per cases;
        suppose
A4:       x = NAT;
          {NAT} = dom(NAT .--> u) by FUNCOP_1:13;
          then NAT in dom(NAT .--> u) by TARSKI:def 1;
          then (s +* (NAT .--> u)).NAT = (NAT .--> u).NAT by FUNCT_4:13
            .= u by FUNCOP_1:72;
          then (s +* (NAT .--> u)).NAT in NAT by ORDINAL1:def 12;
          hence (s +* (NAT .--> u)).x in (SCM-OK R).x by A3,A4,Th2;
        end;
        suppose
A5:       x <> NAT;
          {NAT} = dom(NAT .--> u) by FUNCOP_1:13;
          then not x in dom(NAT .--> u) by A5,TARSKI:def 1;
          then (s +* (NAT .--> u)).x = s.x by FUNCT_4:11;
          hence (s +* (NAT .--> u)).x in (SCM-OK R).x by A2,CARD_3:9;
        end;
      end;
      hence (s +* (NAT .--> u)).x in (SCM-OK R).x;
    end;
A6: dom(SCM-OK R) = SCM-Memory by FUNCT_2:def 1;
    then dom s = SCM-Memory by CARD_3:9;
    then dom(s +* (NAT .--> u)) = SCM-Memory \/ dom(NAT .--> u) by
FUNCT_4:def 1
      .= SCM-Memory \/ {NAT} by FUNCOP_1:13
      .= dom(SCM-OK R) by A6,AMI_2:22,ZFMISC_1:40;
    hence thesis by A1,CARD_3:9;
  end;
end;

theorem
  for s being SCM-State of G, u being Nat holds SCM-Chg(s,u).NAT = u
proof
  let s be SCM-State of G, u be Nat;
  {NAT} = dom(NAT .--> u) by FUNCOP_1:13;
  then NAT in dom(NAT .--> u) by TARSKI:def 1;
  hence SCM-Chg(s,u).NAT = (NAT .--> u).NAT by FUNCT_4:13
    .= u by FUNCOP_1:72;
end;

theorem
  for s being SCM-State of G, u being Nat, mk being Element of
  SCM-Data-Loc holds SCM-Chg(s,u).mk = s.mk
proof
  let s be SCM-State of G, u be Nat, mk be Element of SCM-Data-Loc;
A1: the carrier of G <> NAT & {NAT} = dom(NAT .--> u) by Def2,FUNCOP_1:13;
  (SCM-OK G).NAT = NAT & (SCM-OK G).mk = the carrier of G by Th2,Th3,AMI_2:22;
  then not mk in dom(NAT .--> u) by A1,TARSKI:def 1;
  hence thesis by FUNCT_4:11;
end;

theorem
  for s being SCM-State of G, u, v being Nat holds SCM-Chg(s,u).v = s.v
proof
  let s be SCM-State of G, u, v be Nat;
  {NAT} = dom(NAT .--> u) by FUNCOP_1:13;
  then not v in dom(NAT .--> u) by TARSKI:def 1;
  hence thesis by FUNCT_4:11;
end;

definition
  let R be good non empty 1-sorted, s be SCM-State of R, t be Element of
  SCM-Data-Loc, u be Element of R;
  func SCM-Chg(s,t,u) -> SCM-State of R equals
  s +* (t .--> u);
  coherence
  proof
A1: now
      let x be set;
      assume
A2:   x in dom(SCM-OK R);
      now
        per cases;
        suppose
A3:       x = t;
          {t} = dom(t .--> u) by FUNCOP_1:13;
          then t in dom(t .--> u) by TARSKI:def 1;
          then (s +* (t .--> u)).t = (t .--> u).t by FUNCT_4:13
            .= u by FUNCOP_1:72;
          then (s +* (t .--> u)).t in the carrier of R;
          hence (s +* (t .--> u)).x in (SCM-OK R).x by A3,Th3;
        end;
        suppose
A4:       x <> t;
          {t} = dom(t .--> u) by FUNCOP_1:13;
          then not x in dom(t .--> u) by A4,TARSKI:def 1;
          then (s +* (t .--> u)).x = s.x by FUNCT_4:11;
          hence (s +* (t .--> u)).x in (SCM-OK R).x by A2,CARD_3:9;
        end;
      end;
      hence (s +* (t .--> u)).x in (SCM-OK R).x;
    end;
A5: dom(SCM-OK R) = SCM-Memory by FUNCT_2:def 1;
    then dom s = SCM-Memory by CARD_3:9;
    then dom(s +* (t .--> u)) = SCM-Memory \/ dom(t .--> u) by FUNCT_4:def 1
      .= SCM-Memory \/ {t} by FUNCOP_1:13
      .= dom(SCM-OK R) by A5,ZFMISC_1:40;
    hence thesis by A1,CARD_3:9;
  end;
end;

theorem
  for s being SCM-State of G, t being Element of SCM-Data-Loc, u being
  Element of G holds SCM-Chg(s,t,u).NAT = s.NAT
proof
  let s be SCM-State of G, t be Element of SCM-Data-Loc, u be Element of G;
A1: NAT <> the carrier of G & {t} = dom(t .--> u) by Def2,FUNCOP_1:13;
  (SCM-OK G).NAT = NAT & (SCM-OK G).t = the carrier of G by Th2,Th3,AMI_2:22;
  then not NAT in dom(t .--> u) by A1,TARSKI:def 1;
  hence thesis by FUNCT_4:11;
end;

theorem
  for s being SCM-State of G, t being Element of SCM-Data-Loc, u being
  Element of G holds SCM-Chg(s,t,u).t = u
proof
  let s be SCM-State of G, t be Element of SCM-Data-Loc, u be Element of G;
  {t} = dom(t .--> u) by FUNCOP_1:13;
  then t in dom(t .--> u) by TARSKI:def 1;
  hence SCM-Chg(s,t,u).t = (t .--> u).t by FUNCT_4:13
    .= u by FUNCOP_1:72;
end;

theorem
  for s being SCM-State of G, t being Element of SCM-Data-Loc, u being
Element of G, mk being Element of SCM-Data-Loc st mk <> t holds SCM-Chg(s,t,u).
  mk = s.mk
proof
  let s be SCM-State of G, t be Element of SCM-Data-Loc, u be Element of G, mk
  be Element of SCM-Data-Loc such that
A1: mk <> t;
  {t} = dom(t .--> u) by FUNCOP_1:13;
  then not mk in dom(t .--> u) by A1,TARSKI:def 1;
  hence thesis by FUNCT_4:11;
end;

definition
  let R be good non empty 1-sorted, s be SCM-State of R, a be Element of
  SCM-Data-Loc;
  redefine func s.a -> Element of R;
  coherence
  proof
    s.a in pi(product SCM-OK R,a) by CARD_3:def 6;
    hence thesis by Th8;
  end;
end;

definition
  let S be non empty 1-sorted, x be Element of SCM-Instr S;
  given mk, ml being Element of SCM-Data-Loc, I such that
A1: x = [I,{},<*mk,ml*>];
  func x address_1 -> Element of SCM-Data-Loc means
  :Def7:
  ex f being
  FinSequence of SCM-Data-Loc st f = x`3_3 & it = f/.1;
  existence
  proof
    take mk,<*mk, ml*>;
    thus thesis by A1,FINSEQ_4:17,RECDEF_2:def 3;
  end;
  uniqueness;
  func x address_2 -> Element of SCM-Data-Loc means
  :Def8:
  ex f being
  FinSequence of SCM-Data-Loc st f = x`3_3 & it = f/.2;
  existence
  proof
    take ml,<*mk, ml*>;
    thus thesis by A1,FINSEQ_4:17,RECDEF_2:def 3;
  end;
  uniqueness;
end;

theorem
  for x being Element of SCM-Instr S, mk, ml being Element of
SCM-Data-Loc st x = [I,{},<*mk,ml*>] holds x address_1 = mk & x address_2 = ml
proof
  let x be Element of SCM-Instr S, mk,ml be Element of SCM-Data-Loc;
  assume
A1: x = [I,{},<*mk,ml*>];
  then consider f being FinSequence of SCM-Data-Loc such that
A2: f = x`3_3 and
A3: x address_1 = f/.1 by Def7;
  f = <*mk,ml*> by A1,A2,RECDEF_2:def 3;
  hence x address_1 = mk by A3,FINSEQ_4:17;
  consider f being FinSequence of SCM-Data-Loc such that
A4: f = x`3_3 and
A5: x address_2 = f/.2 by A1,Def8;
  f = <*mk,ml*> by A1,A4,RECDEF_2:def 3;
  hence thesis by A5,FINSEQ_4:17;
end;

definition
  let R be non empty 1-sorted, x be Element of SCM-Instr R;
  given mk being Element of NAT, I such that
A1: x = [I,<*mk*>,{}];
  func x jump_address -> Element of NAT means
  :Def9:
  ex f being FinSequence of
  NAT st f = x`2_3 & it = f/.1;
  existence
  proof
    take mk,<*mk*>;
    thus thesis by A1,FINSEQ_4:16,RECDEF_2:def 2;
  end;
  uniqueness;
end;

theorem
  for x being Element of SCM-Instr S, mk being Element of NAT
   st x = [ I,<*mk*>,{}] holds x jump_address = mk
proof
  let x be Element of SCM-Instr S, mk be Element of NAT;
  assume
A1: x = [I,<*mk*>,{}];
  then consider f being FinSequence of NAT such that
A2: f = x`2_3 and
A3: x jump_address = f/.1 by Def9;
  f = <*mk*> by A1,A2,RECDEF_2:def 2;
  hence thesis by A3,FINSEQ_4:16;
end;

definition
  let S be non empty 1-sorted, x be Element of SCM-Instr S;
  given mk being Element of NAT, ml being Element of SCM-Data-Loc, I such that
A1: x = [I,<*mk*>,<*ml*>];
  func x cjump_address -> Element of NAT means
  :Def10:
  ex mk being Element of NAT st <*mk*> = x`2_3 & it = <*mk*>/.1;
  existence
  proof
    take mk,mk;
    thus thesis by A1,FINSEQ_4:16,RECDEF_2:def 2;
  end;
  uniqueness;
  func x cond_address -> Element of SCM-Data-Loc means
  :Def11:
  ex ml being Element of SCM-Data-Loc st <*ml*> = x`3_3 & it = <*ml*>/.1;
  existence
  proof
    take ml,ml;
    thus thesis by A1,FINSEQ_4:16,RECDEF_2:def 3;
  end;
  uniqueness;
end;

theorem
  for x being Element of SCM-Instr S, mk being Element of NAT, ml being
  Element of SCM-Data-Loc st x = [I,<*mk*>,<*ml*>]
   holds x cjump_address = mk & x
  cond_address = ml
proof
  let x be Element of SCM-Instr S, mk be Element of NAT, ml be Element of
  SCM-Data-Loc;
  assume
A1: x = [I,<*mk*>,<*ml*>];
  then consider mk9 being Element of NAT such
  that
A2: <*mk9*> = x`2_3 and
A3: x cjump_address = <*mk9*>/.1 by Def10;
  <*mk9*> = <*mk*> by A1,A2,RECDEF_2:def 2;
  hence x cjump_address = mk by A3,FINSEQ_4:16;
  consider ml9 being Element of SCM-Data-Loc such
  that
A4: <*ml9*> = x`3_3 and
A5: x cond_address = <*ml9*>/.1 by A1,Def11;
  <*ml9*> = <*ml*> by A1,A4,RECDEF_2:def 3;
  hence thesis by A5,FINSEQ_4:16;
end;

definition
  let S be non empty 1-sorted, d be Element of SCM-Data-Loc, s be Element of S;
  redefine func <*d,s*> -> FinSequence of SCM-Data-Loc \/ the carrier of S;
  coherence
  proof
    let y be set;
A1: dom <*d,s*> = {1,2} by FINSEQ_1:2,89;
    assume y in rng <*d,s*>;
    then consider x being set such that
A2: x in dom <*d,s*> and
A3: <*d,s*>.x = y by FUNCT_1:def 3;
    per cases by A2,A1,TARSKI:def 2;
    suppose
      x = 1;
      then y = d by A3,FINSEQ_1:44;
      hence thesis by XBOOLE_0:def 3;
    end;
    suppose
      x = 2;
      then y = s by A3,FINSEQ_1:44;
      hence thesis by XBOOLE_0:def 3;
    end;
  end;
end;

definition
  let S be non empty 1-sorted, x be Element of SCM-Instr S;
  given mk being Element of SCM-Data-Loc, r being Element of S, I such that
A1: x = [I,{},<*mk,r*>];
  func x const_address -> Element of SCM-Data-Loc means
  :Def12:
  ex f being
  FinSequence of SCM-Data-Loc \/ the carrier of S st f = x`3_3 & it = f/.1;
  existence
  proof
    take mk,<*mk, r*>;
    mk is Element of SCM-Data-Loc \/ the carrier of S & r is Element of
    SCM-Data-Loc \/ the carrier of S by XBOOLE_0:def 3;
    hence thesis by A1,FINSEQ_4:17,RECDEF_2:def 3;
  end;
  uniqueness;
  func x const_value -> Element of S means
  :Def13:
  ex f being FinSequence of
  SCM-Data-Loc \/ the carrier of S st f = x`3_3 & it = f/.2;
  existence
  proof
    take r,<*mk, r*>;
    mk is Element of SCM-Data-Loc \/ the carrier of S & r is Element of
    SCM-Data-Loc \/ the carrier of S by XBOOLE_0:def 3;
    hence thesis by A1,FINSEQ_4:17,RECDEF_2:def 3;
  end;
  uniqueness;
end;

theorem
  for x being Element of SCM-Instr S, mk being Element of SCM-Data-Loc,
  r being Element of S st x = [I,{},<*mk,r*>] holds x const_address = mk & x
  const_value = r
proof
  let x be Element of SCM-Instr S, mk be Element of SCM-Data-Loc, r be Element
  of S;
A1: mk is Element of SCM-Data-Loc \/ the carrier of S & r is Element of
  SCM-Data-Loc \/ the carrier of S by XBOOLE_0:def 3;
  assume
A2: x = [ I,{}, <*mk,r*>];
  then consider
  f being FinSequence of SCM-Data-Loc \/ the carrier of S such that
A3: f = x`3_3 and
A4: x const_address = f/.1 by Def12;
  f = <*mk,r*> by A2,A3,RECDEF_2:def 3;
  hence x const_address = mk by A4,A1,FINSEQ_4:17;
  consider f being FinSequence of SCM-Data-Loc \/ the carrier of S such that
A5: f = x`3_3 and
A6: x const_value = f/.2 by A2,Def13;
  f = <*mk,r*> by A2,A5,RECDEF_2:def 3;
  hence thesis by A1,A6,FINSEQ_4:17;
end;

definition
  let R be good Ring, x be Element of SCM-Instr R, s be SCM-State of R;
  func SCM-Exec-Res (x,s) -> SCM-State of R equals
  SCM-Chg(SCM-Chg(s, x address_1, s.(x address_2)), succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [1,{},<*mk,ml*>],
  SCM-Chg(SCM-Chg(s, x address_1, s.(x address_1)+s.(x address_2)), succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [2,{},<*mk,ml*>],
  SCM-Chg(SCM-Chg(s, x address_1, s.(x address_1)-s.(x address_2)), succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [3,{},<*mk,ml*>],
  SCM-Chg(SCM-Chg(s, x address_1, s.(x address_1)*s.(x address_2)), succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [4,{},<*mk,ml*>],
  SCM-Chg(s, x jump_address)
   if ex mk being Element of NAT st x = [6,<*mk*>,{}],
  SCM-Chg(s, IFEQ(s.(x cond_address), 0.R, x cjump_address, succ IC s))
   if ex mk being Element of NAT, ml being Element of SCM-Data-Loc
    st x = [7,<*mk*>,<*ml*>],
  SCM-Chg(SCM-Chg(s, x const_address, x const_value), succ IC s)
   if ex mk being Element of SCM-Data-Loc, r being Element of R
    st x = [5,{},<*mk,r*>]
  otherwise s;
  coherence;
  consistency by MCART_1:25;
end;

registration
  let S be non empty 1-sorted, f be Action of SCM-Instr S, product SCM-OK S,
      x be Element of SCM-Instr S;
  cluster f.x -> Function-like Relation-like;
  coherence;
end;

definition
  let R be good Ring;
  func SCM-Exec R -> Action of SCM-Instr R, product SCM-OK R means
  for x being Element of SCM-Instr R, y being SCM-State of R
  holds (it.x).y = SCM-Exec-Res (x,y);
  existence
  proof
    deffunc U(Element of SCM-Instr R, SCM-State of R) = SCM-Exec-Res($1,$2);
    consider f being Function of [:SCM-Instr R,product SCM-OK R:], product
    SCM-OK R such that
A1: for x being Element of SCM-Instr R, y being SCM-State of R holds f
    .(x,y) = U(x,y) from BINOP_1:sch 4;
    take curry f;
    let x be Element of SCM-Instr R, y be SCM-State of R;
    thus (curry f).x.y = f.(x,y) by CAT_2:3
      .= SCM-Exec-Res(x,y) by A1;
  end;
  uniqueness
  proof
    let f, g be Action of SCM-Instr R, product SCM-OK R such that
A2: for x being Element of SCM-Instr R, y being SCM-State of R holds (
    f.x).y = SCM-Exec-Res(x,y) and
A3: for x being Element of SCM-Instr R, y being SCM-State of R holds (
    g.x).y = SCM-Exec-Res(x,y);
    now
      let x be Element of SCM-Instr R;
      reconsider gx = g.x, fx = f.x as Function of product SCM-OK R, product
      SCM-OK R by FUNCT_2:66;
      now
        let y be SCM-State of R;
        thus fx.y = SCM-Exec-Res(x,y) by A2
          .= gx.y by A3;
      end;
      hence f.x = g.x by FUNCT_2:63;
    end;
    hence f = g by FUNCT_2:63;
  end;
end;

theorem
 for S being non empty 1-sorted
  holds  SCM-Instr S c= [:NAT,NAT*,proj2 SCM-Instr S:]
proof let S be non empty 1-sorted;
 set X=proj2 SCM-Instr S;
 let u be set;
 assume
A1: u in SCM-Instr S;
A2: {} in NAT* by FINSEQ_1:49;
 per cases by A1,XBOOLE_0:def 3;
 suppose
A3:  u in { [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
 \/ { [6,<*i*>,{}] where i is
Element of NAT: not contradiction } \/ { [7,<*i*>,<*a*>]
 where i is Element of NAT,
  a is Element of SCM-Data-Loc: not contradiction };
  per cases by A3,XBOOLE_0:def 3;
  suppose
A4:  u in{ [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
 \/ { [6,<*i*>,{}] where i is
Element of NAT: not contradiction };
  per cases by A4,XBOOLE_0:def 3;
  suppose
A5:  u in { [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } };
  per cases by A5,XBOOLE_0:def 3;
  suppose u in { [0,{},{}] };
   then
A6:  u = [0,{},{}] by TARSKI:def 1;
   then 0 in NAT & {} in proj2 SCM-Instr S by A1,RELAT_1:def 5;
  hence u in [:NAT,NAT*,X:] by A6,A2,MCART_1:69;
  end;
  suppose u in { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 }};
   then consider I being Element of Segm 8, a, b being Element of SCM-Data-Loc
   such that
A7: u = [I,{},<*a,b*>] & I in { 1,2,3,4 };
   I in NAT & <*a,b*> in proj2 SCM-Instr S by A7,A1,RELAT_1:def 5;
  hence u in [:NAT,NAT*,X:] by A7,A2,MCART_1:69;
  end;
  end;
  suppose u in { [6,<*i*>,{}] where i is Element of NAT: not contradiction };
   then consider i being Element of NAT such that
A8:  u = [6,<*i*>,{}];
A9:  <*i*> in NAT* by FUNCT_7:18;
   6 in NAT & {} in proj2 SCM-Instr S by A8,A1,RELAT_1:def 5;
  hence u in [:NAT,NAT*,X:] by A8,A9,MCART_1:69;
  end;
  end;
  suppose u in { [7,<*i*>,<*a*>] where i is Element of NAT,
  a is Element of SCM-Data-Loc: not contradiction };
   then consider i being Element of NAT, a being Element of SCM-Data-Loc
   such that
A10:  u = [7,<*i*>,<*a*>];
A11:  <*i*> in NAT* by FUNCT_7:18;
   7 in NAT & <*a*> in proj2 SCM-Instr S by A10,A1,RELAT_1:def 5;
  hence u in [:NAT,NAT*,X:] by A10,A11,MCART_1:69;
  end;
 end;
 suppose u in { [5,{},<*a,r*>] where a is
  Element of SCM-Data-Loc, r is Element of S: not contradiction };
  then consider a being Element of SCM-Data-Loc, r being Element of S such that
A12: u = [5,{},<*a,r*>];
   5 in NAT & <*a,r*> in proj2 SCM-Instr S by A12,A1,RELAT_1:def 5;
  hence u in [:NAT,NAT*,X:] by A12,A2,MCART_1:69;
 end;
end;

registration let S be non empty 1-sorted;
 cluster proj2 SCM-Instr S -> FinSequence-membered;
 coherence
  proof let f be set;
   assume f in proj2 SCM-Instr S;
    then consider y being set such that
A1:   [y,f] in SCM-Instr S by RELAT_1:def 5;
    set u = [y,f];
 per cases by A1,XBOOLE_0:def 3;
 suppose
A2:  u in { [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
 \/ { [6,<*i*>,{}] where i is
Element of NAT: not contradiction } \/ { [7,<*i*>,<*a*>]
 where i is Element of NAT,
  a is Element of SCM-Data-Loc: not contradiction };
  per cases by A2,XBOOLE_0:def 3;
  suppose
A3:  u in{ [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
 \/ { [6,<*i*>,{}] where i is
Element of NAT: not contradiction };
  per cases by A3,XBOOLE_0:def 3;
  suppose
A4:  u in { [0,{},{}] } \/ { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 } };
  per cases by A4,XBOOLE_0:def 3;
  suppose u in { [0,{},{}] };
   then u = [0,{},{}] by TARSKI:def 1;
  then f = {} by ZFMISC_1:27;
  hence f is FinSequence;
  end;
  suppose u in { [I,{},<*a,b*>] where I is Element of Segm 8
, a, b is Element of SCM-Data-Loc: I in { 1,2,3,4 }};
   then consider I being Element of Segm 8, a, b being Element of SCM-Data-Loc
   such that
A5: u = [I,{},<*a,b*>] & I in { 1,2,3,4 };
  f = <*a,b*> by A5,ZFMISC_1:27;
  hence f is FinSequence;
  end;
  end;
  suppose u in { [6,<*i*>,{}] where i is Element of NAT: not contradiction };
   then consider i being Element of NAT such that
A6:  u = [6,<*i*>,{}];
  f = {} by A6,ZFMISC_1:27;
  hence f is FinSequence;
  end;
  end;
  suppose u in { [7,<*i*>,<*a*>] where i is Element of NAT,
  a is Element of SCM-Data-Loc: not contradiction };
   then consider i being Element of NAT, a being Element of SCM-Data-Loc
   such that
A7:  u = [7,<*i*>,<*a*>];
  f = <*a*> by A7,ZFMISC_1:27;
  hence f is FinSequence;
  end;
 end;
 suppose u in { [5,{},<*a,r*>] where a is
  Element of SCM-Data-Loc, r is Element of S: not contradiction };
  then consider a being Element of SCM-Data-Loc, r being Element of S such that
A8: u = [5,{},<*a,r*>];
  f = <*a,r*> by A8,ZFMISC_1:27;
  hence f is FinSequence;
 end;
end;
end;

theorem
  [0,{},{}] in SCM-Instr S
proof
  [0,{},{}] in {[0,{},{}]} by TARSKI:def 1;
  then [0,{},{}] in { [0,{},{}] }
   \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
    by XBOOLE_0:def 3;
  then [0,{},{}] in { [0,{},{}] }
   \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
   \/ { [6,<*i*>,{}] where i is Element of NAT: not contradiction }
    by XBOOLE_0:def 3;
  then [0,{},{}] in { [0,{},{}] }
   \/ { [I,{},<*a,b*>] where a,b is Element of SCM-Data-Loc: I in { 1,2,3,4 } }
   \/ { [6,<*i*>,{}] where i is Element of NAT: not contradiction }
   \/ { [7,<*i*>,<*a*>] where i is Element of NAT, a is Element of
  SCM-Data-Loc: not contradiction } by XBOOLE_0:def 3;
  hence thesis by XBOOLE_0:def 3;
end;

