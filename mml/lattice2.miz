:: Finite Join and Finite Meet, and Dual Lattices
::  by Andrzej Trybulec
::
:: Received August 10, 1990
:: Copyright (c) 1990 Association of Mizar Users

environ

 vocabularies FUNCT_1, RELAT_1, BOOLE, FUNCT_4, FINSUB_1, BINOP_1, LATTICES,
      SETWISEO, FUNCOP_1, FILTER_0, FINSET_1, LATTICE2;
 notations TARSKI, XBOOLE_0, SUBSET_1, RELAT_1, FUNCT_1, FUNCT_2, FUNCT_4,
      PARTFUN1, FUNCOP_1, BINOP_1, FINSET_1, STRUCT_0, LATTICES, FINSUB_1,
      SETWISEO, FILTER_0;
 constructors BINOP_1, FUNCOP_1, FUNCT_4, SETWISEO, GROUP_1, FILTER_0,
      RELSET_1;
 registrations XBOOLE_0, RELAT_1, FUNCT_1, FUNCT_2, STRUCT_0, LATTICES;
 requirements SUBSET, BOOLE;
 definitions LATTICES, BINOP_1, SETWISEO, FILTER_0;
 theorems LATTICES, BINOP_1, SETWISEO, FUNCOP_1, FUNCT_4, SETWOP_2, FINSET_1,
      FINSUB_1, FUNCT_2, FUNCT_1, FILTER_0, GRFUNC_1, RELAT_1, RLSUB_2,
      XBOOLE_1;
 schemes FRAENKEL;

begin :: Auxiliary theorems

reserve A for set,
  C for non empty set,
  B for Subset of A,
  x for Element of A,
  f,g for Function of A,C;

canceled;

theorem Th2:
  dom (g|B) = B
proof
  thus dom(g|B) = dom g /\ B by RELAT_1:90
    .= A /\ B by FUNCT_2:def 1
    .= B by XBOOLE_1:28;
end;

canceled 2;

theorem Th5:
  f|B = g|B iff for x st x in B holds g.x = f.x
proof
  thus f|B = g|B implies for x st x in B holds g.x = f.x
  proof
    assume
A1: f|B = g|B;
    let x;
    assume
A2: x in B;
    hence g.x = (g|B).x by FUNCT_1:72
      .= f.x by A1,A2,FUNCT_1:72;
  end;
  reconsider f'=f|B, g'=g|B as Function of B,C by FUNCT_2:38;
  assume
A3: for x st x in B holds g.x = f.x;
A4: now
    let x be set;
    assume
A5: x in B;
    hence f'.x = f.x by FUNCT_1:72
      .= g.x by A3,A5
      .= g'.x by A5,FUNCT_1:72;
  end;
  thus f|B = f'|B by RELAT_1:101
    .= g'|B by A4,FUNCT_2:18
    .= g|B by RELAT_1:101;
end;

theorem Th6:
  for B being set holds f +* g|B is Function of A,C
proof
  let B be set;
A1: dom f = A & dom g = A by FUNCT_2:def 1;
  dom (f +* g|B) = dom f \/ dom (g|B) by FUNCT_4:def 1
    .= dom f \/ dom g /\ B by RELAT_1:90
    .= A by A1,XBOOLE_1:22;
  hence thesis by FUNCT_2:130,FUNCT_4:41;
end;

theorem Th7:
  g|B +* f = f
proof
  dom (g|B) = B & dom f = A by Th2,FUNCT_2:def 1;
  hence thesis by FUNCT_4:20;
end;

theorem Th8:
  for f,g being Function holds g c= f implies f +* g = f
proof
  let f,g be Function;
  assume
A1: g c= f;
  then dom g c= dom f by GRFUNC_1:8;
  then
A2: dom f = dom f \/ dom g by XBOOLE_1:12;
  for x be set st x in dom f holds (x in dom g implies f.x = g.x) & (not x
  in dom g implies f.x = f.x) by A1,GRFUNC_1:8;
  hence thesis by A2,FUNCT_4:def 1;
end;

theorem
  f +* f|B = f by Th8,RELAT_1:88;

theorem Th10:
  (for x st x in B holds g.x = f.x) implies f +* g|B = f
proof
  assume
  x in B implies g.x = f.x;
  then g|B = f|B by Th5;
  hence thesis by Th8,RELAT_1:88;
end;

reserve B for Finite_Subset of A;

canceled;

theorem
  g|B +* f = f
proof
  reconsider C = B as Subset of A by FINSUB_1:32;
  g|C +* f = f by Th7;
  hence thesis;
end;

theorem Th13:
  dom (g|B) = B
proof
  reconsider C = B as Subset of A by FINSUB_1:32;
  dom (g|C) = C by Th2;
  hence thesis;
end;

theorem Th14:
  (for x st x in B holds g.x = f.x) implies f +* g|B = f
proof
  reconsider C = B as Subset of A by FINSUB_1:32;
  (for x st x in C holds g.x = f.x) implies f +* g|C = f by Th10;
  hence thesis;
end;

definition
  let D be non empty set;
  let o,o' be BinOp of D;
  pred o absorbs o' means
  :Def1:
  for x,y being Element of D holds o.(x,o'.(x,y
  )) = x;
end;

notation
  let D be non empty set;
  let o,o' be BinOp of D;
  antonym o doesn't_absorb o' for o absorbs o';
end;

:: Dual Lattice structures

reserve L for non empty LattStr,
  a,b,c for Element of L;

canceled 2;

theorem Th17:
  the L_join of L is commutative associative & the L_meet of L is
commutative associative & the L_join of L absorbs the L_meet of L & the L_meet
  of L absorbs the L_join of L implies L is Lattice-like
proof
  assume that
A1: the L_join of L is commutative and
A2: the L_join of L is associative and
A3: the L_meet of L is commutative and
A4: the L_meet of L is associative and
A5: the L_join of L absorbs the L_meet of L and
A6: the L_meet of L absorbs the L_join of L;
  thus a"\/"b = b"\/"a by A1,BINOP_1:def 2;
  thus a"\/"(b"\/"c) = (a"\/"b)"\/"c by A2,BINOP_1:def 3;
  thus (a"/\"b)"\/"b = b
  proof
    thus (a"/\"b)"\/"b = b "\/" (a "/\" b) by A1,BINOP_1:def 2
      .= b "\/" (b "/\" a) by A3,BINOP_1:def 2
      .= b by A5,Def1;
  end;
  thus a"/\"b = b"/\"a by A3,BINOP_1:def 2;
  thus a"/\"(b"/\"c) = (a"/\"b)"/\"c by A4,BINOP_1:def 3;
  let a,b;
  thus thesis by A6,Def1;
end;

definition
  let L be LattStr;
  func L.: -> strict LattStr equals
  LattStr(#the carrier of L, the L_meet of L
    , the L_join of L#);
  correctness;
end;

registration
  let L be non empty LattStr;
  cluster L.: -> non empty;
  coherence;
end;

theorem
  the carrier of L = the carrier of L.: & the L_join of L = the L_meet
  of L.: & the L_meet of L = the L_join of L.:;

theorem
  for L being strict non empty LattStr holds L.:.: = L;

:: General Lattices

reserve L for Lattice;
reserve a,b,c,u,v for Element of L;

canceled;

theorem Th21:
  (for v holds u "\/" v = v) implies u = Bottom L
proof
  assume
A1: u "\/" v = v;
  now
    let v;
    v "\/" u = v by A1;
    then u [= v by LATTICES:def 3;
    hence v "/\" u = u by LATTICES:21;
  end;
  hence thesis by RLSUB_2:84;
end;

theorem Th22:
  (for v holds (the L_join of L).(u,v) = v) implies u = Bottom L
proof
  assume
  for v holds (the L_join of L).(u,v) = v;
  then for v holds u "\/" v = v;
  hence thesis by Th21;
end;

canceled;

theorem Th24:
  (for v holds u "/\" v = v) implies u = Top L
proof
  assume
A1: u "/\" v = v;
  now
    let v;
    v "/\" u = v by A1;
    then v [= u by LATTICES:21;
    hence u = v "\/" u by LATTICES:def 3;
  end;
  hence thesis by RLSUB_2:85;
end;

theorem Th25:
  (for v holds (the L_meet of L).(u,v) = v) implies u = Top L
proof
  assume
  for v holds (the L_meet of L).(u,v) = v;
  then for v holds u "/\" v = v;
  hence thesis by Th24;
end;

theorem Th26:
  the L_join of L is idempotent
proof
  let a;
  thus (the L_join of L).(a,a) = a "\/" a
    .= a by LATTICES:17;
end;

theorem Th27:
  for L being join-commutative (non empty \/-SemiLattStr) holds
  the L_join of L is commutative
proof
  let L be join-commutative (non empty \/-SemiLattStr);
  let a,b be Element of L;
  thus (the L_join of L).(a,b) = b "\/" a by LATTICES:def 1
    .= (the L_join of L).(b,a);
end;

theorem Th28:
  the L_join of L is having_a_unity implies Bottom L =
  the_unity_wrt the L_join of L
proof
  set J = the L_join of L;
  given u such that
A1: u is_a_unity_wrt J;
  J is commutative by Th27;
  then (the L_join of L).(u,v) = v by A1,BINOP_1:12;
  then u = Bottom L by Th22;
  hence thesis by A1,BINOP_1:def 8;
end;

theorem Th29:
  for L being join-associative (non empty \/-SemiLattStr) holds
  the L_join of L is associative
proof
  let L be join-associative (non empty \/-SemiLattStr);
  let a,b,c be Element of L;
  thus (the L_join of L).(a,(the L_join of L).(b,c)) = a "\/" (b "\/" c)
    .= (a "\/" b) "\/" c by LATTICES:def 5
    .= (the L_join of L).((the L_join of L).(a,b),c);
end;

theorem Th30:
  the L_meet of L is idempotent
proof
  let a;
  thus (the L_meet of L).(a,a) = a "/\" a
    .= a by LATTICES:18;
end;

theorem Th31:
  for L being meet-commutative (non empty /\-SemiLattStr) holds
  the L_meet of L is commutative
proof
  let L be meet-commutative (non empty /\-SemiLattStr);
  let a,b be Element of L;
  thus (the L_meet of L).(a,b) = b "/\" a by LATTICES:def 2
    .= (the L_meet of L).(b,a);
end;

theorem Th32:
  for L being meet-associative (non empty /\-SemiLattStr) holds
  the L_meet of L is associative
proof
  let L be meet-associative (non empty /\-SemiLattStr);
  let a,b,c be Element of L;
  thus (the L_meet of L).(a,(the L_meet of L).(b,c)) = a "/\" (b "/\" c)
    .= (a "/\" b) "/\" c by LATTICES:def 7
    .= (the L_meet of L).((the L_meet of L).(a,b),c);
end;

registration
  let L be join-commutative (non empty \/-SemiLattStr);
  cluster the L_join of L -> commutative;
  coherence by Th27;
end;

registration
  let L be join-associative (non empty \/-SemiLattStr);
  cluster the L_join of L -> associative;
  coherence by Th29;
end;

registration
  let L be meet-commutative (non empty /\-SemiLattStr);
  cluster the L_meet of L -> commutative;
  coherence by Th31;
end;

registration
  let L be meet-associative (non empty /\-SemiLattStr);
  cluster the L_meet of L -> associative;
  coherence by Th32;
end;

theorem Th33:
  the L_meet of L is having_a_unity implies Top L = the_unity_wrt
  the L_meet of L
proof
  set J = the L_meet of L;
  given u such that
A1: u is_a_unity_wrt J;
  (the L_meet of L).(u,v) = v by A1,BINOP_1:12;
  then u = Top L by Th25;
  hence thesis by A1,BINOP_1:def 8;
end;

theorem Th34:
  the L_join of L is_distributive_wrt the L_join of L
proof
  now
    let a,b,c;
    thus (the L_join of L).(a,(the L_join of L).(b,c)) = a "\/" (b "\/" c)
      .= a "\/" b "\/" c by LATTICES:def 5
      .= a "\/" a "\/" b "\/" c by LATTICES:17
      .= (a "\/" b) "\/" a "\/" c by LATTICES:def 5
      .= (a "\/" b) "\/" (a "\/" c) by LATTICES:def 5
      .= (the L_join of L).((the L_join of L).(a,b),(the L_join of L).(a,c));
  end;
  hence thesis by BINOP_1:24;
end;

theorem
  L is D_Lattice implies the L_join of L is_distributive_wrt the L_meet
  of L
proof
  assume
A1: L is D_Lattice;
  now
    let a,b,c;
    thus (the L_join of L).(a,(the L_meet of L).(b,c)) = a "\/" (b "/\" c)
      .= (a "\/" b) "/\" (a "\/" c) by A1,LATTICES:31
      .= (the L_meet of L).((the L_join of L).(a,b),(the L_join of L).(a,c));
  end;
  hence thesis by BINOP_1:24;
end;

theorem Th36:
  the L_join of L is_distributive_wrt the L_meet of L implies L is
  distributive
proof
  assume
A1: the L_join of L is_distributive_wrt the L_meet of L;
  then
A2: for a,b,c holds a "\/" (b "/\" c) = (a "\/" b) "/\" (a "\/" c)by
  BINOP_1:24;
  let a,b,c;
  thus a"/\"(b"\/"c) = a"/\"(c"\/"a)"/\"(c"\/"b) by LATTICES:def 9
    .= a"/\"((c"\/"a)"/\"(c"\/"b)) by LATTICES:def 7
    .= a"/\"((a"/\"b)"\/"c) by A2
    .= ((a"/\"b)"\/"a)"/\"((a"/\"b)"\/"c) by LATTICES:def 8
    .= (a"/\"b)"\/"(a"/\"c) by A1,BINOP_1:24;
end;

theorem Th37:
  L is D_Lattice implies the L_meet of L is_distributive_wrt the
  L_join of L
proof
  assume
A1: L is D_Lattice;
  now
    let a,b,c;
    thus (the L_meet of L).(a,(the L_join of L).(b,c)) = a "/\" (b "\/" c)
      .= (a "/\" b) "\/" (a "/\" c) by A1,LATTICES:def 11
      .= (the L_join of L).((the L_meet of L).(a,b),(the L_meet of L).(a,c));
  end;
  hence thesis by BINOP_1:24;
end;

theorem
  the L_meet of L is_distributive_wrt the L_join of L implies L is
  distributive
proof
  assume
A1: the L_meet of L is_distributive_wrt the L_join of L;
  let a,b,c;
  thus a "/\" (b "\/" c) = (a "/\" b) "\/" (a "/\" c) by A1,BINOP_1:24;
end;

theorem Th39:
  the L_meet of L is_distributive_wrt the L_meet of L
proof
  now
    let a,b,c;
    thus (the L_meet of L).(a,(the L_meet of L).(b,c)) = a "/\" (b "/\" c)
      .= a "/\" b "/\" c by LATTICES:def 7
      .= a "/\" a "/\" b "/\" c by LATTICES:18
      .= (a "/\" b) "/\" a "/\" c by LATTICES:def 7
      .= (a "/\" b) "/\" (a "/\" c) by LATTICES:def 7
      .= (the L_meet of L).((the L_meet of L).(a,b),(the L_meet of L).(a,c));
  end;
  hence thesis by BINOP_1:24;
end;

theorem Th40:
  the L_join of L absorbs the L_meet of L
proof
  let x,y be Element of L;
  thus (the L_join of L).(x,(the L_meet of L).(x,y)) = x "\/"(x "/\" y)
    .= x by LATTICES:def 8;
end;

theorem Th41:
  the L_meet of L absorbs the L_join of L
proof
  let x,y be Element of L;
  thus (the L_meet of L).(x,(the L_join of L).(x,y)) = x "/\"(x "\/" y)
    .= x by LATTICES:def 9;
end;

definition
  let A be non empty set, L be Lattice;
  let B be Finite_Subset of A;
  let f be Function of A, the carrier of L;
  func FinJoin(B, f) -> Element of L equals
  (the L_join of L)$$(B,f);
  correctness;
  func FinMeet(B, f) -> Element of L equals
  (the L_meet of L)$$(B,f);
  correctness;
end;

reserve A for non empty set,
  x for Element of A,
  B for Finite_Subset of A,
  f,g
  for Function of A, the carrier of L;

canceled;

theorem Th43:
  x in B implies f.x [= FinJoin(B,f)
proof
  assume
  x in B;
  then f.x "\/" FinJoin(B,f) = FinJoin(B,f) by Th26,SETWISEO:31;
  hence thesis by LATTICES:def 3;
end;

theorem Th44:
  (ex x st x in B & u [= f.x) implies u [= FinJoin(B,f)
proof
  given x such that
A1: x in B and
A2: u [= f.x;
  f.x [= FinJoin(B,f) by A1,Th43;
  then
A3: f.x "\/" FinJoin(B,f) = FinJoin(B,f) by LATTICES:def 3;
  then u "\/" FinJoin(B,f) = u "\/" f.x "\/" FinJoin(B,f) by
  LATTICES:def 5
    .= FinJoin(B,f) by A2,A3,LATTICES:def 3;
  hence thesis by LATTICES:def 3;
end;

theorem
  (for x st x in B holds f.x = u) & B <> {} implies FinJoin(B,f) = u by
  Th26,SETWISEO:33;

theorem
  FinJoin(B,f) [= u implies for x st x in B holds f.x [= u
proof
  assume
A1: FinJoin(B,f) [= u;
  let x;
  assume
  x in B;
  then f.x [= FinJoin(B,f) by Th43;
  hence thesis by A1,LATTICES:25;
end;

theorem Th47:
  B <> {} & (for x st x in B holds f.x [= u) implies FinJoin(B,f)
  [= u
proof
  assume that
A1: B <> {} and
A2: for x st x in B holds f.x [= u;
  set J = the L_join of L;
A3: now
    let x;
    assume
    x in B;
    then
A4: f.x [= u by A2;
    thus (J[:](f,u)).x = f.x "\/" u by FUNCOP_1:60
      .= u by A4,LATTICES:def 3;
  end;
  J is idempotent by Th26;
  then FinJoin(B,f) "\/" u = J$$(B,J[:](f,u)) by A1,Th34,SETWISEO:37
    .= u by A1,A3,Th26,SETWISEO:33;
  hence thesis by LATTICES:def 3;
end;

theorem
  B <> {} & (for x st x in B holds f.x [= g.x) implies FinJoin(B,f) [=
  FinJoin(B,g)
proof
  assume that
A1: B <> {} and
A2: for x st x in B holds f.x [= g.x;
  now
    let x;
    assume
A3: x in B;
    then f.x [= g.x by A2;
    hence f.x [= FinJoin(B,g) by A3,Th44;
  end;
  hence thesis by A1,Th47;
end;

theorem Th49:
  B <> {} & f|B = g|B implies FinJoin(B,f) = FinJoin(B,g)
proof
  assume that
A1: B <> {} and
A2: f|B = g|B;
  f.:B = g.:B by A2,RELAT_1:201;
  hence thesis by A1,Th26,SETWISEO:35;
end;

theorem
  B <> {} implies v "\/" FinJoin(B,f) = FinJoin(B, (the L_join of L)[;](
  v, f ) )
proof
  assume
A1: B <> {};
  set J = the L_join of L;
  J is idempotent by Th26;
  hence thesis by A1,Th34,SETWISEO:36;
end;

registration
  let L be Lattice;
  cluster L.: -> Lattice-like;
  coherence
  proof
    the L_join of L.: absorbs the L_meet of L.: & the L_meet of L.:
    absorbs the L_join of L.: by Th40,Th41;
    hence thesis by Th17;
  end;
end;

theorem
  for L being Lattice, B being Finite_Subset of A for f being Function
  of A, the carrier of L, f' being Function of A, the carrier of L.: st f = f'
  holds FinJoin(B,f) = FinMeet(B,f') & FinMeet(B,f) = FinJoin(B,f');

theorem Th52:
  for a',b' being Element of L.: st a = a' & b = b' holds a "/\" b
  = a'"\/" b' & a "\/" b = a'"/\" b';

theorem Th53:
  a [= b implies for a',b' being Element of L.: st a = a' & b = b'
  holds b' [= a'
proof
  assume
  a [= b;
  then
A1: a "\/" b = b by LATTICES:def 3;
  let a',b' be Element of L.:;
  assume
  a = a' & b = b';
  then b' "/\" a' = b' by A1,Th52;
  hence thesis by LATTICES:21;
end;

theorem Th54:
  for a',b' being Element of L.: st a' [= b' & a = a' & b = b'
  holds b [= a
proof
  let a',b' be Element of L.:;
  assume that
A1: a' [= b' and
A2: a = a' & b = b';
  a' "\/" b' = b' by A1,LATTICES:def 3;
  then b "/\" a = b by A2,Th52;
  hence thesis by LATTICES:21;
end;

:: Dualizations

theorem Th55:
  x in B implies FinMeet(B,f) [= f.x
proof
  reconsider f' = f as Function of A, the carrier of L.:;
  assume
  x in B;
  then f'.x [= FinJoin(B,f') by Th43;
  hence thesis by Th54;
end;

theorem Th56:
  (ex x st x in B & f.x [= u) implies FinMeet(B,f)[= u
proof
  given x such that
A1: x in B and
A2: f.x [= u;
  reconsider u' = u as Element of L.:;
  reconsider f' = f as Function of A, the carrier of L.:;
  u' [= f'.x by A2,Th53;
  then u' [= FinJoin(B,f') by A1,Th44;
  hence thesis by Th54;
end;

theorem
  (for x st x in B holds f.x = u) & B <> {} implies FinMeet(B,f) = u
proof
  reconsider f' = f as Function of A, the carrier of L.:;
A1: FinJoin(B,f') = FinMeet(B,f);
  assume
  ( for x st x in B holds f.x = u)& B <> {};
  hence thesis by A1,Th26,SETWISEO:33;
end;

theorem
  B <> {} implies v "/\" FinMeet(B,f) = FinMeet(B, (the L_meet of L)[;](
  v, f ) )
proof
  assume
A1: B <> {};
  set J = the L_meet of L;
  J is idempotent by Th30;
  hence thesis by A1,Th39,SETWISEO:36;
end;

theorem
  u [= FinMeet(B,f) implies for x st x in B holds u [= f.x
proof
  assume
A1: u [= FinMeet(B,f);
  let x;
  assume
  x in B;
  then FinMeet(B,f) [= f.x by Th55;
  hence thesis by A1,LATTICES:25;
end;

theorem
  B <> {} & f|B = g|B implies FinMeet(B,f) = FinMeet(B,g)
proof
  reconsider f' = f, g' = g as Function of A, the carrier of L.:;
A1: FinMeet(B,f) = FinJoin(B,f') & FinMeet(B,g) = FinJoin(B,g');
  assume
  B <> {} & f|B = g|B;
  hence thesis by A1,Th49;
end;

theorem Th61:
  B <> {} & (for x st x in B holds u [= f.x) implies u [= FinMeet(
  B,f)
proof
  assume that
A1: B <> {} and
A2: for x st x in B holds u [= f.x;
  reconsider u' = u as Element of L.:;
  reconsider f' = f as Function of A, the carrier of L.:;
  for x st x in B holds f'.x [= u' by A2,Th53;
  then FinJoin(B,f') [= u' by A1,Th47;
  hence thesis by Th54;
end;

theorem
  B <> {} & (for x st x in B holds f.x [= g.x) implies FinMeet(B,f) [=
  FinMeet(B,g)
proof
  assume that
A1: B <> {} and
A2: for x st x in B holds f.x [= g.x;
  now
    let x;
    assume
A3: x in B;
    then f.x [= g.x by A2;
    hence FinMeet(B,f) [= g.x by A3,Th56;
  end;
  hence thesis by A1,Th61;
end;

theorem
  for L being Lattice holds L is lower-bounded iff L.: is upper-bounded
proof
  let L be Lattice;
  thus L is lower-bounded implies L.: is upper-bounded
  proof
    given c being Element of L such that
A1: for a being Element of L holds c"/\"a = c & a"/\"c = c;
    reconsider c' = c as Element of L.:;
    take c';
    let a' be Element of L.:;
    reconsider a = a' as Element of L;
    thus c'"\/"a' = c"/\"a
      .= c' by A1;
    hence a'"\/"c' = c';
  end;
  given c being Element of L.: such that
A2: for a being Element of L.: holds c"\/"a = c & a"\/"c = c;
  reconsider c'= c as Element of L;
  take c';
  let a' be Element of L;
  reconsider a = a' as Element of L.:;
  thus c'"/\"a' = c"\/"a
    .= c' by A2;
  hence a'"/\"c' = c';
end;

theorem Th64:
  for L being Lattice holds L is upper-bounded iff L.: is
  lower-bounded
proof
  let L be Lattice;
  thus L is upper-bounded implies L.: is lower-bounded
  proof
    given c being Element of L such that
A1: for a being Element of L holds c"\/"a = c & a"\/"c = c;
    reconsider c' = c as Element of L.:;
    take c';
    let a' be Element of L.:;
    reconsider a = a' as Element of L;
    thus c'"/\"a' = c"\/"a
      .= c' by A1;
    hence a'"/\"c' = c';
  end;
  given c being Element of L.: such that
A2: for a being Element of L.: holds c"/\"a = c & a"/\"c = c;
  reconsider c'= c as Element of L;
  take c';
  let a' be Element of L;
  reconsider a = a' as Element of L.:;
  thus c'"\/"a' = c"/\"a
    .= c' by A2;
  hence a'"\/"c' = c';
end;

theorem
  L is D_Lattice iff L.: is D_Lattice by Th36,Th37;

::
:: Lower bounded lattices
::

reserve L for 0_Lattice,
  f,g for Function of A, the carrier of L,
  u for
  Element of L;

theorem Th66:
  Bottom L is_a_unity_wrt the L_join of L
proof
  now
    let u;
    thus (the L_join of L).(Bottom L,u) = Bottom L"\/" u
      .= u by LATTICES:39;
  end;
  hence thesis by BINOP_1:12;
end;

theorem Th67:
  the L_join of L is having_a_unity
proof
  Bottom L is_a_unity_wrt the L_join of L by Th66;
  hence thesis by SETWISEO:def 2;
end;

theorem
  Bottom L = the_unity_wrt the L_join of L by Th28,Th67;

theorem Th69:
  f|B = g|B implies FinJoin(B,f) = FinJoin(B,g)
proof
  set J = the L_join of L;
A1: Bottom L = the_unity_wrt J by Th28,Th67;
  assume
A2: f|B = g|B;
  now
    per cases;
    suppose
A3:   B = {};
      hence FinJoin(B,f) = J$$({}.A,f)
        .= Bottom L by A1,Th67,SETWISEO:40
        .= J$$({}.A,g) by A1,Th67,SETWISEO:40
        .= FinJoin(B,g) by A3;
    end;
    suppose
      B <> {};
      hence thesis by A2,Th49;
    end;
  end;
  hence thesis;
end;

theorem Th70:
  (for x st x in B holds f.x [= u) implies FinJoin(B,f) [= u
proof
  assume
A1: for x st x in B holds f.x [= u;
  set J = the L_join of L;
A2: Bottom L = the_unity_wrt J by Th28,Th67;
  now
    per cases;
    suppose
      B = {};
      then FinJoin(B,f) = J$$({}.A,f)
        .= Bottom L by A2,Th67,SETWISEO:40;
      hence thesis by LATTICES:41;
    end;
    suppose
      B <> {};
      hence thesis by A1,Th47;
    end;
  end;
  hence thesis;
end;

theorem
  (for x st x in B holds f.x [= g.x) implies FinJoin(B,f) [= FinJoin(B,g
  )
proof
  assume
A1: for x st x in B holds f.x [= g.x;
  now
    let x;
    assume
A2: x in B;
    then f.x [= g.x by A1;
    hence f.x [= FinJoin(B,g) by A2,Th44;
  end;
  hence thesis by Th70;
end;

::
:: Upper bounded lattices
::

reserve L for 1_Lattice,
  f,g for Function of A, the carrier of L,
  u for
  Element of L;

theorem Th72:
  Top L is_a_unity_wrt the L_meet of L
proof
  now
    let u;
    thus (the L_meet of L).(Top L,u) = Top L"/\" u
      .= u by LATTICES:43;
  end;
  hence thesis by BINOP_1:12;
end;

theorem Th73:
  the L_meet of L is having_a_unity
proof
  Top L is_a_unity_wrt the L_meet of L by Th72;
  hence thesis by SETWISEO:def 2;
end;

theorem
  Top L = the_unity_wrt the L_meet of L by Th33,Th73;

theorem
  f|B = g|B implies FinMeet(B,f) = FinMeet(B,g)
proof
  assume
A1: f|B = g|B;
  reconsider f' = f, g' = g as Function of A, the carrier of L.:;
A2: FinMeet(B,g) = FinJoin(B,g');
  L.: is 0_Lattice & FinMeet(B,f) = FinJoin(B,f') by Th64;
  hence thesis by A1,A2,Th69;
end;

theorem Th76:
  (for x st x in B holds u [= f.x) implies u [= FinMeet(B,f)
proof
  reconsider f' = f as Function of A, the carrier of L.:;
  reconsider u' = u as Element of L.:;
  assume
  for x st x in B holds u [= f.x;
  then
A1: for x st x in B holds f'.x [= u' by Th53;
  L.: is 0_Lattice by Th64;
  then FinJoin(B,f') [= u' by A1,Th70;
  hence thesis by Th54;
end;

theorem
  (for x st x in B holds f.x [= g.x) implies FinMeet(B,f) [= FinMeet(B,g
  )
proof
  assume
A1: for x st x in B holds f.x [= g.x;
  now
    let x;
    assume
A2: x in B;
    then f.x [= g.x by A1;
    hence FinMeet(B,f) [= g.x by A2,Th56;
  end;
  hence thesis by Th76;
end;

theorem
  for L being 0_Lattice holds Bottom L = Top (L.:)
proof
  let L be 0_Lattice;
  reconsider u = Bottom L as Element of L.:;
  now
    let v be Element of L.:;
    reconsider v' = v as Element of L;
    thus v "\/" u = Bottom L "/\" v' by Th52
      .= u by LATTICES:40;
  end;
  hence thesis by RLSUB_2:85;
end;

theorem
  for L being 1_Lattice holds Top L = Bottom (L.:)
proof
  let L be 1_Lattice;
  reconsider u = Top L as Element of L.:;
  now
    let v be Element of L.:;
    reconsider v' = v as Element of L;
    thus v "/\" u = Top L "\/" v' by Th52
      .= u by LATTICES:44;
  end;
  hence thesis by RLSUB_2:84;
end;

::
:: Distributive lattices with the minimal element
::

definition
  mode D0_Lattice is distributive lower-bounded Lattice;
end;

reserve L for D0_Lattice,
  f,g for (Function of A, the carrier of L),
  u for
  Element of L;

theorem
  the L_meet of L is_distributive_wrt the L_join of L by Th37;

theorem Th81:
  (the L_meet of L).(u, FinJoin(B, f)) = FinJoin(B, (the L_meet of
  L)[;](u,f))
proof
A1: (the L_meet of L).(u,Bottom L) = u"/\"Bottom L
    .= Bottom L by LATTICES:40;
  the L_meet of L is_distributive_wrt the L_join of L & Bottom L =
  the_unity_wrt the L_join of L by Th28,Th37,Th67;
  hence thesis by A1,Th67,SETWOP_2:14;
end;

theorem
  (for x st x in B holds g.x = u "/\" f.x) implies u "/\" FinJoin(B,f) =
  FinJoin(B,g)
proof
  reconsider G = ((the L_meet of L)[;](u,f)) +* (g|B) as Function of A, the
  carrier of L by Th6;
  dom (g|B) = B by Th13;
  then
A1: G|B = g|B by FUNCT_4:24;
  assume
A2: for x st x in B holds g.x = u "/\" f.x;
  now
    let x;
    assume
    x in B;
    hence g.x = u "/\" f.x by A2
      .= ((the L_meet of L)[;](u,f)).x by FUNCOP_1:66;
  end;
  then G = (the L_meet of L)[;](u,f) by Th14;
  hence u "/\" FinJoin(B,f) = FinJoin(B,G) by Th81
    .= FinJoin(B,g) by A1,Th69;
end;

theorem
  u "/\" FinJoin(B,f) = FinJoin(B, (the L_meet of L)[;](u, f)) by Th81;

:: Heyting Lattices

definition
  let IT be Lattice;
  canceled;
  attr IT is Heyting means
  :Def6:
  IT is implicative lower-bounded;
end;

registration
  cluster Heyting Lattice;
  existence
  proof
    consider L being B_Lattice;
    take L;
    thus L is implicative lower-bounded by FILTER_0:40;
  end;
end;

registration
  cluster Heyting -> implicative lower-bounded Lattice;
  coherence by Def6;
  cluster implicative lower-bounded -> Heyting Lattice;
  coherence by Def6;
end;

definition
  mode H_Lattice is Heyting Lattice;
end;

registration
  cluster Heyting strict Lattice;
  existence
  proof
    consider L being strict B_Lattice;
    L is I_Lattice by FILTER_0:40;
    hence thesis;
  end;
end;

theorem
  for L being 0_Lattice holds L is H_Lattice iff for x,z being Element
  of L ex y being Element of L st x "/\" y [= z & for v being Element of L st x
  "/\" v [= z holds v [= y
proof
  let L be 0_Lattice;
  L is H_Lattice iff L is I_Lattice;
  hence thesis by FILTER_0:def 7;
end;

theorem
  for L being Lattice holds L is finite iff L.: is finite;

registration
  cluster finite -> lower-bounded Lattice;
  coherence
  proof
    let L be Lattice;
    assume
    L is finite;
    then reconsider
B = the carrier of L as Finite_Subset of the carrier of L by FINSUB_1:def 5;
    take c = FinMeet(B,id the carrier of L);
    let a be Element of L;
    (id the carrier of L).a [= a by FUNCT_1:35;
    then
A1: c [= a by Th56;
    hence c"/\"a = c by LATTICES:21;
    thus a"/\"c = c by A1,LATTICES:21;
  end;
  cluster finite -> upper-bounded Lattice;
  coherence
  proof
    let L be Lattice;
    assume
    L is finite;
    then reconsider
B = the carrier of L as Finite_Subset of the carrier of L by FINSUB_1:def 5;
    take c = FinJoin(B,id the carrier of L);
    let a be Element of L;
    a [= (id the carrier of L).a by FUNCT_1:35;
    then
A2: a [= c by Th44;
    hence c"\/"a = c by LATTICES:def 3;
    thus a"\/"c = c by A2,LATTICES:def 3;
  end;
end;

registration
  cluster finite -> bounded Lattice;
  coherence;
end;

registration
  cluster distributive finite -> Heyting Lattice;
  coherence
  proof
    let L be Lattice;
    assume
A1: L is distributive finite;
    then reconsider L as D0_Lattice;
    set C = the carrier of L;
    L is implicative
    proof
      let p,q be Element of C;
      defpred X[Element of C] means p "/\" $1 [= q;
      set B = {x where x is Element of C: X[x] };
A2:   B c= C from FRAENKEL:sch 10;
      then B is finite by A1,FINSET_1:13;
      then reconsider B as Finite_Subset of C by A2,FINSUB_1:def 5;
      take r = FinJoin(B,id C);
A3:   now
        let x be Element of C;
        assume
        x in B;
        then
A4:     ex x' being Element of C st x' = x & p "/\" x' [= q;
        ((the L_meet of L)[;](p,id C)).x = (the L_meet of L).(p,(id C).x)
        by FUNCOP_1:66
          .= p "/\" x by FUNCT_1:35;
        hence ((the L_meet of L)[;](p,id C)).x [= q by A4;
      end;
      p "/\" r = FinJoin(B,(the L_meet of L)[;](p,id C)) by Th81;
      hence p "/\" r [= q by A3,Th70;
      let r1 be Element of C;
      assume
      p "/\" r1 [= q;
      then
A5:   r1 in B;
      r1 = (id C).r1 by FUNCT_1:35;
      hence r1 [= r by A5,Th43;
    end;
    hence thesis;
  end;
end;

