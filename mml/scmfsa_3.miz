:: Computation in { \bf SCM_FSA }
::  by Andrzej Trybulec and Yatsuka Nakamura
::
:: Received February 7, 1996
:: Copyright (c) 1996 Association of Mizar Users

environ

 vocabularies NUMBERS, SUBSET_1, SCMFSA_2, AMI_1, RELAT_1, AMI_3, FSM_1,
      STRUCT_0, FUNCT_4, FUNCOP_1, XBOOLE_0, TARSKI, FUNCT_1, XXREAL_0,
      ARYTM_3, GRAPHSP, SCMNORM, COMPLEX1, PARTFUN1, FINSEQ_1, FINSEQ_2,
      CARD_1, INT_1, CIRCUIT2, ARYTM_1, ORDINAL1, AMISTD_5, FINSET_1,
      ZFMISC_1, PBOOLE;
 notations TARSKI, XBOOLE_0, SUBSET_1, NUMBERS,
      XCMPLX_0, INT_2, ZFMISC_1, RELAT_1, PBOOLE,
      FUNCT_1, PARTFUN1, FUNCT_4, INT_1, NAT_1, DOMAIN_1, FINSET_1,
      STRUCT_0, FUNCOP_1,
      FINSEQ_1, FINSEQ_2, COMPOS_1, EXTPRO_1, AMI_1,
      AMI_3, FUNCT_7, SCMFSA_2, XXREAL_0, AMISTD_5;
 constructors DOMAIN_1, XXREAL_0, INT_2, AMI_3, SCMFSA_2, RELSET_1,
      PRE_POLY, AMI_1, SCMFSA_1, AMISTD_5, AMISTD_2, PBOOLE;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, NUMBERS, XREAL_0, INT_1,
      FINSEQ_1, CARD_3, STRUCT_0, AMI_1, AMI_3, SCMFSA_2, FINSET_1, ZFMISC_1,
      ORDINAL1, RELSET_1, FUNCT_2, COMPOS_1, EXTPRO_1, AMISTD_5, CARD_1,
      PBOOLE;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions COMPOS_1, EXTPRO_1, AMI_1, AMI_3, FUNCOP_1, SCMFSA_2, AMISTD_5,
      AMI_2;
 theorems AMI_1, AMI_3, GRFUNC_1, FUNCOP_1, TARSKI, FUNCT_4, FUNCT_1,
      ZFMISC_1, INT_1, RELAT_1, SCMFSA_2, SCMFSA_1, ABSVALUE, FINSEQ_2,
      XBOOLE_0, XBOOLE_1, NUMBERS, PBOOLE, PARTFUN1, COMPOS_1, EXTPRO_1,
      AMISTD_5;

begin

reserve k for Element of NAT,
  da,db for Int-Location,
  fa for FinSeq-Location;

theorem
  not IC SCM+FSA in Int-Locations
proof
  assume IC SCM+FSA in Int-Locations;
  then IC SCM+FSA is Int-Location by SCMFSA_2:11;
  then ObjectKind IC SCM+FSA = INT by SCMFSA_2:26;
  hence contradiction by COMPOS_1:def 6,NUMBERS:27;
end;

theorem
  not IC SCM+FSA in FinSeq-Locations
proof
  assume IC SCM+FSA in FinSeq-Locations;
  then IC SCM+FSA is FinSeq-Location by SCMFSA_2:12;
  then ObjectKind IC SCM+FSA = INT* by SCMFSA_2:27;
  hence contradiction by COMPOS_1:def 6,SCMFSA_1:13;
end;

begin :: Finite partial states of SCM+FSA

definition
 let s be State of SCM+FSA, p be preProgram of SCM+FSA;
 redefine func s +* p -> State of SCM+FSA;
 coherence;
end;

canceled 8;

theorem
  for s being State of SCM+FSA, iloc being Element of NAT
  , a being Int-Location holds s.a = (s +* Start-At(iloc,SCM+FSA)).a
proof
  let s be State of SCM+FSA, iloc be Element of NAT, a be
  Int-Location;
  a in the carrier of SCM+FSA;
  then a in dom s by PARTFUN1:def 4;
  then
A1: dom (Start-At(iloc,SCM+FSA)) = {IC SCM+FSA} &
 a in dom s \/ dom (Start-At(iloc,SCM+FSA))
  by FUNCOP_1:19,XBOOLE_0:def 3;
  a <> IC SCM+FSA by SCMFSA_2:81;
  then not a in {IC SCM+FSA} by TARSKI:def 1;
  hence thesis by A1,FUNCT_4:def 1;
end;

theorem
  for s being State of SCM+FSA, iloc being Element of NAT
  , a being FinSeq-Location holds s.a = (s +* Start-At(iloc,SCM+FSA)).a
proof
  let s be State of SCM+FSA, iloc be Element of NAT, a be
  FinSeq-Location;
  a in the carrier of SCM+FSA;
  then a in dom s by PARTFUN1:def 4;
  then
A1: dom (Start-At(iloc,SCM+FSA)) = {IC SCM+FSA} &
 a in dom s \/ dom (Start-At(iloc,SCM+FSA))
  by FUNCOP_1:19,XBOOLE_0:def 3;
  a <> IC SCM+FSA by SCMFSA_2:82;
  then not a in {IC SCM+FSA} by TARSKI:def 1;
  hence thesis by A1,FUNCT_4:def 1;
end;

begin :: Autonomic finite partial states of SCM+FSA

definition
  let la be Int-Location;
  let a be Integer;
  redefine func la .--> a -> FinPartState of SCM+FSA;
  coherence
  proof
    a is Element of INT & ObjectKind la = INT by INT_1:def 2,SCMFSA_2:26;
    hence thesis by COMPOS_1:5;
  end;
end;

registration
 cluster SCM+FSA -> IC-recognized;
 coherence
  proof
  for p being autonomic FinPartState of SCM+FSA st DataPart p <>
  {} holds IC SCM+FSA in dom p
proof
  let p be autonomic FinPartState of SCM+FSA;
  assume DataPart p <> {};
  then
A1: dom DataPart p <> {};
  assume not IC SCM+FSA in dom p;
  then
A2: dom p misses {IC SCM+FSA} by ZFMISC_1:56;
  p is not autonomic
  proof
    set il =the  Element of (NAT) \ dom p;
    set d2 =the  Element of Int-Locations \ dom p;
    set d1 =the  Element of dom DataPart p;
A3: dom DataPart p c= Data-Locations SCM+FSA by RELAT_1:87;
    not NAT c= dom p;
    then
A4: (NAT) \ dom p <> {} by XBOOLE_1:37;
    then il in NAT by XBOOLE_0:def 5;
    then reconsider il as Element of NAT;
    not Int-Locations c= dom p;
    then
A5: Int-Locations \ dom p <> {} by XBOOLE_1:37;
    then d2 in Int-Locations by XBOOLE_0:def 5;
    then reconsider d2 as Int-Location by SCMFSA_2:11;
A6: d1 in dom DataPart p by A1;
    DataPart p c= NPP p by COMPOS_1:169;
    then dom DataPart p c= dom NPP p by RELAT_1:25;
    then
A7: d1 in dom NPP p by A6;
    dom DataPart p c= the carrier of SCM+FSA by RELAT_1:def 18;
    then reconsider d1 as Element of SCM+FSA by A6;
    per cases by A6,A3,XBOOLE_0:def 3,SCMFSA_2:127;
    suppose
      d1 in Int-Locations;
      then reconsider d1 as Int-Location by SCMFSA_2:11;
      set p1 = p +* ((il .--> (d1:=d2)) +* ( d2.--> 0)
       +* Start-At(il,SCM+FSA));
      set p2 = p +* ((il .--> (d1:=d2)) +* ( d2.--> 1)
       +* Start-At(il,SCM+FSA));
      consider s1 being State of SCM+FSA such that
A8:   p1 c= s1 by PBOOLE:156;
      not il in dom p by A4,XBOOLE_0:def 5;
      then
A9:   dom p misses {il} by ZFMISC_1:56;
      not d2 in dom p by A5,XBOOLE_0:def 5;
      then
A10:   dom p misses {d2} by ZFMISC_1:56;
      consider s2 being State of SCM+FSA such that
A11:  p2 c= s2 by PBOOLE:156;
      take P = ProgramPart s1, Q = ProgramPart s2;
      dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA)) = dom((il
      .--> (d1:=d2)) +* ( d2.--> 0)) \/ dom(Start-At(il,SCM+FSA))
       by FUNCT_4:def 1
        .= dom((il .--> (d1:=d2)) +* ( d2.--> 0)) \/ {IC SCM+FSA} by
FUNCOP_1:19
        .= dom(il .--> (d1:=d2)) \/ dom ( d2.--> 0) \/ {IC SCM+FSA} by
FUNCT_4:def 1
        .= {il} \/ dom ( d2.--> 0) \/ {IC SCM+FSA} by FUNCOP_1:19
        .= {il} \/ {d2} \/ {IC SCM+FSA} by FUNCOP_1:19;
      then dom p /\ dom ((il .--> (d1:=d2)) +* ( d2.--> 0)
       +* Start-At(il,SCM+FSA)) =
      dom p /\ ({il} \/ {d2}) \/ dom p /\ {IC SCM+FSA} by XBOOLE_1:23
        .= dom p /\ ({il} \/ {d2}) \/ {} by A2,XBOOLE_0:def 7
        .= dom p /\ {il} \/ dom p /\ {d2} by XBOOLE_1:23
        .= dom p /\ {il} \/ {} by A10,XBOOLE_0:def 7
        .= {} by A9,XBOOLE_0:def 7;
      then
      dom p misses dom ((il .--> (d1:=d2)) +* ( d2.--> 0)
       +* Start-At(il,SCM+FSA))
      by XBOOLE_0:def 7;
      then p c= p1 by FUNCT_4:33;
      then
A12:   p c= s1 by A8,XBOOLE_1:1;
      hence ProgramPart p c= P by RELAT_1:105;
      dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA)) = dom((il
      .--> (d1:=d2)) +* ( d2.--> 1)) \/ dom(Start-At(il,SCM+FSA))
       by FUNCT_4:def 1
        .= dom((il .--> (d1:=d2)) +* ( d2.--> 1)) \/ {IC SCM+FSA} by
FUNCOP_1:19
        .= dom(il .--> (d1:=d2)) \/ dom ( d2.--> 1) \/ {IC SCM+FSA} by
FUNCT_4:def 1
        .= {il} \/ dom ( d2.--> 1) \/ {IC SCM+FSA} by FUNCOP_1:19
        .= {il} \/ {d2} \/ {IC SCM+FSA} by FUNCOP_1:19;
      then dom p /\ dom ((il .--> (d1:=d2)) +* ( d2.--> 1)
       +* Start-At(il,SCM+FSA)) =
      dom p /\ ({il} \/ {d2}) \/ dom p /\ {IC SCM+FSA} by XBOOLE_1:23
        .= dom p /\ ({il} \/ {d2}) \/ {} by A2,XBOOLE_0:def 7
        .= dom p /\ {il} \/ dom p /\ {d2} by XBOOLE_1:23
        .= dom p /\ {il} \/ {} by A10,XBOOLE_0:def 7
        .= {} by A9,XBOOLE_0:def 7;
      then
      dom p misses dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +*
       Start-At(il,SCM+FSA))
      by XBOOLE_0:def 7;
      then p c= p2 by FUNCT_4:33;
      then
A13:    p c= s2 by A11,XBOOLE_1:1;
      hence ProgramPart p c= Q by RELAT_1:105;
      take s1,s2;
      thus p c= s1 by A12;
      thus p c= s2 by A13;
      take 1;
A14:  dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA))
 = dom ((il
      .--> (d1:=d2)) +* ( d2.--> 1)) \/ dom(Start-At(il,SCM+FSA))
       by FUNCT_4:def 1;
A15:  dom NPP p c= the carrier of SCM+FSA by RELAT_1:def 18;
A16:  dom ( Comput(ProgramPart(s2),s2,1)) = the carrier of SCM+FSA by
PARTFUN1:def 4;
A17:  dom ( Comput(ProgramPart(s2),s2,1)|dom NPP p) = dom NPP p
       by RELAT_1:91,A15,A16;
A18:  dom ((il .--> (d1:=d2)) +* ( d2.--> 1)) = dom (il .--> (d1:=d2)) \/
      dom ( d2.--> 1) by FUNCT_4:def 1;
A19:  dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA))
 = dom ((il
      .--> (d1:=d2)) +* ( d2.--> 0)) \/ dom(Start-At(il,SCM+FSA))
       by FUNCT_4:def 1;
A20:  dom p1 = dom p \/ dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +*
      Start-At(il,SCM+FSA)) by FUNCT_4:def 1;
A21:  dom(Start-At(il,SCM+FSA)) = {IC SCM+FSA} by FUNCOP_1:19;
      then
A22:  IC SCM+FSA in dom (Start-At(il,SCM+FSA)) by TARSKI:def 1;
      then
A23:  IC SCM+FSA in dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +*
 Start-At(il,SCM+FSA)
      ) by A19,XBOOLE_0:def 3;
      then IC SCM+FSA in dom p1 by A20,XBOOLE_0:def 3;
      then
A24:  IC s1 = p1.IC SCM+FSA by A8,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 0) +*
         Start-At(il,SCM+FSA)).IC SCM+FSA by A23,FUNCT_4:14
        .= (Start-At(il,SCM+FSA)).IC SCM+FSA by A22,FUNCT_4:14
        .= il by FUNCOP_1:87;
      il <> IC SCM+FSA by COMPOS_1:3;
      then
A25:  not il in dom (Start-At(il,SCM+FSA)) by A21,TARSKI:def 1;
A26:  dom ((il .--> (d1:=d2)) +* ( d2.--> 0)) = dom (il .--> (d1:=d2)) \/
      dom ( d2.--> 0) by FUNCT_4:def 1;
      d2 <> IC SCM+FSA by SCMFSA_2:81;
      then
A27:  not d2 in dom (Start-At(il,SCM+FSA)) by A21,TARSKI:def 1;
A28:  dom (d2 .--> 0) = {d2} by FUNCOP_1:19;
      then
A29:  d2 in dom (d2 .--> 0) by TARSKI:def 1;
      then d2 in dom ((il .--> (d1:=d2)) +* ( d2.--> 0)) by A26,XBOOLE_0:def 3;
      then
A30:  d2 in dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA))
 by A19,XBOOLE_0:def 3;
      then d2 in dom p1 by A20,XBOOLE_0:def 3;
      then
A31:  s1.d2 = p1.d2 by A8,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA)).d2
         by A30,FUNCT_4:14
        .= ((il .--> (d1:=d2)) +* ( d2.--> 0)).d2 by A27,FUNCT_4:12
        .= (d2.--> 0).d2 by A29,FUNCT_4:14
        .= 0 by FUNCOP_1:87;
      il <> d2 by SCMFSA_2:84;
      then
A32:  not il in dom (d2 .--> 0) by A28,TARSKI:def 1;
      dom (il .--> (d1:=d2)) = {il} by FUNCOP_1:19;
      then il in dom (il .--> (d1:=d2)) by TARSKI:def 1;
      then il in dom ((il .--> (d1:=d2)) +* ( d2.--> 0)) by A26,XBOOLE_0:def 3;
      then
A33:  il in dom ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA))
 by A19,XBOOLE_0:def 3;
      then il in dom p1 by A20,XBOOLE_0:def 3;
      then
A34:  s1.il = p1.il by A8,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA)).il
         by A33,FUNCT_4:14
        .= ((il .--> (d1:=d2)) +* ( d2.--> 0)).il by A25,FUNCT_4:12
        .= (il .--> (d1:=d2)).il by A32,FUNCT_4:12
        .=(d1:=d2) by FUNCOP_1:87;
A35:  dom NPP p c= the carrier of SCM+FSA by RELAT_1:def 18;
A36: dom ( Comput(ProgramPart(s1),s1,1)) = the carrier of SCM+FSA
        by PARTFUN1:def 4;
A37:  dom ( Comput(ProgramPart(s1),s1,1)|dom NPP p) = dom NPP p
          by RELAT_1:91,A35,A36;
A38:  dom p2 = dom p \/ dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +*
      Start-At(il,SCM+FSA)) by FUNCT_4:def 1;
A39:  dom(Start-At(il,SCM+FSA)) = {IC SCM+FSA} by FUNCOP_1:19;
      then
A40:  IC SCM+FSA in dom (Start-At(il,SCM+FSA)) by TARSKI:def 1;
      then
A41:  IC SCM+FSA in dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +*
 Start-At(il,SCM+FSA)
      ) by A14,XBOOLE_0:def 3;
      then IC SCM+FSA in dom p2 by A38,XBOOLE_0:def 3;
      then
A42:  IC s2 = p2.IC SCM+FSA by A11,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 1) +*
         Start-At(il,SCM+FSA)).IC SCM+FSA by A41,FUNCT_4:14
        .= (Start-At(il,SCM+FSA)).IC SCM+FSA by A40,FUNCT_4:14
        .= il by FUNCOP_1:87;
      d2 <> IC SCM+FSA by SCMFSA_2:81;
      then
A43:  not d2 in dom (Start-At(il,SCM+FSA)) by A39,TARSKI:def 1;
A44:  dom (d2 .--> 1) = {d2} by FUNCOP_1:19;
      then
A45:  d2 in dom (d2 .--> 1) by TARSKI:def 1;
      then d2 in dom ((il .--> (d1:=d2)) +* ( d2.--> 1)) by A18,XBOOLE_0:def 3;
      then
A46:  d2 in dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA))
 by A14,XBOOLE_0:def 3;
      then d2 in dom p2 by A38,XBOOLE_0:def 3;
      then
A47:  s2.d2 = p2.d2 by A11,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA)).d2
         by A46,FUNCT_4:14
        .= ((il .--> (d1:=d2)) +* ( d2.--> 1)).d2 by A43,FUNCT_4:12
        .= (d2.--> 1).d2 by A45,FUNCT_4:14
        .= 1 by FUNCOP_1:87;
      il <> IC SCM+FSA by COMPOS_1:3;
      then
A48:  not il in dom (Start-At(il,SCM+FSA)) by A39,TARSKI:def 1;
      il <> d2 by SCMFSA_2:84;
      then
A49:  not il in dom (d2 .--> 1) by A44,TARSKI:def 1;
      dom (il .--> (d1:=d2)) = {il} by FUNCOP_1:19;
      then il in dom (il .--> (d1:=d2)) by TARSKI:def 1;
      then il in dom ((il .--> (d1:=d2)) +* ( d2.--> 1)) by A18,XBOOLE_0:def 3;
      then
A50:  il in dom ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA))
 by A14,XBOOLE_0:def 3;
      then il in dom p2 by A38,XBOOLE_0:def 3;
      then
A51:  s2.il = p2.il by A11,GRFUNC_1:8
        .= ((il .--> (d1:=d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA)).il
         by A50,FUNCT_4:14
        .= ((il .--> (d1:=d2)) +* ( d2.--> 1)).il by A48,FUNCT_4:12
        .= (il .--> (d1:=d2)).il by A49,FUNCT_4:12
        .=(d1:=d2) by FUNCOP_1:87;
A52:  (ProgramPart s2)/.IC s2
 = s2.IC s2 by COMPOS_1:38;
A53:  Comput(ProgramPart(s2),s2,0+1).d1
 = (Following(ProgramPart s2,Comput(ProgramPart(s2),
s2,0))).d1 by EXTPRO_1:4
        .= (Following(ProgramPart s2,s2)).d1 by EXTPRO_1:3
        .= 1 by A42,A51,A47,A52,SCMFSA_2:89;
A54:  (ProgramPart s1)/.IC s1
 = s1.IC s1 by COMPOS_1:38;
      Comput(ProgramPart(s1),s1,0+1).d1 =
       (Following(ProgramPart s1,Comput(ProgramPart(s1),s1,0))).d1
       by EXTPRO_1:4
        .= (Following(ProgramPart s1,s1)).d1 by EXTPRO_1:3
        .= 0 by A24,A34,A31,A54,SCMFSA_2:89;
      then ( Comput(ProgramPart(s1),s1,1)|dom NPP p).d1 = 0 by
          FUNCT_1:70,A7,A37;
      hence Comput(P,s1,1)|dom NPP p <> Comput(Q,s2,1)|dom NPP p
       by A53,FUNCT_1:70,A7,A17;
    end;
    suppose
      d1 in FinSeq-Locations;
      then reconsider d1 as FinSeq-Location by SCMFSA_2:12;
      set p1 = p +* ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
       Start-At(il,SCM+FSA)
      );
      set p2 = p +* ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
       Start-At(il,SCM+FSA)
      );
      consider s1 being State of SCM+FSA such that
A55:  p1 c= s1 by PBOOLE:156;
      not il in dom p by A4,XBOOLE_0:def 5;
      then
A56:  dom p misses {il} by ZFMISC_1:56;
A57:  dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +* Start-At(il,SCM+FSA))
 =
dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) \/ dom(Start-At(il,SCM+FSA))
 by FUNCT_4:def 1;
      consider k such that
A58:  k = abs(s1.d2) and
A59:  Exec(d1:=<0,...,0>d2, s1).d1 = k |-> 0 by SCMFSA_2:101;
A60:  dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) = dom (il .--> (
      d1:=<0,...,0>d2)) \/ dom ( d2.--> 0) by FUNCT_4:def 1;
A61:  dom p1 = dom p \/ dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)
      +* Start-At(il,SCM+FSA)) by FUNCT_4:def 1;
A62:  dom(Start-At(il,SCM+FSA)) = {IC SCM+FSA} by FUNCOP_1:19;
      then
A63:  IC SCM+FSA in dom (Start-At(il,SCM+FSA)) by TARSKI:def 1;
      then
A64:  IC SCM+FSA in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
      Start-At(il,SCM+FSA)) by A57,XBOOLE_0:def 3;
      then IC SCM+FSA in dom p1 by A61,XBOOLE_0:def 3;
      then
A65:  IC s1 = p1.IC SCM+FSA by A55,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
         Start-At(il,SCM+FSA)).IC
      SCM+FSA by A64,FUNCT_4:14
        .= (Start-At(il,SCM+FSA)).IC SCM+FSA by A63,FUNCT_4:14
        .= il by FUNCOP_1:87;
      il <> IC SCM+FSA by COMPOS_1:3;
      then
A66:  not il in dom (Start-At(il,SCM+FSA)) by A62,TARSKI:def 1;
      consider s2 being State of SCM+FSA such that
A67:  p2 c= s2 by PBOOLE:156;
      d2 <> IC SCM+FSA by SCMFSA_2:81;
      then
A68:  not d2 in dom (Start-At(il,SCM+FSA)) by A62,TARSKI:def 1;
A69:  dom (d2 .--> 0) = {d2} by FUNCOP_1:19;
      then
A70:  d2 in dom (d2 .--> 0) by TARSKI:def 1;
      then d2 in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) by A60,
XBOOLE_0:def 3;
      then
A71:  d2 in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +* Start-At(
      il,SCM+FSA)) by A57,XBOOLE_0:def 3;
      then d2 in dom p1 by A61,XBOOLE_0:def 3;
      then s1.d2 = p1.d2 by A55,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
         Start-At(il,SCM+FSA)).d2 by A71,FUNCT_4:14
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)).d2 by A68,FUNCT_4:12
        .= (d2.--> 0).d2 by A70,FUNCT_4:14
        .= 0 by FUNCOP_1:87;
      then
A72:  k |-> 0 = 0 |-> 0 by A58,ABSVALUE:7
        .= {} by FINSEQ_2:72;
      not d2 in dom p by A5,XBOOLE_0:def 5;
      then
A73:  dom p misses {d2} by ZFMISC_1:56;
      il <> d2 by SCMFSA_2:84;
      then
A74:  not il in dom (d2 .--> 0) by A69,TARSKI:def 1;
      dom (il .--> (d1:=<0,...,0>d2)) = {il} by FUNCOP_1:19;
      then il in dom (il .--> (d1:=<0,...,0>d2)) by TARSKI:def 1;
      then il in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) by A60,
XBOOLE_0:def 3;
      then
A75:  il in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +* Start-At(
      il,SCM+FSA)) by A57,XBOOLE_0:def 3;
      then il in dom p1 by A61,XBOOLE_0:def 3;
      then
A76:  s1.il = p1.il by A55,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
         Start-At(il,SCM+FSA)).il by A75,FUNCT_4:14
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)).il by A66,FUNCT_4:12
        .= (il .--> (d1:=<0,...,0>d2)).il by A74,FUNCT_4:12
        .=(d1:=<0,...,0>d2) by FUNCOP_1:87;
A77:  dom NPP p c= the carrier of SCM+FSA by RELAT_1:def 18;
A78:   dom Comput(ProgramPart(s1),s1,1) = the carrier of SCM+FSA by
PARTFUN1:def 4;
A79:  dom ( Comput(ProgramPart(s1),s1,1)|dom NPP p) = dom NPP p
         by RELAT_1:91,A77,A78;
A80:  dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) = dom (il .--> (
      d1:=<0,...,0>d2)) \/ dom ( d2.--> 1) by FUNCT_4:def 1;
      consider k such that
A81:  k = abs(s2.d2) and
A82:  Exec(d1:=<0,...,0>d2, s2).d1 = k |-> 0 by SCMFSA_2:101;
A83:  dom p2 = dom p \/ dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)
      +* Start-At(il,SCM+FSA)) by FUNCT_4:def 1;
      take P = ProgramPart s1, Q = ProgramPart s2;
      dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
       Start-At(il,SCM+FSA)) =
dom((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) \/ dom(Start-At(il,SCM+FSA))
by FUNCT_4:def 1
        .= dom((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0)) \/ {IC SCM+FSA}
      by FUNCOP_1:19
        .= dom(il .--> (d1:=<0,...,0>d2)) \/ dom ( d2.--> 0) \/ {IC SCM+FSA}
      by FUNCT_4:def 1
        .= {il} \/ dom ( d2.--> 0) \/ {IC SCM+FSA} by FUNCOP_1:19
        .= {il} \/ {d2} \/ {IC SCM+FSA} by FUNCOP_1:19;
      then dom p /\ dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
Start-At(il,SCM+FSA)) = dom p /\ ({il} \/ {d2}) \/ dom p /\ {IC SCM+FSA}
 by XBOOLE_1:23
        .= dom p /\ ({il} \/ {d2}) \/ {} by A2,XBOOLE_0:def 7
        .= dom p /\ {il} \/ dom p /\ {d2} by XBOOLE_1:23
        .= dom p /\ {il} \/ {} by A73,XBOOLE_0:def 7
        .= {} by A56,XBOOLE_0:def 7;
      then dom p misses dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 0) +*
      Start-At(il,SCM+FSA)) by XBOOLE_0:def 7;
      then p c= p1 by FUNCT_4:33;
      then
A84:    p c= s1 by A55,XBOOLE_1:1;
      hence ProgramPart p c= P by RELAT_1:105;
      dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA))
       =
dom((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) \/ dom(Start-At(il,SCM+FSA))
by FUNCT_4:def 1
        .= dom((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) \/ {IC SCM+FSA}
      by FUNCOP_1:19
        .= dom(il .--> (d1:=<0,...,0>d2)) \/ dom ( d2.--> 1) \/ {IC SCM+FSA}
      by FUNCT_4:def 1
        .= {il} \/ dom ( d2.--> 1) \/ {IC SCM+FSA} by FUNCOP_1:19
        .= {il} \/ {d2} \/ {IC SCM+FSA} by FUNCOP_1:19;
      then dom p /\ dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
      Start-At(il,SCM+FSA)) = dom p /\ ({il} \/ {d2}) \/ dom p /\ {IC SCM+FSA}
       by XBOOLE_1:23
        .= dom p /\ ({il} \/ {d2}) \/ {} by A2,XBOOLE_0:def 7
        .= dom p /\ {il} \/ dom p /\ {d2} by XBOOLE_1:23
        .= dom p /\ {il} \/ {} by A73,XBOOLE_0:def 7
        .= {} by A56,XBOOLE_0:def 7;
      then dom p misses dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
      Start-At(il,SCM+FSA)) by XBOOLE_0:def 7;
      then p c= p2 by FUNCT_4:33;
      then
A85:   p c= s2 by A67,XBOOLE_1:1;
      hence ProgramPart p c= Q by RELAT_1:105;
      take s1,s2;
      thus p c= s1 by A84;
      thus p c= s2 by A85;
      take 1;
A86:  dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +* Start-At(il,SCM+FSA))
 =
dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) \/ dom(Start-At(il,SCM+FSA))
 by FUNCT_4:def 1;
A87:  dom(Start-At(il,SCM+FSA)) = {IC SCM+FSA} by FUNCOP_1:19;
      then
A88:  IC SCM+FSA in dom (Start-At(il,SCM+FSA)) by TARSKI:def 1;
      then
A89:  IC SCM+FSA in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
      Start-At(il,SCM+FSA)) by A86,XBOOLE_0:def 3;
      then IC SCM+FSA in dom p2 by A83,XBOOLE_0:def 3;
      then
A90:  IC s2 = p2.IC SCM+FSA by A67,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
         Start-At(il,SCM+FSA)).IC
      SCM+FSA by A89,FUNCT_4:14
        .= (Start-At(il,SCM+FSA)).IC SCM+FSA by A88,FUNCT_4:14
        .= il by FUNCOP_1:87;
      d2 <> IC SCM+FSA by SCMFSA_2:81;
      then
A91:  not d2 in dom (Start-At(il,SCM+FSA)) by A87,TARSKI:def 1;
A92:  dom (d2 .--> 1) = {d2} by FUNCOP_1:19;
      then
A93:  d2 in dom (d2 .--> 1) by TARSKI:def 1;
      then d2 in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) by A80,
XBOOLE_0:def 3;
      then
A94:  d2 in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +* Start-At(
      il,SCM+FSA)) by A86,XBOOLE_0:def 3;
      then d2 in dom p2 by A83,XBOOLE_0:def 3;
      then s2.d2 = p2.d2 by A67,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
         Start-At(il,SCM+FSA)).d2 by A94,FUNCT_4:14
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)).d2 by A91,FUNCT_4:12
        .= (d2.--> 1).d2 by A93,FUNCT_4:14
        .= 1 by FUNCOP_1:87;
      then
A95:  k |-> 0 = 1 |-> 0 by A81,ABSVALUE:def 1
        .= <*0*> by FINSEQ_2:73;
      il <> IC SCM+FSA by COMPOS_1:3;
      then
A96:  not il in dom (Start-At(il,SCM+FSA)) by A87,TARSKI:def 1;
      il <> d2 by SCMFSA_2:84;
      then
A97:  not il in dom (d2 .--> 1) by A92,TARSKI:def 1;
      dom (il .--> (d1:=<0,...,0>d2)) = {il} by FUNCOP_1:19;
      then il in dom (il .--> (d1:=<0,...,0>d2)) by TARSKI:def 1;
      then il in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)) by A80,
XBOOLE_0:def 3;
      then
A98:  il in dom ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +* Start-At(
      il,SCM+FSA)) by A86,XBOOLE_0:def 3;
      then il in dom p2 by A83,XBOOLE_0:def 3;
      then
A99:  s2.il = p2.il by A67,GRFUNC_1:8
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1) +*
         Start-At(il,SCM+FSA)).il by A98,FUNCT_4:14
        .= ((il .--> (d1:=<0,...,0>d2)) +* ( d2.--> 1)).il by A96,FUNCT_4:12
        .= (il .--> (d1:=<0,...,0>d2)).il by A97,FUNCT_4:12
        .=(d1:=<0,...,0>d2) by FUNCOP_1:87;
A100:  (ProgramPart s2)/.IC s2
 = s2.IC s2 by COMPOS_1:38;
A101:  Comput(ProgramPart(s2),s2,0+1).d1 =
 (Following(ProgramPart s2,Comput(ProgramPart(s2),s2,
0))).d1
 by EXTPRO_1:4
        .= (Following(ProgramPart s2,s2)).d1 by EXTPRO_1:3
        .= <*0*> by A90,A99,A82,A95,A100;
A102:  dom NPP p c= the carrier of SCM+FSA by RELAT_1:def 18;
A103: dom ( Comput(ProgramPart(s2),s2,1)) = the carrier of SCM+FSA
        by PARTFUN1:def 4;
A104:  dom ( Comput(ProgramPart(s2),s2,1)|dom NPP p) = dom NPP p
         by RELAT_1:91,A102,A103;
A105:  (ProgramPart s1)/.IC s1
 = s1.IC s1 by COMPOS_1:38;
      Comput(ProgramPart(s1),s1,0+1).d1
       = (Following(ProgramPart s1,Comput(ProgramPart (s1),s1,0))).d1
        by EXTPRO_1:4
        .= (Following(ProgramPart s1,s1)).d1 by EXTPRO_1:3
        .= {} by A65,A76,A59,A72,A105;
      then ( Comput(ProgramPart(s1),s1,1)|dom NPP p).d1 = {} by
FUNCT_1:70,A7,A79;
      hence Comput(P,s1,1)|dom NPP p <> Comput(Q,s2,1)|dom NPP p
        by A101,FUNCT_1:70,A7,A104;
    end;
  end;
  hence contradiction;
end;
   hence thesis by AMISTD_5:3;
  end;
end;

canceled 4;

registration
 cluster SCM+FSA -> CurIns-recognized;
 coherence
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s be State of
  SCM+FSA such that
A1: p c= s;
  let P be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT such that
A2: ProgramPart p c= P;
  let i be Element of NAT;
  set Csi = Comput(P,s,i);
  set loc = IC Csi;
  reconsider ll = loc as Element of NAT;
  set loc1 = (ll+1);
A3: loc in dom ProgramPart p iff loc in dom p /\ NAT by RELAT_1:90;
  assume not IC Comput(P,s,i) in dom ProgramPart(p);
  then
A4: not loc in dom p by A3,XBOOLE_0:def 4;
  set p2 = p +* (loc .--> goto loc1);
  set p1 = p +* (loc .--> goto loc);
A5: dom p1 = dom p \/ dom (loc .--> goto loc) by FUNCT_4:def 1;
A6: dom (loc .--> goto loc1) = {loc} by FUNCOP_1:19;
  then
A7: loc in dom (loc .--> goto loc1) by TARSKI:def 1;
A8: dom p2 = dom p \/ dom (loc .--> goto loc1) by FUNCT_4:def 1;
  then
A9: loc in dom p2 by A7,XBOOLE_0:def 3;
  consider s2 being State of SCM+FSA such that
A10: p2 c= s2 by PBOOLE:156;
  set Cs2i = Comput(ProgramPart(s2),s2,i);
  consider s1 being State of SCM+FSA such that
A11: p1 c= s1 by PBOOLE:156;
  set Cs1i = Comput(ProgramPart(s1),s1,i);
A12: dom (loc .--> goto loc) = {loc} by FUNCOP_1:19;
  then
A13: loc in dom (loc .--> goto loc) by TARSKI:def 1;
  then
A14: loc in dom p1 by A5,XBOOLE_0:def 3;
  p is not autonomic
  proof
A15: now
      let x be set;
      assume
A16:  x in dom p;
      dom p misses dom (loc .--> goto loc1) by A4,A6,ZFMISC_1:56;
      then
A17:  p.x = p2.x by A16,FUNCT_4:17;
      x in dom p2 by A8,A16,XBOOLE_0:def 3;
      hence p.x = s2.x by A10,A17,GRFUNC_1:8;
    end;
    (loc .--> goto loc1).loc = goto loc1 by FUNCOP_1:87;
    then p2.loc = goto loc1 by A7,FUNCT_4:14;
    then s2.loc = goto loc1 by A9,A10,GRFUNC_1:8;
    then
A18: Cs2i.loc = goto loc1 by AMI_1:54;
    (loc .--> goto loc).loc = goto loc by FUNCOP_1:87;
    then p1.loc = goto loc by A13,FUNCT_4:14;
    then s1.loc = goto loc by A14,A11,GRFUNC_1:8;
    then
A19: Cs1i.loc = goto loc by AMI_1:54;
    take P1=ProgramPart s1, P2=ProgramPart s2;
A20: now
      let x be set;
      assume
A21:  x in dom p;
      dom p misses dom (loc .--> goto loc) by A4,A12,ZFMISC_1:56;
      then
A22:  p.x = p1.x by A21,FUNCT_4:17;
      x in dom p1 by A5,A21,XBOOLE_0:def 3;
      hence p.x = s1.x by A11,A22,GRFUNC_1:8;
    end;
    dom s1 = the carrier of SCM+FSA by PARTFUN1:def 4;
    then dom p c= dom s1 by RELAT_1:def 18;
    then
A23: p c= s1 by A20,GRFUNC_1:8;
    hence
A24: ProgramPart p c= P1 by RELAT_1:105;
    dom s2 = the carrier of SCM+FSA by PARTFUN1:def 4;
    then dom p c= dom s2 by RELAT_1:def 18;
    then
A25:  p c= s2 by A15,GRFUNC_1:8;
    hence
A26:  ProgramPart p c= P2 by RELAT_1:105;
    take s1, s2;
    thus p c= s1 by A23;
    then
A27: (Cs1i|dom NPP p) = (Csi|dom NPP p) by A1,EXTPRO_1:def 9,A24,A2;
    thus p c= s2 by A25;
    then
A28: (Cs1i|dom NPP p) = (Cs2i|dom NPP p) by EXTPRO_1:def 9,A26,A2,A1,A27;
    take k = i+1;
    set Cs1k = Comput(P1,s1,k);
A29: ProgramPart s1 = ProgramPart Cs1i
by AMI_1:123;
A30: Cs1k = Following(ProgramPart s1,Cs1i) by EXTPRO_1:4
      .= Exec (CurInstr(P1, Cs1i), Cs1i);
A31:  (ProgramPart s1)/.IC Cs1i
 = Cs1i.IC Cs1i by A29,COMPOS_1:38;
 IC SCM+FSA in dom p by AMISTD_5:6;
  then
A32: IC SCM+FSA in dom NPP p by COMPOS_1:179;
   then
A33: Csi.IC SCM+FSA = (Csi|dom NPP p).IC SCM+FSA by FUNCT_1:72;
    then Cs1i.IC SCM+FSA = loc by A27,FUNCT_1:72,A32;
    then
A34: Cs1k.IC SCM+FSA = loc by A30,A19,A31,SCMFSA_2:95;
    set Cs2k = Comput(P2,s2,k);
A35: ProgramPart s2 = ProgramPart Cs2i
by AMI_1:123;
A36: Cs2k = Following(ProgramPart s2,Cs2i) by EXTPRO_1:4
      .= Exec (CurInstr(ProgramPart s2, Cs2i), Cs2i);
A37:  (ProgramPart s2)/.IC Cs2i
 = Cs2i.IC Cs2i by A35,COMPOS_1:38;
    Cs2i.IC SCM+FSA = loc by A27,A33,A28,FUNCT_1:72,A32;
    then
A38: Cs2k.IC SCM+FSA = loc1 by A36,A18,A37,SCMFSA_2:95;
    (Cs1k|dom NPP p).IC SCM+FSA = Cs1k.IC SCM+FSA &
     (Cs2k|dom NPP p).IC SCM+FSA =
    Cs2k. IC SCM+FSA by FUNCT_1:72,A32;
    hence Cs1k|dom NPP p <> Cs2k|dom NPP p by A34,A38;
  end;
  hence contradiction;
end;
end;

canceled 2;

Lm1:
 for p being PartState of SCM+FSA
 holds da in dom p implies da in dom NPP p
proof
 let p be PartState of SCM+FSA;
  da in Int-Locations by SCMFSA_2:9;
  then
A1: da in Data-Locations SCM+FSA by SCMFSA_2:127,XBOOLE_0:def 3;
 assume da in dom p;
  then
A2:  da in dom DataPart p by A1,RELAT_1:86;
   DataPart p c= NPP p by COMPOS_1:169;
   then dom DataPart p c= dom NPP p by RELAT_1:25;
 hence da in dom NPP p by A2;
end;

Lm2:
 for p being PartState of SCM+FSA
 holds fa in dom p implies fa in dom NPP p
proof
 let p be PartState of SCM+FSA;
  fa in FinSeq-Locations by SCMFSA_2:10;
  then
A1: fa in Data-Locations SCM+FSA by SCMFSA_2:127,XBOOLE_0:def 3;
 assume fa in dom p;
  then
A2:  fa in dom DataPart p by A1,RELAT_1:86;
   DataPart p c= NPP p by COMPOS_1:169;
   then dom DataPart p c= dom NPP p by RELAT_1:25;
 hence fa in dom NPP p by A2;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
   for i being Element of NAT, da, db
  being Int-Location st
   CurInstr(P1,Comput(P1,s1,i))
   = da := db & da in dom p
  holds Comput(P1,s1,i).db = Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
A4: da in dom NPP p implies
    (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
  assume that
A5: I = da := db and
A6: da in dom p & Comput(P1,s1,i).db <> Comput(P2,s2,
i).db;
A7: da in dom NPP p by A6,Lm1;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A8: Cs1i1.da = Cs1i.db by A5,SCMFSA_2:89;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.da = Cs2i.db by A3,A5,SCMFSA_2:89;
  hence contradiction by A1,A4,A6,A8,EXTPRO_1:def 9,A2,A7;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
being Int-Location st
 CurInstr(P1,Comput(P1,s1,i)
) = AddTo(da, db)
  & da in dom
  p holds Comput(P1,s1,i).da + Comput(P1,s1,i).db =
Comput(P2,s2,i).da + Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
A4: da in dom NPP p implies
    (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
  assume that
A5: I = AddTo(da, db) and
A6: da in dom p & Comput(P1,s1,i).da + Comput(P1,s1,i
).db <>
  Comput(P2,s2, i).da + Comput(P2,s2,i).db;
A7: da in dom NPP p by A6,Lm1;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A8: Cs1i1.da = Cs1i.da + Cs1i.db by A5,SCMFSA_2:90;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.da = Cs2i.da + Cs2i.db by A3,A5,SCMFSA_2:90;
  hence contradiction by A1,A4,A6,A8,EXTPRO_1:def 9,A2,A7;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
  being Int-Location st
   CurInstr(P1,Comput(P1,s1,
i)) = SubFrom(da, db)
    & da in
dom p holds Comput(P1,s1,i).da - Comput(P1,s1,i).db =
Comput(P2,s2,i).da
  - Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
A4: da in dom NPP p implies
    (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
  assume that
A5: I = SubFrom(da, db) and
A6: da in dom p & Comput(P1,s1,i).da - Comput(P1,s1,i
).db <>
  Comput(P2,s2, i).da - Comput(P2,s2,i).db;
A7: da in dom NPP p by A6,Lm1;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A8: Cs1i1.da = Cs1i.da - Cs1i.db by A5,SCMFSA_2:91;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.da = Cs2i.da - Cs2i.db by A3,A5,SCMFSA_2:91;
  hence contradiction by A1,A4,A6,A8,EXTPRO_1:def 9,A2,A7;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
  being Int-Location st
   CurInstr(P1,Comput(P1,s1,
i)) = MultBy(da, db)
    & da in
dom p holds Comput(P1,s1,i).da * Comput(P1,s1,i).db =
Comput(P2,s2,i).da
  * Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
A4: da in dom NPP p implies
    (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
  assume that
A5: I = MultBy(da, db) and
A6: da in dom p & Comput(P1,s1,i).da * Comput(P1,s1,i
).db <>
  Comput(P2,s2, i).da * Comput(P2,s2,i).db;
A7: da in dom NPP p by A6,Lm1;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A8: Cs1i1.da = Cs1i.da * Cs1i.db by A5,SCMFSA_2:92;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.da = Cs2i.da * Cs2i.db by A3,A5,SCMFSA_2:92;
  hence contradiction by A1,A4,A6,A8,EXTPRO_1:def 9,A2,A7;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
  being Int-Location st
   CurInstr(P1,Comput(P1,s1,
i)) = Divide(da, db)
    & da in
  dom p & da <> db holds Comput(P1,s1,i).da div
  Comput(P1,s1,i).db =
  Comput(P2,s2,i).da div Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
A4: da in dom NPP p implies
    (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
  assume that
A5: I = Divide(da, db) and
A6: da in dom p and
A7: da <> db and
A8: Comput(P1,s1,i).da div Comput(P1,s1,i).db <>
Comput(P2,s2,i).
  da div Comput(P2,s2,i).db;
A9: da in dom NPP p by A6,Lm1;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A10: Cs1i1.da = Cs1i.da div Cs1i.db by A5,A7,SCMFSA_2:93;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.da = Cs2i.da div Cs2i.db by A3,A5,A7,SCMFSA_2:93;
  hence contradiction by A1,A4,A8,A10,EXTPRO_1:def 9,A2,A9;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
  being Int-Location st
   CurInstr(P1,Comput(P1,s1,i)) = Divide(da, db)
    & db in
dom p holds Comput(P1,s1,i).da mod Comput(P1,s1,i).db
= Comput(P2,s2,i).
  da mod Comput(P2,s2,i).db
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A4: I = Divide(da, db) and
A5: db in dom p and
A6: Comput(P1,s1,i).da mod Comput(P1,s1,i).db <>
Comput(P2,s2,i).
  da mod Comput(P2,s2,i).db;
 db in dom NPP p by A5,Lm1;
   then
A7: (Cs1i1|dom NPP p).db = Cs1i1.db & (Cs2i1|dom NPP p).db = Cs2i1.db
      by FUNCT_1:72;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
  then
A8: Cs1i1.db = Cs1i.da mod Cs1i.db by A4,SCMFSA_2:93;
  I = CurInstr(P2,Comput(P2,
s2,i)) by A1,AMISTD_5:7,A2;
  then Cs2i1.db = Cs2i.da mod Cs2i.db by A3,A4,SCMFSA_2:93;
  hence contradiction by A1,A6,A7,A8,EXTPRO_1:def 9,A2;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
  being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
  for i being Element of NAT, da
  being Int-Location, loc being Element of NAT st
   CurInstr(P1,Comput(P1,s1,i)) = da=0_goto loc &
    loc <> succ (IC Comput(P1,s1,i)) holds (
  Comput(P1,s1,i).da = 0 iff Comput(P2,s2,i).da = 0)
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da be Int-Location, loc be Element of NAT;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
A4: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
   IC SCM+FSA in dom p by AMISTD_5:6;
   then IC SCM+FSA in dom NPP p by COMPOS_1:179;
   then
A5: (Cs1i1|dom NPP p).IC SCM+FSA = Cs1i1.IC SCM+FSA &
   (Cs2i1|dom NPP p).IC SCM+FSA =
  Cs2i1.IC SCM+FSA by FUNCT_1:72;
  assume that
A6: I = da=0_goto loc and
A7: loc <> succ (IC Comput(P1,s1,i));
A8: I = CurInstr(P2,Comput(P2,s2,i)) by A1,AMISTD_5:7,A2;
A9: now
    assume
    Comput(P2,s2,i).da = 0 & Comput(P1,s1,i).da <> 0;
    then
    Cs2i1.IC SCM+FSA = loc & Cs1i1.IC SCM+FSA = succ IC Cs1i by A8,A3,A4,A6,
SCMFSA_2:96;
    hence contradiction by A1,A5,A7,EXTPRO_1:def 9,A2;
  end;
A10: (Cs1i1|dom NPP p) = (Cs2i1|dom NPP p) by A1,EXTPRO_1:def 9,A2;
  now
    assume
    Comput(P1,s1,i).da = 0 & Comput(P2,s2,i).da <> 0;
    then
    Cs1i1.IC SCM+FSA = loc & Cs2i1.IC SCM+FSA = succ IC Cs2i by A8,A3,A4,A6,
SCMFSA_2:96;
    hence contradiction by A1,A5,A10,A7,AMISTD_5:7,A2;
  end;
  hence thesis by A9;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
  being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
  for i being Element of NAT, da
  being Int-Location, loc being Element of NAT st
   CurInstr(P1,Comput(P1,s1,i)) = da>0_goto loc &
    loc <> succ (IC Comput(P1,s1,i)) holds
  Comput(P1,s1,i).da > 0 iff Comput(P2,s2,i).da > 0
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da be Int-Location, loc be Element of NAT;
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: (Cs1i1|dom NPP p) = (Cs2i1|dom NPP p) by A1,EXTPRO_1:def 9,A2;
  set Cs2i = Comput(P2,s2,i);
  set Cs1i = Comput(P1,s1,i);
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
   IC SCM+FSA in dom p by AMISTD_5:6;
   then IC SCM+FSA in dom NPP p by COMPOS_1:179;
   then
A5: (Cs1i1|dom NPP p).IC SCM+FSA = Cs1i1.IC SCM+FSA &
 (Cs2i1|dom NPP p).IC SCM+FSA =
  Cs2i1.IC SCM+FSA by FUNCT_1:72;
A6: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A7: I = da>0_goto loc and
A8: loc <> succ (IC Comput(P1,s1,i));
A9: I = CurInstr(P2,Comput(P2,s2,i)) by A1,AMISTD_5:7,A2;
A10: now
    assume that
A11: Comput(P2,s2,i).da > 0 and
A12: Comput(P1,s1,i).da <= 0;
    Cs2i1.IC SCM+FSA = loc by A9,A6,A7,A11,SCMFSA_2:97;
    hence contradiction by A4,A5,A3,A7,A8,A12,SCMFSA_2:97;
  end;
A13: IC Cs1i = IC Cs2i by A1,AMISTD_5:7,A2;
  now
    assume that
A14: Comput(P1,s1,i).da > 0 and
A15: Comput(P2,s2,i).da <= 0;
    Cs1i1.IC SCM+FSA = loc by A4,A7,A14,SCMFSA_2:97;
    hence contradiction by A13,A9,A6,A5,A3,A7,A8,A15,SCMFSA_2:97;
  end;
  hence thesis by A10;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
being Int-Location, f being FinSeq-Location st
 CurInstr(P1,Comput(P1,s1,i)
) =
  da := (f,db) & da in dom p for k1,k2 being Element of NAT st k1 = abs(
Comput(P1,s1,i).db) & k2 = abs( Comput(P2,s2,i).db)
holds ( Comput(P1,s1,
  i).f)/.k1 = ( Comput(P2,s2,i).f)/.k2
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location, f be FinSeq-Location;
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs1i1|dom NPP p = Cs2i1|dom NPP p by A1,EXTPRO_1:def 9,A2;
  set Cs2i = Comput(P2,s2,i);
  set Cs1i = Comput(P1,s1,i);
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
A5: da in dom NPP p implies
 (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
A6: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A7: I = da := (f,db) and
A8: da in dom p;
A9: (ex k1 being Element of NAT st k1 = abs(Cs1i.db) & Exec(I, Cs1i).da = (
Cs1i .f)/.k1 )& ex k2 being Element of NAT st k2 = abs(Cs2i.db) &
 Exec(I, Cs2i
  ). da = (Cs2i.f)/.k2 by A7,SCMFSA_2:98;
A10: da in dom NPP p by A8,Lm1;
  let i1,i2 be Element of NAT;
  assume
  i1 = abs( Comput(P1,s1,i).db) & i2 = abs( Comput(P2
,s2,i).db) &
  ( Comput(P1,s1,i).f)/.i1 <> ( Comput(P2,s2,i).f)/.
i2;
  hence contradiction by A1,A4,A6,A5,A3,A9,AMISTD_5:7,A10,A2;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
for i being Element of NAT, da, db
being Int-Location, f being FinSeq-Location st
 CurInstr(P1,Comput(P1,s1,i)
) =
(f,db):=da & f in dom p for k1,k2 being Element of NAT st k1 = abs( Comput(
P1,s1,i).db) & k2 = abs( Comput(P2,s2,i).db) holds
Comput(P1,s1,i).f+*(k1,
  Comput(P1,s1,i).da) = Comput(P2,s2,i).f+*(k2,
Comput(P2,s2,i).da)
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da, db be Int-Location, f be FinSeq-Location;
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs1i1|dom NPP p = Cs2i1|dom NPP p by A1,EXTPRO_1:def 9,A2;
  set Cs2i = Comput(P2,s2,i);
  set Cs1i = Comput(P1,s1,i);
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
A5: f in dom NPP p implies
 (Cs1i1|dom NPP p).f = Cs1i1.f & (Cs2i1|dom NPP p).f = Cs2i1.f
  by FUNCT_1:72;
A6: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A7: I = (f,db):=da and
A8: f in dom p;
A9: f in dom NPP p by A8,Lm2;
A10: (ex k1 being Element of NAT st k1 = abs(Cs1i.db) & Exec(I, Cs1i).f =
Cs1i.f +*(k1,Cs1i.da) )& ex k2 being Element of NAT st k2 = abs(Cs2i.db) & Exec
  (I, Cs2i).f = Cs2i.f+*(k2,Cs2i.da) by A7,SCMFSA_2:99;
  let i1, i2 be Element of NAT;
  assume i1 = abs(Cs1i.db) & i2 = abs(Cs2i.db) & Cs1i.f+*(i1,Cs1i.da) <> Cs2i
  .f+* (i2,Cs2i.da);
  hence contradiction by A1,A4,A6,A5,A3,A10,AMISTD_5:7,A9,A2;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
  being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
  for i being Element of NAT, da
being Int-Location, f being FinSeq-Location st
 CurInstr(P1,Comput(P1,s1,i)) =
da :=len f & da in dom p holds len( Comput(P1,s1,i).f)
 = len(Comput(P2,s2,i).f)
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da be Int-Location, f be FinSeq-Location;
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs1i1|dom NPP p = Cs2i1|dom NPP p by A1,EXTPRO_1:def 9,A2;
  set Cs2i = Comput(P2,s2,i);
  set Cs1i = Comput(P1,s1,i);
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
A5: da in dom NPP p implies
 (Cs1i1|dom NPP p).da = Cs1i1.da & (Cs2i1|dom NPP p).da =
  Cs2i1.da by FUNCT_1:72;
A6: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A7: I = da :=len f and
A8: da in dom p & len( Comput(P1,s1,i).f) <> len( Comput(
P2,s2,i).f);
A9: da in dom NPP p by A8,Lm1;
  Exec(I, Cs1i).da = len(Cs1i.f) & Exec(I, Cs2i).da = len(Cs2i.f) by A7,
SCMFSA_2:100;
  hence contradiction by A1,A4,A6,A5,A3,A8,AMISTD_5:7,A9,A2;
end;

theorem
  for p being autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2
  being State of SCM+FSA st p c= s1 & p c= s2
  for P1,P2 being (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
   st ProgramPart p c= P1 & ProgramPart p c= P2
  for i being Element of NAT, da
being Int-Location, f being FinSeq-Location st
 CurInstr(P1,Comput(P1,s1,i)) =
  f:=<0,...,0>da & f in dom p for k1,k2 being Element of NAT st k1 = abs(
Comput(P1,s1,i).da) & k2 = abs( Comput(P2,s2,i).da)
holds k1 |-> 0 = k2 |-> 0
proof
  let p be autonomic non NAT-defined FinPartState of SCM+FSA, s1, s2 be State
  of SCM+FSA such that
A1: p c= s1 & p c= s2;
  let P1,P2 be (the Instructions of SCM+FSA)-valued ManySortedSet of NAT
  such that
A2: ProgramPart p c= P1 & ProgramPart p c= P2;
  let i be Element of NAT, da be Int-Location, f be FinSeq-Location;
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: Cs1i1|dom NPP p = Cs2i1|dom NPP p by A1,EXTPRO_1:def 9,A2;
  set Cs2i = Comput(P2,s2,i);
  set Cs1i = Comput(P1,s1,i);
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:4
    .= Exec (CurInstr(P1, Cs1i), Cs1i);
A5: f in dom NPP p implies
 (Cs1i1|dom NPP p).f = Cs1i1.f & (Cs2i1|dom NPP p).f = Cs2i1.f
  by FUNCT_1:72;
A6: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:4
    .= Exec (CurInstr(P2, Cs2i), Cs2i);
  assume that
A7: I = f:=<0,...,0>da and
A8: f in dom p;
A9: f in dom NPP p by A8,Lm2;
A10: (ex k1 being Element of NAT st k1 = abs(Cs1i.da) & Exec(I, Cs1i).f = k1
|->0 )& ex k2 being Element of NAT st k2 = abs(Cs2i.da) & Exec(I, Cs2i).f = k2
  |->0 by A7,SCMFSA_2:101;
  let i1, i2 be Element of NAT;
  assume i1 = abs(Cs1i.da) & i2 = abs(Cs2i.da) & i1 |-> 0 <> i2 |->0;
  hence contradiction by A1,A4,A6,A5,A3,A10,AMISTD_5:7,A9,A2;
end;

