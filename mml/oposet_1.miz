:: Basic Notions and Properties of Orthoposets
::  by Markus Moschner
::
:: Received February 11, 2003
:: Copyright (c) 2003-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies XBOOLE_0, RELAT_1, SUBSET_1, ZFMISC_1, TARSKI, FUNCT_5, FUNCT_1,
      RELAT_2, ORDERS_2, XXREAL_0, ORDINAL2, LATTICE3, BINOP_1, QMAX_1,
      STRUCT_0, ROBBINS1, WAYBEL_0, YELLOW_0, EQREL_1, WAYBEL_1, LATTICES,
      OPOSET_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, ZFMISC_1, FUNCT_1, RELAT_1, RELAT_2,
      FUNCT_2, RELSET_1, PARTFUN1, BINOP_1, DOMAIN_1, FUNCT_5, STRUCT_0,
      ORDERS_2, LATTICE3, ROBBINS1, WAYBEL_0, WAYBEL_1, YELLOW_0, NECKLACE,
      QMAX_1, PARTIT_2;
 constructors REALSET2, LATTICE3, WAYBEL_1, NECKLACE, QMAX_1, FUNCT_5,
      RELSET_1, PARTIT_2;
 registrations XBOOLE_0, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2, STRUCT_0,
      YELLOW_0, WAYBEL24, TOLER_1, PARTIT_2;
 requirements BOOLE, SUBSET;
 definitions RELAT_2, PARTIT_2, ORDERS_2, NECKLACE;
 theorems FUNCT_1, FUNCT_2, LATTICE3, ORDERS_2, PARTIT_2, RELAT_1, RELAT_2,
      RELSET_1, TARSKI, WAYBEL_0, WAYBEL_1, YELLOW_0, ENUMSET1, SYSREL,
      NECKLACE, REALSET1, CARD_1;

begin

reserve  X for non empty set,
  R for Relation of X;

:: Some basic definitions and theorems for later examples;

canceled 3;

theorem
  for L being non empty reflexive antisymmetric RelStr for x,y being
  Element of L holds x <= y implies sup {x,y} = y & inf {x,y} = x
proof
  let R be non empty reflexive antisymmetric RelStr;
  let a,b be Element of R;
A1: for x being Element of R st x is_>=_than {a,b} holds b <= x
  proof
    let a0 be Element of R;
A2: b in {a,b} by TARSKI:def 2;
    assume a0 is_>=_than {a,b};
    hence thesis by A2,LATTICE3:def 9;
  end;
A3: for x being Element of R st x is_<=_than {a,b} holds a >= x
  proof
    let a0 be Element of R;
A4: a in {a,b} by TARSKI:def 2;
    assume a0 is_<=_than {a,b};
    hence thesis by A4,LATTICE3:def 8;
  end;
  assume
A5: a <= b;
  for x being Element of {a,b} holds x >= a
  proof
    let a0 be Element of {a,b};
    a <= a0 or a <= a0 by A5,TARSKI:def 2;
    hence thesis;
  end;
  then for x being Element of R st x in {a,b} holds x >= a;
  then
A6: a is_<=_than {a,b} by LATTICE3:def 8;
  for x being Element of R st x in {a,b} holds x <= b by A5,TARSKI:def 2;
  then b is_>=_than {a,b} by LATTICE3:def 9;
  hence thesis by A6,A1,A3,YELLOW_0:30,31;
end;

:: for various types of relations needed for Posets

canceled 12;

:: Some existence conditions on non-empty relations

registration
  let X be set;
  cluster irreflexive asymmetric transitive Relation of X;
  existence
  proof
    {}(X,X) = {};
    hence thesis;
  end;
end;

registration
  let X, R;
  let C be UnOp of X;
  cluster OrthoRelStr(#X,R,C#) -> non empty;
  coherence;
end;

registration
  cluster non empty strict OrthoRelStr;
  existence
  proof
    set X =the  non empty set,R =the  (Relation of X),C =the  UnOp of X;
    take OrthoRelStr(#X,R,C#);
    thus thesis;
  end;
end;

:: Double negation property of the internal Complement

canceled 3;

registration
  let O be non empty OrthoRelStr;
  cluster involutive Function of O,O;
  existence
  proof
    set C = the carrier of O;
    reconsider g = id C as Function of C,C;
    reconsider g as Function of O,O;
    g is involutive;
    hence thesis;
  end;
end;

:: Small example structures

definition
  canceled 3;
  func TrivOrthoRelStr -> strict OrthoRelStr equals
  :Def4:
  OrthoRelStr (# 1, id 1, op1 #);
  coherence;
end;

notation
  synonym TrivPoset for TrivOrthoRelStr;
end;

registration
  cluster TrivOrthoRelStr -> non empty trivial;
  coherence by CARD_1:87,REALSET1:def 4;
end;

definition
  func TrivAsymOrthoRelStr -> strict OrthoRelStr equals
  OrthoRelStr (# 1, {}(1 ,1), op1 #);
  coherence;
end;

registration
  cluster TrivAsymOrthoRelStr -> non empty;
  coherence;
end;

definition
  let O be non empty OrthoRelStr;
  attr O is Dneg means
  :Def6:
  ex f being Function of O,O st f = the Compl of O & f is involutive;
end;

canceled;

registration
  cluster TrivOrthoRelStr -> Dneg;
  coherence by Def6;
end;

registration
  cluster Dneg (non empty OrthoRelStr);
  existence by Def4;
end;

:: InternalRel based properties

definition
  let O be non empty RelStr;
  canceled 2;
  attr O is SubReFlexive means
  :Def9:
  the InternalRel of O is reflexive;
end;

reserve O for non empty RelStr;

theorem
  O is reflexive implies O is SubReFlexive
proof
  set RO = the InternalRel of O;
  assume O is reflexive;
  then RO is_reflexive_in the carrier of O by ORDERS_2:def 4;
  then RO is reflexive by PARTIT_2:23;
  hence thesis by Def9;
end;

theorem Th22:
  TrivOrthoRelStr is reflexive
proof
A1: rng id {{}} = {{}} & field id {{}} = dom id {{}} \/ rng id {{}} by
RELAT_1:71,def 6;
  id {{}} is_reflexive_in (field id {{}}) & dom id {{}} = {{}} by RELAT_1:71
,RELAT_2:def 9;
  hence thesis by A1,CARD_1:87,ORDERS_2:def 4;
end;

registration
  cluster TrivOrthoRelStr -> reflexive;
  coherence by Th22;
end;

registration
  cluster reflexive strict (non empty OrthoRelStr);
  existence by Th22;
end;

definition
  let O;
  canceled;
  redefine attr O is irreflexive means
  :Def11:
  the InternalRel of O is irreflexive;
  compatibility
  proof
  set RO = the InternalRel of O;
A1: field RO c= (the carrier of O) \/ the carrier of O by RELSET_1:19;
    thus O is irreflexive implies RO is irreflexive
    proof
      assume
A2:      O is irreflexive;
      let x be set;
      assume x in field RO;
       then x in the carrier of O by A1;
      hence thesis by A2,NECKLACE:def 6;
    end;
    assume
A3:   RO is_irreflexive_in field RO;
    let x be set;
    assume x in the carrier of O;
    per cases;
    suppose x in field RO;
    hence not [x,x] in RO by A3,RELAT_2:def 2;
    end;
    suppose not x in field RO;
    hence not [x,x] in RO by RELAT_1:30;
    end;
  end;
  redefine attr O is irreflexive means
  :Def12:
  the InternalRel of O is_irreflexive_in the carrier of O;
  compatibility
  proof
    thus O is irreflexive implies the InternalRel of O is_irreflexive_in the
    carrier of O
    proof
      assume O is irreflexive;
      then for x being set st x in the carrier of O holds not [x,x] in the
      InternalRel of O by NECKLACE:def 6;
      hence thesis by RELAT_2:def 2;
    end;
    assume the InternalRel of O is_irreflexive_in the carrier of O;
    then for x being set st x in the carrier of O holds not [x,x] in the
    InternalRel of O by RELAT_2:def 2;
    hence thesis by NECKLACE:def 6;
  end;
end;

canceled;

theorem Th24:
  TrivAsymOrthoRelStr is irreflexive
proof
  set IntRel = {}({{}},{{}});
  for x being set st x in {{}} holds not [x,x] in IntRel;
  then IntRel is_irreflexive_in {{}} by RELAT_2:def 2;
  hence thesis by Def12,CARD_1:87;
end;

registration
  cluster TrivAsymOrthoRelStr -> irreflexive;
  coherence by Th24;
end;

registration
  cluster irreflexive strict (non empty OrthoRelStr);
  existence by Th24;
end;

:: Symmetry

definition
  let O be non empty RelStr;
  redefine attr O is symmetric means
  :Def13:
  the InternalRel of O is symmetric Relation of the carrier of O;
  compatibility
   proof
    thus O is symmetric
      implies the InternalRel of O is symmetric Relation of the carrier of O
     proof
      assume the InternalRel of O is_symmetric_in the carrier of O;
      hence the InternalRel of O is symmetric Relation of the carrier of O
         by PARTIT_2:24;
     end;
    assume the InternalRel of O is symmetric Relation of the carrier of O;
    hence the InternalRel of O is_symmetric_in the carrier of O by PARTIT_2:25;
   end;
end;

canceled;

theorem Th26:
  TrivOrthoRelStr is symmetric
proof
  id {{}} is_symmetric_in {{}} by PARTIT_2:25;
  hence thesis by CARD_1:87,NECKLACE:def 4;
end;

registration
  cluster symmetric strict (non empty OrthoRelStr);
  existence by Th26;
end;

:: Antisymmetry

definition
  let O;
  canceled;
  redefine attr O is antisymmetric means
  the InternalRel of O is antisymmetric Relation of the carrier of O;
  compatibility
   proof
    thus O is antisymmetric implies
     the InternalRel of O is antisymmetric Relation of the carrier of O
     proof
      assume the InternalRel of O is_antisymmetric_in the carrier of O;
      hence the InternalRel of O is antisymmetric Relation of the carrier of O
                           by PARTIT_2:27;
     end;
    assume the InternalRel of O is antisymmetric Relation of the carrier of O;
    hence the InternalRel of O is_antisymmetric_in the carrier of O
                       by PARTIT_2:26;
   end;
end;

canceled;

Lm1: TrivOrthoRelStr is antisymmetric;

registration
  cluster TrivOrthoRelStr -> symmetric;
  coherence by Th26;
end;

registration
  cluster symmetric antisymmetric strict (non empty OrthoRelStr);
  existence by Lm1;
end;

:: Asymmetry

definition
  let O;
  canceled 2;
  redefine attr O is asymmetric means
  :Def18:
  the InternalRel of O is_asymmetric_in the carrier of O;
  compatibility
   proof
    thus O is asymmetric implies
     the InternalRel of O is_asymmetric_in the carrier of O
    proof
     assume the InternalRel of O is asymmetric;
     hence the InternalRel of O is_asymmetric_in the carrier of O
      by PARTIT_2:30;
    end;
    assume the InternalRel of O is_asymmetric_in the carrier of O;
    hence the InternalRel of O is asymmetric by PARTIT_2:31;
   end;
end;

canceled 2;

theorem Th30:
  TrivAsymOrthoRelStr is asymmetric
proof
  set IntRel = {}({{}},{{}});
  IntRel is_asymmetric_in {{}} by PARTIT_2:30;
  hence thesis by Def18,CARD_1:87;
end;

registration
  cluster TrivAsymOrthoRelStr -> asymmetric;
  coherence by Th30;
end;

registration
  cluster asymmetric strict (non empty OrthoRelStr);
  existence by Th30;
end;

:: Transitivity

definition
  let O;
  redefine attr O is transitive means
  :Def19:
  the InternalRel of O is transitive Relation of the carrier of O;
  compatibility
   proof
    thus O is transitive implies
     the InternalRel of O is transitive Relation of the carrier of O
    proof
     assume the InternalRel of O is_transitive_in the carrier of O;
     hence the InternalRel of O is transitive Relation of the carrier of O
                       by PARTIT_2:29;
    end;
    assume the InternalRel of O is transitive Relation of the carrier of O;
    hence the InternalRel of O is_transitive_in the carrier of O
                   by PARTIT_2:28;
   end;
end;

canceled;

registration
  cluster reflexive symmetric antisymmetric transitive strict (non empty
    OrthoRelStr);
  existence by Lm1;
end;

canceled;

theorem Th33:
  TrivAsymOrthoRelStr is transitive
proof
  set IntRel = the InternalRel of TrivAsymOrthoRelStr;
  IntRel is_transitive_in {{}} by PARTIT_2:28;
  hence thesis by CARD_1:87,ORDERS_2:def 5;
end;

registration
  cluster TrivAsymOrthoRelStr -> irreflexive asymmetric transitive;
  coherence by Th33;
end;

registration
  cluster irreflexive asymmetric transitive strict (non empty OrthoRelStr);
  existence by Th24;
end;

theorem
  O is symmetric transitive implies O is SubReFlexive
proof
  set R = the InternalRel of O;
  assume O is symmetric & O is transitive;
  then R is symmetric & R is transitive by Def13,Def19;
  hence thesis by Def9;
end;

theorem
  O is irreflexive transitive implies O is asymmetric
proof
  set R = the InternalRel of O;
  assume O is irreflexive & O is transitive;
  then R is irreflexive & R is transitive by Def11,Def19;
  then R is asymmetric by RELAT_2:25;
  hence thesis by NECKLACE:def 5;
end;

theorem Th36:
  O is asymmetric implies O is irreflexive
proof
  set R = the InternalRel of O;
  assume O is asymmetric;
  then R is asymmetric by NECKLACE:def 5;
  then R is irreflexive by RELAT_2:26;
  hence thesis by Def11;
end;

canceled 5;

begin

:: Quasiorder (Preorder)

definition
  let O;
  canceled;
  attr O is SubQuasiOrdered means
  :Def21:
  O is SubReFlexive transitive;
end;

notation
  let O;
  synonym O is SubPreOrdered for O is SubQuasiOrdered;
end;

definition
  let O;
  attr O is QuasiOrdered means
  :Def22:
  O is reflexive transitive;
end;

notation
  let O;
  synonym O is PreOrdered for O is QuasiOrdered;
end;

theorem Th42:
  O is QuasiOrdered implies O is SubQuasiOrdered
proof
  set IntRel = the InternalRel of O;
  set CO = the carrier of O;
  assume
A1: O is QuasiOrdered;
  then O is transitive by Def22;
  then IntRel is_transitive_in CO by ORDERS_2:def 5;
  then IntRel is transitive by PARTIT_2:29;
  then
A2: O is transitive by Def19;
  O is reflexive by A1,Def22;
  then IntRel is_reflexive_in CO by ORDERS_2:def 4;
  then IntRel is reflexive by PARTIT_2:23;
  then O is SubReFlexive by Def9;
  hence thesis by A2,Def21;
end;

registration
  cluster QuasiOrdered -> SubQuasiOrdered (non empty OrthoRelStr);
  correctness by Th42;
end;

registration
  cluster TrivOrthoRelStr -> QuasiOrdered;
  coherence by Def22;
end;

reserve O for non empty OrthoRelStr;

:: QuasiPure means complementation-order-like combination of properties

definition
  let O;
  attr O is QuasiPure means
  :Def23:
  O is Dneg QuasiOrdered;
end;

registration
  cluster QuasiPure Dneg QuasiOrdered strict (non empty OrthoRelStr);
  existence
  proof
    TrivOrthoRelStr is QuasiPure by Def23;
    hence thesis;
  end;
end;

registration
  cluster TrivOrthoRelStr -> QuasiPure;
  coherence by Def23;
end;

definition
  mode QuasiPureOrthoRelStr is QuasiPure (non empty OrthoRelStr);
end;

:: Partial Order ---> Poset

definition
 canceled;
  let O;
  attr O is PartialOrdered means
  :Def25:
  O is reflexive antisymmetric transitive;
end;

canceled;

registration
  cluster PartialOrdered -> reflexive antisymmetric transitive (non empty
    OrthoRelStr);
  coherence by Def25;
  cluster reflexive antisymmetric transitive -> PartialOrdered (non empty
    OrthoRelStr);
  coherence by Def25;
end;

:: Pureness for partial orders

definition
  let O;
  attr O is Pure means
  :Def26:
  O is Dneg PartialOrdered;
end;

registration
  cluster Pure Dneg PartialOrdered strict (non empty OrthoRelStr);
  existence
  proof
    TrivOrthoRelStr is Pure by Def26;
    hence thesis;
  end;
end;

registration
  cluster TrivOrthoRelStr -> Pure;
  coherence by Def26;
end;

definition
  mode PureOrthoRelStr is Pure (non empty OrthoRelStr);
end;

:: Strict Poset

definition
 canceled;
  let O;
  attr O is StrictPartialOrdered means
  :Def28:
  O is asymmetric transitive;
end;

notation
  let O;
  synonym O is StrictOrdered for O is StrictPartialOrdered;
end;

canceled;

theorem Th45:
  O is StrictPartialOrdered implies O is irreflexive
proof
  assume O is StrictPartialOrdered;
  then O is asymmetric transitive by Def28;
  hence thesis by Th36;
end;

registration
  cluster StrictPartialOrdered -> irreflexive (non empty OrthoRelStr);
  coherence by Th45;
end;

canceled 2;

registration
  cluster StrictPartialOrdered -> irreflexive (non empty OrthoRelStr);
  coherence;
end;

registration
  cluster TrivAsymOrthoRelStr -> irreflexive StrictPartialOrdered;
  coherence by Def28;
end;

registration
  cluster irreflexive StrictPartialOrdered (non empty strict OrthoRelStr);
  existence
  proof
    TrivAsymOrthoRelStr is StrictPartialOrdered;
    hence thesis;
  end;
end;

:: Quasiorder to Partial Order

reserve QO for QuasiOrdered (non empty OrthoRelStr);

theorem
  QO is antisymmetric implies QO is PartialOrdered
proof
  assume
A1: QO is antisymmetric;
  QO is reflexive & QO is transitive by Def22;
  hence thesis by A1;
end;

registration
  cluster PartialOrdered -> reflexive transitive antisymmetric (non empty
    OrthoRelStr);
  correctness;
end;

definition
  let PO be non empty RelStr;
  let f be UnOp of the carrier of PO;
  canceled 3;
  attr f is Orderinvolutive means
  :Def32:
  ex g being Function of PO, PO st g = f & g is involutive antitone;
end;

definition
  let PO be non empty OrthoRelStr;
  attr PO is OrderInvolutive means
  :Def33:
  ex f being Function of PO,PO st f = the Compl of PO & f is Orderinvolutive;
end;

canceled;

theorem Th50:
  the Compl of TrivOrthoRelStr is Orderinvolutive
proof
  set O = TrivOrthoRelStr;
  set C = the Compl of O;
  reconsider Emp = {} as Element of O by CARD_1:87,TARSKI:def 1;
  C is antitone Function of O,O
  proof
    reconsider f = C as Function of O,O;
    for x1,x2 being Element of O st x1 <= x2 for y1,y2 being Element of O
    st y1 = f.x1 & y2 = f.x2 holds y1 >= y2
    proof
      let a1,a2 be Element of O;
      set b1 = f.a1;
      b1 = Emp by CARD_1:87,FUNCT_2:65;
      then f.a2 <= b1 by CARD_1:87,FUNCT_2:65;
      hence thesis;
    end;
    hence thesis by WAYBEL_0:def 5;
  end;
  hence thesis by Def32;
end;

registration
  cluster TrivOrthoRelStr -> OrderInvolutive;
  coherence by Def33,Th50;
end;

registration
  cluster OrderInvolutive Pure PartialOrdered (non empty OrthoRelStr);
  existence
  proof
    take TrivOrthoRelStr;
    thus thesis;
  end;
end;

definition
  mode PreOrthoPoset is OrderInvolutive Pure PartialOrdered (non empty
    OrthoRelStr);
end;

definition
  let PO be non empty RelStr;
  let f be UnOp of the carrier of PO;
  pred f QuasiOrthoComplement_on PO means
  :Def34:
  f is Orderinvolutive & for y
  being Element of PO holds ex_sup_of {y,f.y},PO & ex_inf_of {y,f.y},PO;
end;

definition
  let PO be non empty OrthoRelStr;
  attr PO is QuasiOrthocomplemented means
  :Def35:
  ex f being Function of PO,PO
  st f = the Compl of PO & f QuasiOrthoComplement_on PO;
end;

Lm2: id {{}} = {[{},{}]} by SYSREL:30;

theorem Th51:
  TrivOrthoRelStr is QuasiOrthocomplemented
proof
  set O = TrivOrthoRelStr;
  set C = the Compl of O;
  set S = the carrier of O;
  C QuasiOrthoComplement_on O
  proof
    reconsider f = C as Function of O,O;
A1: for x being Element of S holds {x,op1.x} = {x}
    proof
      let a be Element of S;
      a = op1.a by Lm2,CARD_1:87,FUNCT_1:34,PARTIT_2:21;
      hence thesis by ENUMSET1:69;
    end;
    for x being Element of O holds sup {x,f.x} = x & inf {x,f.x} = x &
    ex_sup_of {x,f.x},O & ex_inf_of {x,f.x},O
    proof
      let a be Element of O;
      {a,f.a} = {a} by A1;
      hence thesis by YELLOW_0:38,39;
    end;
    hence thesis by Def34,Th50;
  end;
  hence thesis by Def35;
end;

definition
  let PO be non empty RelStr;
  let f be UnOp of the carrier of PO;
  pred f OrthoComplement_on PO means
  :Def36:
  f is Orderinvolutive & for y
being Element of PO holds ex_sup_of {y,f.y},PO & ex_inf_of {y,f.y},PO & "\/"({y
,f.y},PO) is_maximum_of the carrier of PO & "/\"({y,f.y},PO) is_minimum_of the
  carrier of PO;
end;

definition
  let PO be non empty OrthoRelStr;
  attr PO is Orthocomplemented means
  :Def37:
  ex f being Function of PO,PO st f
  = the Compl of PO & f OrthoComplement_on PO;
end;

theorem
  for PO being non empty OrthoRelStr, f being UnOp of the carrier of PO
  st f OrthoComplement_on PO holds f QuasiOrthoComplement_on PO
proof
  let PO be non empty OrthoRelStr;
  let g be UnOp of the carrier of PO;
  assume g OrthoComplement_on PO;
  then
  ( for x being Element of PO holds ex_sup_of {x,g.x},PO & ex_inf_of {x,g.
  x},PO)& g is Orderinvolutive by Def36;
  hence thesis by Def34;
end;

:: PartialOrdered (non empty OrthoRelStr)

theorem Th53:
  TrivOrthoRelStr is Orthocomplemented
proof
  set O = TrivOrthoRelStr;
  set C = the Compl of O;
  set S = the carrier of O;
  reconsider f = C as Function of O,O;
  f OrthoComplement_on O
  proof
    reconsider f = C as Function of O,O;
A1: for x being Element of S holds {x,op1.x} = {x}
    proof
      let a be Element of S;
      a = op1.a by Lm2,CARD_1:87,FUNCT_1:34,PARTIT_2:21;
      hence thesis by ENUMSET1:69;
    end;
A2: for x being Element of O holds ex_sup_of {x,f.x},O & ex_inf_of {x,f.x}
    ,O & sup {x,f.x} = x & inf {x,f.x} = x
    proof
      let a be Element of O;
      {a,f.a} = {a} by A1;
      hence thesis by YELLOW_0:38,39;
    end;
A3: for x being Element of O holds sup {x,f.x} in {x,f.x} & inf {x,f.x} in
    {x,f.x}
    proof
      let a be Element of O;
      sup {a,f.a} = a & inf {a,f.a} = a by A2;
      hence thesis by TARSKI:def 2;
    end;
A4: for x being Element of O holds x is_maximum_of {x,f.x} & x
    is_minimum_of {x,f.x}
    proof
      let a be Element of O;
A5:   sup {a,f.a} = a & ex_sup_of {a,f.a},O by A2;
A6:   ex_inf_of {a,f.a},O by A2;
      sup {a,f.a} in {a,f.a} & inf {a,f.a} = a by A2,A3;
      hence thesis by A5,A6,WAYBEL_1:def 6,def 7;
    end;
    for y being Element of O holds sup {y,f.y} is_maximum_of S & inf {y,f
    .y} is_minimum_of S
    proof
      let a be Element of O;
      reconsider a0 = a as Element of S;
      {a0,f.a0} = {a0} by A1;
      then
A7:   {a0,f.a0} = S by CARD_1:87,TARSKI:def 1;
      a is_maximum_of {a,f.a} & a is_minimum_of {a,f.a} by A4;
      hence thesis by A2,A7;
    end;
    hence thesis by A2,Def36,Th50;
  end;
  hence thesis by Def37;
end;

registration
  cluster TrivOrthoRelStr -> QuasiOrthocomplemented Orthocomplemented;
  coherence by Th51,Th53;
end;

registration
  cluster Orthocomplemented QuasiOrthocomplemented PartialOrdered (non empty
    OrthoRelStr);
  correctness
  proof
    take TrivOrthoRelStr;
    thus thesis;
  end;
end;

definition
  mode QuasiOrthoPoset is QuasiOrthocomplemented PartialOrdered (non empty
    OrthoRelStr);
  mode OrthoPoset is Orthocomplemented PartialOrdered (non empty OrthoRelStr);
end;
