:: Development of Terminology for {\bf SCM}
::  by Grzegorz Bancerek and Piotr Rudnicki
::
:: Received October 8, 1993
:: Copyright (c) 1993-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, INT_1, FINSEQ_1, SUBSET_1, FSM_1, AMI_3, PARTFUN1,
      AMI_1, SCMNORM, RELAT_1, FUNCT_1, CIRCUIT2, MSUALG_1, ARYTM_3, XXREAL_0,
      CARD_1, TARSKI, AFINSQ_1, AMI_2, ORDINAL4, GRAPHSP, ARYTM_1, SCM_1,
      STRUCT_0, ORDINAL1, RECDEF_2, FUNCT_4;
 notations TARSKI, SUBSET_1, NUMBERS, XCMPLX_0, NAT_1, INT_1, MCART_1, RELAT_1,
      FUNCT_1, PARTFUN1, FUNCT_2, FINSEQ_1, XXREAL_0, AFINSQ_1, FUNCT_4,
      RECDEF_2, AMI_2, STRUCT_0, COMPOS_1, EXTPRO_1, AMI_3;
 constructors XXREAL_0, AMI_3, RELSET_1, AMI_2, AFINSQ_1, ORDINAL4, PRE_POLY,
      RECDEF_2, AMISTD_2;
 registrations XBOOLE_0, SETFAM_1, ORDINAL1, NUMBERS, XXREAL_0, XREAL_0, NAT_1,
      INT_1, AMI_3, AMI_2, AFINSQ_1, RELAT_1, COMPOS_1, PBOOLE, FINSEQ_1;
 requirements NUMERALS, REAL, SUBSET, BOOLE, ARITHM;
 definitions AFINSQ_1, COMPOS_1, EXTPRO_1, NAT_1, AMI_3, FUNCOP_1;
 theorems NAT_1, INT_1, FUNCT_1, FUNCT_2, FINSEQ_1, AMI_2, AMI_3, FINSEQ_3,
      RELSET_1, RELAT_1, AFINSQ_1, PARTFUN1, RECDEF_2, COMPOS_1, FUNCT_4,
      FUNCOP_1, TARSKI, EXTPRO_1, GRFUNC_1, CARD_1;
 schemes PARTFUN1, WELLORD2;

begin

definition
  let i be Integer;
  redefine func <*i*> -> FinSequence of INT;
  coherence
  proof
    reconsider i1 = i as Element of INT by INT_1:def 2;
    <*i1*> is FinSequence of INT;
    hence thesis;
  end;
end;

Lm1: now
  let p be FinSequence, n be Element of NAT;
  assume n < len p;
  then n+1 >= 0+1 & n+1 <= len p by NAT_1:13;
  then n+1 in dom p by FINSEQ_3:27;
  hence n+1 in dom p & p.(n+1) in rng p by FUNCT_1:def 5;
end;

Lm2: now
  let n be Element of NAT, x be set;
  let p be FinSequence of x;
  assume n < len p;
  then
A1: p.(n+1) in rng p by Lm1;
  rng p c= x by FINSEQ_1:def 4;
  hence p.(n+1) in x by A1;
end;

definition
  let D be FinSequence of INT, ds be Element of NAT;
  mode State-consisting of ds, D -> State of SCM means
:Def1:
    for k being Element of NAT st k < len D holds it.dl.(ds+k) = D.(k+1);
  existence
  proof
    defpred X[set] means $1 = NAT;
    deffunc U(set) = 0;
    set s =the  State of SCM;
    deffunc V(set) = s.$1;
    consider s1 being Function such that
A1: dom s1 = SCM-Memory & for x being set st x in SCM-Memory holds (X
[x] implies s1.x = U(x)) & (not X[x] implies s1.x = V(x))
     from PARTFUN1:sch 1;
    defpred X[set] means ex n being Element of NAT st $1 = n;
    defpred X[set,set] means (ex n being Element of NAT st $1 = dl.(ds+n) & n
< len D & $2 = D.(n+1)) or $2 = 0 & not ex n being Element of NAT st $1 = dl.(
    ds+n) & n < len D;
A2: 0 in INT by INT_1:def 2;
A3: now
      let x be set;
      assume x in SCM-Memory;
      per cases;
      suppose
        ex n being Element of NAT st x = dl.(ds+n) & n < len D;
        then consider n being Element of NAT such that
A4:     x = dl.(ds+n) and
A5:    n < len D;
        take y = D.(n+1);
        thus y in INT by A5,Lm2;
        thus X[x,y] by A4,A5;
      end;
      suppose
        not ex n being Element of NAT st x = dl.(ds+n) & n < len D;
        hence ex y being set st y in INT & X[x,y] by A2;
      end;
    end;
    consider D1 being Function such that
A6: dom D1 = SCM-Memory & rng D1 c= INT & for x being set st x in
    SCM-Memory holds X[x,D1.x] from WELLORD2:sch 1(A3 );
A7: now
      let x be set;
      assume
A8:     x in SCM-Memory;
      then reconsider n = x as Element of SCM-Memory;
      per cases;
      suppose
        x = NAT;
        then
        s1.n = 0 &
         (the Object-Kind of SCM).x = NAT by A1,AMI_2:30,def 5;
        hence s1.x in (the Object-Kind of SCM).x;
      end;
      suppose
        x <> NAT;
        then
A9:         s1.n = s.x by A1;
         x in dom s by A8,PARTFUN1:def 4;
        hence s1.x in (the Object-Kind of SCM).x by A9,FUNCT_1:def 20;
      end;
    end;
    reconsider D1 as Function of SCM-Memory, INT by A6,FUNCT_2:def 1
,RELSET_1:11;
    reconsider s1 as State of SCM by A1,A7,FUNCT_1:def 20,PARTFUN1:def 4
,RELAT_1:def 18;
    deffunc V(set) = s1.$1;
    defpred X[set] means ex n being Element of NAT st $1 = dl.n;
    deffunc U(set) = D1.$1;
    consider s3 being Function such that
A10: dom s3 = SCM-Memory & for x being set st x in SCM-Memory holds (X
[x] implies s3.x = U(x)) & (not X[x] implies s3.x = V(x)) from PARTFUN1:sch 1;
    now
      let x be set;
      assume x in SCM-Memory;
      then reconsider n = x as Element of SCM-Memory;
      per cases;
      suppose
A11:    ex n being Element of NAT st x = dl.n;
        then x in SCM-Data-Loc by AMI_3:def 2;
        then
A12:    (the Object-Kind of SCM).x = INT by AMI_2:10;
        s3.x = D1.n by A10,A11;
        hence s3.x in (the Object-Kind of SCM).x by A12;
      end;
      suppose
        not ex n being Element of NAT st x = dl.n;
        then
A13:       s3.n = s1.x by A10;
         dom s1 = the carrier of SCM by PARTFUN1:def 4;
        hence s3.x in (the Object-Kind of SCM).x by A13,FUNCT_1:def 20;
      end;
    end;
    then reconsider s3 as State of SCM by A10,FUNCT_1:def 20,PARTFUN1:def 4
,RELAT_1:def 18;
    take s3;
    let k be Element of NAT;
    assume k < len D;
    then consider k9 being Element of NAT such that
A14: dl.(ds+k) = dl.(ds+k9) and
    k9 < len D and
A15: D1.dl.(ds+k) = D.(k9+1) by A6;
    ds+k = ds+k9 by A14,AMI_3:52;
    hence thesis by A10,A15;
  end;
end;

registration
  let D be FinSequence of INT, il, ds be Element of NAT;
 cluster il-started State-consisting of ds, D;
 existence
  proof
   set s = the State-consisting of ds, D;
   set s1 = s +* Start-At(il,SCM);
   for k being Element of NAT st k < len D holds s1.dl.(ds+k) = D.(k+1)
    proof let k be Element of NAT;
     assume
A1:    k < len D;
A2:   dom Start-At(il,SCM) = {IC SCM} by FUNCOP_1:19;
      dl.(ds+k) <> IC SCM by AMI_3:57;
     then not dl.(ds+k) in dom Start-At(il,SCM) by A2,TARSKI:def 1;
     hence s1.dl.(ds+k) = s.dl.(ds+k) by FUNCT_4:12
        .= D.(k+1) by A1,Def1;
    end;
   then reconsider s1 as State-consisting of ds, D by Def1;
   take s1;
   thus IC s1 = il by COMPOS_1:142;
  end;
end;

canceled 12;

theorem
  for i1, i2, i3, i4 being Integer, il being Element of NAT,
 s being il-started State-consisting of 0, <*i1*>^<*i2*>^<*i3*>^<*i4*>
holds
  s.dl.0 = i1 & s.dl.1 = i2 & s.dl.2 = i3 & s.dl.3 = i4
proof
  let i1, i2, i3, i4 be Integer, il be Element of NAT,
   s be il-started State-consisting of 0, <*i1*>^<*i2*>^<*i3*>^<*
  i4*>;
  set D = <*i1*>^<*i2*>^<*i3*>^<*i4*>;
A1: 0+2=2 & 0+3=3;
A2: D.(2+1) = i3 & D.(3+1) = i4 by FINSEQ_1:87;
A3: len D = 4 & 0+0=0 by FINSEQ_1:87;
  D.(0+1) = i1 & D.(1+1) = i2 by FINSEQ_1:87;
  hence thesis by A2,A3,A1,Def1;
end;

theorem Th14:
  for i1, i2 being Integer, il being Element of NAT,
  s being il-started State-consisting of 0, <*i1*>^<*i2*> holds
   s.dl.0 = i1 & s.dl.1 = i2
proof
  let i1, i2 be Integer, il be Element of NAT,
      s be il-started State-consisting of 0, <*i1*>^<*i2*>;
  set data = <*i1*>^<*i2*>;
A1: 0+0=0;
A2: data = <*i1, i2*> by FINSEQ_1:def 9;
  then
A3: len data = 2 & data.(0+1) = i1 by FINSEQ_1:61;
 data.(1+1) = i2 by A2,FINSEQ_1:61;
  hence thesis by A3,A1,Def1;
end;

theorem Th15:
  for I1, I2 being Instruction of SCM
  for F being total
   (NAT-defined (the Instructions of SCM-valued) Function)
   st <%I1%>^<%I2%> c= F
   holds F.0 = I1 & F.1 = I2
proof
  let I1, I2 be Instruction of SCM;
  let F be total
   (NAT-defined (the Instructions of SCM-valued) Function) such that
A1: <%I1%>^<%I2%> c= F;
  set ins = <%I1%>^<%I2%>;
A2: ins = <%I1, I2%>;
  then
A3: ins.1 = I2 by AFINSQ_1:42;
A4:  ins.0 = I1 by A2,AFINSQ_1:42;
    len ins = 2 by A2,AFINSQ_1:42;
   then 0 in dom ins & 1 in dom ins by CARD_1:88,TARSKI:def 2;
  hence thesis by A1,A3,A4,GRFUNC_1:8;
end;

reserve F for total
  (NAT-defined (the Instructions of SCM)-valued Function);

Lm3:
 for k being Element of NAT, s being State of SCM
 holds Comput(F,s,k+1) = Exec(CurInstr(F,Comput(F,s,k)),Comput(F,s,k))
proof
  let k be Element of NAT, s be State of SCM;
  thus Comput(F,s,k+1) = Following(F,Comput(F,s,k)) by EXTPRO_1:4
    .= Exec(CurInstr(F,Comput(F,s,k)),Comput(F,s,k));
end;

Lm4: now
   let F be total
  (NAT-defined (the Instructions of SCM)-valued Function);
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k) = n;
  set csk1 = Comput(F,s,k+1);
  set csk = Comput(F,s,k);
  assume
A2: F.n = a := b or F.n = AddTo(a,b) or F.n = SubFrom(a, b) or
  F.n = MultBy(a, b) or a<>b & F.n = Divide(a,b);
A3: dom F = NAT by PARTFUN1:def 4;
  thus csk1 = (Exec(CurInstr(F,csk), csk)) by Lm3
    .= Exec(F.n, csk) by A1,A3,PARTFUN1:def 8;
  hence IC csk1 = succ IC csk by A2,AMI_3:8,9,10,11,12
    .= n+1 by A1;
end;

canceled 2;

theorem Th18:
  for k, n being Element of NAT, s being State of SCM,
    a, b being Data-Location st
  IC Comput(F,s,k) = n & F.n = a := b
 holds IC Comput(F,s,k+1) = n+1 &
  Comput(F,s,k+1).a = Comput(F,s,k).b &
  for d being Data-Location st d <> a
   holds Comput(F,s,k+1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k) = n;
  assume
A2: F.n = a := b;
  then Comput(F,s,k+1)
   = Exec(a:=b, Comput(F,s,k)) by A1,Lm4;
  hence thesis by A1,A2,Lm4,AMI_3:8;
end;

theorem Th19:
  for k, n being Element of NAT, s being State of SCM, a, b being
  Data-Location st IC Comput(F,s,k) = n & F.n = AddTo(a,b)
  holds IC Comput(F,s,k+1) = n+1 &
    Comput(F,s,k+1).a = Comput(F,s,k).a+
Comput(F,s,k).b & for d being Data-Location st d <> a holds Comput
(F,s,k+
  1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k) = n;
  assume
A2: F.n = AddTo(a,b);
  then Comput(F,s,k+1)
   = Exec(AddTo(a,b), Comput(F,s,k)) by A1,Lm4;
  hence thesis by A1,A2,Lm4,AMI_3:9;
end;

theorem Th20:
  for k, n being Element of NAT, s being State of SCM, a, b being
  Data-Location st IC Comput(F,s,k) = n & F.n = SubFrom(a,b)
   holds IC Comput(F,s,k+1) = n+1 &
   Comput(F,s,k+1).a =
Comput(F,s,k).a-
Comput(F,s,k).b & for d being Data-Location st d <> a holds Comput
(F,s,k+
  1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k)= n;
  assume
A2: F.n = SubFrom(a,b);
  then Comput(F,s,k+1) =
   Exec(SubFrom(a,b), Comput(F,s,k)) by A1,Lm4;
  hence thesis by A1,A2,Lm4,AMI_3:10;
end;

theorem Th21:
  for k, n being Element of NAT, s being State of SCM, a, b being
  Data-Location st IC Comput(F,s,k) = n & F.n = MultBy(a,b) holds
IC
  Comput(F,s,k+1) = (n+1) & Comput(F,s,k+1).a =
Comput(F,s,k).a*
Comput(F,s,k).b & for d being Data-Location st d <> a holds Comput
(F,s,k+
  1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k) = n;
  assume
A2: F.n = MultBy(a,b);
  then Comput(F,s,k+1)
   = Exec(MultBy(a,b), Comput(F,s,k)) by A1,Lm4;
  hence thesis by A1,A2,Lm4,AMI_3:11;
end;

theorem Th22:
  for k, n being Element of NAT, s being State of SCM, a, b being
Data-Location st IC Comput(F,s,k) = n & F.n = Divide(a,b) & a<>b
holds
  IC Comput(F,s,k+1) = (n+1) & Comput(F,s,k+1).a =
Comput(F,s,k).a
  div Comput(F,s,k).b & Comput(F,s,k+1).b = Comput(
F,s,k).a mod
  Comput(F,s,k).b & for d being Data-Location st d <> a & d <> b
holds
  Comput(F,s,k+1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a, b be Data-Location;
  assume
A1: IC Comput(F,s,k) = n;
  assume
A2: F.n = Divide(a,b) & a <> b;
  then Comput(F,s,k+1)
   = Exec(Divide(a,b), Comput(F,s,k)) by A1,Lm4;
  hence thesis by A1,A2,Lm4,AMI_3:12;
end;

theorem Th23:
  for k, n being Element of NAT, s being State of SCM, il being
  Element of NAT st IC Comput(F,s,k) = n &
   F.n = SCM-goto il
holds IC Comput(F,s,k+1) = il & for d being Data-Location holds
   Comput(F,s,k+1).d = Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, il be Element of NAT;
  assume
A1: IC Comput(F,s,k) = n & F.n = SCM-goto il;
  set csk1 = Comput(F,s,k+1);
  set csk = Comput(F,s,k);
A2:  dom F = NAT by PARTFUN1:def 4;
A3: csk1 = Exec(CurInstr(F,csk), csk) by Lm3
    .= Exec(SCM-goto il, csk) by A1,A2,PARTFUN1:def 8;
  hence IC csk1 = il by AMI_3:13;
  thus thesis by A3,AMI_3:13;
end;

theorem Th24:
  for k, n being Element of NAT, s being State of SCM, a being
  Data-Location, il being Element of NAT st IC Comput(F,s,k) =
  n & F.n = a =0_goto il holds ( Comput(F,s,k).a = 0 implies IC
Comput(F,s,k+1) = il) & ( Comput(F,s,k).a <>0 implies
IC Comput(F,s,k+
  1) = (n+1)) & for d being Data-Location holds Comput(F,s,k+1).d
=
  Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a be Data-Location, il be
  Element of NAT;
  assume that
A1: IC Comput(F,s,k) = n and
A2: F.n = a =0_goto il;
  set csk1 = Comput(F,s,k+1);
  set csk = Comput(F,s,k);
A3:  dom F = NAT by PARTFUN1:def 4;
A4: csk1 = Exec(CurInstr(F,csk), csk) by Lm3
    .= Exec(a =0_goto il, csk) by A1,A2,A3,PARTFUN1:def 8;
  hence csk.a = 0 implies IC csk1 = il by AMI_3:14;
  hereby
    assume csk.a <> 0;
    hence IC csk1 = succ n by A1,A4,AMI_3:14
      .= (n+1);
  end;
  thus thesis by A4,AMI_3:14;
end;

theorem Th25:
  for k, n being Element of NAT, s being State of SCM, a being
  Data-Location, il being Element of NAT st IC Comput(F,s,k) =
  n & F.n = a >0_goto il holds ( Comput(F,s,k).a > 0 implies IC
Comput(F,s,k+1) = il) & ( Comput(F,s,k).a <= 0
implies IC Comput(F,s,k
  +1) = (n+1)) & for d being Data-Location holds Comput(F,s,k+1).d
=
  Comput(F,s,k).d
proof
  let k, n be Element of NAT, s be State of SCM, a be Data-Location, il be
  Element of NAT;
  assume that
A1: IC Comput(F,s,k) = n and
A2: F.n = a >0_goto il;
  set csk1 = Comput(F,s,k+1);
  set csk = Comput(F,s,k);
A3:  dom F = NAT by PARTFUN1:def 4;
A4: csk1 = Exec(CurInstr(F,csk), csk) by Lm3
    .= Exec(a >0_goto il, csk) by A1,A2,A3,PARTFUN1:def 8;
  hence csk.a > 0 implies IC csk1 = il by AMI_3:15;
  hereby
    assume csk.a <= 0;
    hence IC csk1 = succ n by A1,A4,AMI_3:15
      .= n+1;
  end;
  thus thesis by A4,AMI_3:15;
end;

theorem Th26:
  (halt SCM)`1_3 = 0 &
  (for a, b being Data-Location holds (a := b)`1_3 = 1) &
  (for a, b being Data-Location holds (AddTo(a,b))`1_3 = 2) &
  (for a, b being Data-Location holds (SubFrom(a,b))`1_3 = 3) &
  (for a, b being Data-Location holds (MultBy(a,b))`1_3 = 4) &
  (for a, b being Data-Location holds (Divide(a,b))`1_3 = 5) &
  (for i being Element of NAT holds (SCM-goto i)`1_3 = 6) &
  (for a being Data-Location, i being Element of NAT
   holds (a =0_goto i)`1_3 = 7) &
  for a being Data-Location, i being Element of NAT holds
   (a >0_goto i)`1_3 = 8 by AMI_3:71,RECDEF_2:def 1;

canceled 3;

theorem
  for i1, i2, i3, i4 being Integer,
  s being State of SCM st s.dl.0 = i1 & s.dl.1 = i2 & s.dl.2 = i3 & s.dl.3 = i4
   holds s is State-consisting of 0, <*i1*>^<*i2*>^<*i3*>^<*i4*>
proof
  let i1, i2, i3, i4 be Integer, s be State of SCM such that
A1: s.dl.0 = i1 & s.dl.1 = i2 & s.dl.2 = i3 & s.dl.3 = i4;
  set D = <*i1*>^<*i2*>^<*i3*>^<*i4*>;
  now
    let k be Element of NAT;
A2: len D=4 & 4=3+1 by FINSEQ_1:87;
A3: 3=2+1;
    assume k < len D;
    then k <= 3 by A2,NAT_1:13;
    then
A4: k <= 2 or k=3 by A3,NAT_1:8;
A5: 1=0+1;
    2=1+1;
    then k <= 1 or k=2 or k=3 by A4,NAT_1:8;
    then k=0 or k=1 or k=2 or k=3 by A5,NAT_1:8;
    hence s.dl.(0+k)=D.(k+1) by A1,FINSEQ_1:87;
  end;
  hence thesis by Def1;
end;

:: Empty program

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%halt SCM%> c= F
  for s being 0-started State-consisting of 0, <*>INT
   holds F halts_on s & LifeSpan(F,s) = 0 & Result(F,s) = s
proof
  let F be total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%halt SCM%> c= F;
  let s be 0-started State-consisting of 0, <*>INT;
  1 = dom <%halt SCM%> by AFINSQ_1:36;
  then
  0 in dom<%halt SCM%> by CARD_1:87,TARSKI:def 1;
  then
A2: F.(0+0) = <%halt SCM%>.0 by A1,GRFUNC_1:8
    .= halt SCM by AFINSQ_1:38;
A3: s = Comput(F,s,0) by EXTPRO_1:3;
 F.IC s = halt SCM by A2,COMPOS_1:def 16;
  hence
A4: F halts_on s by A3,EXTPRO_1:31;
  dom F = NAT by PARTFUN1:def 4;
  then CurInstr(F,s) = F.IC s by PARTFUN1:def 8
       .= halt SCM by A2,COMPOS_1:def 16;
  hence LifeSpan(F,s) = 0 by A4,A3,EXTPRO_1:def 14;
  IC s = 0 by COMPOS_1:def 16;
  hence thesis by A2,A3,EXTPRO_1:32;
end;

:: Assignment

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%dl.0 := dl.1%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
   holds F halts_on s & LifeSpan(F,s) = 1 & (Result(F,s)).dl.0 = i2 &
  for d being Data-Location st d<>dl.0
   holds (Result(F,s)).d = s.d
proof
  let F be total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%dl.0 := dl.1%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
    s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s1 = Comput(F,s,0+1);
A2: s.dl.1 = i2 by Th14;
A3: IC s = 0 & s = Comput(F,s,0) by COMPOS_1:def 16,EXTPRO_1:3;
A4: F.0 = dl.0 := dl.1 by A1,Th15;
  then
A5: IC s1 = 0+1 by A3,Th18;
A6: F.1 = halt SCM by A1,Th15;
  hence F halts_on s by A5,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A6,A3,A5,EXTPRO_1:34;
  s1.dl.0 = s.dl.1 by A4,A3,Th18;
  hence (Result(F,s)).dl.0 = i2 by A6,A2,A5,EXTPRO_1:32;
  let d be Data-Location;
  assume
A7: d<>dl.0;
  thus (Result(F,s)).d = s1.d by A6,A5,EXTPRO_1:32
    .= s.d by A4,A3,A7,Th18;
end;

:: Adding two integers

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%AddTo(dl.0,dl.1)%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
  holds F halts_on s & LifeSpan(F,s) = 1 & (Result(F,s)).dl.0 = i1 + i2 &
  for d being Data-Location st d<>dl.0 holds Result(F,s).d = s.d
proof
  let F be total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%AddTo(dl.0,dl.1)%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s0 = Comput(F,s,0);
  set s1 = Comput(F,s,0+1);
A2: s = s0 by EXTPRO_1:3;
A3: s.dl.0 = i1 & s.dl.1 = i2 by Th14;
A4: IC s = 0 by COMPOS_1:def 16;
A5: F.0 = AddTo(dl.0,dl.1) by A1,Th15;
  then
A6: IC s1 = (0+1) by A4,A2,Th19;
A7: F.1 = halt SCM by A1,Th15;
  hence F halts_on s by A6,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A4,A7,A2,A6,EXTPRO_1:34;
  s1.dl.0 = s0.dl.0 + s0.dl.1 by A4,A5,A2,Th19;
  hence (Result(F,s)).dl.0 = i1 + i2 by A7,A3,A2,A6,EXTPRO_1:32;
  let d be Data-Location;
  assume
A8: d<>dl.0;
  thus (Result(F,s)).d = s1.d by A7,A6,EXTPRO_1:32
    .= s.d by A4,A5,A2,A8,Th19;
end;

:: Subtracting two integers

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%SubFrom(dl.0,dl.1)%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
    holds F halts_on s
 & LifeSpan(F,s) = 1 &
 (Result(F,s)).dl.0 = i1 - i2 & for d being Data-Location
st d<>dl.0 holds
  (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%SubFrom(dl.0,dl.1)%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0,
  <*i1*>^<*i2*>;
  set s0 = Comput(F,s,0);
  set s1 = Comput(F,s,0+1);
A2: s = s0 by EXTPRO_1:3;
A3: s.dl.0 = i1 & s.dl.1 = i2 by Th14;
A4: IC s = 0 by COMPOS_1:def 16;
A5: F.0 = SubFrom(dl.0,dl.1) by A1,Th15;
  then
A6: IC s1 = (0+1) by A4,A2,Th20;
A7: F.1 = halt SCM by A1,Th15;
  hence F halts_on s by A6,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A4,A7,A2,A6,EXTPRO_1:34;
  s1.dl.0 = s0.dl.0 - s0.dl.1 by A4,A5,A2,Th20;
  hence (Result(F,s)).dl.0 = i1 - i2 by A7,A3,A2,A6,EXTPRO_1:32;
  let d be Data-Location;
  assume
A8: d<>dl.0;
  thus (Result(F,s)).d = s1.d by A7,A6,EXTPRO_1:32
    .= s.d by A4,A5,A2,A8,Th20;
end;

:: Multiplying two integers

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%MultBy(dl.0,dl.1)%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
     s being 0-started State-consisting of 0, <*i1*>^<*i2*>
  holds F halts_on s & LifeSpan(F,s) = 1 & (Result(F,s)).dl.0 = i1 * i2 &
   for d being Data-Location st d<>dl.0 holds (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%MultBy(dl.0,dl.1)%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s0 = Comput(F,s,0);
  set s1 = Comput(F,s,0+1);
A2: s = s0 by EXTPRO_1:3;
A3: s.dl.0 = i1 & s.dl.1 = i2 by Th14;
A4: IC s = 0 by COMPOS_1:def 16;
A5: F.0 = MultBy(dl.0,dl.1) by A1,Th15;
  then
A6: IC s1 = (0+1) by A4,A2,Th21;
A7: F.1 = halt SCM by A1,Th15;
  hence F halts_on s by A6,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A4,A7,A2,A6,EXTPRO_1:34;
  s1.dl.0 = s0.dl.0 * s0.dl.1 by A4,A5,A2,Th21;
  hence (Result(F,s)).dl.0 = i1 * i2 by A7,A3,A2,A6,EXTPRO_1:32;
  let d be Data-Location;
  assume
A8: d<>dl.0;
  thus (Result(F,s)).d = s1.d by A7,A6,EXTPRO_1:32
    .= s.d by A4,A5,A2,A8,Th21;
end;

:: Dividing two integers

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%Divide(dl.0,dl.1)%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
    s being 0-started State-consisting of 0, <*i1*>^<*i2*>
   holds F halts_on s
 & LifeSpan(F,s)
  = 1 & (Result(F,s)).dl.0 = i1 div i2 & (Result(F,s)
).dl.1 = i1 mod i2 & for d being
  Data-Location st d<>dl.0 & d<>dl.1 holds (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%Divide(dl.0,dl.1)%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s1 = Comput(F,s,0+1);
A2: dl.0 <> dl.1 by AMI_3:52;
A3: IC s = 0 & F.0 = Divide(dl.0,dl.1) by A1,Th15,COMPOS_1:def 16;
A4: s.dl.0 = i1 & s.dl.1 = i2 by Th14;
A5: s = Comput(F,s,0) by EXTPRO_1:3;
  F.1 = halt SCM by A1,Th15;
  then
A6: F.(IC s1) = halt SCM by A3,A2,A5,Th22;
  hence F halts_on s by EXTPRO_1:31;
  Divide(dl.0, dl.1) <> halt SCM by Th26;
  hence LifeSpan(F,s) = 1 by A3,A5,A6,EXTPRO_1:33;
  thus (Result(F,s)).dl.0 = s1.dl.0 by A6,EXTPRO_1:32
    .= i1 div i2 by A3,A4,A2,A5,Th22;
  thus (Result(F,s)).dl.1 = s1.dl.1 by A6,EXTPRO_1:32
    .= i1 mod i2 by A3,A4,A2,A5,Th22;
  let d be Data-Location;
  assume
A7: d<>dl.0 & d<>dl.1;
  thus (Result(F,s)).d = s1.d by A6,EXTPRO_1:32
    .= s.d by A3,A2,A5,A7,Th22;
end;

:: Unconditional jump

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%SCM-goto 1%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
    holds F halts_on s &
 LifeSpan(F,s) = 1 & for d
  being Data-Location holds (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%SCM-goto 1%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s1 = Comput(F,s,0+1);
A2: IC s = 0 & s = Comput(F,s,0) by COMPOS_1:def 16,EXTPRO_1:3;
A3: F.0 = SCM-goto 1 by A1,Th15;
  then
A4: IC s1 = (0+1) by A2,Th23;
A5: F.1 = halt SCM by A1,Th15;
  hence F halts_on s by A4,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A5,A2,A4,EXTPRO_1:34;
  let d be Data-Location;
  thus (Result(F,s)).d = s1.d by A5,A4,EXTPRO_1:32
    .= s.d by A3,A2,Th23;
end;

:: Jump at zero

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%dl.0=0_goto 1%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
    holds F halts_on s
 & LifeSpan(F,s) = 1
  & for d being Data-Location holds (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%dl.0=0_goto 1%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0,
   <*i1*>^<*i2*>;
  set s1 = Comput(F,s,0+1);
A2: F.0 = dl.0 =0_goto 1 by A1,Th15;
A3: F.1 = halt SCM by A1,Th15;
A4: IC s = 0 & s = Comput(F,s,0) by COMPOS_1:def 16,EXTPRO_1:3;
  s.dl.0 = i1 by Th14;
  then
A5: IC s1 = (0+1) by A2,A4,Th24;
  hence F halts_on s by A3,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A3,A4,A5,EXTPRO_1:34;
  let d be Data-Location;
  thus (Result(F,s)).d = s1.d by A3,A5,EXTPRO_1:32
    .= s.d by A2,A4,Th24;
end;

:: Jump at greater than zero

theorem
  for F being total
   (NAT-defined (the Instructions of SCM)-valued Function)
    st <%dl.0>0_goto 1%>^<%halt SCM%> c= F
  for i1, i2 being Integer,
      s being 0-started State-consisting of 0, <*i1*>^<*i2*>
    holds F halts_on s
 & LifeSpan(F,s) = 1
  & for d being Data-Location holds (Result(F,s)).d = s.d
proof
  let F being total
   (NAT-defined (the Instructions of SCM)-valued Function) such that
A1: <%dl.0>0_goto 1%>^<%halt SCM%> c= F;
  let i1, i2 be Integer,
      s be 0-started State-consisting of 0, <*i1*>^<*i2*>;
  set s1 = Comput(F,s,0+1);
A2: F.0 = dl.0 >0_goto 1 by A1,Th15;
A3: F.1 = halt SCM by A1,Th15;
A4: IC s = 0 & s = Comput(F,s,0) by COMPOS_1:def 16,EXTPRO_1:3;
  s.dl.0 = i1 by Th14;
  then
A5: IC s1 = (0+1) by A2,A4,Th25;
  hence F halts_on s by A3,EXTPRO_1:31;
  thus LifeSpan(F,s) = 1 by A3,A4,A5,EXTPRO_1:34;
  let d be Data-Location;
  thus (Result(F,s)).d = s1.d by A3,A5,EXTPRO_1:32
    .= s.d by A2,A4,Th25;
end;

theorem
 for s being State of SCM, n being Element of NAT
 holds s is State-consisting of n, <*>INT
 proof let s be State of SCM, n be Element of NAT;
  let k be Element of NAT;
   len <*>INT = 0 by CARD_1:def 13;
  hence thesis;
 end;
