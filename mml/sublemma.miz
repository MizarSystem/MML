:: Coincidence Lemma and Substitution Lemma
::  by Patrick Braselmann and Peter Koepke
:: 
:: Received September 25, 2004
:: Copyright (c) 2004 Association of Mizar Users

environ

 vocabulary RELAT_1, FUNCT_2, CQC_LANG, QC_LANG1, QC_LANG3, FINSEQ_1, SQUARE_1,
      ZF_LANG, ZF_MODEL, BOOLE, FUNCT_1, FUNCT_4, PARTFUN1, SUBSTUT1, SUBLEMMA,
      VALUAT_1, FUNCOP_1, MARGREL1, CAT_1, ARYTM_3, MCART_1;
 notation TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, ORDINAL1, FINSEQ_1, FUNCT_1,
      QC_LANG1, QC_LANG2, QC_LANG3, PARTFUN1, NUMBERS, XCMPLX_0, XREAL_0,
      REAL_1, NAT_1, CQC_LANG, RELAT_1, FUNCT_4, VALUAT_1, FUNCOP_1, FINSUB_1,
      RELSET_1, FUNCT_2, FRAENKEL, MARGREL1, CQC_SIM1, DOMAIN_1, MCART_1,
      SUBSTUT1;
 constructors TARSKI, QC_LANG3, DOMAIN_1, CQC_THE1, ARYTM_0, CQC_THE3,
      RECDEF_1, CQC_SIM1, FINSEQ_1, PARTFUN1, MARGREL1, CQC_LANG, NAT_1,
      MCART_1, FUNCT_1, SUBSTUT1, FUNCT_4, FUNCT_2, VALUAT_1, QC_LANG2,
      MEMBERED, XREAL_0, XCMPLX_0, XBOOLE_0;
 clusters NAT_1, FINSEQ_1, ARYTM_3, RELSET_1, CQC_LANG, XBOOLE_0, FUNCOP_1,
      SUBSET_1, QC_LANG1, MARGREL1, FUNCT_1, PARTFUN1, FINSET_1, RELAT_1,
      NUMBERS, ORDINAL2, SUBSTUT1;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions TARSKI, XBOOLE_0, CQC_THE3, MARGREL1, FUNCT_1, CQC_LANG;
 theorems TARSKI, FINSEQ_1, FUNCT_1, MCART_1, VALUAT_1, XBOOLE_0, XBOOLE_1,
      FINSEQ_2, CQC_LANG, QC_LANG1, ZFMISC_1, RELAT_1, QC_LANG3, FUNCOP_1,
      FUNCT_2, RELSET_1, QC_LANG2, SUBSTUT1, FUNCT_4, FUNCT_7, CQC_SIM1, AMI_1,
      AMI_5;
 schemes CQC_LANG, XBOOLE_0, SUBSTUT1;

begin :: Preliminaries

 reserve a,b,c,d for set,
         i,j,k,n for Nat,
         p,q for Element of CQC-WFF,
         x,x1,y,y1 for bound_QC-variable,
         A for non empty set,
         J for interpretation of A,
         v,w for Element of Valuations_in A,
         f,g for Function,
         P,P' for QC-pred_symbol of k,
         ll,ll' for CQC-variable_list of k,
         l1 for FinSequence of QC-variables,
         Sub,Sub',Sub1 for CQC_Substitution,
         S,S',S1,S2 for Element of CQC-Sub-WFF;

theorem Th86:
  for f,g,h,h1,h2 being Function st dom h1 c= dom h & dom h2 c= dom h holds
    f+*g+*h = (f+*h1)+*(g+*h2)+*h
   proof
     let f,g,h,h1,h2 be Function such that
A1:  dom h1 c= dom h & dom h2 c= dom h;
     dom (f+*g) = dom f \/ dom g by FUNCT_4:def 1; then
A2:  dom (f+*g+*h) = (dom f \/ dom g) \/ dom h by FUNCT_4:def 1;
     dom (f+*h1) = (dom f \/ dom h1) & dom (g+*h2) = (dom g \/ dom h2)
                                                       by FUNCT_4:def 1; then
     dom ((f+*h1)+*(g+*h2)) = ((dom f \/ dom h1) \/ (dom g \/ dom h2))
                                                       by FUNCT_4:def 1; then
     dom ((f+*h1)+*(g+*h2)+*h) =
       ((dom f \/ dom h1) \/ (dom g \/ dom h2)) \/ dom h by FUNCT_4:def 1; then
     dom ((f+*h1)+*(g+*h2)+*h) =
       (dom f \/ dom h1) \/ ((dom g \/ dom h2) \/ dom h) by XBOOLE_1:4; then
     dom ((f+*h1)+*(g+*h2)+*h) =
       (dom f \/ dom h1) \/ (dom g \/ (dom h2 \/ dom h)) by XBOOLE_1:4; then
     dom ((f+*h1)+*(g+*h2)+*h) = (dom f \/ dom h1) \/ (dom g \/ dom h)
                                                        by A1,XBOOLE_1:12; then
     dom ((f+*h1)+*(g+*h2)+*h) = ((dom f \/ dom h1) \/ dom h) \/ dom g
                                                        by XBOOLE_1:4; then
     dom ((f+*h1)+*(g+*h2)+*h) = (dom f \/ (dom h1 \/ dom h)) \/ dom g
                                                        by XBOOLE_1:4; then
     dom ((f+*h1)+*(g+*h2)+*h) = (dom f \/ dom h) \/ dom g
                                                        by A1,XBOOLE_1:12; then
A3:  dom ((f+*h1)+*(g+*h2)+*h) = dom (f+*g+*h) by A2,XBOOLE_1:4;
     for b st b in dom (f+*g+*h) holds (f+*g+*h).b = ((f+*h1)+*(g+*h2)+*h).b
     proof
       let b such that b in dom (f+*g+*h);
A6:    now assume A7: not b in dom h; then
A8:      (f+*g+*h).b = (f+*g).b &
         ((f+*h1)+*(g+*h2)+*h).b = ((f+*h1)+*(g+*h2)).b by FUNCT_4:12;
A9:      now assume A10: not b in dom g; then
A11:         (f+*g+*h).b = f.b by A8,FUNCT_4:12;
            not b in dom h2 by A1,A7; then
            not b in dom g \/ dom h2 by A10,XBOOLE_0:def 2; then
            not b in dom (g+*h2) by FUNCT_4:def 1; then
A15:        ((f+*h1)+*(g+*h2)+*h).b = (f+*h1).b by A8,FUNCT_4:12;
            not b in dom h1 by A1,A7;
            hence thesis by A11,A15,FUNCT_4:12;
         end;
         now assume A12: b in dom g; then
A13:       (f+*g+*h).b = g.b by A8,FUNCT_4:14;
           dom g c= (dom g \/ dom h2) by XBOOLE_1:7; then
           b in dom g \/ dom h2 by A12; then
           b in dom (g+*h2) by FUNCT_4:def 1; then
A16:       ((f+*h1)+*(g+*h2)+*h).b = (g+*h2).b by A8,FUNCT_4:14;
           not b in dom h2 by A1,A7;
           hence thesis by A13,A16,FUNCT_4:12;
         end;
         hence thesis by A9;
       end;
       now assume A13: b in dom h; then
         (f+*g+*h).b = h.b by FUNCT_4:14;
         hence thesis by A13,FUNCT_4:14;
       end;
       hence thesis by A6;
     end;                                                     
     hence thesis by A3,FUNCT_1:9;
   end;

theorem Th87:
  for vS1 being Function st
  x in dom vS1 holds (vS1|((dom vS1) \ {x})) +* (x .--> vS1.x) = vS1
   proof
     let vS1 be Function;
     assume A1: x in dom vS1;
A3:  (dom vS1 \ {x}) \/ {x} = dom vS1 \/ {x} by XBOOLE_1:39;
     {x} c= dom vS1 by A1,ZFMISC_1:37; then
     (dom vS1 \ {x}) \/ {x} = dom vS1 by A3,XBOOLE_1:12;
     hence thesis by FUNCT_7:15;
   end;

definition let A;
  mode Val_Sub of A is PartFunc of bound_QC-variables,A;
end;

 reserve vS,vS1,vS2 for Val_Sub of A;

definition let A, v, vS;
  func v.vS -> Element of Valuations_in A equals
  :Def2: v +* vS;
  coherence
  proof
    v is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1; then
    consider f such that
A1: v = f & dom f = bound_QC-variables & rng f c= A by FUNCT_2:def 2;
    dom (v +* vS) = bound_QC-variables \/ dom vS by A1,FUNCT_4:def 1; then
A4:  dom (v +* vS) = bound_QC-variables by XBOOLE_1:12;
A5:  rng (v +* vS) c= rng v \/ rng vS by FUNCT_4:18;
    rng (v +* vS) c= A by A5,XBOOLE_1:1; then
    consider g such that
A6:    v +* vS = g & dom g = bound_QC-variables & rng g c= A by A4;
    v +* vS in Funcs(bound_QC-variables,A) by A6,FUNCT_2:def 2;
    hence thesis by VALUAT_1:def 1;
  end;
end;

definition let S;
  redefine func S`1 -> Element of CQC-WFF;
  coherence
  proof
    S in CQC-Sub-WFF; then
    consider S1 being Element of QC-Sub-WFF such that
A1: S = S1 & S1`1 is Element of CQC-WFF by SUBSTUT1:def 39;
    thus thesis by A1;
  end;
end;

definition let S, A, v;
  func Val_S(v,S) -> Val_Sub of A equals :Def3:
    (@S`2)*v;
  coherence;
end;

theorem Th1:
  S is Sub_VERUM implies CQC_Sub(S) = VERUM
 proof
   ex F being Function of QC-Sub-WFF,QC-WFF st
     CQC_Sub(S) = F.S & for S' being Element of QC-Sub-WFF holds
       (S' is Sub_VERUM implies F.S' = VERUM) &
     ( S' is Sub_atomic implies F.S' = (the_pred_symbol_of ((S')`1))!
       CQC_Subst(Sub_the_arguments_of S',(S')`2)) &
     (S' is Sub_negative implies
         F.S' = 'not' (F.(Sub_the_argument_of S'))) &
     (S' is Sub_conjunctive implies
       F.S' = (F.Sub_the_left_argument_of S') '&'
              (F.Sub_the_right_argument_of S')) &
     (S' is Sub_universal implies
     F.S' = Quant(S',F.Sub_the_scope_of S')) by SUBSTUT1:def 38;
   hence thesis;
 end;

definition let S, A, v, J;
  pred J,v |= S means :Def4:
    J,v |= S`1;
end;

theorem Th2:
  S is Sub_VERUM implies for v holds
    (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S)
 proof
   assume A1: S is Sub_VERUM; then
   consider Sub such that A2: S = [VERUM,Sub] by SUBSTUT1:def 19;
   let v;
   S`1 = VERUM by A2,MCART_1:7; then
   J,v.Val_S(v,S) |= VERUM iff J,v.Val_S(v,S) |= S by Def4;
   hence J,v |= CQC_Sub(S) implies J,v.Val_S(v,S) |= S by VALUAT_1:44;
   J,v.Val_S(v,S) |= S implies J,v |= VERUM by VALUAT_1:44;
   hence thesis by A1,Th1;
 end;

theorem Th3:
  i in dom ll implies ll.i is bound_QC-variable
  proof
    assume i in dom ll; then
A2: ll.i in rng ll by FUNCT_1:12;
    rng ll c= bound_QC-variables by CQC_LANG:def 5;
    hence thesis by A2;
  end;

theorem Th4:
  S is Sub_atomic implies CQC_Sub(S) = (the_pred_symbol_of S`1)!
    CQC_Subst(Sub_the_arguments_of S,S`2)
proof
   ex F being Function of QC-Sub-WFF,QC-WFF st
   CQC_Sub(S) = F.S & for S' being Element of QC-Sub-WFF holds
      (S' is Sub_VERUM implies F.S' = VERUM) &
    ( S' is Sub_atomic implies
      F.S' = (the_pred_symbol_of ((S')`1))!
      CQC_Subst(Sub_the_arguments_of S',(S')`2)) &
    (S' is Sub_negative implies
        F.S' = 'not' (F.(Sub_the_argument_of S'))) &
    (S' is Sub_conjunctive implies
      F.S' = (F.Sub_the_left_argument_of S') '&'
             (F.Sub_the_right_argument_of S')) &
    (S' is Sub_universal implies
    F.S' = Quant(S',F.Sub_the_scope_of S')) by SUBSTUT1:def 38;
 hence thesis;
end;

theorem
  Sub_the_arguments_of Sub_P(P,ll,Sub) =
        Sub_the_arguments_of Sub_P(P',ll',Sub') implies ll = ll'
 proof
   assume A1: Sub_the_arguments_of Sub_P(P,ll,Sub) =
              Sub_the_arguments_of Sub_P(P',ll',Sub');
   consider k1 being Nat, P1 being (QC-pred_symbol of k1),
               ll1 being QC-variable_list of k1, e1 being Element of vSUB
              such that A2: Sub_the_arguments_of Sub_P(P,ll,Sub) = ll1 &
                            Sub_P(P,ll,Sub) = Sub_P(P1,ll1,e1)
                                                       by SUBSTUT1:def 29;
   consider k2 being Nat, P2 being (QC-pred_symbol of k2),
               ll2 being QC-variable_list of k2, e2 being Element of vSUB
              such that A3: Sub_the_arguments_of Sub_P(P',ll',Sub') = ll2 &
                            Sub_P(P',ll',Sub') = Sub_P(P2,ll2,e2)
                                                         by SUBSTUT1:def 29;
    Sub_P(P,ll,Sub) = [P!ll,Sub] by SUBSTUT1:9; then
A5: [P!ll,Sub] = [P1!ll1,e1] by A2,SUBSTUT1:9;
    P!ll = <*P*>^ll & P1!ll1 = <*P1*>^ll1 by QC_LANG1:23; then
A7: <*P1*>^ll1 = <*P*>^ll by A5,ZFMISC_1:33;
     (<*P1*>^ll1).1 = P1 & (<*P*>^ll).1 = P by FINSEQ_1:58;
   then A8: ll1 = ll by A7,FINSEQ_1:46;
   Sub_P(P',ll',Sub') = [P'!ll',Sub'] by SUBSTUT1:9; then
A12: [P'!ll',Sub'] = [P2!ll2,e2] by A3,SUBSTUT1:9;
     P'!ll' = <*P'*>^ll' & P2!ll2 = <*P2*>^ll2 by QC_LANG1:23;
   then
A13: <*P2*>^ll2 = <*P'*>^ll' by A12,ZFMISC_1:33;
   (<*P2*>^ll2).1 = P2 & (<*P'*>^ll').1 = P' by FINSEQ_1:58;
   hence thesis by A1,A2,A3,A8,A13,FINSEQ_1:46;
 end;

theorem
  Sub_the_arguments_of Sub_P(P,ll,Sub) = ll by SUBSTUT1:def 29;

definition let k, P, ll, Sub;
  redefine func Sub_P(P,ll,Sub) -> Element of CQC-Sub-WFF;
  coherence
  proof
    Sub_P(P,ll,Sub) = [P!ll,Sub] by SUBSTUT1:9; then
    Sub_P(P,ll,Sub)`1 = P!ll by MCART_1:7; then
    consider S being Element of QC-Sub-WFF such that A1:
        S = Sub_P(P,ll,Sub) & S`1 in CQC-WFF;
    Sub_P(P,ll,Sub) in CQC-Sub-WFF by A1,SUBSTUT1:def 39;
    hence thesis;
  end;
end;

theorem Th7:
  CQC_Sub(Sub_P(P,ll,Sub)) = P!CQC_Subst(ll,Sub)
proof
  reconsider P' = P as QC-pred_symbol;
A1: Sub_P(P,ll,Sub) = [P!ll,Sub] by SUBSTUT1:9; then
A2: Sub_P(P,ll,Sub)`1 = P!ll by MCART_1:7;
A3: Sub_P(P,ll,Sub)`2 = Sub by A1,MCART_1:7;
   P!ll is atomic by QC_LANG1:def 17; then
   P'!ll = P!ll & Sub_the_arguments_of Sub_P(P,ll,Sub) = ll &
            the_pred_symbol_of (Sub_P(P,ll,Sub)`1) = P
                           by A2,SUBSTUT1:def 29,QC_LANG1:def 21;
   hence thesis by Th4,A3;
end;

theorem
  P!CQC_Subst(ll,Sub) is Element of CQC-WFF
  proof
    CQC_Sub(Sub_P(P,ll,Sub)) = P!CQC_Subst(ll,Sub) by Th7;
    hence thesis;
  end;

theorem Th9:
  CQC_Subst(ll,Sub) is CQC-variable_list of k
 proof
   reconsider ll as FinSequence of bound_QC-variables by SUBSTUT1:34;
   reconsider s = CQC_Subst(ll,Sub) as FinSequence of bound_QC-variables;
A5:  s = CQC_Subst(@ll,Sub) by SUBSTUT1:def 5;
     len ll = k by QC_LANG1:def 8;
     then len @ll = k by SUBSTUT1:def 4;
     then len s = k by A5,SUBSTUT1:def 3;
     then s is CQC-variable_list of k by SUBSTUT1:34;
     hence thesis by A5,SUBSTUT1:def 4;
  end;

definition let k, ll, Sub;
  redefine func CQC_Subst(ll,Sub) -> CQC-variable_list of k;
  coherence by Th9;
end;

theorem Th10:
  not x in dom S`2 implies (v.Val_S(v,S)).x = v.x
 proof
   assume not x in dom(S`2); then
A1: not x in dom @S`2 by SUBSTUT1:def 2;
   dom(@S`2*v) c= dom(@S`2) by RELAT_1:44; then
   not x in dom (@S`2*v) by A1;
   then not x in dom Val_S(v,S) by Def3;
   then (v+*Val_S(v,S)).x = v.x by FUNCT_4:12;
   hence thesis by Def2;   
 end;

theorem Th11:
  x in dom S`2 implies (v.Val_S(v,S)).x = Val_S(v,S).x
   proof
     assume x in dom S`2; then
A1:  x in dom @S`2 by SUBSTUT1:def 2;
A2:  rng @S`2 c= bound_QC-variables;
     dom v = bound_QC-variables by FUNCT_2:def 1;
     then x in dom (@S`2*v) by A1,A2,RELAT_1:46;
     then x in dom Val_S(v,S) by Def3;
     then (v+*Val_S(v,S)).x = Val_S(v,S).x by FUNCT_4:14;
     hence thesis by Def2;
   end;

theorem Th12:
  (v.Val_S(v,Sub_P(P,ll,Sub)))*'ll = v*'(CQC_Subst(ll,Sub))
  proof
    set S' = Sub_P(P,ll,Sub);
    S' = [P!ll,Sub] by SUBSTUT1:9; then
A19: (S')`2 = Sub by MCART_1:7;
    set ll' = CQC_Subst(ll,Sub);
A1: len ll = k by QC_LANG1:def 8;
A16: for j st j in Seg k holds (v.Val_S(v,S'))*'ll.j = v*'(CQC_Subst(ll,Sub)).j
    proof
      let j such that
A3:   j in Seg k;
A4:   1 <= j & j <= k by A3,FINSEQ_1:3;
      j in Seg (len ll) by A3,QC_LANG1:def 8; then
      j in dom ll by FINSEQ_1:def 3; then
      reconsider x = ll.j as bound_QC-variable by Th3;
A5:   now assume A6: not ll.j in dom Sub; then
A7:     v.(ll'.j) = v.(ll.j) by A1,A4,SUBSTUT1:def 3;
A8:     (v*'ll').j = v.(ll'.j) by A4,VALUAT_1:def 8;
        (v.Val_S(v,S')).(ll.j) = v.x by A6,A19,Th10;
        hence thesis by A4,A7,A8,VALUAT_1:def 8;
      end;
      now assume A12: ll.j in dom Sub;
        then A13: v.(ll'.j) = v.(((S')`2).(ll.j)) by A1,A4,A19,SUBSTUT1:def 3;
        (v.Val_S(v,S')).(ll.j) = Val_S(v,S').x by A12,A19,Th11; then
A14:    (v.Val_S(v,S')).(ll.j) = ((@(S')`2)*v).(ll.j) by Def3;
        ll.j in dom @(S')`2 by A12,A19,SUBSTUT1:def 2; then
        (v.Val_S(v,S')).(ll.j) = v.((@(S')`2).(ll.j)) by A14,FUNCT_1:23; then
A15:     (v.Val_S(v,S')).(ll.j) = v.(((S')`2).(ll.j)) by SUBSTUT1:def 2;
        ((v.Val_S(v,S'))*'ll).j = (v.Val_S(v,S')).(ll.j) by A4,VALUAT_1:def 8;
        hence thesis by A4,A13,A15,VALUAT_1:def 8;
      end;
      hence thesis by A5;
   end;
A17: len ((v.Val_S(v,S'))*'ll) = k by VALUAT_1:def 8;
     len (v*'ll') = k by VALUAT_1:def 8;
   hence thesis by A17,A16,FINSEQ_2:10;
 end;

theorem Th13:
  Sub_P(P,ll,Sub)`1 = P!ll
   proof
     Sub_P(P,ll,Sub) = [P!ll,Sub] by SUBSTUT1:9;
     hence thesis by MCART_1:7;
  end;

theorem Th14:
  for v holds (J,v |= CQC_Sub(Sub_P(P,ll,Sub)) iff
    J,v.Val_S(v,Sub_P(P,ll,Sub)) |= Sub_P(P,ll,Sub))
 proof
   set S' = Sub_P(P,ll,Sub);
   set ll' = CQC_Subst(ll,Sub);
   reconsider p = P!ll' as Element of CQC-WFF;
   reconsider ll' as  CQC-variable_list of k;
   let v;
A1:  J,v |= CQC_Sub(Sub_P(P,ll,Sub)) iff J,v |= p by Th7;
A3:  Valid(p,J).v = TRUE iff v*'ll' in J.P by VALUAT_1:16;
A5:  (v.Val_S(v,S'))*'ll in J.P iff
                  Valid(P!ll,J).((v.Val_S(v,S'))) = TRUE by VALUAT_1:16;
     J,v.Val_S(v,S') |= P!ll iff
      J,v.Val_S(v,S') |= Sub_P(P,ll,Sub)`1 by Th13;
   hence thesis by A1,A3,A5,Th12,Def4,VALUAT_1:def 12;
 end;

theorem Th15:
  (Sub_not S)`1 = 'not' S`1 & (Sub_not S)`2 = S`2
   proof
     Sub_not S = ['not' S`1,S`2] by SUBSTUT1:def 20;
     hence thesis by MCART_1:7;
   end;

definition let S;
  redefine func Sub_not S -> Element of CQC-Sub-WFF;
  coherence
  proof
    'not' S`1 in CQC-WFF; then
    (Sub_not S)`1 in CQC-WFF by Th15; then
    consider S' being Element of QC-Sub-WFF such that A1: Sub_not S = S' &
                          (S')`1 is Element of CQC-WFF;
    Sub_not S in CQC-Sub-WFF by A1,SUBSTUT1:def 39;
    hence thesis;
  end;
end;

theorem Th16:
  not J,v.Val_S(v,S) |= S iff J,v.Val_S(v,S) |= Sub_not S
  proof
A2: not J,v.Val_S(v,S) |= S`1 iff
             J,v.Val_S(v,S) |= 'not' S`1 by VALUAT_1:28;
A3: J,v.Val_S(v,S) |= 'not' S`1 iff
                  J,v.Val_S(v,S) |= (Sub_not S)`1 by Th15;
    thus thesis by A2,A3,Def4;
  end;

theorem Th98:
  Val_S(v,S) = Val_S(v,Sub_not S)
  proof
    Sub_not S = ['not' S`1,S`2] by SUBSTUT1:def 20; then
    (@(Sub_not S)`2)*v = (@S`2)*v by MCART_1:7; then
    Val_S(v,Sub_not S) = (@S`2)*v by Def3;
    hence thesis by Def3;
  end;

theorem Th17:
  (for v holds (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S)) implies
        (for v holds (J,v |= CQC_Sub(Sub_not S) iff
            J,v.Val_S(v,Sub_not S) |= Sub_not S))
proof
  assume A1: for v holds (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S);
  let v;
A2: J,v |= 'not' CQC_Sub(S) iff not J,v |= CQC_Sub(S) by VALUAT_1:28;
   not J,v.Val_S(v,S) |= S iff J,v.Val_S(v,S) |= Sub_not S by Th16;
   hence thesis by A1,A2,Th98,SUBSTUT1:29;
end;

definition let S1, S2;
  assume A1: S1`2 = S2`2;
  func CQCSub_&(S1,S2) -> Element of CQC-Sub-WFF equals :Def5:
    Sub_&(S1,S2);
  coherence
  proof
    Sub_&(S1,S2) = [(S1`1) '&' (S2`1),S1`2] by A1,SUBSTUT1:def 21; then
    Sub_&(S1,S2)`1 = (S1`1) '&' (S2`1) by MCART_1:7; then
    consider S' being Element of QC-Sub-WFF such that
A2: Sub_&(S1,S2) = S' & (S')`1 is Element of CQC-WFF;
    Sub_&(S1,S2) in CQC-Sub-WFF by A2,SUBSTUT1:def 39;
    hence thesis;
  end;
end;

theorem Th18:
  S1`2 = S2`2 implies CQCSub_&(S1,S2)`1 = (S1`1) '&' (S2`1) &
                            CQCSub_&(S1,S2)`2 = S1`2
  proof
    assume A1: S1`2 = S2`2; then
    Sub_&(S1,S2) = [(S1`1) '&' (S2`1),S1`2] by SUBSTUT1:def 21; then
    CQCSub_&(S1,S2) = [(S1`1) '&' (S2`1),S1`2] by A1,Def5;
    hence thesis by MCART_1:7;
  end;

theorem Th99:
  S1`2 = S2`2 implies CQCSub_&(S1,S2)`2 = S1`2
  proof
    assume A1: S1`2 = S2`2; then
    CQCSub_&(S1,S2) = Sub_&(S1,S2) by Def5; then
    CQCSub_&(S1,S2) = [(S1`1) '&' (S2`1),S1`2] by A1,SUBSTUT1:def 21;
    hence thesis by MCART_1:7;
  end;

theorem Th100:
  S1`2 = S2`2 implies Val_S(v,S1) = Val_S(v,CQCSub_&(S1,S2)) &
    Val_S(v,S2) = Val_S(v,CQCSub_&(S1,S2))
   proof
     assume A1: S1`2 = S2`2; then
     @CQCSub_&(S1,S2)`2 = @S1`2 by Th99; then
     Val_S(v,CQCSub_&(S1,S2)) = (@S1`2)*v by Def3; then
A2:  Val_S(v,S1) = Val_S(v,CQCSub_&(S1,S2)) by Def3;     
     Val_S(v,S1) = (@S2`2)*v by A1,Def3;
     hence thesis by A2,Def3;
   end;
   
theorem Th19:
  S1`2 = S2`2 implies
    CQC_Sub(CQCSub_&(S1,S2)) = (CQC_Sub(S1)) '&' (CQC_Sub(S2))
 proof
   assume A1: S1`2 = S2`2; then
   CQCSub_&(S1,S2) = Sub_&(S1,S2) by Def5;
   hence thesis by A1,SUBSTUT1:31;
 end;

theorem Th20:
  S1`2 = S2`2 implies
    (J,v.Val_S(v,S1) |= S1 & J,v.Val_S(v,S2) |= S2 iff
       J,v.Val_S(v,CQCSub_&(S1,S2)) |= CQCSub_&(S1,S2))
 proof
   assume A1: S1`2 = S2`2;
A2:  Val_S(v,S1) = Val_S(v,CQCSub_&(S1,S2)) &
                       Val_S(v,S2) = Val_S(v,CQCSub_&(S1,S2)) by A1,Th100; then
A4: J,v.Val_S(v,S1) |= S1`1 & J,v.Val_S(v,S1) |= S2`1 iff
           J,v.Val_S(v,CQCSub_&(S1,S2)) |= (S1`1) '&' (S2`1) by VALUAT_1:29;
    J,v.Val_S(v,CQCSub_&(S1,S2)) |= (S1`1) '&' (S2`1) iff
                  J,v.Val_S(v,CQCSub_&(S1,S2)) |= CQCSub_&(S1,S2)`1 by A1,Th18;
   hence thesis by A2,A4,Def4;   
 end;                       

theorem Th21:
  (S1`2 = S2`2 &
   (for v holds (J,v |= CQC_Sub(S1) iff J,v.Val_S(v,S1) |= S1)) &
          (for v holds (J,v |= CQC_Sub(S2) iff J,v.Val_S(v,S2) |= S2))) implies
              for v holds (J,v |= CQC_Sub(CQCSub_&(S1,S2)) iff
                            J,v.Val_S(v,CQCSub_&(S1,S2)) |= CQCSub_&(S1,S2))
 proof
   assume A1: S1`2 = S2`2 &
            (for v holds (J,v |= CQC_Sub(S1) iff J,v.Val_S(v,S1) |= S1)) &
          (for v holds (J,v |= CQC_Sub(S2) iff J,v.Val_S(v,S2) |= S2));
   let v;
A2: J,v |= CQC_Sub(CQCSub_&(S1,S2)) iff J,v |= (CQC_Sub(S1)) '&' (CQC_Sub(S2))
                                                                    by A1,Th19;
   J,v |= (CQC_Sub(S1)) & J,v |= (CQC_Sub(S2)) iff
                           J,v.Val_S(v,S1) |= S1 & J,v.Val_S(v,S2) |= S2 by A1;
   hence thesis by A1,A2,Th20,VALUAT_1:29;                                   
 end;

 reserve B for Element of [:QC-Sub-WFF,bound_QC-variables:],
         SQ for second_Q_comp of B;

theorem Th23:
  B is quantifiable implies Sub_All(B,SQ)`1 = All(B`2,(B`1)`1) &
    Sub_All(B,SQ)`2 = SQ
   proof
     assume B is quantifiable; then
     Sub_All(B,SQ) = [All(B`2,(B`1)`1),SQ] by SUBSTUT1:def 24;
     hence thesis by MCART_1:7;
   end;

definition let B be Element of [:QC-Sub-WFF,bound_QC-variables:];
  attr B is CQC-WFF-like means :Def6:
    B`1 in CQC-Sub-WFF;
end;

registration
  cluster CQC-WFF-like Element of [:QC-Sub-WFF,bound_QC-variables:];
  existence
  proof
    consider Sub,x;
    set B = [[VERUM,Sub],x];
    [VERUM,Sub] in QC-Sub-WFF by SUBSTUT1:def 16,QC_LANG1:def 13; then
    reconsider B as Element of [:QC-Sub-WFF,bound_QC-variables:]
                                                             by ZFMISC_1:106;
    take B;
    reconsider S = [VERUM,Sub] as Element of QC-Sub-WFF
                                       by SUBSTUT1:def 16,QC_LANG1:def 13;
    S`1 is Element of CQC-WFF by MCART_1:7; then
    S in CQC-Sub-WFF by SUBSTUT1:def 39; then
    B`1 in CQC-Sub-WFF by MCART_1:7;
    hence thesis by Def6;
  end;
end;

definition let S, x;
  redefine func [S,x] -> CQC-WFF-like
                        Element of [:QC-Sub-WFF,bound_QC-variables:];
  coherence
  proof
    [S,x]`1 = S by MCART_1:7;
    hence thesis by Def6;
  end;
end;

 reserve B for CQC-WFF-like Element of [:QC-Sub-WFF,bound_QC-variables:],
         xSQ for second_Q_comp of [S,x],
         SQ for second_Q_comp of B;

definition let B;
  redefine func B`1 -> Element of CQC-Sub-WFF;
  coherence by Def6;
end;

definition let B, SQ;
  assume A1: B is quantifiable;
  func CQCSub_All(B,SQ) -> Element of CQC-Sub-WFF equals :Def7:
    Sub_All(B,SQ);
  coherence
  proof
    All(B`2,(B`1)`1) in CQC-WFF; then
    Sub_All(B,SQ)`1 in CQC-WFF by A1,Th23; then
    consider S' being Element of QC-Sub-WFF such that A2: Sub_All(B,SQ) = S' &
                          (S')`1 is Element of CQC-WFF;
    Sub_All(B,SQ) in CQC-Sub-WFF by A2,SUBSTUT1:def 39;
    hence thesis;
  end;
end;

theorem Th25:
  B is quantifiable implies CQCSub_All(B,SQ) is Sub_universal
   proof
     assume A1: B is quantifiable; then
     Sub_All(B,SQ) is Sub_universal by SUBSTUT1:14;
     hence thesis by A1,Def7;
   end;

definition let S such that A1: S is Sub_universal;
  func CQCSub_the_scope_of S -> Element of CQC-Sub-WFF equals
  :Def9: Sub_the_scope_of S;
  coherence
  proof
    consider B being Element of [:QC-Sub-WFF,bound_QC-variables:],
      SQ being second_Q_comp of B such that
A2: S = Sub_All(B,SQ) & B`1 = Sub_the_scope_of S & B is quantifiable
                                                       by A1,SUBSTUT1:def 34;
    S`1 = All(B`2,(B`1)`1) by A2,Th23; then
    (B`1)`1 is Element of CQC-WFF by CQC_LANG:23; then
    consider S1 being Element of QC-Sub-WFF such that
A4:                           S1 = B`1 & S1`1 is Element of CQC-WFF;
    B`1 in CQC-Sub-WFF by A4,SUBSTUT1:def 39;
    hence thesis by A2;
  end;
end;

definition let S1, p;
  assume A1: S1 is Sub_universal & p = CQC_Sub(CQCSub_the_scope_of S1);
  func CQCQuant(S1,p) -> Element of CQC-WFF equals :Def10:
    Quant(S1,p);
  coherence
  proof
    CQCSub_the_scope_of S1 = Sub_the_scope_of S1 by A1,Def9; then
    CQC_Sub(S1) = Quant(S1,p) by A1,SUBSTUT1:32;
    hence thesis;
  end;
end;

theorem Th26:
  S is Sub_universal implies
                    CQC_Sub(S) = CQCQuant(S,CQC_Sub(CQCSub_the_scope_of S))
   proof
     assume A1: S is Sub_universal; then
     CQCSub_the_scope_of S = Sub_the_scope_of S by Def9; then
     CQCQuant(S,CQC_Sub(CQCSub_the_scope_of S)) =
                        Quant(S,CQC_Sub(Sub_the_scope_of S)) by A1,Def10;
     hence thesis by A1,SUBSTUT1:32;
  end;

theorem Th27:
  B is quantifiable implies CQCSub_the_scope_of(CQCSub_All(B,SQ)) = B`1
  proof
    assume A1: B is quantifiable; then
A2: CQCSub_All(B,SQ) = Sub_All(B,SQ) by Def7; then
    CQCSub_All(B,SQ) is Sub_universal by A1,SUBSTUT1:14; then
    CQCSub_the_scope_of(CQCSub_All(B,SQ)) =
                     Sub_the_scope_of(Sub_All(B,SQ)) by A2,Def9;
    hence thesis by A1,SUBSTUT1:21;
  end;

begin :: The Substitution Lemma

theorem Th28:
  [S,x] is quantifiable implies
      CQCSub_the_scope_of(CQCSub_All([S,x],xSQ)) = S &
        CQCQuant(CQCSub_All([S,x],xSQ),CQC_Sub(CQCSub_the_scope_of
          CQCSub_All([S,x],xSQ))) = CQCQuant(CQCSub_All([S,x],xSQ),CQC_Sub(S))
    proof
      assume A1: [S,x] is quantifiable;
      CQCSub_the_scope_of(CQCSub_All([S,x],xSQ)) = [S,x]`1 by A1,Th27;
      hence thesis by MCART_1:7;
    end;            

theorem Th29:
  [S,x] is quantifiable implies
      CQCQuant(CQCSub_All([S,x],xSQ),CQC_Sub(S)) =
           All(S_Bound(@CQCSub_All([S,x],xSQ)),CQC_Sub(S))
    proof
      set S1 = CQCSub_All([S,x],xSQ);
      set p = CQC_Sub(CQCSub_the_scope_of S1);
      assume A1: [S,x] is quantifiable; then
      CQCSub_All([S,x],xSQ) = Sub_All([S,x],xSQ) by Def7; then
  A2: CQCSub_All([S,x],xSQ) is Sub_universal by A1,SUBSTUT1:14;
  A3: CQCQuant(S1,CQC_Sub(S)) = CQCQuant(S1,p) by A1,Th28;
  A4: CQCQuant(S1,p) = Quant(S1,p) by A2,Def10;
      Quant(S1,p) = All(S_Bound(@S1),p) by SUBSTUT1:def 37;
      hence thesis by A1,A3,A4,Th28;
    end;

 reserve BSQ for second_Q_comp of [S,S_Bound(@CQCSub_All([S,x],xSQ))];

theorem
  x in dom S`2 implies v.((@S`2).x) = v.Val_S(v,S).x
 proof
   assume A1: x in dom S`2; then
   v.Val_S(v,S).x = Val_S(v,S).x by Th11; then
A2: v.Val_S(v,S).x = ((@S`2)*v).x by Def3;
   x in dom @S`2 by A1,SUBSTUT1:def 2;
   hence thesis by A2,FUNCT_1:23;
 end;

theorem
  x in dom (@S`2) implies (@S`2).x is bound_QC-variable
   proof
     assume x in dom (@S`2);
     then A1: (@S`2).x in rng @S`2 by FUNCT_1:12;
     thus thesis by A1;
   end;

theorem Th34:
  [:QC-WFF,vSUB:] c= dom QSub
   proof
     let a;
     assume a in [:QC-WFF,vSUB:];
     then consider b,c such that A1: b in QC-WFF & c in vSUB & a = [b,c]
                                                           by ZFMISC_1:def 2;
     reconsider p = b as Element of QC-WFF by A1;
     reconsider Sub = c as CQC_Substitution by A1;
A6:   now assume A2: p is universal;
       set b =
       ExpandSub(bound_in p,the_scope_of p, RestrictSub(bound_in p,p,Sub));
A3:     p,Sub PQSub b by A2,SUBSTUT1:def 14;
       set a = [[p,Sub],b];
       a in QSub by A3,SUBSTUT1:def 15;
       hence thesis by A1,FUNCT_1:8;
     end;
     now assume A4: not p is universal;
       set b = {};
A5:     p,Sub PQSub b by A4,SUBSTUT1:def 14;
       set a = [[p,Sub],b];
       a in QSub by A5,SUBSTUT1:def 15;
       hence thesis by A1,FUNCT_1:8;
     end;
     hence thesis by A6;
  end;

 reserve B1 for Element of [:QC-Sub-WFF,bound_QC-variables:];
 reserve SQ1 for second_Q_comp of B1;   

theorem Th35:
  B is quantifiable & B1 is quantifiable &
    Sub_All(B,SQ) = Sub_All(B1,SQ1) implies B`2 = B1`2 & SQ = SQ1
   proof
     assume A1: B is quantifiable & B1 is quantifiable &
                Sub_All(B,SQ) = Sub_All(B1,SQ1); then
      Sub_All(B,SQ) = [All(B`2,(B`1)`1),SQ] by SUBSTUT1:def 24; then
      [All(B`2,(B`1)`1),SQ] = [All(B1`2,(B1`1)`1),SQ1] by A1,SUBSTUT1:def 24;
      then All(B`2,(B`1)`1) = All(B1`2,(B1`1)`1) & SQ = SQ1 by ZFMISC_1:33;
      hence thesis by QC_LANG2:6;
  end;
  
theorem Th36:
  B is quantifiable & B1 is quantifiable &
    CQCSub_All(B,SQ) = Sub_All(B1,SQ1) implies B`2 = B1`2 & SQ = SQ1
   proof
     assume A1: B is quantifiable & B1 is quantifiable &
                      CQCSub_All(B,SQ) = Sub_All(B1,SQ1); then
     Sub_All(B,SQ) = Sub_All(B1,SQ1) by Def7;
     hence thesis by A1,Th35;
   end;

theorem
  [S,x] is quantifiable implies Sub_the_bound_of CQCSub_All([S,x],xSQ) = x
    proof
      set S1 = CQCSub_All([S,x],xSQ);
      assume A1: [S,x] is quantifiable; then
      S1 = Sub_All([S,x],xSQ) by Def7; then
A3:   S1 is Sub_universal by A1,SUBSTUT1:14;
      consider B being Element of [:QC-Sub-WFF,bound_QC-variables:],
      SQ being second_Q_comp of B such that
A4:   S1 = Sub_All(B,SQ) & B`2 = Sub_the_bound_of S1 & B is quantifiable
                                                     by A3,SUBSTUT1:def 33;
     [S,x]`2 = B`2 by A1,A4,Th36;
     hence thesis by A4,MCART_1:7;
    end;
  
theorem Th38:
  [S,x] is quantifiable & x in rng RestrictSub(x,All(x,S`1),xSQ)
           implies not S_Bound(@CQCSub_All([S,x],xSQ)) in
                                            rng RestrictSub(x,All(x,S`1),xSQ) &
           not S_Bound(@CQCSub_All([S,x],xSQ)) in Bound_Vars(S`1)
   proof
   set S1 = CQCSub_All([S,x],xSQ);
   set z = S_Bound(@S1);
   assume A1: [S,x] is quantifiable & x in rng RestrictSub(x,All(x,S`1),xSQ);
   then S1 = Sub_All([S,x],xSQ) by Def7; then
A2: S1`1 = All([S,x]`2,([S,x]`1)`1) & S1`2 = xSQ by A1,Th23; then
A3: S1`1 = All(x,([S,x]`1)`1) by MCART_1:7; then
A4: bound_in S1`1 = x by QC_LANG2:8;
    set fin_Sub = RestrictSub(bound_in S1`1,S1`1,S1`2);
A19: fin_Sub = RestrictSub(x,All(x,S`1),xSQ) by A2,A3,A4,MCART_1:7;
    set n = min NSub(the_scope_of S1`1,fin_Sub);
    set Y = Dom_Bound_Vars(the_scope_of S1`1) \/ Sub_Var(fin_Sub);
    NSub(the_scope_of S1`1,fin_Sub) = NAT \ Y by SUBSTUT1:def 11; then
    reconsider X = NAT \ Y as non empty Subset of NAT;
A6:   upVar(fin_Sub,the_scope_of S1`1) = n by SUBSTUT1:def 12;
A7:   n = min X by SUBSTUT1:def 11;
A8:   Sub_Var(fin_Sub) c= Y by XBOOLE_1:7;
      min X in NAT\(Dom_Bound_Vars(the_scope_of S1`1) \/ Sub_Var(fin_Sub))
                                                        by CQC_SIM1:def 8; then
A9:   not n in Sub_Var(fin_Sub) by A7,A8,XBOOLE_0:def 4;
      Sub_Var(fin_Sub) = {i : x.i in rng fin_Sub} by SUBSTUT1:def 10; then
A12:  not x.upVar(fin_Sub,the_scope_of S1`1) in rng fin_Sub by A6,A9;
A20:  Dom_Bound_Vars(the_scope_of S1`1) c=
           Dom_Bound_Vars(the_scope_of S1`1) \/ Sub_Var(fin_Sub) by XBOOLE_1:7;
      min X in NAT\(Dom_Bound_Vars(the_scope_of S1`1) \/
                                      Sub_Var(fin_Sub)) by CQC_SIM1:def 8; then
A21:  not n in Dom_Bound_Vars(the_scope_of S1`1) by A7,A20,XBOOLE_0:def 4;
A22:  Dom_Bound_Vars(the_scope_of S1`1) =
               {i : x.i in Bound_Vars(the_scope_of S1`1)} by SUBSTUT1:def 9;
A23:  not x.n in Bound_Vars(the_scope_of S1`1) by A21,A22;
      S1`1 = All(x,S`1) by A3,MCART_1:7; then
A26:  not x.upVar(fin_Sub,the_scope_of S1`1) in Bound_Vars(S`1)
                                                   by A6,A23,QC_LANG2:8;
      S1 = @S1 by SUBSTUT1:def 35;
      hence thesis by A1,A4,A12,A19,A26,SUBSTUT1:def 36;
   end;

theorem Th39:
  [S,x] is quantifiable & not x in rng RestrictSub(x,All(x,S`1),xSQ) implies
    not S_Bound(@CQCSub_All([S,x],xSQ)) in rng RestrictSub(x,All(x,S`1),xSQ)
   proof
   set S1 = CQCSub_All([S,x],xSQ);
   set z = S_Bound(@S1);
   assume A1: [S,x] is quantifiable &
                                    not x in rng RestrictSub(x,All(x,S`1),xSQ);
   then S1 = Sub_All([S,x],xSQ) by Def7; then
A2: S1`1 = All([S,x]`2,([S,x]`1)`1) &
     S1`2 = xSQ by A1,Th23; then
     S1`1 = All(x,([S,x]`1)`1) by MCART_1:7; then
A3: bound_in(S1`1) = x by QC_LANG2:8;
    set fin_Sub = RestrictSub(bound_in S1`1,S1`1,S1`2);
      S1`1 = All(x,([S,x]`1)`1) by A2,MCART_1:7; then
A20:  not bound_in(S1`1) in rng fin_Sub by A1,A2,A3,MCART_1:7;
      S1 = @S1 by SUBSTUT1:def 35;
      hence thesis by A1,A3,A20,SUBSTUT1:def 36;
 end;

theorem Th40:
  [S,x] is quantifiable implies
    not S_Bound(@CQCSub_All([S,x],xSQ)) in rng RestrictSub(x,All(x,S`1),xSQ)
   proof
     assume A1: [S,x] is quantifiable;
     x in rng RestrictSub(x,All(x,S`1),xSQ) implies thesis by A1,Th38;
     hence thesis by A1,Th39;
   end;

theorem Th41:
  [S,x] is quantifiable implies
    S`2 = ExpandSub(x,S`1,RestrictSub(x,All(x,S`1),xSQ))
     proof
       assume A1: [S,x] is quantifiable;
       set z = S_Bound(@CQCSub_All([S,x],xSQ));
 A3:   ([S,x]`1)`2 = QSub.[All([S,x]`2,([S,x]`1)`1),xSQ] by A1,SUBSTUT1:def 23;
       [All([S,x]`2,([S,x]`1)`1),xSQ] =
       [All(x,([S,x]`1)`1),xSQ] by MCART_1:7; then
 A4:   [All([S,x]`2,([S,x]`1)`1),xSQ] =
       [All(x,S`1),xSQ] by MCART_1:7;
       set Z = [All(x,S`1),xSQ];
       Z in [:QC-WFF,vSUB:] by ZFMISC_1:def 2; then
       [Z,([S,x]`1)`2] in QSub by A3,A4,Th34,FUNCT_1:8; then
       [Z,S`2] in QSub by MCART_1:7; then
       consider p being QC-formula,Sub1,b such that
 A6:   [Z,S`2] = [[p,Sub1],b] & p,Sub1 PQSub b by SUBSTUT1:def 15;
 A7:   Z = [p,Sub1] & S`2 = b by A6,ZFMISC_1:33; then
 A8:   All(x,S`1) = p & xSQ = Sub1 by ZFMISC_1:33;
       set q = All(x,S`1);
 A9:   q is universal by QC_LANG1:def 20; then
 A10:  S`2 = ExpandSub(bound_in q,the_scope_of q,RestrictSub(bound_in q,q,xSQ))
                                                 by A6,A7,A8,SUBSTUT1:def 14;
       bound_in q = x by A9,QC_LANG1:def 26;
       hence thesis by A9,A10,QC_LANG1:def 27;
 end;

theorem
  still_not-bound_in VERUM c= Bound_Vars(VERUM) by QC_LANG3:7,SUBSTUT1:2;

theorem Th102:
  still_not-bound_in (P!ll) c= Bound_Vars(P!ll)
   proof
     set l1 = the_arguments_of (P!ll);
A1:  P!ll is atomic by QC_LANG1:def 17; then
     Bound_Vars(P!ll) = Bound_Vars(l1) by SUBSTUT1:3; then
A2:  Bound_Vars(P!ll) = { l1.i : 1 <= i & i <= len l1 &
                            l1.i in bound_QC-variables} by SUBSTUT1:def 7;
     still_not-bound_in (P!ll) = still_not-bound_in ll by QC_LANG3:9; then
A3:  still_not-bound_in (P!ll) = variables_in(ll,bound_QC-variables)
                                                                 by QC_LANG3:6;
     consider n being Nat, P' being (QC-pred_symbol of n),
                                  ll' being QC-variable_list of n such that
A4:  l1 = ll' & P!ll = P'!ll' by A1,QC_LANG1:def 22;
A6:  P!ll = <*P*>^ll & P'!ll' = <*P'*>^ll' by QC_LANG1:23;
     (<*P'*>^ll').1 = P' & (<*P*>^ll).1 = P by FINSEQ_1:58; then
     ll' = ll by A4,A6,FINSEQ_1:46;     
     hence thesis by A2,A3,A4,QC_LANG3:def 2;
   end;

theorem Th103:
  still_not-bound_in (p) c= Bound_Vars(p) implies
    still_not-bound_in ('not' p) c= Bound_Vars('not' p)
   proof
     assume A1: still_not-bound_in (p) c= Bound_Vars(p);
     'not' p is negative by QC_LANG1:def 18; then
     Bound_Vars('not' p) = Bound_Vars(the_argument_of ('not' p)) by SUBSTUT1:4;
     then Bound_Vars('not' p) = Bound_Vars(p) by QC_LANG2:2;
     hence thesis by A1,QC_LANG3:11;
   end;

theorem Th104:
  still_not-bound_in p c= Bound_Vars(p) &
    still_not-bound_in q c= Bound_Vars(q) implies
      still_not-bound_in (p '&' q) c= Bound_Vars(p '&' q)
   proof
     assume A1: still_not-bound_in p c= Bound_Vars(p) &
                                     still_not-bound_in q c= Bound_Vars(q);
     p '&' q is conjunctive by QC_LANG1:def 19; then
     Bound_Vars(p '&' q) =  Bound_Vars(the_left_argument_of (p '&' q)) \/
            Bound_Vars(the_right_argument_of (p '&' q)) by SUBSTUT1:5; then
     Bound_Vars(p '&' q) = Bound_Vars(p) \/
             Bound_Vars(the_right_argument_of (p '&' q)) by QC_LANG2:5; then
A2:  Bound_Vars(p '&' q) = Bound_Vars(p) \/  Bound_Vars(q) by QC_LANG2:5;
     still_not-bound_in (p '&' q) = still_not-bound_in p \/
                                          still_not-bound_in q by QC_LANG3:14;
     hence thesis by A1,A2,XBOOLE_1:13;
   end;

theorem Th105:
  still_not-bound_in p c= Bound_Vars(p) implies
    still_not-bound_in All(x,p) c= Bound_Vars(All(x,p))
   proof
     assume A1: still_not-bound_in p c= Bound_Vars(p);
     All(x,p) is universal by QC_LANG1:def 20; then
     Bound_Vars(All(x,p)) = Bound_Vars(the_scope_of All(x,p)) \/
                                        {bound_in All(x,p)} by SUBSTUT1:6; then
A2:  Bound_Vars(All(x,p)) = Bound_Vars(p) \/ {bound_in All(x,p)} by QC_LANG2:8;
     still_not-bound_in All(x,p) = (still_not-bound_in p) \ {x} by QC_LANG3:16;
     then A4: still_not-bound_in All(x,p) c= Bound_Vars(p) \ {x}
                                                             by A1,XBOOLE_1:33;
A5:  Bound_Vars(p) \ {x} c= Bound_Vars(p) by XBOOLE_1:36;
     Bound_Vars(p) c= Bound_Vars(All(x,p)) by A2,XBOOLE_1:7; then
     Bound_Vars(p) \ {x} c= Bound_Vars(All(x,p)) by A5,XBOOLE_1:1;
     hence thesis by A4,XBOOLE_1:1;
   end;
   
theorem Th43:
  for p holds still_not-bound_in p c= Bound_Vars(p)
   proof
   defpred P[Element of QC-WFF] means still_not-bound_in $1 c= Bound_Vars($1);
A1:  for p,q,x,k for l being CQC-variable_list of k
     for P being QC-pred_symbol of k holds
       P[VERUM] & P[P!l] &
       (P[p] implies P['not' p]) &
       (P[p] & P[q] implies P[p '&' q]) &
       (P[p] implies P[All(x,p)])
                          by Th102,Th103,Th104,Th105,QC_LANG3:7,SUBSTUT1:2;
     thus for p holds P[p] from CQC_LANG:sch 1(A1);
   end;
   
definition let A; let a be Element of A; let x;
  func x|a -> Val_Sub of A equals :Def11:
    x .--> a;
  coherence
  proof
A1:  dom(x .--> a) = {x} by CQC_LANG:5;
    rng(x .--> a) = {a} by CQC_LANG:5;
    hence thesis by A1,RELSET_1:11;
  end;
end;

 reserve a for Element of A;

theorem Th47:
  x <> b implies v.(x|a).b = v.b
   proof
     assume x <> b; then
     not b in dom ({x} --> a) by TARSKI:def 1; then
     not b in dom (x .--> a) by CQC_LANG:def 2; then
     not b in dom (x|a) by Def11; then
     (v +* (x|a)).b = v.b by FUNCT_4:12;
     hence thesis by Def2;
   end;

theorem Th48:
  x = y implies v.(x|a).y = a
   proof
     assume A1: x = y;
     then y in {x} by TARSKI:def 1; then
     y in dom ({x} --> a) by FUNCOP_1:19; then
     y in dom (x .--> a) by CQC_LANG:def 2; then
     y in dom (x|a) by Def11; then
 A2: (v +* (x|a)).y = (x|a).y by FUNCT_4:14;
     (x .--> a).y = a by A1,CQC_LANG:6; then
     (x|a).y = a by Def11;
     hence thesis by A2,Def2;
   end;  

theorem Th49:
  J,v |= All(x,p) iff (for a holds J,v.(x|a) |= p)
   proof
     thus J,v |= All(x,p) implies (for a holds J,v.(x|a) |= p)
     proof
       assume A1: J,v |= All(x,p);
       let a;
       for y st x <> y holds v.(x|a).y = v.y by Th47;
       hence thesis by A1,VALUAT_1:41;
     end;
     thus (for a holds J,v.(x|a) |= p) implies J,v |= All(x,p)
     proof
       assume A4: for a holds J,v.(x|a) |= p;
       for w st for y st x <> y holds w.y = v.y holds J,w |= p
       proof
         let w such that A5: for y st x <> y holds w.y = v.y;
         set c = w.x;
     A6: for b st b in dom w holds w.b = v.(x|c).b
         proof
           let b such that A7: b in dom w;
           reconsider y = b as bound_QC-variable by A7;
     A8:   now assume A9: x <> y; then
             w.y = v.y by A5;
             hence thesis by A9,Th47;
           end;
           thus thesis by A8,Th48;
         end;
         w is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1; then
         consider f such that A13: w = f & dom f = bound_QC-variables &
                              rng f c= A by FUNCT_2:def 2;
         v.(x|c) is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1;
         then consider f such that A15: v.(x|c) = f &
                   dom f = bound_QC-variables & rng f c= A by FUNCT_2:def 2;
         v.(x|c) = w by A6,A13,A15,FUNCT_1:9;
         hence thesis by A4;
       end;
       hence thesis by VALUAT_1:41;
     end;    
 end;

definition let S, x, xSQ, A, v;
  func NEx_Val(v,S,x,xSQ) -> Val_Sub of A equals
  :Def12: (@RestrictSub(x,All(x,S`1),xSQ))*v;
  coherence;
end;

definition let A; let v,w be Val_Sub of A;
  redefine func v+*w -> Val_Sub of A;
  coherence
  proof
A1:  dom (v+*w) = dom v \/ dom w by FUNCT_4:def 1;
    rng (v+*w) c= rng v \/ rng w by FUNCT_4:18; then
    rng (v+*w) c= A by XBOOLE_1:1;
    hence thesis by A1,RELSET_1:11;
  end;
end;

theorem Th51:
  [S,x] is quantifiable &
    x in rng RestrictSub(x,All(x,S`1),xSQ) implies
  S_Bound(@CQCSub_All([S,x],xSQ)) = x.upVar(RestrictSub(x,All(x,S`1),xSQ),S`1)
 proof
   set S1 = CQCSub_All([S,x],xSQ);
   set z = S_Bound(@S1);
   assume that A1: [S,x] is quantifiable and
a1: x in rng RestrictSub(x,All(x,S`1),xSQ);
    S1 = Sub_All([S,x],xSQ) by A1,Def7; then
A2: S1`1 = All([S,x]`2,([S,x]`1)`1) & S1`2 = xSQ by A1,Th23; then
    S1`1 = All(x,([S,x]`1)`1) by MCART_1:7; then
A5: bound_in(S1`1) = x by QC_LANG2:8;
    set fin_Sub = RestrictSub(bound_in S1`1,S1`1,S1`2);
A6:   S1`1 = All(x,([S,x]`1)`1) by A2,MCART_1:7; then
A7:   S1`1 = All(x,S`1) by MCART_1:7;
A8:   x = bound_in S1`1 by A6,QC_LANG2:8;      
A10:  bound_in(S1`1) in rng fin_Sub by a1,A2,A5,A6,MCART_1:7;
      @S1 = S1 by SUBSTUT1:def 35; then
      S_Bound(@S1) = x.upVar(fin_Sub,the_scope_of S1`1) by A10,SUBSTUT1:def 36;
      hence thesis by A2,A7,A8,QC_LANG2:8;
 end;

theorem Th52:
  [S,x] is quantifiable & not x in rng RestrictSub(x,All(x,S`1),xSQ) implies
    S_Bound(@CQCSub_All([S,x],xSQ)) = x
   proof
   set S1 = CQCSub_All([S,x],xSQ);
   set z = S_Bound(@S1);
   assume A1: [S,x] is quantifiable &
                                    not x in rng RestrictSub(x,All(x,S`1),xSQ);
   then S1 = Sub_All([S,x],xSQ) by Def7; then
A2: S1`1 = All([S,x]`2,([S,x]`1)`1) &
     S1`2 = xSQ by A1,Th23; then
     S1`1 = All(x,([S,x]`1)`1) by MCART_1:7; then
A3: bound_in(S1`1) = x by QC_LANG2:8;
    set fin_Sub = RestrictSub(bound_in S1`1,S1`1,S1`2);
      S1`1 = All(x,([S,x]`1)`1) by A2,MCART_1:7; then
A20:  not bound_in(S1`1) in rng fin_Sub by A1,A2,A3,MCART_1:7;
      @S1 = S1 by SUBSTUT1:def 35;
      hence thesis by A3,A20,SUBSTUT1:def 36;
 end;

theorem Th53:
  [S,x] is quantifiable implies for a holds
    Val_S(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S)  =
    NEx_Val(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S,x,xSQ)+*(x|a) &
    dom RestrictSub(x,All(x,S`1),xSQ) misses {x}
   proof
      assume A1: [S,x] is quantifiable;
      set S1 = CQCSub_All([S,x],xSQ);
      set z = S_Bound(@S1);
         let a;
 A4:     S`2 = ExpandSub(x,S`1,RestrictSub(x,All(x,S`1),xSQ)) by A1,Th41;
         set fin_Sub = RestrictSub(x,All(x,S`1),xSQ);
 A19:    now assume A20: x in rng fin_Sub;
 A5:       dom {[x,x.upVar(fin_Sub,S`1)]} = {x} by RELAT_1:23;
 A30:      {[x,x.upVar(fin_Sub,S`1)]} =
                     x .--> x.upVar(fin_Sub,S`1) by AMI_1:19; then
           reconsider F = {[x,x.upVar(fin_Sub,S`1)]} as Function;
           thus dom fin_Sub misses {x}
           proof
             now assume not dom fin_Sub misses {x};
               then consider b such that
 A7:           b in dom fin_Sub & b in {x} by XBOOLE_0:3;
               set q = All(x,S`1);
               set X = {y1 : y1 in still_not-bound_in q &
                        y1 is Element of dom xSQ & y1 <> x & y1 <> xSQ.y1};   
               fin_Sub = xSQ|X by SUBSTUT1:def 6; then
               fin_Sub = (@xSQ)|X by SUBSTUT1:def 2; then
               @fin_Sub = (@xSQ)|X by SUBSTUT1:def 2; then
               dom @fin_Sub = dom @xSQ /\ X by RELAT_1:90; then
 A8:           dom @fin_Sub c= X by XBOOLE_1:17;
               b in dom @fin_Sub by A7,SUBSTUT1:def 2; then
               b in X by A8;
               then consider y such that
A9:            y = b & y in still_not-bound_in q &
               y is Element of dom xSQ & y <> x & y <> xSQ.y;
               thus contradiction by A7,A9,TARSKI:def 1;
             end;
             hence thesis;
           end; then
           dom @fin_Sub misses dom F by A5,SUBSTUT1:def 2; then
 A11:      @fin_Sub \/ F = (@fin_Sub +* F) by FUNCT_4:32;
           v.(z|a) is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1;
           then consider f such that A13:  v.(z|a) = f &
                      dom f = bound_QC-variables & rng f c= A by FUNCT_2:def 2;
  A15:     rng @fin_Sub c= dom (v.(z|a)) by A13;
  A16:     rng F = {x.upVar(fin_Sub,S`1)} by RELAT_1:23;
           rng F = {x.upVar(fin_Sub,S`1)} by RELAT_1:23; then
  A17:     (@fin_Sub +* F)*v.(z|a) = (@fin_Sub*v.(z|a)) +* (F*v.(z|a))
                                           by A13,A15,FUNCT_7:10;
  A18:     NEx_Val(v.(z|a),S,x,xSQ) = (@fin_Sub*v.(z|a)) by Def12;
           S`2 = fin_Sub \/ F by A4,A20,SUBSTUT1:def 13; then
           @S`2 = fin_Sub \/ F by SUBSTUT1:def 2; then
  A25:     @S`2*v.(z|a) = (@fin_Sub*v.(z|a)) +* (F*v.(z|a))
                                           by A11,A17,SUBSTUT1:def 2;
           (x|a) = (F*v.(z|a))
           proof
   A27:      (x|a) = x .--> a by Def11; then
   A22:      dom (x|a) = {x} by CQC_LANG:5;
             dom (F*v.(z|a)) = dom F by A16,A13,RELAT_1:46; then
   A24:      dom (F*v.(z|a)) = {x} by RELAT_1:23;
             for b st b in dom (x|a) holds (x|a).b = (F*v.(z|a)).b
             proof
               let b such that A26: b in dom (x|a);
   A28:        b = x by A22,A26,TARSKI:def 1; then
   A29:        (x|a).b = a by A27,CQC_LANG:6;
               b in dom (F*v.(z|a)) by A24,A26,A27,CQC_LANG:5; then
   A31:        (F*v.(z|a)).b = (v.(z|a)).(F.b) by FUNCT_1:22;
               F.b = x.upVar(fin_Sub,S`1) by A28,A30,CQC_LANG:6; then
               F.b = z by A1,A20,Th51;
               hence thesis by A29,A31,Th48;
             end;
             hence thesis by A22,A24,FUNCT_1:9;
           end;
           hence Val_S(v.(z|a),S) = NEx_Val(v.(z|a),S,x,xSQ) +* (x|a)
                                                         by A18,Def3,A25;
         end;
         now assume A33: not x in rng fin_Sub;
 A34:       dom {[x,x]} = {x} by RELAT_1:23;
 A35:      {[x,x]} =  x .--> x by AMI_1:19; then
           reconsider F = {[x,x]} as Function;
           thus dom fin_Sub misses {x}
           proof
             now assume not dom fin_Sub misses {x};
               then dom fin_Sub /\ {x} <> {} by XBOOLE_0:def 7;
               then consider b such that A36: b in dom fin_Sub /\ {x}
                                                       by XBOOLE_0:def 1;
 A37:          b in dom fin_Sub & b in {x} by A36,XBOOLE_0:def 3;
               set q = All(x,S`1);
               set X = {y1 : y1 in still_not-bound_in q & 
                         y1 is Element of dom xSQ & y1 <> x & y1 <> xSQ.y1};  
               fin_Sub = xSQ|X by SUBSTUT1:def 6; then
               fin_Sub = (@xSQ)|X by SUBSTUT1:def 2; then
               @fin_Sub = (@xSQ)|X by SUBSTUT1:def 2; then
               dom @fin_Sub = dom @xSQ /\ X by RELAT_1:90; then
 A38:          dom @fin_Sub c= X by XBOOLE_1:17;
               b in dom @fin_Sub by A37,SUBSTUT1:def 2; then
               b in X by A38;
               then consider y such that A39:
                    y = b & y in still_not-bound_in q &
                    y is Element of dom xSQ & y <> x & y <> xSQ.y;
               thus contradiction by A37,A39,TARSKI:def 1;
             end;
             hence thesis;
           end; then
           dom @fin_Sub misses dom F by A34,SUBSTUT1:def 2; then
 A40:      @fin_Sub \/ F = (@fin_Sub +* F) by FUNCT_4:32;
           v.(z|a) is Element of Funcs(bound_QC-variables,A)
                                                        by VALUAT_1:def 1; then
           consider f such that A41: v.(z|a) = f & dom f = bound_QC-variables &
                                                   rng f c= A by FUNCT_2:def 2;
  A43:     rng @fin_Sub c= dom (v.(z|a)) by A41;
  A44:     rng F = {x} by RELAT_1:23;
  A46:     (@fin_Sub +* F)* v.(z|a) = (@fin_Sub*v.(z|a)) +* (F*v.(z|a))
                                                     by A41,A43,A44,FUNCT_7:10;
  A47:     NEx_Val(v.(z|a),S,x,xSQ) = (@fin_Sub* v.(z|a)) by Def12;
           S`2 = fin_Sub \/ F by A4,A33,SUBSTUT1:def 13; then
           @S`2 = fin_Sub \/ F by SUBSTUT1:def 2; then
  A48:     @S`2*v.(z|a) = (@fin_Sub*v.(z|a)) +* (F*v.(z|a))
                                                     by A40,A46,SUBSTUT1:def 2;
           (x|a) = (F*v.(z|a))
           proof
   A50:      (x|a) = x .--> a by Def11; then
   A51:      dom (x|a) = {x} by CQC_LANG:5;
             dom (F*v.(z|a)) = dom F by A41,A44,RELAT_1:46; then
   A52:      dom (F*v.(z|a)) = {x} by RELAT_1:23;
             for b st b in dom (x|a) holds (x|a).b = (F*v.(z|a)).b
             proof
               let b such that A53: b in dom (x|a);
   A54:        b = x by A51,A53,TARSKI:def 1; then
   A55:        (x|a).b = a by A50,CQC_LANG:6;
               b in dom (F*v.(z|a)) by A50,A52,A53,CQC_LANG:5; then
   A56:       (F*v.(z|a)).b = v.(z|a).(F.b) by FUNCT_1:22;
               F.b = x by A54,A35,CQC_LANG:6; then
               F.b = z by A1,A33,Th52;
               hence thesis by A55,A56,Th48;
             end;
             hence thesis by A51,A52,FUNCT_1:9;
           end;
           hence Val_S(v.(z|a),S) = NEx_Val(v.(z|a),S,x,xSQ) +* (x|a)
                                                               by A47,A48,Def3;
         end;
         hence thesis by A19;
      end;

theorem Th54:
  [S,x] is quantifiable implies
   ((for a holds J,(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).
                     Val_S(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S) |= S) iff
     for a holds J,(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).
     (NEx_Val(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S,x,xSQ)+*(x|a)) |= S)
   proof
     assume A1: [S,x] is quantifiable;
     set S1 = CQCSub_All([S,x],xSQ);
     set z = S_Bound(@S1);
     thus (for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S) implies
     for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S
     proof
       assume A2: for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S;
       let a;
       Val_S(v.(z|a),S)  = NEx_Val(v.(z|a),S,x,xSQ)+*(x|a) by A1,Th53;
       hence thesis by A2;
     end;
     thus (for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S)
     implies for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S
     proof
       assume A3: for a holds
       J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S;
       let a;
       Val_S(v.(z|a),S)  = NEx_Val(v.(z|a),S,x,xSQ)+*(x|a) by A1,Th53;
       hence thesis by A3;
     end;
   end;

theorem Th55:
  [S,x] is quantifiable implies for a holds
     NEx_Val(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S,x,xSQ) =
        NEx_Val(v,S,x,xSQ)
   proof
     assume A1: [S,x] is quantifiable;
     let a;
     set S1 = CQCSub_All([S,x],xSQ);
     set z = S_Bound(@S1);
     set NF = NEx_Val(v.(z|a),S,x,xSQ);
     set NF1 = NEx_Val(v,S,x,xSQ);
     set fin_Sub = RestrictSub(x,All(x,S`1),xSQ);
 A2: NF = @fin_Sub*v.(z|a) by Def12;
     v.(z|a) is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1; then
     consider f such that A3: v.(z|a) = f & dom f = bound_QC-variables &
                                                   rng f c= A by FUNCT_2:def 2;
     rng @fin_Sub c= dom (v.(z|a)) by A3; then
A6:  dom NF = dom @fin_Sub by A2,RELAT_1:46;
A7:  NF1 = @fin_Sub*v by Def12;
     v is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1; then
     consider f such that A8: v = f & dom f = bound_QC-variables &
                                                   rng f c= A by FUNCT_2:def 2;
     rng @fin_Sub c= dom v by A8; then
A11:  dom NF1 = dom @fin_Sub by A7,RELAT_1:46;
      for b st b in dom NF holds NF.b = NF1.b
     proof
       let b such that A13: b in dom NF;
A14:   @fin_Sub.b in rng @fin_Sub by A6,A13,FUNCT_1:12; then
       reconsider x = @fin_Sub.b as bound_QC-variable; 
       not z in rng fin_Sub by A1,Th40; then
       z <> x by A14,SUBSTUT1:def 2; then
A15:   v.(z|a).x = v.x by Th47;
       NF.b = (v.(z|a)).x by A2,A13,FUNCT_1:22;
       hence thesis by A6,A7,A11,A13,A15,FUNCT_1:22;
     end;
     hence thesis by A6,A11,FUNCT_1:9;
   end;

theorem Th56:
  [S,x] is quantifiable implies
   ((for a holds J,(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).
    (NEx_Val(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a),S,x,xSQ)+*(x|a)) |= S)
    iff (for a holds J,(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).
                            (NEx_Val(v,S,x,xSQ)+*(x|a)) |= S))
   proof
     assume A1: [S,x] is quantifiable;
     set S1 = CQCSub_All([S,x],xSQ);
     set z = S_Bound(@S1);
     thus (for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S)
     implies (for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
     proof
       assume
       A2: for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S;
       let a;
       NEx_Val(v.(z|a),S,x,xSQ) = NEx_Val(v,S,x,xSQ) by A1,Th55;
       hence thesis by A2;
     end;
     thus (for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) implies
          (for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S)
     proof
       assume A3: for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S;
       let a;
       NEx_Val(v.(z|a),S,x,xSQ) = NEx_Val(v,S,x,xSQ) by A1,Th55;
       hence thesis by A3;
     end;
   end;
   
begin :: The Coincidence Lemma   

theorem Th57:
  rng l1 c= bound_QC-variables implies still_not-bound_in l1 = rng l1
   proof
    assume A1: rng l1 c= bound_QC-variables;
 A2: variables_in(l1,bound_QC-variables) =
     { l1.k : 1 <= k & k <= len l1 & l1.k in bound_QC-variables}
                                                             by QC_LANG3:def 2;
    variables_in(l1,bound_QC-variables) = rng l1
     proof
       thus variables_in(l1,bound_QC-variables) c= rng l1
       proof
         let b;
         assume b in variables_in(l1,bound_QC-variables); then
         consider k such that A4: b = l1.k & 1 <= k & k <= len l1 &
                           l1.k in bound_QC-variables by A2;
         k in Seg len l1 by A4,FINSEQ_1:3; then
         k in dom l1 by FINSEQ_1:def 3;
         hence thesis by A4,FUNCT_1:12; 
       end;
       thus rng l1 c= variables_in(l1,bound_QC-variables)
       proof
         let b;
         assume A5: b in rng l1; then
         consider k such that A6: k in dom l1 & l1.k = b by FINSEQ_2:11;
         k in Seg len l1 by A6,FINSEQ_1:def 3; then
         1 <= k & k <= len l1 by FINSEQ_1:3;
         hence thesis by A1,A2,A5,A6;
       end;
     end;
     hence thesis by QC_LANG3:6;
   end;
     
theorem Th58:
  dom v = bound_QC-variables & dom (x|a) = {x}
   proof
     v is Element of Funcs(bound_QC-variables,A) by VALUAT_1:def 1; then
     consider f such that A5: v = f & dom f = bound_QC-variables &
                                                   rng f c= A by FUNCT_2:def 2;
     thus dom v = bound_QC-variables by A5;
     (x|a) = x .--> a by Def11;
     hence thesis by CQC_LANG:5;
   end;

theorem Th59:
  v*'ll = ll*(v|still_not-bound_in ll)
  proof
    rng ll c= bound_QC-variables by CQC_LANG:def 5; then
A1: rng ll = still_not-bound_in ll by Th57;
    dom (v|still_not-bound_in ll) = dom v /\ still_not-bound_in ll
                                                           by RELAT_1:90; then
    dom (v|still_not-bound_in ll) = bound_QC-variables /\
                               still_not-bound_in ll by Th58; then
    rng ll = dom (v|still_not-bound_in ll) by A1,XBOOLE_1:28; then
    dom (ll*(v|still_not-bound_in ll)) = dom ll by RELAT_1:46; then
A4: dom (ll*(v|still_not-bound_in ll)) = Seg len ll by FINSEQ_1:def 3; then
    reconsider f = ll*(v|still_not-bound_in ll) as FinSequence
                                                            by FINSEQ_1:def 2;
A5: len f = len ll by A4,FINSEQ_1:def 3; then
A6: len f = k by SUBSTUT1:34;
A7: len (v*'ll) = k by VALUAT_1:def 8;
    for j st j in Seg k holds f.j = (v*'ll).j
    proof
      let j such that A8: j in Seg k;
A9:   j in dom ll by A5,A6,A8,FINSEQ_1:def 3; then
A10:  ll.j in still_not-bound_in ll by A1,FUNCT_1:12;
A11:  ll.j in rng ll by A9,FUNCT_1:12;
      rng ll c= bound_QC-variables by CQC_LANG:def 5; then
      ll.j in bound_QC-variables by A11; then
      ll.j in dom v by Th58; then
      ll.j in dom v /\ still_not-bound_in ll by A10,XBOOLE_0:def 3; then
A12:  (v|still_not-bound_in ll).(ll.j) = v.(ll.j) by FUNCT_1:71;
      1 <= j & j <= k by A8,FINSEQ_1:3; then
      (v|still_not-bound_in ll).(ll.j) = (v*'ll).j by A12,VALUAT_1:def 8;
      hence thesis by A9,FUNCT_1:23;
    end;
    hence thesis by A6,A7,FINSEQ_2:10;
  end;

theorem Th60:
  for v,w holds
    (v|still_not-bound_in (P!ll) = w|still_not-bound_in (P!ll)
       implies (J,v |= P!ll iff J,w |= P!ll))
   proof
     let v,w;
     assume A1: v|still_not-bound_in (P!ll) = w|still_not-bound_in (P!ll);
A2:  still_not-bound_in (P!ll) = still_not-bound_in ll by QC_LANG3:9;
A4:  Valid(P!ll,J).v = TRUE iff v*'ll in J.P by VALUAT_1:16;
A7:  ll*(w|still_not-bound_in ll) in J.P iff w*'ll in J.P by Th59;
     w*'ll in J.P iff Valid(P!ll,J).w = TRUE by VALUAT_1:16;
     hence thesis by A1,A2,A4,A7,Th59,VALUAT_1:def 12;
   end;

theorem Th61:
  (for v,w holds v|still_not-bound_in p = w|still_not-bound_in p implies
                 (J,v |= p iff J,w |= p)) implies
     (for v,w holds
        v|still_not-bound_in 'not' p  = w|still_not-bound_in 'not' p implies
           (J,v |= 'not' p iff J,w |= 'not' p))
   proof
     assume A1: (for v,w holds v|still_not-bound_in p = w|still_not-bound_in p
                       implies (J,v |= p iff J,w |= p));
     let v,w;
     assume A2: v|still_not-bound_in 'not' p = w|still_not-bound_in 'not' p;
A3:  still_not-bound_in 'not' p = still_not-bound_in p by QC_LANG3:11;
     not J,v |= p iff not J,w |= p by A1,A2,A3;
     hence thesis by VALUAT_1:28;
   end;

theorem Th63:
  (for v,w holds v|still_not-bound_in p = w|still_not-bound_in p
               implies (J,v |= p iff J,w |= p)) &
         (for v,w holds v|still_not-bound_in q = w|still_not-bound_in q
               implies (J,v |= q iff J,w |= q)) implies
         (for v,w holds v|still_not-bound_in p '&' q =
                w|still_not-bound_in p '&' q
                          implies (J,v |= p '&' q iff J,w |= p '&' q))
   proof
     assume A1: (for v,w holds
                     v|still_not-bound_in p = w|still_not-bound_in p
                     implies (J,v |= p iff J,w |= p)) &
         (for v,w holds v|still_not-bound_in q = w|still_not-bound_in q
               implies (J,v |= q iff J,w |= q));
     let v,w;
     assume A2: v|still_not-bound_in p '&' q = w|still_not-bound_in p '&' q;
     set X = (still_not-bound_in p) \/ (still_not-bound_in q);
A3:  still_not-bound_in p '&' q = X by QC_LANG3:14;
A4:  (still_not-bound_in p) c= X by XBOOLE_1:7;
     (still_not-bound_in q) c= X by XBOOLE_1:7; then
A5:  v|still_not-bound_in p = w|still_not-bound_in p &
     v|still_not-bound_in q = w|still_not-bound_in q by A2,A3,A4,AMI_5:5;
     J,v |= p & J,v |= q iff J,w |= p & J,w |= q by A1,A5;
     hence thesis by VALUAT_1:29;
   end;

theorem Th64:
  for X being set st X c= bound_QC-variables holds
     dom (v|X) = dom (v.(x|a)|X) & dom (v|X) = X
   proof
     let X be set;
     assume A1: X c= bound_QC-variables;
     dom (v|X) = dom v /\ X by RELAT_1:90; then
A2:  dom (v|X) = bound_QC-variables /\ X by Th58;  
     dom (v.(x|a)|X) = dom (v.(x|a)) /\ X by RELAT_1:90;
     hence thesis by A1,A2,Th58,XBOOLE_1:28;
   end;

theorem
  v|still_not-bound_in p = w|still_not-bound_in p implies
    v.(x|a)|still_not-bound_in p = w.(x|a)|still_not-bound_in p
 proof
   assume A1: v|still_not-bound_in p = w|still_not-bound_in p;
   dom (v|still_not-bound_in p) = dom (v.(x|a)|still_not-bound_in p) by Th64;
then A4: dom (v.(x|a)|still_not-bound_in p) =
                                 dom (w.(x|a)|still_not-bound_in p) by A1,Th64;
   for b st b in dom (v.(x|a)|still_not-bound_in p) holds
         v.(x|a)|still_not-bound_in p.b = w.(x|a)|still_not-bound_in p.b
   proof
     let b such that A5: b in dom (v.(x|a)|still_not-bound_in p);
A6:  (v.(x|a)|still_not-bound_in p).b = v.(x|a).b by A5,FUNCT_1:70;
A7:  (w.(x|a)|still_not-bound_in p).b = w.(x|a).b by A4,A5,FUNCT_1:70;
     b in dom (v|still_not-bound_in p) by A5,Th64; then
A8:  (v|still_not-bound_in p).b = v.b by FUNCT_1:70;
     b in dom (w|still_not-bound_in p) by A1,A5,Th64; then
A9:  v.b = w.b by A8,A1,FUNCT_1:70;
A10:  now assume A11: b <> x; then
        v.(x|a).b = v.b by Th47;
        hence thesis by A6,A7,A9,A11,Th47; 
      end;
      now assume A13: b = x; then
        v.(x|a).b = a by Th48;
        hence thesis by A6,A7,A13,Th48;
      end;
      hence thesis by A10;
   end;
   hence thesis by A4,FUNCT_1:9;
 end;

theorem
  still_not-bound_in p c= still_not-bound_in (All(x,p)) \/ {x}
   proof
     set X = (still_not-bound_in p) \ {x};
A1:  still_not-bound_in All(x,p) = X by QC_LANG3:16;
     {x} \/ X = {x} \/  (still_not-bound_in p) by XBOOLE_1:39;
     hence thesis by A1,XBOOLE_1:7;
   end;

theorem Th67:
  v|(still_not-bound_in p \ {x}) = w|(still_not-bound_in p \ {x}) implies
    v.(x|a)|still_not-bound_in p = w.(x|a)|still_not-bound_in p
   proof
     assume
A1:  v|(still_not-bound_in p \ {x}) = w|(still_not-bound_in p \ {x});
     dom (w.(x|a)|still_not-bound_in p) = still_not-bound_in p by Th64; then
A3:  dom (v.(x|a)|still_not-bound_in p) = dom (w.(x|a)|still_not-bound_in p)
                                                                       by Th64;
   for b st b in dom (v.(x|a)|still_not-bound_in p) holds
         v.(x|a)|still_not-bound_in p.b = w.(x|a)|still_not-bound_in p.b
   proof
     let b such that A4: b in dom (v.(x|a)|still_not-bound_in p);
A5:  (v.(x|a)|still_not-bound_in p).b = v.(x|a).b by A4,FUNCT_1:70;
A6:  (w.(x|a)|still_not-bound_in p).b = w.(x|a).b by A3,A4,FUNCT_1:70;
A9:  now assume A10: b <> x; then
A11:    not b in {x} by TARSKI:def 1;
        b in still_not-bound_in p by A4,Th64; then
A12:    b in still_not-bound_in p \ {x} by A11,XBOOLE_0:def 4; then
A14:    b in dom (v|(still_not-bound_in p \ {x})) by Th64;
        b in dom (w|(still_not-bound_in p \ {x})) by A12,Th64; then
A15:    w|(still_not-bound_in p \ {x}).b = w.b by FUNCT_1:70;
        v.(x|a).b = v.b & w.(x|a).b = w.b by A10,Th47;
        hence thesis by A1,A5,A6,A14,A15,FUNCT_1:70;
     end;
     now assume A16: b = x;
       v.(x|a)|(still_not-bound_in p).b = v.(x|a).b by A4,FUNCT_1:70; then
A17:   v.(x|a)|(still_not-bound_in p).b = a by A16,Th48;
       w.(x|a)|(still_not-bound_in p).b = w.(x|a).b by A3,A4,FUNCT_1:70;
       hence thesis by A16,A17,Th48;
     end;
     hence thesis by A9;
   end;
   hence thesis by A3,FUNCT_1:9;
 end;

theorem Th68:
  (for v,w holds v|still_not-bound_in p = w|still_not-bound_in p
                 implies (J,v |= p iff J,w |= p)) implies
         (for v,w holds v|still_not-bound_in All(x,p) =
                                        w|still_not-bound_in All(x,p)
                 implies (J,v |= All(x,p) iff J,w |= All(x,p)))
   proof
     assume A1: for v,w holds
                  (v|still_not-bound_in p = w|still_not-bound_in p
                                     implies (J,v |= p iff J,w |= p));
     let v,w;
     assume A2: v|still_not-bound_in All(x,p) = w|still_not-bound_in All(x,p);
     set X = (still_not-bound_in p) \ {x};
     v|still_not-bound_in All(x,p) = v|X by QC_LANG3:16; then
A5:  v|X = w|X by A2,QC_LANG3:16;
A7:  (for a holds J,v.(x|a) |= p) iff (for a holds J,w.(x|a) |= p)
     proof
       thus (for a holds J,v.(x|a) |= p) implies (for a holds J,w.(x|a) |= p)
       proof
         assume A8: for a holds J,v.(x|a) |= p;
         let a;
         v.(x|a)|still_not-bound_in p =
                      w.(x|a)|still_not-bound_in p by A5,Th67; then
         J,v.(x|a) |= p iff J,w.(x|a) |= p by A1;
         hence thesis by A8;
       end;
       thus (for a holds J,w.(x|a) |= p) implies (for a holds J,v.(x|a) |= p)
       proof
         assume A6: for a holds J,w.(x|a) |= p;
         let a;
         v.(x|a)|still_not-bound_in p =
                      w.(x|a)|still_not-bound_in p by A5,Th67; then
         J,v.(x|a) |= p iff J,w.(x|a) |= p by A1;
         hence thesis by A6;
       end;
     end;
     thus thesis by A7,Th49;
   end;

theorem
  (for v,w holds v|still_not-bound_in VERUM = w|still_not-bound_in VERUM
                    implies (J,v |= VERUM iff J,w |= VERUM)) by VALUAT_1:44;

:: Coincidence Lemma (Ebb et al, Chapter III, 5.1)

theorem Th70:
  for p holds (for v,w holds
     v|still_not-bound_in p = w|still_not-bound_in p implies
       (J,v |= p iff J,w |= p))
   proof
     defpred P[Element of CQC-WFF] means for v,w holds
        v|still_not-bound_in $1 = w|still_not-bound_in $1
                                     implies (J,v |= $1 iff J,w |= $1);
A1:  for p,q,x,k for l being CQC-variable_list of k
     for P being QC-pred_symbol of k holds
      P[VERUM] & P[P!l] & (P[p] implies P['not' p]) &
      (P[p] & P[q] implies P[p '&' q]) &
      (P[p] implies P[All(x,p)]) by Th60,Th61,Th63,Th68,VALUAT_1:44;
     thus for p holds P[p] from CQC_LANG:sch 1(A1);
   end;

theorem Th72:
  [S,x] is quantifiable implies
     (v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).
        (NEx_Val(v,S,x,xSQ)+*(x|a))|still_not-bound_in S`1 =
           (v.(NEx_Val(v,S,x,xSQ)+*(x|a)))|still_not-bound_in S`1
   proof
     assume A1: [S,x] is quantifiable;
     set S1 = CQCSub_All([S,x],xSQ);
     set z = S_Bound(@S1);
     set NF = NEx_Val(v,S,x,xSQ);
     set fin_Sub = RestrictSub(x,All(x,S`1),xSQ);
     set V1 = (v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a));
     set V2 = v.(NEx_Val(v,S,x,xSQ)+*(x|a));
     set X = still_not-bound_in S`1;
 A2: V1 = (v.(z|a)) +* (NEx_Val(v,S,x,xSQ)+*(x|a)) by Def2; then
 A3: dom V1 = dom (v.(z|a)) \/ dom (NEx_Val(v,S,x,xSQ)+*(x|a))
                                                        by FUNCT_4:def 1;
     dom (v.(z|a)) = bound_QC-variables by Th58; then
A4:  dom (v.(z|a)) = dom v by Th58;
A5:  V2 = v +* (NEx_Val(v,S,x,xSQ)+*(x|a)) by Def2; then
A17: dom V1 = dom V2 by A3,A4,FUNCT_4:def 1;
A7:  now assume not x in rng fin_Sub;
       then A8: z = x by A1,Th52;
       for b st b in dom V1 holds V1.b = V2.b
       proof
         let b such that A10: b in dom V1;
  A11:   now assume A12: b <> z;
  A13:     now assume A14: not b in dom NEx_Val(v,S,x,xSQ);
             not b in {x} by A12,A8,TARSKI:def 1; then
             not b in dom (x|a) by Th58; then
             not b in dom NEx_Val(v,S,x,xSQ) \/ dom (x|a)
                                                    by A14,XBOOLE_0:def 2; then
  A15:       not b in dom (NEx_Val(v,S,x,xSQ)+*(x|a)) by FUNCT_4:def 1; then
  A16:       V1.b = (v.(z|a)).b by A2,FUNCT_4:12;
             reconsider x = b as bound_QC-variable by A10;
             V1.b = v.x by A12,A16,Th47;
             hence V1.b = V2.b by A5,A15,FUNCT_4:12;             
           end;
           now assume A19: b in dom NEx_Val(v,S,x,xSQ);
             dom (NEx_Val(v,S,x,xSQ)+*(x|a)) =
                 dom NEx_Val(v,S,x,xSQ) \/ dom (x|a) by FUNCT_4:def 1; then
      A17:   dom NEx_Val(v,S,x,xSQ) c= dom (NEx_Val(v,S,x,xSQ)+*(x|a))
                                                                 by XBOOLE_1:7;
             V1.b = (NEx_Val(v,S,x,xSQ)+*(x|a)).b by A2,A17,A19,FUNCT_4:14;
             hence V1.b = V2.b by A5,A17,A19,FUNCT_4:14;
           end;
           hence V1.b = V2.b by A13;
         end;
         now assume b = z; then
           b in {x} by A8,TARSKI:def 1; then
     A23:  b in dom (x|a) by Th58;
           dom (NEx_Val(v,S,x,xSQ)+*(x|a)) = 
                       dom NEx_Val(v,S,x,xSQ) \/ dom (x|a) by FUNCT_4:def 1;
           then A24: dom (x|a) c= dom (NEx_Val(v,S,x,xSQ)+*(x|a))
                                                                 by XBOOLE_1:7;
           V1.b = (NEx_Val(v,S,x,xSQ)+*(x|a)).b by A2,A23,A24,FUNCT_4:14;  
           hence V1.b = V2.b by A5,A23,A24,FUNCT_4:14;
         end;
         hence thesis by A11; 
       end;
       hence V1|X = V2|X by A17,FUNCT_1:9;
     end;
     now assume A28: x in rng fin_Sub;
A29:   dom (V1|X) = (dom (v.(z|a)) \/ dom (NEx_Val(v,S,x,xSQ)+*(x|a))) /\ X
                                                              by A3,RELAT_1:90;
       dom (V2|X) = dom (V1) /\ X by A17,RELAT_1:90; then
A32:   dom (V2|X) = dom (V1|X) by RELAT_1:90;
       for b st b in dom (V1|X) holds V1|X.b = V2|X.b
       proof
         let b such that A33: b in dom (V1|X);
A34:     b in (dom (v.(z|a)) \/ dom (NEx_Val(v,S,x,xSQ)+*(x|a))) & b in X
                                                     by A29,A33,XBOOLE_0:def 3;
         X c= Bound_Vars(S`1) by Th43; then
A35:     b <> z by A1,A28,A34,Th38;
A36:     V1|X = (v.(z|a))|X +* (NEx_Val(v,S,x,xSQ)+*(x|a))|X by A2,AMI_5:6;
A37:     V2|X = v|X +* (NEx_Val(v,S,x,xSQ)+*(x|a))|X by A5,AMI_5:6;
A38:     dom (V1|X) = dom (v.(z|a)|X) \/ dom ((NEx_Val(v,S,x,xSQ)+*(x|a))|X)
                                                          by A36,FUNCT_4:def 1;
A39:     now assume A40: not b in dom ((NEx_Val(v,S,x,xSQ)+*(x|a))|X); then
A41:       V1|X.b = (v.(z|a))|X.b by A36,FUNCT_4:12;
A42:       b in dom (v.(z|a)|X) by A33,A38,A40,XBOOLE_0:def 2; then
           V1|X.b = v.(z|a).b by A41,FUNCT_1:70; then
A43:       V1|X.b = v.b by A35,Th47;
A44:       V2|X.b = v|X.b by A37,A40,FUNCT_4:12;
           b in dom (v.(z|a)) /\ X by A42,RELAT_1:90; then
           b in bound_QC-variables & b in X by XBOOLE_0:def 3; then
           b in dom v & b in X by Th58; then
           b in dom v /\ X by XBOOLE_0:def 3;
           hence V1|X.b = V2|X.b by A43,A44,FUNCT_1:71;
         end;
         now assume A45: b in dom ((NEx_Val(v,S,x,xSQ)+*(x|a))|X); then
           V1|X.b = (NEx_Val(v,S,x,xSQ)+*(x|a))|X.b by A36,FUNCT_4:14;
           hence V1|X.b = V2|X.b by A37,A45,FUNCT_4:14;
         end;
         hence thesis by A39;
       end;
       hence V1|X = V2|X by A32,FUNCT_1:9;
     end;
     hence thesis by A7;
   end;

theorem Th73:
  [S,x] is quantifiable implies
   ((for a holds
  J,(v.((S_Bound(@CQCSub_All([S,x],xSQ)))|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
   iff (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S))
   proof
     assume A1: [S,x] is quantifiable;
     set S1 = CQCSub_All([S,x],xSQ);
     set z = S_Bound(@S1);
     set NF = NEx_Val(v,S,x,xSQ);
     thus (for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
           implies (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
     proof
       assume A2: for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S;
       let a;
       set V1 = (v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a));
       set V2 = v.(NEx_Val(v,S,x,xSQ)+*(x|a));
       set X = still_not-bound_in S`1;
       V1|X = V2|X by A1,Th72; then
A3:    J,V1 |= S`1 iff J,V2 |= S`1 by Th70;
       J,V1 |= S by A2;  
       hence thesis by A3,Def4;
     end;
     thus (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) implies
            (for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
     proof
       assume A4: for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S;
       let a;
       set V1 = (v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a));
       set V2 = v.(NEx_Val(v,S,x,xSQ)+*(x|a));
       set X = still_not-bound_in S`1;
       V1|X = V2|X by A1,Th72; then
A5:    J,V1 |= S`1 iff J,V2 |= S`1 by Th70;
       J,V2 |= S by A4;  
       hence thesis by A5,Def4;
     end;
   end;
   
theorem Th75:
  dom NEx_Val(v,S,x,xSQ) = dom RestrictSub(x,All(x,S`1),xSQ)
   proof
     rng (@RestrictSub(x,All(x,S`1),xSQ)) c= bound_QC-variables; then
A2:  rng (@RestrictSub(x,All(x,S`1),xSQ)) c= dom v by Th58;
     NEx_Val(v,S,x,xSQ) = (@RestrictSub(x,All(x,S`1),xSQ))*v by Def12;
     then dom NEx_Val(v,S,x,xSQ) =
              dom (@RestrictSub(x,All(x,S`1),xSQ)) by A2,RELAT_1:46;
     hence thesis by SUBSTUT1:def 2;
   end;

theorem Th76:
  [S,x] is quantifiable implies
    v.(NEx_Val(v,S,x,xSQ)+*(x|a)) = (v.NEx_Val(v,S,x,xSQ)).(x|a)
   proof
     assume [S,x] is quantifiable;
A2:  v.(NEx_Val(v,S,x,xSQ)+*(x|a)) = v +* (NEx_Val(v,S,x,xSQ)+*(x|a)) by Def2;
     (v.NEx_Val(v,S,x,xSQ)).(x|a) = (v.NEx_Val(v,S,x,xSQ))+*(x|a) by Def2; then
     (v.NEx_Val(v,S,x,xSQ)).(x|a) = (v+*NEx_Val(v,S,x,xSQ))+*(x|a) by Def2;
     hence thesis by A2,FUNCT_4:15;
   end;

theorem Th77:
  [S,x] is quantifiable implies
     ((for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) iff
        (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S))
   proof
     assume A1: [S,x] is quantifiable;
     thus (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) implies
               (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S)
     proof
       assume A2: for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S;
       let a;
       v.(NEx_Val(v,S,x,xSQ)+*(x|a)) = (v.NEx_Val(v,S,x,xSQ)).(x|a) by A1,Th76;
       hence thesis by A2;
     end;
     thus (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S) implies
              (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S)
     proof
       assume A3: for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S;
       let a;
       v.(NEx_Val(v,S,x,xSQ)+*(x|a)) = (v.NEx_Val(v,S,x,xSQ)).(x|a) by A1,Th76;
       hence thesis by A3;
     end;
   end;

theorem Th78:
  (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S) iff
     for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1
   proof
     thus (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S) implies
           for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1
     proof
       assume A1: for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S;
       let a;
       J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S iff
                                 J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1 by Def4;
       hence thesis by A1;
     end;
     thus (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1) implies
           for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S
     proof
       assume A2: for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1;
       let a;
       J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S iff
       J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1 by Def4;
       hence thesis by A2;
     end;
   end;

theorem
  for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in VERUM) &
            (for y st y in dom vS2 holds vS2.y = v.y) &
              dom vS misses dom vS2 holds
               J,v.vS |= VERUM iff J,v.(vS+*vS1+*vS2) |= VERUM by VALUAT_1:44;

theorem Th80:
  for v,vS,vS1,vS2 st
    (for y st y in dom vS1 holds not y in still_not-bound_in ll) &
    (for y st y in dom vS2 holds vS2.y = v.y) &
    dom vS misses dom vS2 holds (v.vS)*'ll = (v.(vS+*vS1+*vS2))*'ll
   proof
     let v,vS,vS1,vS2 such that
A1:          (for y st y in dom vS1 holds not y in still_not-bound_in ll) &
             (for y st y in dom vS2 holds vS2.y = v.y) & dom vS misses dom vS2;
     set ll1 = (v.vS)*'ll;
     set ll2 = (v.(vS+*vS1+*vS2))*'ll;
A2:  len ll1 = k & len ll2  = k by VALUAT_1:def 8;
     for i st i in Seg k holds ll1.i = ll2.i
     proof
       let i such that A3: i in Seg k;
A4:    i in dom ll2 by A2,A3,FINSEQ_1:def 3;
A5:    dom ll2 c= dom ll by RELAT_1:44;
A9:    now assume A10: not ll.i in dom (vS+*vS1+*vS2); then
         not ll.i in dom (vS +* vS1) by FUNCT_4:13; then
         not ll.i in dom vS by FUNCT_4:13; then
         (v+*vS).(ll.i) = v.(ll.i) by FUNCT_4:12; then
A11:     (v.vS).(ll.i) = v.(ll.i) by Def2;
         i in dom ll1 by A2,A3,FINSEQ_1:def 3; then
A12:     ll1.i = v.(ll.i) by A11,FUNCT_1:22;
         (v+*(vS+*vS1+*vS2)).(ll.i) = v.(ll.i) by A10,FUNCT_4:12; then
         v.(vS+*vS1+*vS2).(ll.i) = v.(ll.i) by Def2;
         hence thesis by A4,A12,FUNCT_1:22;
       end;
       now assume A13: ll.i in dom (vS+*vS1+*vS2);
         reconsider x = ll.i as bound_QC-variable by A4,A5,Th3;
A14:     now assume A15: not x in dom vS2; then
A16:        x in dom (vS+*vS1) by A13,FUNCT_4:13;
A17:        (vS+*vS1+*vS2).x = (vS+*vS1).x by A15,FUNCT_4:12;
A18:        now assume A19: not x in dom vS1; then
              (vS+*vS1+*vS2).x = vS.x by A17,FUNCT_4:12; then
A20:          (v+*(vS+*vS1+*vS2)).x = vS.x by A13,FUNCT_4:14;
              x in dom vS by A16,A19,FUNCT_4:13; then
              (v+*(vS+*vS1+*vS2)).x = (v+*vS).x by A20,FUNCT_4:14; then
              v.(vS+*vS1+*vS2).x = (v+*vS).x by Def2; then
              v.(vS+*vS1+*vS2).x = (v.vS).x by Def2; then
A22:          ll2.i = (v.vS).x by A4,FUNCT_1:22;
              i in dom ll1 by A2,A3,FINSEQ_1:def 3; 
              hence thesis by A22,FUNCT_1:22;
            end;
            now assume x in dom vS1; then
A24:          not x in still_not-bound_in ll by A1;
              len ll = k by SUBSTUT1:34; then
              1 <= i & i <= len ll & x in bound_QC-variables
                                                      by A3,FINSEQ_1:3; then
              consider j such that A25: j = i & 1 <= j & j <= len ll &
                                     ll.j = ll.i &  ll.j in bound_QC-variables;
              x in { ll.n : 1 <= n & n <= len ll & ll.n in bound_QC-variables}
                                                                  by A25; then
              x in variables_in(ll,bound_QC-variables) by QC_LANG3:def 2;
              hence contradiction by A24,QC_LANG3:6;
            end;
            hence thesis by A18;
         end;
         now assume A27: x in dom vS2; then
           (vS+*vS1+*vS2).x = vS2.x by FUNCT_4:14; then
           (vS+*vS1+*vS2).x = v.x by A1,A27; then
           (v+*(vS+*vS1+*vS2)).x = v.x by A13,FUNCT_4:14; then
           v.(vS+*vS1+*vS2).x = v.x by Def2; then
A28:       ll2.i = v.x by A4,FUNCT_1:22;
           not x in dom vS by A1,A27,XBOOLE_0:3; then
           (v+*vS).x = v.x by FUNCT_4:12; then
A29:       v.vS.x = v.x by Def2;
           i in dom ll1 by A2,A3,FINSEQ_1:def 3;
           hence thesis by A28,A29,FUNCT_1:22;
         end;
         hence thesis by A14;
       end;
       hence thesis by A9;
     end;
     hence thesis by A2,FINSEQ_2:10;
   end;
                                                         
theorem Th81:
  for v,vS,vS1,vS2 st
    (for y st y in dom vS1 holds not y in still_not-bound_in (P!ll)) &
    (for y st y in dom vS2 holds vS2.y = v.y) &
        dom vS misses dom vS2 holds
          J,v.vS |= P!ll iff J,v.(vS+*vS1+*vS2) |= P!ll
   proof
     let v,vS,vS1,vS2 such that
A1:       (for y st y in dom vS1 holds not y in still_not-bound_in (P!ll)) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2;
A2:  for y st y in dom vS1 holds not y in still_not-bound_in ll
     proof
       let y;
       assume y in dom vS1; then
       not y in still_not-bound_in (P!ll) by A1;
       hence thesis by QC_LANG3:9;
     end;
A4:  Valid(P!ll,J).(v.vS) = TRUE iff (v.vS)*'ll in J.P by VALUAT_1:16;
A6:  (v.(vS+*vS1+*vS2))*'ll in J.P iff
                     Valid(P!ll,J).(v.(vS+*vS1+*vS2)) = TRUE by VALUAT_1:16;
     thus thesis by A1,A2,A4,A6,Th80,VALUAT_1:def 12;
   end;

theorem Th82:
  (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p) implies
         (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in 'not' p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= 'not' p iff J,v.(vS+*vS1+*vS2) |= 'not' p)
   proof
     assume A1: (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p);
     let v,vS,vS1,vS2 such that
A2:       (for y st y in dom vS1 holds not y in still_not-bound_in 'not' p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2;
A3:  for y st y in dom vS1 holds not y in still_not-bound_in p
     proof
       let y;
       assume y in dom vS1; then
       not y in still_not-bound_in 'not' p by A2;
       hence thesis by QC_LANG3:11;
     end;
     not J,v.vS |= p iff not J,v.(vS+*vS1+*vS2) |= p by A1,A2,A3;
     hence thesis by VALUAT_1:28;
   end;

theorem Th83:
  ((for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p) &
         (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in q) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= q iff J,v.(vS+*vS1+*vS2) |= q)) implies
          (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p '&' q) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p '&' q iff J,v.(vS+*vS1+*vS2) |= p '&' q)
   proof
     assume A1: ((for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p) &
         (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in q) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= q iff J,v.(vS+*vS1+*vS2) |= q));
     let v,vS,vS1,vS2 such that
A2:       (for y st y in dom vS1 holds not y in still_not-bound_in p '&' q) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2; 
A3:  for y st y in dom vS1 holds (not y in still_not-bound_in p) &
                                             (not y in still_not-bound_in q)
     proof
       let y;
       assume y in dom vS1; then
       not y in still_not-bound_in (p '&' q) by A2; then
       not y in (still_not-bound_in p) \/ (still_not-bound_in q)
                                                             by QC_LANG3:14;
       hence thesis by XBOOLE_0:def 2;
     end;
     (J,v.vS |= p & J,v.vS |= q) iff (J,v.(vS+*vS1+*vS2) |= p &
         J,v.(vS+*vS1+*vS2) |= q)
     proof
       thus (J,v.vS |= p & J,v.vS |= q) implies (J,v.(vS+*vS1+*vS2) |= p &
                                                      J,v.(vS+*vS1+*vS2) |= q)
       proof
         assume A6: (J,v.vS |= p & J,v.vS |= q);
A7:      for y st y in dom vS1 holds (not y in still_not-bound_in p) by A3;
         for y st y in dom vS1 holds (not y in still_not-bound_in q) by A3;
         hence thesis by A1,A2,A6,A7;
       end;
       thus (J,v.(vS+*vS1+*vS2) |= p & J,v.(vS+*vS1+*vS2) |= q) implies
                                               (J,v.vS |= p & J,v.vS |= q)
       proof
         assume A8: J,v.(vS+*vS1+*vS2) |= p & J,v.(vS+*vS1+*vS2) |= q;
A9:      for y st y in dom vS1 holds (not y in still_not-bound_in p) by A3;
         for y st y in dom vS1 holds (not y in still_not-bound_in q) by A3;
         hence thesis by A1,A2,A8,A9;
       end;
     end;
     hence thesis by VALUAT_1:29;
   end;

theorem Th84:
  (for y st y in dom vS1 holds not y in still_not-bound_in All(x,p))
     implies (for y st y in (dom vS1) \ {x} holds
        not y in still_not-bound_in p)
   proof
     assume
 A1: for y st y in dom vS1 holds not y in still_not-bound_in All(x,p);
     let y such that A2: y in (dom vS1) \ {x};
     (dom vS1) \ {x} c= dom vS1 by XBOOLE_1:36; then
     not y in still_not-bound_in All(x,p) by A1,A2; then
A3:  not y in (still_not-bound_in p) \ {x} by QC_LANG3:16;
     not y in {x} by A2,XBOOLE_0:def 4; then
A4:  not y in {x} \/ ((still_not-bound_in p) \ {x}) by A3,XBOOLE_0:def 2;
     {x} \/ ((still_not-bound_in p) \ {x}) = {x} \/ still_not-bound_in p
                                                                by XBOOLE_1:39;
     hence thesis by A4,XBOOLE_0:def 2; 
   end;

theorem Th85:
  for vS1 being Function holds
  ((for y st y in dom vS1 holds vS1.y = v.y) & dom vS misses dom vS1)
              implies
  (for y st y in (dom vS1) \ {x} holds vS1|((dom vS1) \ {x}).y = (v.vS).y)
   proof
     let vS1 be Function;
     assume A1: (for y st y in dom vS1 holds vS1.y = v.y) &
                                                  dom vS misses dom vS1;
     let y such that A2: y in (dom vS1) \ {x};
A3:  y in dom vS1 & not y in {x} by A2,XBOOLE_0:def 4; then
     y in dom vS1 /\ ((dom vS1) \ {x}) by A2,XBOOLE_0:def 3; then
     vS1|((dom vS1) \ {x}).y = vS1.y by FUNCT_1:71; then
A4:  vS1|((dom vS1) \ {x}).y = v.y by A1,A3;
A5:  (v.vS).y = (v +* vS).y by Def2;
     not y in dom vS by A1,A3,XBOOLE_0:3;
     hence thesis by A4,A5,FUNCT_4:12;
   end;

theorem Th88:
  (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p) implies
         (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in All(x,p)) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= All(x,p) iff J,v.(vS+*vS1+*vS2) |= All(x,p))
 proof
   assume A1: (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p);
   let v,vS,vS1,vS2 such that
A2:       (for y st y in dom vS1 holds not y in still_not-bound_in All(x,p)) &
          (for y st y in dom vS2 holds vS2.y = v.y) & dom vS misses dom vS2;
   set vS1' = vS1|((dom vS1) \ {x});
   set vS2' = vS2|((dom vS2) \ {x});
A3: dom vS1' c= (dom vS1) \ {x} & dom vS2' c= (dom vS2) \ {x} by RELAT_1:87;
    (dom vS2) \ {x} misses {x} & (dom vS1) \ {x} misses {x}
                                                           by XBOOLE_1:79; then
A33: dom vS2' misses {x} & dom vS1' misses {x} by A3,XBOOLE_1:63;
A5: for y st y in dom vS1' holds not y in still_not-bound_in p by A2,A3,Th84;
A6: for y st y in dom vS2' holds vS2'.y = (v.vS).y by A2,A3,Th85;
A8: (for a holds J,(v.vS).(x|a) |= p) iff
               (for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p)
   proof
     thus (for a holds J,(v.vS).(x|a) |= p) implies
               for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p
     proof
       assume A9: for a holds J,(v.vS).(x|a) |= p;
       let a; 
       dom vS2' misses dom (x|a) by A33,Th58; then
       J,(v.vS).(x|a) |= p iff J,(v.vS).((x|a)+*vS1'+*vS2') |= p by A1,A5,A6;
       hence thesis by A9;
     end;
     thus (for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p) implies
               for a holds J,(v.vS).(x|a) |= p
     proof
       assume A10: for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p;
       let a;
       dom vS2' misses dom (x|a) by A33,Th58; then
       J,(v.vS).(x|a) |= p iff J,(v.vS).((x|a)+*vS1'+*vS2') |= p by A1,A5,A6;
       hence thesis by A10;
     end;
   end;
A11: for a holds (v.vS).((x|a)+*vS1'+*vS2') = v.(vS+*vS1+*vS2).(x|a)
     proof
       let a;
A12:   (v.vS).((x|a)+*vS1'+*vS2')  = (v.vS)+*((x|a)+*vS1'+*vS2') by Def2;
A13:   (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((x|a)+*vS1'+*vS2') by A12,Def2;
       dom vS1' misses dom (x|a) by A33,Th58; then
       (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*(vS1'+*(x|a)+*vS2')
                                                        by A13,FUNCT_4:36; then
A14:   (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*(vS1'+*((x|a)+*vS2'))
                                                                 by FUNCT_4:15;
       dom vS2' misses dom (x|a) by A33,Th58; then
       (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*(vS1'+*(vS2'+*(x|a)))
                                                        by A14,FUNCT_4:36; then
A15:   (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1'+*vS2')+*(x|a))
                                                                 by FUNCT_4:15;
A16:   now assume x in dom vS1; then
A18:     vS1' +* (x .--> vS1.x) = vS1 by Th87;
A19:     now assume x in dom vS2; then
A20:       vS2' +* (x .--> vS2.x) = vS2 by Th87;
           dom (x .--> vS1.x) = {x} &
           dom (x .--> vS2.x) = {x} by CQC_LANG:5; then
           dom (x .--> vS1.x) = dom (x|a) &
           dom (x .--> vS2.x) = dom (x|a) by Th58;
           hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                           by A15,A18,A20,Th86;
         end;
         now assume not x in dom vS2; then 
           vS2' = vS2|(dom vS2) by ZFMISC_1:65; then
           vS2' = vS2 by RELAT_1:97; then
A21:       vS2' +* {} = vS2 by FUNCT_4:22;
A22:       dom {} c= dom (x|a) by XBOOLE_1:2;
           dom (x .--> vS1.x) = {x} by CQC_LANG:5; then
           dom (x .--> vS1.x) = dom (x|a) by Th58;
           hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                       by A15,A18,A21,A22,Th86;
         end;
         hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                                       by A19;
       end;
       now assume not x in dom vS1; then 
         vS1' = vS1|(dom vS1) by ZFMISC_1:65; then
A23:     vS1' = vS1 by RELAT_1:97; then
A24:     vS1' +* {} = vS1 by FUNCT_4:22;
A25:     dom {} c= dom (x|a) by XBOOLE_1:2;
A26:     now assume x in dom vS2; then
A28:       vS2' +* (x .--> vS2.x) = vS2 by Th87;
           dom (x .--> vS2.x) = {x} by CQC_LANG:5; then
           dom (x .--> vS2.x) = dom (x|a) by Th58;
           hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                       by A15,A24,A25,A28,Th86;
         end;
         now assume not x in dom vS2; then 
           vS2' = vS2|(dom vS2) by ZFMISC_1:65;
           hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                         by A15,A23,RELAT_1:97;
         end;
         hence (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*((vS1+*vS2)+*(x|a))
                                                                        by A26;
       end;
       then (v.vS).((x|a)+*vS1'+*vS2') = (v+*vS)+*(vS1+*vS2)+*(x|a)
                                                             by A16,FUNCT_4:15;
       then (v.vS).((x|a)+*vS1'+*vS2') = ((v+*vS)+*vS1+*vS2)+*(x|a)
                                                                 by FUNCT_4:15;
       then (v.vS).((x|a)+*vS1'+*vS2') = (v+*(vS+*vS1)+*vS2)+*(x|a)
                                                                 by FUNCT_4:15;
       then (v.vS).((x|a)+*vS1'+*vS2') = (v+*(vS+*vS1+*vS2))+*(x|a)
                                                                 by FUNCT_4:15;
       then (v.vS).((x|a)+*vS1'+*vS2') = (v.(vS+*vS1+*vS2))+*(x|a) by Def2;
       hence thesis by Def2;
     end;
     (for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p) iff
               (for a holds J,v.(vS+*vS1+*vS2).(x|a) |= p)
     proof
       thus (for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p) implies
               (for a holds J,v.(vS+*vS1+*vS2).(x|a) |= p)
       proof
         assume A31: for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p;
         let a;
         (v.vS).((x|a)+*vS1'+*vS2') = v.(vS+*vS1+*vS2).(x|a) by A11;
         hence thesis by A31;
       end;
       thus (for a holds J,v.(vS+*vS1+*vS2).(x|a) |= p) implies
              (for a holds J,(v.vS).((x|a)+*vS1'+*vS2') |= p)
       proof
         assume A32: for a holds J,v.(vS+*vS1+*vS2).(x|a) |= p;
         let a;
         (v.vS).((x|a)+*vS1'+*vS2') = v.(vS+*vS1+*vS2).(x|a) by A11;
         hence thesis by A32;
       end;
     end;
     hence thesis by A8,Th49;
 end;

theorem Th89:
  for p holds (for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in p) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= p iff J,v.(vS+*vS1+*vS2) |= p)
   proof
   defpred P[Element of CQC-WFF] means for v,vS,vS1,vS2 st
          (for y st y in dom vS1 holds not y in still_not-bound_in $1) &
          (for y st y in dom vS2 holds vS2.y = v.y) &
               dom vS misses dom vS2 holds
                   J,v.vS |= $1 iff J,v.(vS+*vS1+*vS2) |= $1;
A1:  for p,q,x,k for l being CQC-variable_list of k
     for P being QC-pred_symbol of k holds
       P[VERUM] & P[P!l] & (P[p] implies P['not' p]) &
       (P[p] & P[q] implies P[p '&' q]) &
       (P[p] implies P[All(x,p)]) by VALUAT_1:44,Th81,Th82,Th83,Th88;
     thus for p holds P[p] from CQC_LANG:sch 1(A1);       
   end;

definition let p;
  func RSub1(p) -> set means
  :Def13: b in it iff ex x st x = b & not x in still_not-bound_in p;
  existence
  proof
    defpred P[set] means ex x st x = $1 & not x in still_not-bound_in p;
    consider X being set such that A1: for b holds b in X iff
                  b in bound_QC-variables & P[b] from XBOOLE_0:sch 1;
    take X;
    thus thesis by A1;
  end;
  uniqueness
  proof
    let X1,X2 be set;
    assume
A4:  (for b holds b in X1 iff ex x st x = b & not x in still_not-bound_in p) &
    (for b holds b in X2 iff ex x st x = b & not x in still_not-bound_in p);
    now let b;
      (b in X1 iff ex x st x = b & not x in still_not-bound_in p) &
      (b in X2 iff ex x st x = b & not x in still_not-bound_in p) by A4;
      hence b in X1 iff b in X2;
    end;
    hence X1 = X2 by TARSKI:2;
  end;
end;

definition let p, Sub;
  func RSub2(p,Sub) -> set means :Def14:
    b in it iff ex x st x = b & x in still_not-bound_in p & x = (@Sub).x;
  existence
  proof
    defpred P[set] means ex x st x = $1 & x in still_not-bound_in p &
                                                                 x = (@Sub).x;
    consider X being set such that A1: for b holds b in X iff
            b in bound_QC-variables & P[b] from XBOOLE_0:sch 1;
    take X;
    thus thesis by A1;
  end;
  uniqueness
  proof
    let X1,X2 be set;
    assume
A4:  (for b holds b in X1 iff ex x st x = b & x in still_not-bound_in p &
                                                              x = (@Sub).x) &
    (for b holds b in X2 iff ex x st x = b & x in still_not-bound_in p &
                                                              x = (@Sub).x);
    now let b;
      (b in X1 iff ex x st x = b & x in still_not-bound_in p & x = (@Sub).x) &
      (b in X2 iff ex x st x = b & x in still_not-bound_in p & x = (@Sub).x)
                                                                        by A4;
      hence b in X1 iff b in X2;
    end;
    hence X1 = X2 by TARSKI:2;
  end;
end;

theorem Th90:
  dom ((@Sub)|RSub1(p)) misses dom ((@Sub)|RSub2(p,Sub))
  proof
    now assume dom ((@Sub)|RSub1(p)) meets dom ((@Sub)|RSub2(p,Sub)); then
      consider a being set such that
A9:     a in dom ((@Sub)|RSub1(p)) /\
                            dom ((@Sub)|RSub2(p,Sub)) by XBOOLE_0:4;
        dom ((@Sub)|RSub1(p)) = dom (@Sub) /\ RSub1(p) &
        dom ((@Sub)|RSub2(p,Sub)) = (dom (@Sub) /\ RSub2(p,Sub))
                                                          by RELAT_1:90; then
        a in (dom (@Sub) /\ (dom (@Sub) /\ RSub1(p))) /\ RSub2(p,Sub)
                                                       by A9,XBOOLE_1:16; then
        a in dom (@Sub) /\ dom (@Sub) /\ RSub1(p) /\ RSub2(p,Sub)
                                      by XBOOLE_1:16; then
        a in dom (@Sub) /\ (RSub1(p) /\ RSub2(p,Sub)) by XBOOLE_1:16; then
        a in RSub1(p) /\ RSub2(p,Sub) by XBOOLE_0:def 3; then
A10:     a in RSub1(p) & a in RSub2(p,Sub) by XBOOLE_0:def 3; then
        consider b being bound_QC-variable such that
A11:         b = a & not b in still_not-bound_in p by Def13;
        consider b being bound_QC-variable such that
A12:         b = a & b in still_not-bound_in p & b = (@Sub).b by A10,Def14;
        thus contradiction by A11,A12;
      end;
      hence thesis;
  end;

theorem Th91:
  @RestrictSub(x,All(x,p),Sub) =
    @Sub \ ((@Sub)|RSub1(All(x,p)) +* (@Sub)|RSub2(All(x,p),Sub))
  proof
    set X = {y : y in still_not-bound_in All(x,p) & y is Element of dom Sub &
               y <> x & y <> Sub.y};
    thus @RestrictSub(x,All(x,p),Sub) c=
                 @Sub \ ((@Sub)|RSub1(All(x,p)) +* (@Sub)|RSub2(All(x,p),Sub))
    proof
      let b;
      assume b in @RestrictSub(x,All(x,p),Sub); then
      b in RestrictSub(x,All(x,p),Sub) by SUBSTUT1:def 2; then
      b in Sub|X by SUBSTUT1:def 6; then
      b in (@Sub)|X by SUBSTUT1:def 2; then
      b in @Sub /\ [:X,rng (@Sub):] by RELAT_1:96; then
A2:    b in @Sub & b in [:X,rng @Sub:] by XBOOLE_0:def 3; then
      consider c,d such that A3: c in X & d in rng @Sub
                                            & b = [c,d] by ZFMISC_1:def 2;
      consider y1 such that
A4:        y1 = c & y1 in still_not-bound_in All(x,p) &
                y1 is Element of dom Sub & y1 <> x & y1 <> Sub.y1 by A3;
A5:    now assume c in RSub1(All(x,p)); then
        ex y st y = c & not y in still_not-bound_in All(x,p) by Def13;
        hence contradiction by A4;
      end;
A6:    now assume c in RSub2(All(x,p),Sub); then
        consider y such that
A7:          y = c & y in still_not-bound_in All(x,p) & y = (@Sub).y by Def14;
        thus contradiction by A4,A7,SUBSTUT1:def 2;
      end;
      not b in [:RSub1(All(x,p)),rng @Sub:] by A3,A5,ZFMISC_1:106; then
      not b in @Sub /\ [:RSub1(All(x,p)),rng @Sub:] by XBOOLE_0:def 3; then
A7:    not b in (@Sub)|RSub1(All(x,p)) by RELAT_1:96;
      not b in [:RSub2(All(x,p),Sub),rng @Sub:] by A3,A6,ZFMISC_1:106; then
      not b in @Sub /\ [:RSub2(All(x,p),Sub),rng @Sub:] by XBOOLE_0:def 3;
      then not b in (@Sub)|RSub2(All(x,p),Sub) by RELAT_1:96; then
A8:    not b in (@Sub)|RSub1(All(x,p)) \/ (@Sub)|RSub2(All(x,p),Sub)
                                                        by A7,XBOOLE_0:def 2;
      dom ((@Sub)|RSub1(All(x,p))) misses
                                    dom ((@Sub)|RSub2(All(x,p),Sub)) by Th90;
      then not b in (@Sub)|RSub1(All(x,p)) +* (@Sub)|RSub2(All(x,p),Sub)
                                                     by A8,FUNCT_4:32;
      hence b in @Sub \ ((@Sub)|RSub1(All(x,p)) +* (@Sub)|RSub2(All(x,p),Sub))
                                                         by A2,XBOOLE_0:def 4;
    end;
    thus @Sub \ ((@Sub)|RSub1(All(x,p)) +* (@Sub)|RSub2(All(x,p),Sub)) c=
                                                 @RestrictSub(x,All(x,p),Sub)
    proof
      let b;
      assume A30: b in @Sub \ ((@Sub)|RSub1(All(x,p)) +*
                                             (@Sub)|RSub2(All(x,p),Sub)); then
A14:   b in @Sub & not b in ((@Sub)|RSub1(All(x,p)) +*
                           (@Sub)|RSub2(All(x,p),Sub)) by XBOOLE_0:def 4;
      consider c,d such that
A15:       b = [c,d] by A30,RELAT_1:def 1;
A16:   c in dom (@Sub) & d = (@Sub).c by A14,A15,FUNCT_1:8; then
      reconsider z = c as bound_QC-variable;
      dom ((@Sub)|RSub1(All(x,p))) misses
                                    dom ((@Sub)|RSub2(All(x,p),Sub)) by Th90;
      then not b in (@Sub)|RSub1(All(x,p)) \/ (@Sub)|RSub2(All(x,p),Sub)
                                                  by A14,FUNCT_4:32; then
A17:   not b in (@Sub)|RSub1(All(x,p)) & not b in (@Sub)|RSub2(All(x,p),Sub)
                                                            by XBOOLE_0:def 2;
      then not b in (@Sub /\ [:RSub1(All(x,p)),rng @Sub:]) by RELAT_1:96;
      then A18: not [z,d] in [:RSub1(All(x,p)),rng @Sub:]
                                                    by A14,A15,XBOOLE_0:def 3;
      d in rng @Sub by A16,FUNCT_1:12; then
A19:   not z in RSub1(All(x,p)) by A18,ZFMISC_1:106;
A21:   z in still_not-bound_in All(x,p) by A19,Def13; then
      z in (still_not-bound_in p) \ {x} by QC_LANG3:16; then
      not z in {x} by XBOOLE_0:def 4; then
A22:   z <> x by TARSKI:def 1;
      not b in (@Sub /\ [:RSub2(All(x,p),Sub),rng @Sub:]) by A17,RELAT_1:96;
      then A23: not [z,d] in [:RSub2(All(x,p),Sub),rng @Sub:]
                                                    by A14,A15,XBOOLE_0:def 3;
      d in rng @Sub by A16,FUNCT_1:12; then
A24:   not z in RSub2(All(x,p),Sub) by A23,ZFMISC_1:106;
A26:   not z in still_not-bound_in All(x,p) or z <> (@Sub).z by A24,Def14;
A28:   z <> Sub.z by A19,A26,Def13,SUBSTUT1:def 2;
      z is Element of dom Sub by A16,SUBSTUT1:def 2; then
      consider y such that
A29:    y = z & y in still_not-bound_in All(x,p) & y is Element of dom Sub &
               y <> x & y <> Sub.y by A21,A22,A28;
      z in X & d in rng @Sub by A16,A29,FUNCT_1:12; then
      [z,d] in [:X,rng @Sub:] by ZFMISC_1:106; then
      b in @Sub /\ [:X,rng (@Sub):] by A14,A15,XBOOLE_0:def 3; then
      b in (@Sub)|X by RELAT_1:96; then
      b in Sub|X by SUBSTUT1:def 2;
      then b in RestrictSub(x,All(x,p),Sub) by SUBSTUT1:def 6;
      hence thesis by SUBSTUT1:def 2;
    end;
  end;

theorem Th92:
  dom @RestrictSub(x,p,Sub) misses dom ((@Sub)|RSub1(p)) \/
                                                dom ((@Sub)|RSub2(p,Sub))
  proof
    set X = {y : y in still_not-bound_in p & y is Element of dom Sub &
               y <> x & y <> Sub.y};
    RestrictSub(x,p,Sub) = Sub|X by SUBSTUT1:def 6; then
    RestrictSub(x,p,Sub) = (@Sub|X) by SUBSTUT1:def 2; then
    dom @RestrictSub(x,p,Sub) = dom (@Sub|X) by SUBSTUT1:def 2; then
A2:  dom @RestrictSub(x,p,Sub) = dom @Sub /\ X &
    dom ((@Sub)|RSub1(p)) = dom @Sub /\ RSub1(p)
    & dom ((@Sub)|RSub2(p,Sub)) = dom @Sub /\ RSub2(p,Sub) by RELAT_1:90;
    now assume dom @RestrictSub(x,p,Sub) meets dom ((@Sub)|RSub1(p)) \/
                                           dom ((@Sub)|RSub2(p,Sub)); then
      consider b such that
A3:    b in dom @RestrictSub(x,p,Sub) & b in dom ((@Sub)|RSub1(p)) \/
                                   dom ((@Sub)|RSub2(p,Sub)) by XBOOLE_0:3;
      b in X by A2,A3,XBOOLE_0:def 3; then
      consider y such that
A4:    b = y & y in still_not-bound_in p & y is Element of dom Sub &
               y <> x & y <> Sub.y;
A5:    now assume b in dom ((@Sub)|RSub1(p)); then
        b in RSub1(p) by A2,XBOOLE_0:def 3; then
        consider y1 such that
A6:        y1 = b & not y1 in still_not-bound_in p by Def13;
          thus contradiction by A4,A6;
      end;
      now assume b in dom ((@Sub)|RSub2(p,Sub)); then
        b in RSub2(p,Sub) by A2,XBOOLE_0:def 3; then
        consider y1 such that
A7:     y1 = b & y1 in still_not-bound_in p & y1 = (@Sub).y1 by Def14;
        thus contradiction by A4,A7,SUBSTUT1:def 2;
      end;
      hence contradiction by A3,A5,XBOOLE_0:def 2;
    end;
    hence thesis;
  end;

theorem Th93:
  [S,x] is quantifiable implies @(CQCSub_All([S,x],xSQ))`2 =
     @RestrictSub(x,All(x,S`1),xSQ) +*
  (@xSQ)|RSub1(All(x,S`1)) +* (@xSQ)|RSub2(All(x,S`1),xSQ)
  proof
    set S1 = CQCSub_All([S,x],xSQ);
    assume A1: [S,x] is quantifiable; then
    S1 = Sub_All([S,x],xSQ) by Def7; then
A2: @S1`2 = @xSQ by A1,Th23;
A3: @RestrictSub(x,All(x,S`1),xSQ) = @xSQ \ ((@xSQ)|RSub1(All(x,S`1)) +*
                                   (@xSQ)|RSub2(All(x,S`1),xSQ)) by Th91; then
    reconsider F = @xSQ \ ((@xSQ)|RSub1(All(x,S`1)) +*
                      (@xSQ)|RSub2(All(x,S`1),xSQ)) as
                            PartFunc of bound_QC-variables,bound_QC-variables;
A4: ((@xSQ)|RSub1(All(x,S`1)) +* (@xSQ)|RSub2(All(x,S`1),xSQ)) \/ F =
    ((@xSQ)|RSub1(All(x,S`1)) +* (@xSQ)|RSub2(All(x,S`1),xSQ)) \/ @xSQ
        by XBOOLE_1:39;
    dom ((@xSQ)|RSub1(All(x,S`1))) misses
        dom ((@xSQ)|RSub2(All(x,S`1),xSQ)) by Th90; then
A6: ((@xSQ)|RSub1(All(x,S`1)) +* (@xSQ)|RSub2(All(x,S`1),xSQ)) =
    ((@xSQ)|RSub1(All(x,S`1)) \/ (@xSQ)|RSub2(All(x,S`1),xSQ)) by FUNCT_4:32;
    (@xSQ)|RSub1(All(x,S`1)) c= @xSQ & (@xSQ)|RSub2(All(x,S`1),xSQ) c= @xSQ
        by RELAT_1:88; then
    ((@xSQ)|RSub1(All(x,S`1)) \/ (@xSQ)|RSub2(All(x,S`1),xSQ)) c= @xSQ
        by XBOOLE_1:8; then
A7:  ((@xSQ)|RSub1(All(x,S`1)) +* (@xSQ)|RSub2(All(x,S`1),xSQ)) \/ F = @xSQ
        by A4,A6,XBOOLE_1:12;
    dom F misses (dom ((@xSQ)|RSub1(All(x,S`1))) \/
        dom ((@xSQ)|RSub2(All(x,S`1),xSQ))) by A3,Th92;
    then dom F misses dom ((@xSQ)|RSub1(All(x,S`1)) +*
        (@xSQ)|RSub2(All(x,S`1),xSQ)) by FUNCT_4:def 1;
    then F +* ((@xSQ)|RSub1(All(x,S`1)) +*
        (@xSQ)|RSub2(All(x,S`1),xSQ)) = @xSQ by A7,FUNCT_4:32;
    hence thesis by A2,A3,FUNCT_4:15;
  end;

theorem Th94:
  [S,x] is quantifiable implies ex vS1,vS2 st
       (for y st y in dom vS1 holds
                 not y in still_not-bound_in All(x,S`1)) &
       (for y st y in dom vS2 holds vS2.y = v.y) &
              dom NEx_Val(v,S,x,xSQ) misses dom vS2 &
       v.Val_S(v,CQCSub_All([S,x],xSQ)) = v.(NEx_Val(v,S,x,xSQ) +* vS1 +* vS2)
proof
  set S1 = CQCSub_All([S,x],xSQ);
  assume A1: [S,x] is quantifiable;
  Val_S(v,S1) = (@S1`2)*v by Def3; then
A2: Val_S(v,S1) = ((@RestrictSub(x,All(x,S`1),xSQ) +*
      (@xSQ)|RSub1(All(x,S`1))) +* (@xSQ)|RSub2(All(x,S`1),xSQ))*v by A1,Th93;
  rng (@RestrictSub(x,All(x,S`1),xSQ)) c= bound_QC-variables; then
A3: rng (@RestrictSub(x,All(x,S`1),xSQ)) c= dom v by Th58;
  rng ((@xSQ)|RSub1(All(x,S`1))) c= bound_QC-variables; then
A4: rng ((@xSQ)|RSub1(All(x,S`1))) c= dom v by Th58; then
A5: rng (@RestrictSub(x,All(x,S`1),xSQ)) \/
   rng ((@xSQ)|RSub1(All(x,S`1))) c= dom v by A3,XBOOLE_1:8;
   rng (@RestrictSub(x,All(x,S`1),xSQ) +* ((@xSQ)|RSub1(All(x,S`1)))) c=
   rng (@RestrictSub(x,All(x,S`1),xSQ)) \/ rng ((@xSQ)|RSub1(All(x,S`1)))
                                                           by FUNCT_4:18; then
A6: rng ((@RestrictSub(x,All(x,S`1),xSQ)) +*
                       ((@xSQ)|RSub1(All(x,S`1)))) c= dom v by A5,XBOOLE_1:1;
   rng ((@xSQ)|RSub2(All(x,S`1),xSQ)) c= bound_QC-variables; then
A7: rng ((@xSQ)|RSub2(All(x,S`1),xSQ)) c= dom v by Th58; then
A8: Val_S(v,S1) = ((@RestrictSub(x,All(x,S`1),xSQ) +*
     (@xSQ)|RSub1(All(x,S`1)))*v) +* ((@xSQ)|RSub2(All(x,S`1),xSQ)*v)
                                                          by A2,A6,FUNCT_7:10;
A9: (@RestrictSub(x,All(x,S`1),xSQ) +* (@xSQ)|RSub1(All(x,S`1)))*v =
            (@RestrictSub(x,All(x,S`1),xSQ)*v) +*
             ((@xSQ)|RSub1(All(x,S`1))*v) by A3,A4,FUNCT_7:10;
   take vS1 = (@xSQ)|RSub1(All(x,S`1))*v;
   take vS2 = (@xSQ)|RSub2(All(x,S`1),xSQ)*v;
   thus for y st y in dom vS1 holds not y in still_not-bound_in All(x,S`1)
   proof
     let y; assume y in dom vS1; then
     y in dom ((@xSQ)|RSub1(All(x,S`1))) by A4,RELAT_1:46; then
     y in dom @xSQ /\ RSub1(All(x,S`1)) by RELAT_1:90; then
     y in RSub1(All(x,S`1)) by XBOOLE_0:def 3; then
     consider y1 such that
A10: y1 = y & not y1 in still_not-bound_in All(x,S`1) by Def13;
     thus thesis by A10;
   end;
   thus for y st y in dom vS2 holds vS2.y = v.y
   proof
     let y; assume y in dom vS2; then
A11: y in dom ((@xSQ)|RSub2(All(x,S`1),xSQ)) by A7,RELAT_1:46; then
     y in dom @xSQ /\ RSub2(All(x,S`1),xSQ) by RELAT_1:90; then
     y in RSub2(All(x,S`1),xSQ) by XBOOLE_0:def 3; then
     consider y1 such that
A12: y1 = y & y1 in still_not-bound_in All(x,S`1) & y1 = (@xSQ).y1 by Def14;
     v.y = v.(((@xSQ)|RSub2(All(x,S`1),xSQ)).y) by A11,A12,FUNCT_1:70;
     hence thesis by A11,FUNCT_1:23;
   end;
   thus dom NEx_Val(v,S,x,xSQ) misses dom vS2
   proof
     set X = {y : y in still_not-bound_in All(x,S`1) &
                               y is Element of dom xSQ & y <> x & y <> xSQ.y};
     RestrictSub(x,All(x,S`1),xSQ) = (xSQ|X) by SUBSTUT1:def 6; then
     RestrictSub(x,All(x,S`1),xSQ) = (@xSQ)|X by SUBSTUT1:def 2; then
     dom NEx_Val(v,S,x,xSQ) = dom ((@xSQ)|X) by Th75; then
A13:  dom NEx_Val(v,S,x,xSQ) = dom (@xSQ) /\ X by RELAT_1:90;
     dom vS2 = dom ((@xSQ)|RSub2(All(x,S`1),xSQ)) by A7,RELAT_1:46; then
A14:  dom vS2 = dom @xSQ /\ RSub2(All(x,S`1),xSQ) by RELAT_1:90;
     now assume dom NEx_Val(v,S,x,xSQ) meets dom vS2;
       then consider b such that
A15:     b in dom NEx_Val(v,S,x,xSQ) & b in dom vS2 by XBOOLE_0:3;
       b in X by A13,A15,XBOOLE_0:def 3; then
       consider y such that
A16:   y = b & y in still_not-bound_in All(x,S`1) &
                        y is Element of dom xSQ & y <> x & y <> xSQ.y;
       b in RSub2(All(x,S`1),xSQ) by A14,A15,XBOOLE_0:def 3; then
       consider y1 such that
A17:   y1 = b & y1 in still_not-bound_in All(x,S`1) & y1 = (@xSQ).y1 by Def14;
       thus contradiction by A16,A17,SUBSTUT1:def 2;
     end;
     hence thesis;
   end;
  thus v.Val_S(v,S1) = v.(NEx_Val(v,S,x,xSQ) +* vS1 +* vS2) by A8,A9,Def12;
end;

theorem Th95:
  [S,x] is quantifiable implies for v holds
     (J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1) iff
             J,v.Val_S(v,CQCSub_All([S,x],xSQ)) |= CQCSub_All([S,x],xSQ))
  proof
    set S1 = CQCSub_All([S,x],xSQ);
    assume A1: [S,x] is quantifiable;
    let v;
    consider vS1,vS2 such that
A2:   ((for y st y in dom vS1 holds not y in still_not-bound_in All(x,S`1)) &
      (for y st y in dom vS2 holds vS2.y = v.y) &
          dom NEx_Val(v,S,x,xSQ) misses dom vS2 &
            v.Val_S(v,S1) = v.(NEx_Val(v,S,x,xSQ) +* vS1 +* vS2)) by A1,Th94;
A3:  J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1) iff
    J,v.(NEx_Val(v,S,x,xSQ) +* vS1 +* vS2) |= All(x,S`1) by A2,Th89;
    S1 = Sub_All([S,x],xSQ) by A1,Def7; then
    S1`1 = All([S,x]`2,([S,x]`1)`1) by A1,Th23; then
    S1`1 = All(x,([S,x]`1)`1) by MCART_1:7; then
    S1`1 = All(x,S`1) by MCART_1:7;
    hence thesis by A2,A3,Def4;
  end;

theorem Th96:
  [S,x] is quantifiable &
    (for v holds (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S)) implies
    (for v holds (J,v |= CQC_Sub(CQCSub_All([S,x],xSQ)) iff
         J,v.Val_S(v,CQCSub_All([S,x],xSQ)) |= CQCSub_All([S,x],xSQ)))
  proof
    assume A1: [S,x] is quantifiable &
         (for v holds (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S));
   set S1 = CQCSub_All([S,x],xSQ);
   set p = CQC_Sub(CQCSub_the_scope_of S1);
A3: S1 is Sub_universal by A1,Th25;
   let v;
A5: J,v |= CQCQuant(S1,p) iff J,v |= CQCQuant(S1,CQC_Sub(S)) by A1,Th28;
    set z = S_Bound(@S1);
    set q = CQC_Sub(S);
A7:  J,v |= All(z,q) iff (for a holds J,v.(z|a) |= q) by Th49;
A8:  (for a holds J,v.(z|a) |= q) iff
    for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S
    proof
      thus (for a holds J,v.(z|a) |= q) implies
              for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S
      proof
        assume A9: for a holds J,v.(z|a) |= q;
        let a;
        J,v.(z|a) |= q by A9;
        hence thesis by A1;
      end;
      thus (for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S) implies
                 for a holds J,v.(z|a) |= q
      proof
        assume A10: for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S;
        let a;
        J,(v.(z|a)).Val_S(v.(z|a),S) |= S by A10;
        hence thesis by A1;
      end;
    end;
A11: (for a holds J,(v.(z|a)).Val_S(v.(z|a),S) |= S) iff
    (for a holds J,(v.(z|a)).(NEx_Val(v.(z|a),S,x,xSQ)+*(x|a)) |= S)
                                                               by A1,Th54;
A13: (for a holds J,(v.(z|a)).(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) iff
    (for a holds J,v.(NEx_Val(v,S,x,xSQ)+*(x|a)) |= S) by A1,Th73;
    (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S) iff
    J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1)
    proof
      thus (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S) implies
         J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1)
      proof
        assume for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S; then
        for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1 by Th78;
        hence thesis by Th49;
      end;
      thus J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1) implies
                             (for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S)
      proof
        assume J,v.NEx_Val(v,S,x,xSQ) |= All(x,S`1); then
        for a holds J,(v.NEx_Val(v,S,x,xSQ)).(x|a) |= S`1 by Th49;
        hence thesis by Th78;
      end;
    end;
    hence thesis by A1,A3,A5,A7,A8,A11,A13,Th26,Th29,Th56,Th77,Th95;
end;

scheme Sub_CQC_Ind1 { Pro[set] } :
  for S holds Pro[S]
  provided
A1: for S,S' being Element of CQC-Sub-WFF,
        x being bound_QC-variable,SQ be second_Q_comp of [S,x],
          k being Nat,ll being CQC-variable_list of k,
      P being (QC-pred_symbol of k), e being Element of vSUB
             holds Pro[Sub_P(P,ll,e)] &
           (S is Sub_VERUM implies Pro[S]) &
           (Pro[S] implies Pro[Sub_not S]) &
           (S`2 = (S')`2 & Pro[S] & Pro[S'] implies Pro[CQCSub_&(S,S')]) &
      ([S,x] is quantifiable & Pro[S] implies Pro[CQCSub_All([S,x], SQ)])
  proof
A2:  S`2 = (S')`2 & Pro[S] & Pro[S'] implies Pro[Sub_&(S,S')]
    proof
      assume A3: S`2 = (S')`2 & Pro[S] & Pro[S']; then
      CQCSub_&(S,S') = Sub_&(S,S') by Def5;
      hence thesis by A1,A3;
    end;
    [S,x] is quantifiable & Pro[S] implies Pro[Sub_All([S,x],xSQ)]
    proof
      assume A5: [S,x] is quantifiable & Pro[S]; then
      CQCSub_All([S,x], xSQ) = Sub_All([S,x],xSQ) by Def7;
      hence thesis by A1,A5;
    end; then
A6:  for S,S' being Element of CQC-Sub-WFF,
        x being bound_QC-variable,SQ be second_Q_comp of [S,x],
        k being Nat,ll being CQC-variable_list of k,
      P being (QC-pred_symbol of k), e being Element of vSUB
             holds Pro[Sub_P(P,ll,e)] &
           (S is Sub_VERUM implies Pro[S]) &
           (Pro[S] implies Pro[Sub_not S]) &
           (S`2 = (S')`2 & Pro[S] & Pro[S']
                                       implies Pro[Sub_&(S,S')]) &
      ([S,x] is quantifiable & Pro[S] implies Pro[Sub_All([S,x], SQ)])
                                            by A1,A2;
    thus thesis from SUBSTUT1:sch 5(A6);
  end;

:: Substitution Lemma (Ebb et al, Chapter III, 8.3)

theorem
  for S, v holds (J,v |= CQC_Sub(S) iff J,v.Val_S(v,S) |= S)
  proof
    defpred Pro[Element of CQC-Sub-WFF] means
                 for v holds (J,v |= CQC_Sub($1) iff J,v.Val_S(v,$1) |= $1);
A1:  for S,S' being Element of CQC-Sub-WFF,
        x being bound_QC-variable,SQ be second_Q_comp of [S,x],
          k being Nat,ll being CQC-variable_list of k,
      P being (QC-pred_symbol of k), e being Element of vSUB
             holds Pro[Sub_P(P,ll,e)] &
           (S is Sub_VERUM implies Pro[S]) &
           (Pro[S] implies Pro[Sub_not S]) &
           (S`2 = (S')`2 & Pro[S] & Pro[S']implies Pro[CQCSub_&(S,S')]) &
      ([S,x] is quantifiable & Pro[S] implies Pro[CQCSub_All([S,x], SQ)])
                                                 by Th2,Th14,Th17,Th21,Th96;
    thus for S holds Pro[S] from Sub_CQC_Ind1(A1);
  end;
