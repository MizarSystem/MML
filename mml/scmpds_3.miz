:: Computation and Program Shift in the SCMPDS Computer
::  by JingChao Chen
::
:: Received June 15, 1999
:: Copyright (c) 1999-2011 Association of Mizar Users
::           (Stowarzyszenie Uzytkownikow Mizara, Bialystok, Poland).
:: This code can be distributed under the GNU General Public Licence
:: version 3.0 or later, or the Creative Commons Attribution-ShareAlike
:: License version 3.0 or later, subject to the binding interpretation
:: detailed in file COPYING.interpretation.
:: See COPYING.GPL and COPYING.CC-BY-SA for the full text of these
:: licenses, or see http://www.gnu.org/licenses/gpl.html and
:: http://creativecommons.org/licenses/by-sa/3.0/.

environ

 vocabularies NUMBERS, SUBSET_1, SCMPDS_2, INT_1, FSM_1, AMI_1, COMPLEX1,
      ARYTM_3, FUNCT_1, AMI_2, STRUCT_0, XBOOLE_0, RELAT_1, TARSKI, CARD_1,
      AMI_3, SCMPDS_1, GRAPHSP, SCMNORM, XXREAL_0, ARYTM_1, FUNCT_4, FUNCOP_1,
      FUNCT_7, CIRCUIT2, ORDINAL1, PARTFUN1, AMISTD_5, PBOOLE, AMISTD_2,
      FINSET_1, COMPOS_1;
 notations TARSKI, XBOOLE_0, SUBSET_1, NUMBERS, XCMPLX_0, RELAT_1, FUNCT_1,
      PARTFUN1, PBOOLE, FUNCT_4, FINSET_1, INT_1, NAT_1, STRUCT_0, FUNCOP_1,
      INT_2, XXREAL_0, MEMSTR_0, COMPOS_1, EXTPRO_1, AMI_2, AMISTD_5, SCMPDS_1,
      SCMPDS_2;
 constructors DOMAIN_1, XXREAL_0, INT_2, SCMPDS_1, SCMPDS_2, REAL_1, PRE_POLY,
      AMI_3, AMISTD_5, PBOOLE, AMISTD_1, FUNCT_7, MEMSTR_0, RELSET_1;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, ORDINAL1, NUMBERS,
      XREAL_0, INT_1, CARD_3, AMI_3, SCMPDS_2, FINSET_1, RELSET_1, FUNCT_2,
      COMPOS_1, EXTPRO_1, AMISTD_5, PBOOLE, AMISTD_2, FUNCT_4, FUNCOP_1,
      MEMSTR_0;
 requirements NUMERALS, SUBSET, BOOLE, ARITHM, REAL;
 definitions EXTPRO_1, AMI_2, AMI_3, FUNCOP_1, SCMPDS_2, NAT_1, COMPOS_1,
      AMISTD_5, STRUCT_0, MEMSTR_0;
 theorems AMI_3, GRFUNC_1, NAT_1, FUNCOP_1, TARSKI, FUNCT_4, FUNCT_1, ZFMISC_1,
      INT_1, RELAT_1, ABSVALUE, SCMPDS_2, XBOOLE_0, XBOOLE_1, NUMBERS, PBOOLE,
      PARTFUN1, COMPOS_1, EXTPRO_1, AMISTD_5, MEMSTR_0;

begin :: Preliminaries

reserve j, k, m, n for Element of NAT,
  a,b for Int_position,
  k1,k2 for Integer;

reserve P,P1,P2 for Instruction-Sequence of SCMPDS;

theorem Th2:
  for k1 be Integer,s1,s2 being State of SCMPDS st IC s1 = IC s2
  holds ICplusConst(s1,k1)=ICplusConst(s2,k1)
proof
  let k1 be Integer,s1,s2 be State of SCMPDS;
A1: ex i being Element of NAT st i = IC s1 & ICplusConst(s1,k1 ) = abs(i+k1)
  by SCMPDS_2:def 18;
  assume IC s1 = IC s2;
  hence thesis by A1,SCMPDS_2:def 18;
end;

theorem Th3:
  for k1 be Integer,a be Int_position,s1,s2 being State of SCMPDS
  st DataPart s1 = DataPart s2 holds s1.DataLoc(s1.a,k1)=s2.DataLoc(s2.a,k1)
proof
  let k1 be Integer,a be Int_position,s1,s2 be State of SCMPDS;
  assume
A1: DataPart s1 = DataPart s2;
A2: a in SCM-Data-Loc by SCMPDS_2:def 2;
  then
A3: s1.a= (DataPart s1).a by FUNCT_1:49,SCMPDS_2:84
    .= s2.a by A1,A2,FUNCT_1:49,SCMPDS_2:84;
A4: DataLoc(s1.a,k1) in SCM-Data-Loc by SCMPDS_2:def 2;
  hence s1.DataLoc(s1.a,k1)= (DataPart s1).DataLoc(s1.a,k1) by FUNCT_1:49
,SCMPDS_2:84
    .= s2.DataLoc(s2.a,k1) by A1,A4,A3,FUNCT_1:49,SCMPDS_2:84;
end;

theorem Th4:
  for a be Int_position,s1,s2 being State of SCMPDS st DataPart s1
  = DataPart s2 holds s1.a=s2.a
proof
  let a be Int_position,s1,s2 be State of SCMPDS;
  assume
A1: DataPart s1 = DataPart s2;
A2: a in SCM-Data-Loc by SCMPDS_2:def 2;
  hence s1.a= (DataPart s1).a by FUNCT_1:49,SCMPDS_2:84
    .= s2.a by A1,A2,FUNCT_1:49,SCMPDS_2:84;
end;

theorem
  not IC SCMPDS in SCM-Data-Loc
proof
  assume IC SCMPDS in SCM-Data-Loc;
  then IC SCMPDS is Int_position by SCMPDS_2:3;
  then ObjectKind IC SCMPDS = INT by SCMPDS_2:5;
  hence contradiction by MEMSTR_0:def 3,NUMBERS:27;
end;

theorem
  for s1,s2 being State of SCMPDS st s1 | (SCM-Data-Loc \/ {IC
  SCMPDS }) = s2 | (SCM-Data-Loc \/ {IC SCMPDS }) for l being Instruction of
  SCMPDS holds Exec (l,s1) | (SCM-Data-Loc \/ {IC SCMPDS }) = Exec (l,s2) | (
  SCM-Data-Loc \/ {IC SCMPDS })
proof
  IC SCMPDS in {IC SCMPDS} by TARSKI:def 1;
  then
A1: IC SCMPDS in (SCM-Data-Loc \/ {IC SCMPDS}) by XBOOLE_0:def 3;
  let s1,s2 be State of SCMPDS such that
A2: s1 | (SCM-Data-Loc \/ {IC SCMPDS})=s2 | (SCM-Data-Loc \/ {IC SCMPDS}
  );
A3: DataPart s1 =DataPart s2 by A2,RELAT_1:153,SCMPDS_2:84,XBOOLE_1:7;
A4: (SCM-Data-Loc \/ {IC SCMPDS}) c= the carrier of SCMPDS by AMI_3:1
;
  then (SCM-Data-Loc \/ {IC SCMPDS}) c= dom s2 by PARTFUN1:def 2;
  then
A5: IC SCMPDS in dom (s2 | (SCM-Data-Loc \/ {IC SCMPDS})) by A1,RELAT_1:62;
  (SCM-Data-Loc \/ {IC SCMPDS}) c= dom s1 by A4,PARTFUN1:def 2;
  then IC SCMPDS in dom (s1 | (SCM-Data-Loc \/ {IC SCMPDS})) by A1,RELAT_1:62;
  then
A6: IC s1 = (s2 | (SCM-Data-Loc \/ {IC SCMPDS})).IC SCMPDS by A2,FUNCT_1:47
    .= IC s2 by A5,FUNCT_1:47;
  let l be Instruction of SCMPDS;
A7: dom Exec(l,s1) = the carrier of SCMPDS by PARTFUN1:def 2;
  then
A8: dom Exec(l,s1) = dom Exec(l,s2) by PARTFUN1:def 2;
  dom Exec(l,s2) = the carrier of SCMPDS by PARTFUN1:def 2;
  then
A9: dom DataPart Exec (l,s2)= SCM-Data-Loc by RELAT_1:62,SCMPDS_2:84;
A10: dom DataPart Exec (l,s1)= SCM-Data-Loc by A7,RELAT_1:62,SCMPDS_2:84;
  per cases by NAT_1:37,SCMPDS_2:6;
  suppose
    InsCode (l) = 0;
    then consider k1 such that
A11: l = goto k1 by SCMPDS_2:26;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A12:  x in SCM-Data-Loc;
      then reconsider a = x as Int_position by SCMPDS_2:3;
      thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).a by A12,FUNCT_1:49
,SCMPDS_2:84
        .= s1.a by A11,SCMPDS_2:54
        .= (DataPart s1).a by A12,FUNCT_1:49,SCMPDS_2:84
        .= s2.a by A3,A12,FUNCT_1:49,SCMPDS_2:84
        .= (Exec (l,s2)).a by A11,SCMPDS_2:54
        .= (DataPart Exec (l,s2)).x by A12,FUNCT_1:49,SCMPDS_2:84;
    end;
    then
A13: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = ICplusConst(s1,k1) by A11,SCMPDS_2:54
      .= ICplusConst(s2,k1) by A6,Th2
      .= Exec (l,s2).IC SCMPDS by A11,SCMPDS_2:54;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A13,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 1;
    then consider a such that
A14: l = return a by SCMPDS_2:27;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A15:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A16:    b<>a;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A15,FUNCT_1:49
,SCMPDS_2:84
          .= s1.b by A14,A16,SCMPDS_2:58
          .= (DataPart s1).b by A15,FUNCT_1:49,SCMPDS_2:84
          .= s2.b by A3,A15,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).b by A14,A16,SCMPDS_2:58
          .= (DataPart Exec (l,s2)).x by A15,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A17:    b=a;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A15,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,RetSP) by A14,A17,SCMPDS_2:58
          .= s2.DataLoc(s2.a,RetSP) by A3,Th3
          .= (Exec (l,s2)).b by A14,A17,SCMPDS_2:58
          .= (DataPart Exec (l,s2)).x by A15,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A18: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = (abs(s1.DataLoc(s1.a,RetIC)))+2 by A14,SCMPDS_2:58
      .= (abs(s2.DataLoc(s2.a,RetIC)))+2 by A3,Th3
      .= Exec (l,s2).IC SCMPDS by A14,SCMPDS_2:58;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A18,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 2;
    then consider a,k1 such that
A19: l= a:=k1 by SCMPDS_2:28;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A20:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A21:    b<>a;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A20,FUNCT_1:49
,SCMPDS_2:84
          .= s1.b by A19,A21,SCMPDS_2:45
          .= (DataPart s1).b by A20,FUNCT_1:49,SCMPDS_2:84
          .= s2.b by A3,A20,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).b by A19,A21,SCMPDS_2:45
          .= (DataPart Exec (l,s2)).x by A20,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A22:    b=a;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A20,FUNCT_1:49
,SCMPDS_2:84
          .= k1 by A19,A22,SCMPDS_2:45
          .= (Exec (l,s2)).b by A19,A22,SCMPDS_2:45
          .= (DataPart Exec (l,s2)).x by A20,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A23: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A19,SCMPDS_2:45
      .= Exec (l,s2).IC SCMPDS by A19,SCMPDS_2:45;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A23,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 3;
    then consider a,k1 such that
A24: l= saveIC(a,k1) by SCMPDS_2:29;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A25:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A26:    b<>DataLoc(s1.a,k1);
        then
A27:    b<>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A25,FUNCT_1:49
,SCMPDS_2:84
          .= s1.b by A24,A26,SCMPDS_2:59
          .= (DataPart s1).b by A25,FUNCT_1:49,SCMPDS_2:84
          .= s2.b by A3,A25,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).b by A24,A27,SCMPDS_2:59
          .= (DataPart Exec (l,s2)).x by A25,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A28:    b=DataLoc(s1.a,k1);
        then
A29:    b=DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A25,FUNCT_1:49
,SCMPDS_2:84
          .= IC s2 by A6,A24,A28,SCMPDS_2:59
          .= (Exec (l,s2)).b by A24,A29,SCMPDS_2:59
          .= (DataPart Exec (l,s2)).x by A25,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A30: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A24,SCMPDS_2:59
      .= Exec (l,s2).IC SCMPDS by A24,SCMPDS_2:59;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A30,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 4;
    then consider a,k1,k2 such that
A31: l = (a,k1)<>0_goto k2 by SCMPDS_2:30;
    now
      per cases;
      suppose
A32:    s1.DataLoc(s1.a,k1) <> 0;
        then
A33:    s2.DataLoc(s2.a,k1) <> 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = ICplusConst(s1,k2) by A31,A32,SCMPDS_2:55
          .= ICplusConst(s2,k2) by A6,Th2
          .= Exec (l,s2).IC SCMPDS by A31,A33,SCMPDS_2:55;
      end;
      suppose
A34:    s1.DataLoc(s1.a,k1) = 0;
        then
A35:    s2.DataLoc(s2.a,k1) = 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A31,A34,SCMPDS_2:55
          .= Exec (l,s2).IC SCMPDS by A31,A35,SCMPDS_2:55;
      end;
    end;
    then
A36: Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,GRFUNC_1:29;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A37:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A37,FUNCT_1:49
,SCMPDS_2:84
        .= s1.b by A31,SCMPDS_2:55
        .= (DataPart s1).b by A37,FUNCT_1:49,SCMPDS_2:84
        .= s2.b by A3,A37,FUNCT_1:49,SCMPDS_2:84
        .= (Exec (l,s2)).b by A31,SCMPDS_2:55
        .= (DataPart Exec (l,s2)).x by A37,FUNCT_1:49,SCMPDS_2:84;
    end;
    then
    Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    hence thesis by A36,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 5;
    then consider a,k1,k2 such that
A38: l = (a,k1)<=0_goto k2 by SCMPDS_2:31;
    now
      per cases;
      suppose
A39:    s1.DataLoc(s1.a,k1) <= 0;
        then
A40:    s2.DataLoc(s2.a,k1) <= 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = ICplusConst(s1,k2) by A38,A39,SCMPDS_2:56
          .= ICplusConst(s2,k2) by A6,Th2
          .= Exec (l,s2).IC SCMPDS by A38,A40,SCMPDS_2:56;
      end;
      suppose
A41:    s1.DataLoc(s1.a,k1) > 0;
        then
A42:    s2.DataLoc(s2.a,k1) > 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A38,A41,SCMPDS_2:56
          .= Exec (l,s2).IC SCMPDS by A38,A42,SCMPDS_2:56;
      end;
    end;
    then
A43: Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,GRFUNC_1:29;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A44:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A44,FUNCT_1:49
,SCMPDS_2:84
        .= s1.b by A38,SCMPDS_2:56
        .= (DataPart s1).b by A44,FUNCT_1:49,SCMPDS_2:84
        .= s2.b by A3,A44,FUNCT_1:49,SCMPDS_2:84
        .= (Exec (l,s2)).b by A38,SCMPDS_2:56
        .= (DataPart Exec (l,s2)).x by A44,FUNCT_1:49,SCMPDS_2:84;
    end;
    then
    Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    hence thesis by A43,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 6;
    then consider a,k1,k2 such that
A45: l = (a,k1)>=0_goto k2 by SCMPDS_2:32;
    now
      per cases;
      suppose
A46:    s1.DataLoc(s1.a,k1) >= 0;
        then
A47:    s2.DataLoc(s2.a,k1) >= 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = ICplusConst(s1,k2) by A45,A46,SCMPDS_2:57
          .= ICplusConst(s2,k2) by A6,Th2
          .= Exec (l,s2).IC SCMPDS by A45,A47,SCMPDS_2:57;
      end;
      suppose
A48:    s1.DataLoc(s1.a,k1) < 0;
        then
A49:    s2.DataLoc(s2.a,k1) < 0 by A3,Th3;
        thus Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A45,A48,SCMPDS_2:57
          .= Exec (l,s2).IC SCMPDS by A45,A49,SCMPDS_2:57;
      end;
    end;
    then
A50: Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,GRFUNC_1:29;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A51:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A51,FUNCT_1:49
,SCMPDS_2:84
        .= s1.b by A45,SCMPDS_2:57
        .= (DataPart s1).b by A51,FUNCT_1:49,SCMPDS_2:84
        .= s2.b by A3,A51,FUNCT_1:49,SCMPDS_2:84
        .= (Exec (l,s2)).b by A45,SCMPDS_2:57
        .= (DataPart Exec (l,s2)).x by A51,FUNCT_1:49,SCMPDS_2:84;
    end;
    then
    Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    hence thesis by A50,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 7;
    then consider a,k1,k2 such that
A52: l = (a,k1):=k2 by SCMPDS_2:33;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A53:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A54:    b<>DataLoc(s1.a,k1);
        then
A55:    b<>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A53,FUNCT_1:49
,SCMPDS_2:84
          .= s1.b by A52,A54,SCMPDS_2:46
          .= (DataPart s1).b by A53,FUNCT_1:49,SCMPDS_2:84
          .= s2.b by A3,A53,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).b by A52,A55,SCMPDS_2:46
          .= (DataPart Exec (l,s2)).x by A53,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A56:    b=DataLoc(s1.a,k1);
        then
A57:    b=DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A53,FUNCT_1:49
,SCMPDS_2:84
          .= k2 by A52,A56,SCMPDS_2:46
          .= (Exec (l,s2)).b by A52,A57,SCMPDS_2:46
          .= (DataPart Exec (l,s2)).x by A53,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A58: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A52,SCMPDS_2:46
      .= Exec (l,s2).IC SCMPDS by A52,SCMPDS_2:46;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A58,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 8;
    then consider a,k1,k2 such that
A59: l = AddTo(a,k1,k2) by SCMPDS_2:34;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x =
    (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A60:  x in SCM-Data-Loc;
      then reconsider b = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A61:    b<>DataLoc(s1.a,k1);
        then
A62:    b<>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A60,FUNCT_1:49
,SCMPDS_2:84
          .= s1.b by A59,A61,SCMPDS_2:48
          .= (DataPart s1).b by A60,FUNCT_1:49,SCMPDS_2:84
          .= s2.b by A3,A60,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).b by A59,A62,SCMPDS_2:48
          .= (DataPart Exec (l,s2)).x by A60,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A63:    b=DataLoc(s1.a,k1);
        then
A64:    b=DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).b by A60,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,k1)+k2 by A59,A63,SCMPDS_2:48
          .= s2.DataLoc(s2.a,k1)+k2 by A3,Th3
          .= (Exec (l,s2)).b by A59,A64,SCMPDS_2:48
          .= (DataPart Exec (l,s2)).x by A60,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A65: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A59,SCMPDS_2:48
      .= Exec (l,s2).IC SCMPDS by A59,SCMPDS_2:48;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A65,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 9;
    then consider a,b,k1,k2 such that
A66: l = AddTo(a,k1,b,k2) by SCMPDS_2:35;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x
    = (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A67:  x in SCM-Data-Loc;
      then reconsider c = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A68:    c <>DataLoc(s1.a,k1);
        then
A69:    c <>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A67,FUNCT_1:49
,SCMPDS_2:84
          .= s1.c by A66,A68,SCMPDS_2:49
          .= (DataPart s1).c by A67,FUNCT_1:49,SCMPDS_2:84
          .= s2.c by A3,A67,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).c by A66,A69,SCMPDS_2:49
          .= (DataPart Exec (l,s2)).x by A67,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A70:    c = DataLoc(s1.a,k1);
        then
A71:    c = DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A67,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,k1)+s1.DataLoc(s1.b,k2) by A66,A70,SCMPDS_2:49
          .= s2.DataLoc(s2.a,k1)+s1.DataLoc(s1.b,k2) by A3,Th3
          .= s2.DataLoc(s2.a,k1)+s2.DataLoc(s2.b,k2) by A3,Th3
          .= (Exec (l,s2)).c by A66,A71,SCMPDS_2:49
          .= (DataPart Exec (l,s2)).x by A67,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A72: Exec (l,s1) | (SCM-Data-Loc ) = Exec (l,s2) | (SCM-Data-Loc ) by A10,A9,
FUNCT_1:2,SCMPDS_2:84;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A66,SCMPDS_2:49
      .= Exec (l,s2).IC SCMPDS by A66,SCMPDS_2:49;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A72,RELAT_1:150;
  end;
  suppose
    InsCode (l) = 10;
    then consider a,b,k1,k2 such that
A73: l = SubFrom(a,k1,b,k2) by SCMPDS_2:36;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x
    = (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A74:  x in SCM-Data-Loc;
      then reconsider c = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A75:    c <>DataLoc(s1.a,k1);
        then
A76:    c <>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A74,FUNCT_1:49
,SCMPDS_2:84
          .= s1.c by A73,A75,SCMPDS_2:50
          .= (DataPart s1).c by A74,FUNCT_1:49,SCMPDS_2:84
          .= s2.c by A3,A74,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).c by A73,A76,SCMPDS_2:50
          .= (DataPart Exec (l,s2)).x by A74,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A77:    c = DataLoc(s1.a,k1);
        then
A78:    c = DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A74,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,k1)-s1.DataLoc(s1.b,k2) by A73,A77,SCMPDS_2:50
          .= s2.DataLoc(s2.a,k1)-s1.DataLoc(s1.b,k2) by A3,Th3
          .= s2.DataLoc(s2.a,k1)-s2.DataLoc(s2.b,k2) by A3,Th3
          .= (Exec (l,s2)).c by A73,A78,SCMPDS_2:50
          .= (DataPart Exec (l,s2)).x by A74,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A79: DataPart Exec (l,s1) = DataPart Exec (l,s2) by A10,A9,FUNCT_1:2;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A73,SCMPDS_2:50
      .= Exec (l,s2).IC SCMPDS by A73,SCMPDS_2:50;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A79,RELAT_1:150,SCMPDS_2:84;
  end;
  suppose
    InsCode (l) = 11;
    then consider a,b,k1,k2 such that
A80: l = MultBy(a,k1,b,k2) by SCMPDS_2:37;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x
    = (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A81:  x in SCM-Data-Loc;
      then reconsider c = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A82:    c <>DataLoc(s1.a,k1);
        then
A83:    c <>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A81,FUNCT_1:49
,SCMPDS_2:84
          .= s1.c by A80,A82,SCMPDS_2:51
          .= (DataPart s1).c by A81,FUNCT_1:49,SCMPDS_2:84
          .= s2.c by A3,A81,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).c by A80,A83,SCMPDS_2:51
          .= (DataPart Exec (l,s2)).x by A81,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A84:    c = DataLoc(s1.a,k1);
        then
A85:    c = DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A81,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,k1) * s1.DataLoc(s1.b,k2) by A80,A84,SCMPDS_2:51
          .= s2.DataLoc(s2.a,k1) * s1.DataLoc(s1.b,k2) by A3,Th3
          .= s2.DataLoc(s2.a,k1) * s2.DataLoc(s2.b,k2) by A3,Th3
          .= (Exec (l,s2)).c by A80,A85,SCMPDS_2:51
          .= (DataPart Exec (l,s2)).x by A81,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A86: DataPart Exec (l,s1) = DataPart Exec (l,s2) by A10,A9,FUNCT_1:2;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A80,SCMPDS_2:51
      .= Exec (l,s2).IC SCMPDS by A80,SCMPDS_2:51;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A86,RELAT_1:150,SCMPDS_2:84;
  end;
  suppose
    InsCode (l) = 12;
    then consider a,b,k1,k2 such that
A87: l = Divide(a,k1,b,k2) by SCMPDS_2:38;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x
    = (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A88:  x in SCM-Data-Loc;
      then reconsider c = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A89:    c = DataLoc(s1.b,k2);
        then
A90:    c = DataLoc(s2.b,k2) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A88,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.a,k1) mod s1.DataLoc(s1.b,k2) by A87,A89,SCMPDS_2:52
          .= s2.DataLoc(s2.a,k1) mod s1.DataLoc(s1.b,k2) by A3,Th3
          .= s2.DataLoc(s2.a,k1) mod s2.DataLoc(s2.b,k2) by A3,Th3
          .= (Exec (l,s2)).c by A87,A90,SCMPDS_2:52
          .= (DataPart Exec (l,s2)).x by A88,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A91:    c <>DataLoc(s1.b,k2);
        then
A92:    c <>DataLoc(s2.b,k2) by A3,Th4;
        hereby
          per cases;
          suppose
A93:        c <> DataLoc(s1.a,k1);
            then
A94:        c <> DataLoc(s2.a,k1) by A3,Th4;
            thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A88,FUNCT_1:49
,SCMPDS_2:84
              .= s1.c by A87,A91,A93,SCMPDS_2:52
              .= s2.c by A3,Th4
              .= (Exec (l,s2)).c by A87,A92,A94,SCMPDS_2:52
              .= (DataPart Exec (l,s2)).x by A88,FUNCT_1:49,SCMPDS_2:84;
          end;
          suppose
A95:        c = DataLoc(s1.a,k1);
            then
A96:        c = DataLoc(s2.a,k1) by A3,Th4;
            thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A88,FUNCT_1:49
,SCMPDS_2:84
              .= s1.DataLoc(s1.a,k1) div s1.DataLoc(s1.b,k2) by A87,A91,A95,
SCMPDS_2:52
              .= s2.DataLoc(s2.a,k1) div s1.DataLoc(s1.b,k2) by A3,Th3
              .= s2.DataLoc(s2.a,k1) div s2.DataLoc(s2.b,k2) by A3,Th3
              .= (Exec (l,s2)).c by A87,A92,A96,SCMPDS_2:52
              .= (DataPart Exec (l,s2)).x by A88,FUNCT_1:49,SCMPDS_2:84;
          end;
        end;
      end;
    end;
    then
A97: DataPart Exec (l,s1) = DataPart Exec (l,s2) by A10,A9,FUNCT_1:2;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A87,SCMPDS_2:52
      .= Exec (l,s2).IC SCMPDS by A87,SCMPDS_2:52;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A97,RELAT_1:150,SCMPDS_2:84;
  end;
  suppose
    InsCode (l) = 13;
    then consider a,b,k1,k2 such that
A98: l = (a,k1):=(b,k2) by SCMPDS_2:39;
    for x being set st x in SCM-Data-Loc holds (DataPart Exec (l,s1)).x
    = (DataPart Exec (l,s2)).x
    proof
      let x be set;
      assume
A99:  x in SCM-Data-Loc;
      then reconsider c = x as Int_position by SCMPDS_2:3;
      per cases;
      suppose
A100:   c <>DataLoc(s1.a,k1);
        then
A101:   c <>DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A99,FUNCT_1:49
,SCMPDS_2:84
          .= s1.c by A98,A100,SCMPDS_2:47
          .= (DataPart s1).c by A99,FUNCT_1:49,SCMPDS_2:84
          .= s2.c by A3,A99,FUNCT_1:49,SCMPDS_2:84
          .= (Exec (l,s2)).c by A98,A101,SCMPDS_2:47
          .= (DataPart Exec (l,s2)).x by A99,FUNCT_1:49,SCMPDS_2:84;
      end;
      suppose
A102:   c = DataLoc(s1.a,k1);
        then
A103:   c = DataLoc(s2.a,k1) by A3,Th4;
        thus (DataPart Exec (l,s1)).x = (Exec (l,s1)).c by A99,FUNCT_1:49
,SCMPDS_2:84
          .= s1.DataLoc(s1.b,k2) by A98,A102,SCMPDS_2:47
          .= s2.DataLoc(s2.b,k2) by A3,Th3
          .= (Exec (l,s2)).c by A98,A103,SCMPDS_2:47
          .= (DataPart Exec (l,s2)).x by A99,FUNCT_1:49,SCMPDS_2:84;
      end;
    end;
    then
A104: DataPart Exec (l,s1) = DataPart Exec (l,s2) by A10,A9,FUNCT_1:2;
    Exec (l,s1).IC SCMPDS = succ IC s2 by A6,A98,SCMPDS_2:47
      .= Exec (l,s2).IC SCMPDS by A98,SCMPDS_2:47;
    then Exec (l,s1) | {IC SCMPDS} = Exec (l,s2) | {IC SCMPDS} by A8,
GRFUNC_1:29;
    hence thesis by A104,RELAT_1:150,SCMPDS_2:84;
  end;
end;

begin :: Finite partial states of SCMPDS

theorem
  for s being State of SCMPDS ,iloc being Element of NAT
  , a being Int_position holds s.a = (s +* Start-At(iloc,SCMPDS)).a
proof
  let s be State of SCMPDS, iloc be Element of NAT, a be
  Int_position;
  a in the carrier of SCMPDS;
  then a in dom s by PARTFUN1:def 2;
  then
A1: dom (Start-At(iloc,SCMPDS)) = {IC SCMPDS } &
 a in dom s \/ dom (Start-At(iloc,SCMPDS))
  by FUNCOP_1:13,XBOOLE_0:def 3;
  a <> IC SCMPDS by SCMPDS_2:43;
  then not a in {IC SCMPDS } by TARSKI:def 1;
  hence thesis by A1,FUNCT_4:def 1;
end;

theorem
  for s, t being State of SCMPDS holds s +* t|(SCM-Data-Loc ) is State
  of SCMPDS;

begin :: Autonomic finite partial states of SCMPDS and its computation

definition
  let la be Int_position;
  let a be Integer;
  redefine func la .--> a -> FinPartState of SCMPDS;
  coherence
  proof
    a is Element of INT & ObjectKind la = INT by INT_1:def 2,SCMPDS_2:5;
    hence thesis;
  end;
end;

registration
 cluster SCMPDS -> IC-recognized;
 coherence
  proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
   let p be q-autonomic FinPartState of SCMPDS such that
A1:   p is non empty;
   assume
A2: not IC SCMPDS in dom p;
  not IC SCMPDS in dom  p by A2;
  then
A3: dom  p misses {IC SCMPDS} by ZFMISC_1:50;
  dom  p c= {IC SCMPDS} \/ dom DataPart p by MEMSTR_0:32;
  then
A4: dom  p c= dom DataPart p by A3,XBOOLE_1:73;
A5: dom DataPart p <> {} by A1,A4,XBOOLE_1:3;
    DataPart p c=  p by MEMSTR_0:12;
    then
A6:  dom DataPart p c= dom  p by RELAT_1:11;
  p is not q-autonomic
  proof
    set il = the Element of (NAT) \ dom q;
    set d1 = the Element of dom DataPart p;
A7: d1 in dom DataPart p by A5;
    dom DataPart p c= the carrier of SCMPDS by RELAT_1:def 18;
    then reconsider d1 as Element of SCMPDS by A7;
    not NAT c= dom q;
    then
A8: (NAT) \ dom q <> {} by XBOOLE_1:37;
    then reconsider il as Element of NAT by XBOOLE_0:def 5;
B8:  not il in dom q by A8,XBOOLE_0:def 5;
    dom DataPart p c= SCM-Data-Loc by RELAT_1:58,SCMPDS_2:84;
    then reconsider d1 as Int_position by A7,SCMPDS_2:3;
     dom (Start-At(il,SCMPDS)) = {IC SCMPDS} by FUNCOP_1:13;
    then
A11: IC SCMPDS in dom (Start-At(il,SCMPDS)) by TARSKI:def 1;
A13: dom p misses {IC SCMPDS} by A2,ZFMISC_1:50;
    set p2 = p +* Start-At(il,SCMPDS);
    set p1 = p +* Start-At(il,SCMPDS);
    set q2 = q +* (il .--> (d1:=1));
    set q1 = q +* (il .--> (d1:=0));
UU:    dom (il .--> (d1:=1)) = {il} by FUNCOP_1:13;
    then
Y6: dom q misses dom (il .--> (d1:=1)) by B8,ZFMISC_1:50;
  dom (il .--> (d1:=0)) = {il} by FUNCOP_1:13;
    then
Y5: dom q misses dom (il .--> (d1:=0)) by B8,ZFMISC_1:50;
    consider s1 being State of SCMPDS such that
A14: p1 c= s1 by PBOOLE:141;
    consider S1 being Instruction-Sequence of SCMPDS
    such that
B14: q1 c= S1 by PBOOLE:145;
    consider s2 being State of SCMPDS such that
A15: p2 c= s2 by PBOOLE:141;
    consider S2 being Instruction-Sequence of SCMPDS
    such that
B15: q2 c= S2 by PBOOLE:145;
    take P1 = S1, P2 = S2;
    dom (Start-At(il,SCMPDS))
     = dom (Start-At(il,SCMPDS))
      .= { IC SCMPDS } by FUNCOP_1:13
      .= { IC SCMPDS };
    then dom p /\ dom Start-At(il,SCMPDS)
     =  dom p /\ {IC SCMPDS}
      .= {} by A13,XBOOLE_0:def 7
      .= {};
    then dom p misses dom (Start-At(il,SCMPDS)) by XBOOLE_0:def 7;
    then p c= p1 by FUNCT_4:32;
    then
A16: p c= s1 by A14,XBOOLE_1:1;
    q c= q1 by Y5,FUNCT_4:32;
    hence q c= P1 by B14,XBOOLE_1:1;
    dom (Start-At(il,SCMPDS))
     = dom
    (Start-At(il,SCMPDS))
      .= { IC SCMPDS } by FUNCOP_1:13
      .= { IC SCMPDS };
    then dom p /\ dom (Start-At(il,SCMPDS))
     =  dom p /\ {IC SCMPDS}
      .= {} by A13,XBOOLE_0:def 7
      .= {};
    then dom p misses dom (Start-At(il,SCMPDS)) by XBOOLE_0:def 7;
    then p c= p2 by FUNCT_4:32;
    then
A17: p c= s2 by A15,XBOOLE_1:1;
    q c= q2 by Y6,FUNCT_4:32;
    hence q c= P2 by B15,XBOOLE_1:1;
    take s1,s2;
     p c= s1 by A16;
    hence  p c= s1;
    thus  p c= s2 by A17;
    take 1;
A18: dom p2 = dom p \/ dom (Start-At(il,SCMPDS)) by FUNCT_4:def 1;
B18: dom q2 = dom q \/ dom (il .--> (d1:=1)) by FUNCT_4:def 1;
A20: IC SCMPDS in dom (Start-At(il,SCMPDS)) by A11;
    then IC SCMPDS in dom p2 by A18,XBOOLE_0:def 3;
    then
A21: IC s2 = p2.IC SCMPDS by A15,GRFUNC_1:2
      .= (Start-At(il,SCMPDS)).IC SCMPDS by A20,FUNCT_4:13
      .= (Start-At(il,SCMPDS)).IC SCMPDS
      .= il by FUNCOP_1:72;
    il in dom (il .--> (d1:=1)) by UU,TARSKI:def 1;
    then
A22: il in dom ((il .--> (d1:=1)));
    then il in dom q2 by B18,XBOOLE_0:def 3;
    then
A23: S2.il = q2.il by B15,GRFUNC_1:2
      .= ((il .--> (d1:=1))).il by A22,FUNCT_4:13
      .= (il .--> (d1:=1)).il
      .=(d1:=1) by FUNCOP_1:72;
A24:  S2/.IC s2 = S2.IC s2 by PBOOLE:143;
A25: Comput(S2,s2,0+1).d1 = (Following(S2,Comput(S2,s2,0))).d1 by EXTPRO_1:3
      .= (Following(S2,s2)).d1 by EXTPRO_1:2
      .= 1 by A21,A23,A24,SCMPDS_2:45;
A26:  dom  p c= the carrier of SCMPDS by RELAT_1:def 18;
    dom Comput(S1,s1,1) = the carrier of SCMPDS by PARTFUN1:def 2;
    then
A27: dom (Comput(S1,s1,1)|dom  p) = dom  p by A26,RELAT_1:62;
A29: dom p1 = dom p \/ dom (Start-At(il,SCMPDS)) by FUNCT_4:def 1;
B29: dom q1 = dom q \/ dom (il .--> (d1:=0)) by FUNCT_4:def 1;
A31: IC SCMPDS in dom (Start-At(il,SCMPDS)) by A11;
    then IC SCMPDS in dom p1 by A29,XBOOLE_0:def 3;
    then
A32: IC s1 = p1.IC SCMPDS by A14,GRFUNC_1:2
      .= (Start-At(il,SCMPDS)).IC SCMPDS by A31,FUNCT_4:13
      .= (Start-At(il,SCMPDS)).IC SCMPDS
      .= il by FUNCOP_1:72;
VV:  dom (il .--> (d1:=0)) = {il} by FUNCOP_1:13;
    il in dom (il .--> (d1:=0)) by VV,TARSKI:def 1;
    then
A33: il in dom(il .--> (d1:=0));
    then il in dom q1 by B29,XBOOLE_0:def 3;
    then
A34: S1.il = q1.il by B14,GRFUNC_1:2
      .= (il .--> (d1:=0)).il by A33,FUNCT_4:13
      .= (il .--> (d1:=0)).il
      .=(d1:=0) by FUNCOP_1:72;
A35:  S1/.IC s1 = S1.IC s1 by PBOOLE:143;
A36: dom ( Comput(S2,s2,1)) = the carrier of SCMPDS
       by PARTFUN1:def 2;
A37: dom ( Comput(S2,s2,1)|dom  p) = dom  p
       by A26,A36,RELAT_1:62;
    Comput(S1,s1,0+1).d1 =
    (Following(S1,Comput(S1,s1,0))).d1
    by EXTPRO_1:3
      .= (Following(S1,s1)).d1 by EXTPRO_1:2
      .= 0 by A32,A34,A35,SCMPDS_2:45;
    then
   (Comput(S1,s1,1)|dom  p).d1 = 0
     by A7,A27,A6,FUNCT_1:47;
    hence thesis by A25,A7,A37,A6,FUNCT_1:47;
  end;
  hence contradiction;
  end;
end;

theorem Th18:
  for s1,s2 being State of SCMPDS,k1,k2,m be Integer st IC s1= IC
  s2 & k1 <> k2 & m=IC s1 & m+k1 >= 0 & m+k2 >= 0 holds ICplusConst(s1,k1) <>
  ICplusConst(s2,k2)
proof
  let s1,s2 be State of SCMPDS,k1,k2,m be Integer;
  assume that
A1: IC s1 = IC s2 and
A2: k1<>k2 and
A3: m=IC s1 and
A4: m+k1 >= 0 and
A5: m+k2 >= 0;
  ex i being Element of NAT st i = IC s1 & ICplusConst(s1, k1)=abs(i+k1) by
SCMPDS_2:def 18;
  then
A6: ICplusConst(s1,k1)=m+k1 by A3,A4,ABSVALUE:def 1;
  assume
A7: ICplusConst(s1,k1) = ICplusConst(s2,k2);
  ex j being Element of NAT st j = IC s2 & ICplusConst(s2, k2)=abs(j+k2) by
SCMPDS_2:def 18;
  then ICplusConst(s2,k2)=m+k2 by A1,A3,A5,ABSVALUE:def 1;
  hence contradiction by A2,A7,A6;
end;

theorem
  for s1,s2 being State of SCMPDS,k1,k2 be Element of NAT st IC s1
  = IC s2 & k1 <> k2 holds ICplusConst(s1,k1) <> ICplusConst(s2,k2)
proof
  let s1,s2 be State of SCMPDS,k1,k2 be Element of NAT;
  reconsider m=IC s1 as Element of NAT;
  set mm=m+2;
  mm-2+k1=m+k1;
  then
A1: mm-2+k1>=0 by NAT_1:2;
  mm-2+k2=m+k2;
  then
A2: mm-2+k2>=0 by NAT_1:2;
  assume IC s1 = IC s2 & k1<>k2;
  hence thesis by A1,A2,Th18;
end;

theorem Th20:
  for s being State of SCMPDS holds succ IC s= ICplusConst(s,1)
proof
  let s be State of SCMPDS;
  consider j such that
A1: j = IC s and
A2: ICplusConst(s,1)=abs(j+1) by SCMPDS_2:def 18;
  reconsider mj = IC s as Element of NAT;
A3: j*1 >= 0 by NAT_1:2;
  j >= 0 by NAT_1:2;
  then succ IC s = abs(mj)+1 by A1,ABSVALUE:def 1
    .= abs(mj)+abs(1) by ABSVALUE:def 1
    .= abs(mj+1) by A1,A3,ABSVALUE:11;
  hence thesis by A1,A2;
end;

registration
 cluster SCMPDS -> CurIns-recognized;
 coherence
proof
  let q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s be State of SCMPDS such that
A1:  p c= s;
  let P be Instruction-Sequence of SCMPDS such that
A2: q c= P;
  let i be Element of NAT;
  set Csi = Comput(P,s,i);
  set loc = IC Csi;
  set loc1 = loc+1;
  assume not IC Comput(P,s,i) in dom q;
  then
A4: not loc in dom q;
  set I = the Int_position := 0;
  set q1 = q +* (loc .--> I);
  set q2 = q +* (loc .--> halt SCMPDS);
  reconsider P1 = P +* (loc .--> I) as Instruction-Sequence of SCMPDS;
  reconsider P2 = P +* (loc .--> halt SCMPDS)
     as Instruction-Sequence of SCMPDS;
A6: dom (loc .--> halt SCMPDS) = {loc} by FUNCOP_1:13;
  then
A7: loc in dom (loc .--> halt SCMPDS) by TARSKI:def 1;
A12: dom (loc .--> I) = {loc} by FUNCOP_1:13;
  then
A13: loc in dom (loc .--> I) by TARSKI:def 1;
Y6: dom q misses dom (loc .--> halt SCMPDS) by A4,A6,ZFMISC_1:50;
Y5: dom q misses dom (loc .--> I) by A4,A12,ZFMISC_1:50;
P3: q1 c= P1 by A2,FUNCT_4:123;
P4: q2 c= P2 by A2,FUNCT_4:123;
  set Cs2i = Comput(P2,s,i), Cs1i = Comput(P1,s,i);
  p is not q-autonomic
  proof
    (loc .--> halt SCMPDS).loc = halt SCMPDS by FUNCOP_1:72;
    then
A18:  P2.loc = halt SCMPDS by A7,FUNCT_4:13;
    (loc .--> I).loc = I by FUNCOP_1:72;
    then
A19:  P1.loc = I by A13,FUNCT_4:13;
    take P1, P2;
    q c= q1 by Y5,FUNCT_4:32;
    hence
A25:  q c= P1 by P3,XBOOLE_1:1;
    q c= q2 by Y6,FUNCT_4:32;
    hence
A27:  q c= P2 by P4,XBOOLE_1:1;
    take s, s;
    thus  p c= s by A1;
A28: (Cs1i|dom  p) = (Csi|dom  p) by A25,A2,A1,EXTPRO_1:def 10;
    thus  p c= s by A1;
A29: (Cs1i|dom  p) = (Cs2i|dom  p) by A25,A27,A1,EXTPRO_1:def 10;
    take k = i+1;
    set Cs1k = Comput(P1,s,k);
A33: IC SCMPDS in dom p by AMISTD_5:6;
 IC Csi = IC(Csi|dom  p) by A33,FUNCT_1:49;
    then
  IC Cs1i = loc by A28,A33,FUNCT_1:49;
    then
XX: CurInstr(P1,Cs1i) = P1.loc by PBOOLE:143
         .= I by A19;
A31: Cs1k = Following(P1,Cs1i) by EXTPRO_1:3
      .= Exec (CurInstr(P1,Cs1i), Cs1i)
      .= Exec(I,Cs1i) by XX;
A32:  IC Exec(I,Cs1i) = succ IC Cs1i by SCMPDS_2:45;
A33: IC SCMPDS in dom p by AMISTD_5:6;
A34: IC Csi = IC(Csi|dom  p) by A33,FUNCT_1:49;
    then IC Cs1i = loc by A28,A33,FUNCT_1:49;
    then
A35: IC Cs1k = succ loc by A31,A32
         .= loc1;
    set Cs2k = Comput(P2,s,k);
A36: Cs2k = Following(P2,Cs2i) by EXTPRO_1:3
      .= Exec (CurInstr(P2,Cs2i), Cs2i);
A37:  P2/.IC Cs2i = P2.IC Cs2i by PBOOLE:143;
    IC Cs2i = loc by A28,A34,A29,A33,FUNCT_1:49;
    then
A38: IC Cs2k = loc by A36,A18,A37,EXTPRO_1:def 3;
    IC(Cs1k|dom  p) = IC Cs1k & IC(Cs2k|dom  p) = IC Cs2k
     by A33,FUNCT_1:49;
    hence thesis by A35,A38;
  end;
  hence contradiction;
end;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2 &
 q c= P1 & q c= P2
 for i being Element of NAT,k1,k2 be
Integer,a,b be Int_position st CurInstr(P1,
Comput(P1,s1,i)) = (a,k1) := (b,k2)
& a in dom p & DataLoc(Comput(P1,s1,i).a,k1) in dom p holds Comput
(P1,s1,i)
.DataLoc(Comput(P1,s1,i).b,k2) = Comput(P2,s2,i).
DataLoc(Comput(P2,s2,i).b,k2)
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
B1:  p c= s1 &  p c= s2 by A1;
  let i be Element of NAT,k1,k2 be Integer,a,b be Int_position;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  assume that
A3: I = (a,k1) := (b,k2) and
A4: a in dom p and
A5: DataLoc(Cs1i.a,k1) in dom p;
  a in dom  p implies (Cs1i|dom  p).a = Cs1i.a &
      (Cs2i|dom  p).a = Cs2i.a
    by FUNCT_1:49;
  then
A6: Cs1i.a=Cs2i.a by A4,A2,B1,EXTPRO_1:def 10;
  set Cs1i1 = Comput(P1,s1,i+1);
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
  then
A7: Cs1i1.DataLoc(Cs1i.a,k1) = Cs1i.DataLoc(Cs1i.b,k2)
     by A3,SCMPDS_2:47;

  set Cs2i1 = Comput(P2,s2,i+1);
A8: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
A9: DataLoc(Cs1i.a,k1) in dom  p implies
 (Cs1i1|dom  p).DataLoc(Cs1i.a,k1) =
  Cs1i1.DataLoc(Cs1i.a,k1) &
   (Cs2i1|dom  p).DataLoc(Cs1i.a,k1) = Cs2i1.DataLoc(
  Cs1i.a,k1) by FUNCT_1:49;
  I = CurInstr(P2,Comput(P2,s2,i))
   by A1,A2,AMISTD_5:7;
  then Cs2i1.DataLoc(Cs2i.a,k1) = Cs2i.DataLoc(Cs2i.b,k2)
   by A8,A3,SCMPDS_2:47;
  hence thesis by A9,A5,A6,A7,A2,B1,EXTPRO_1:def 10;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2  &
 q c= P1 & q c= P2
for i being Element of NAT,k1,k2 be
Integer,a,b be Int_position st CurInstr(P1,
Comput(P1,s1,i)) = AddTo(a,k1,b,k2)
& a in dom p & DataLoc(Comput(P1,s1,i).a,k1) in dom p holds Comput
(P1,s1,i)
.DataLoc(Comput(P1,s1,i).b,k2) = Comput(P2,s2,i).
DataLoc(Comput(P2,s2,i).
  b,k2)
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
B1:  p c= s1 &  p c= s2 by A1;
  let i be Element of NAT,k1,k2 be Integer,a,b be Int_position;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  assume that
A3: I = AddTo(a,k1,b,k2) and
A4: a in dom p and
A5: DataLoc(Cs1i.a,k1) in dom p;
  a in dom  p implies
   (Cs1i|dom  p).a = Cs1i.a & (Cs2i|dom  p).a = Cs2i.a by FUNCT_1:49;
  then
A6: Cs1i.a=Cs2i.a by A4,A2,B1,EXTPRO_1:def 10;
  set Cs2i1 = Comput(P2,s2,i+1);
  set Cs1i1 = Comput(P1,s1,i+1);
  set D11=Cs1i1.DataLoc(Cs1i.a,k1), D21=Cs2i1.DataLoc(Cs2i.a,k1), C11=Cs1i.
  DataLoc(Cs1i.a,k1), C12=Cs1i.DataLoc(Cs1i.b,k2), C21=Cs2i.DataLoc(Cs2i.a,k1),
  C22=Cs2i.DataLoc(Cs2i.b,k2);
A7: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
  DataLoc(Cs1i.a,k1) in dom  p implies
   (Cs1i1|dom  p).DataLoc(Cs1i.a,k1) =
  Cs1i1.DataLoc(Cs1i.a,k1) &
   (Cs2i1|dom  p).DataLoc(Cs1i.a,k1) = Cs2i1.DataLoc(
  Cs1i.a,k1) by FUNCT_1:49;
  then
A8: D11 = D21 by A5,A6,A2,B1,EXTPRO_1:def 10;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
  then
A9: D11 = C11+ C12 by A3,SCMPDS_2:49;
  DataLoc(Cs1i.a,k1) in dom  p
   implies (Cs1i|dom  p).DataLoc(Cs1i.a,k1) =
Cs1i.DataLoc(Cs1i.a,k1) &
 (Cs2i|dom  p).DataLoc(Cs1i.a,k1) = Cs2i.DataLoc(Cs1i.a
  ,k1) by FUNCT_1:49;
  then
A10: C11=C21 by A5,A6,A2,B1,EXTPRO_1:def 10;
  I = CurInstr(P2,Comput(P2,s2,i))
   by A1,A2,AMISTD_5:7;
  then D21 = C21 + C22 by A7,A3,SCMPDS_2:49;
  hence thesis by A10,A8,A9;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2 &
 q c= P1 & q c= P2
for i being Element of NAT,k1,k2 be
Integer,a,b be Int_position st CurInstr(P1,
Comput(P1,s1,i)) = SubFrom(a,k1,b,k2
) & a in dom p & DataLoc(Comput(P1,s1,i).a,k1) in dom p holds
Comput(P1,s1,
i).DataLoc(Comput(P1,s1,i).b,k2) = Comput(P2,s2,i).
DataLoc(Comput(P2,s2,i
  ).b,k2)
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
B1:  p c= s1 &  p c= s2 by A1;
  let i be Element of NAT,k1,k2 be Integer,a,b be Int_position;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  assume that
A3: I = SubFrom(a,k1,b,k2) and
A4: a in dom p and
A5: DataLoc(Cs1i.a,k1) in dom p;
  a in dom  p implies
   (Cs1i|dom  p).a = Cs1i.a & (Cs2i|dom  p).a = Cs2i.a by FUNCT_1:49;
  then
A6: Cs1i.a=Cs2i.a by A4,A2,B1,EXTPRO_1:def 10;
  set Cs2i1 = Comput(P2,s2,i+1);
  set Cs1i1 = Comput(P1,s1,i+1);
  set D11=Cs1i1.DataLoc(Cs1i.a,k1), D21=Cs2i1.DataLoc(Cs2i.a,k1), C11=Cs1i.
  DataLoc(Cs1i.a,k1), C12=Cs1i.DataLoc(Cs1i.b,k2), C21=Cs2i.DataLoc(Cs2i.a,k1),
  C22=Cs2i.DataLoc(Cs2i.b,k2);
A7: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
  DataLoc(Cs1i.a,k1) in dom  p
   implies (Cs1i1|dom  p).DataLoc(Cs1i.a,k1) =
  Cs1i1.DataLoc(Cs1i.a,k1) &
  (Cs2i1|dom  p).DataLoc(Cs1i.a,k1) = Cs2i1.DataLoc(
  Cs1i.a,k1) by FUNCT_1:49;
  then
A8: D11 = D21 by A5,A6,A2,B1,EXTPRO_1:def 10;
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
  then
A9: D11 = C11- C12 by A3,SCMPDS_2:50;
  DataLoc(Cs1i.a,k1) in dom  p
   implies (Cs1i|dom  p).DataLoc(Cs1i.a,k1) =
Cs1i.DataLoc(Cs1i.a,k1) &
 (Cs2i|dom  p).DataLoc(Cs1i.a,k1) = Cs2i.DataLoc(Cs1i.a
  ,k1) by FUNCT_1:49;
  then
A10: C11=C21 by A5,A6,A2,B1,EXTPRO_1:def 10;
  I = CurInstr(P2,Comput(P2,s2,i))
   by A1,A2,AMISTD_5:7;
  then D21 = C21 - C22 by A7,A3,SCMPDS_2:50;
  hence thesis by A10,A8,A9;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2 &
 q c= P1 & q c= P2
for i being Element of NAT,k1,k2 be
Integer,a,b be Int_position st CurInstr(P1,
Comput(P1,s1,i)) = MultBy(a,k1,b,k2)
& a in dom p & DataLoc(Comput(P1,s1,i).a,k1) in dom p holds Comput
(P1,s1,i)
.DataLoc(Comput(P1,s1,i).a,k1) * Comput(P1,s1,i).
DataLoc(Comput(P1,s1,i).
b,k2) = Comput(P2,s2,i).DataLoc(Comput(P2,s2,i).a,k1)
* Comput(P2,s2,i).
  DataLoc(Comput(P2,s2,i).b,k2)
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
B1:  p c= s1 &  p c= s2 by A1;
  let i be Element of NAT,k1,k2 be Integer,a,b be Int_position;
  set I = CurInstr(P1,Comput(P1,s1,i));
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  assume that
A3: I = MultBy (a,k1,b,k2) and
A4: a in dom p and
A5: DataLoc(Cs1i.a,k1) in dom p;
  a in dom  p implies
   (Cs1i|dom  p).a = Cs1i.a & (Cs2i|dom  p).a = Cs2i.a by FUNCT_1:49;
  then
A6: Cs1i.a=Cs2i.a by A4,A2,B1,EXTPRO_1:def 10;
  set Cs2i1 = Comput(P2,s2,i+1);
  set Cs1i1 = Comput(P1,s1,i+1);
  set D11=Cs1i1.DataLoc(Cs1i.a,k1), D21=Cs2i1.DataLoc(Cs2i.a,k1);
  Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
  then
A7: D11 = Cs1i.DataLoc(Cs1i.a,k1) * Cs1i.DataLoc(Cs1i.b,k2) by A3,SCMPDS_2:51;
A8: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
A9: DataLoc(Cs1i.a,k1) in dom  p
 implies (Cs1i1|dom  p).DataLoc(Cs1i.a,k1) =
  Cs1i1.DataLoc(Cs1i.a,k1) &
   (Cs2i1|dom  p).DataLoc(Cs1i.a,k1) = Cs2i1.DataLoc(
  Cs1i.a,k1) by FUNCT_1:49;
  I = CurInstr(P2,Comput(P2,s2,i))
   by A1,A2,AMISTD_5:7;
  then D21 = Cs2i.DataLoc(Cs2i.a,k1) * Cs2i.DataLoc(Cs2i.b,k2) by A8,A3,
SCMPDS_2:51;
  hence thesis by A9,A5,A6,A7,A2,B1,EXTPRO_1:def 10;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2  &
 q c= P1 & q c= P2
for i,m being Element of NAT,a being
Int_position,k1,k2 be Integer st CurInstr(P1,
Comput(P1,s1,i)) = (a,k1)<>0_goto
  k2 & m= IC Comput(P1,s1,i) & m+k2 >= 0 & k2 <> 1 holds (Comput(
P1,s1,i).
DataLoc(Comput(P1,s1,i).a,k1) = 0 iff Comput(P2,s2,i)
.DataLoc(Comput(P2,s2,i).a,k1) = 0 )
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
  let i,m be Element of NAT,a be Int_position,k1,k2 be Integer;
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: IC Cs1i = IC Cs2i & (Cs1i1|dom  p) = (Cs2i1|dom  p)
       by A1,A2,AMISTD_5:7,EXTPRO_1:def 10;
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
A5: m+1>=0 by NAT_1:2;
 IC SCMPDS in dom p by AMISTD_5:6;
 then IC SCMPDS in dom  p;
 then
A6: (Cs1i1|dom  p).IC SCMPDS = Cs1i1.IC SCMPDS &
 (Cs2i1|dom  p).IC SCMPDS =
  Cs2i1. IC SCMPDS by FUNCT_1:49;
A7: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
  assume that
A8: I = (a,k1)<>0_goto k2 and
A9: m= IC Cs1i & m+k2 >= 0 & k2 <> 1;
A10: I = CurInstr(P2,Comput(P2,s2,i))
 by A1,A2,AMISTD_5:7;
A11: now
    assume that
A12: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) = 0 and
A13: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) <> 0;
A14: Cs1i1.IC SCMPDS = ICplusConst(Cs1i,k2) by A4,A8,A13,SCMPDS_2:55;
    Cs2i1.IC SCMPDS = succ IC Cs2i by A10,A7,A8,A12,SCMPDS_2:55
      .=ICplusConst(Cs2i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A14,Th18;
  end;
  now
    assume that
A15: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) = 0 and
A16: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) <> 0;
A17: Cs2i1.IC SCMPDS = ICplusConst(Cs2i,k2) by A10,A7,A8,A16,SCMPDS_2:55;
    Cs1i1.IC SCMPDS = succ IC Cs1i by A4,A8,A15,SCMPDS_2:55
      .=ICplusConst(Cs1i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A17,Th18;
  end;
  hence thesis by A11;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2 &
 q c= P1 & q c= P2
for i,m being Element of NAT,a being
Int_position,k1,k2 be Integer st CurInstr(P1,
Comput(P1,s1,i)) = (a,k1)<=0_goto
  k2 & m= IC Comput(P1,s1,i) & m+k2 >= 0 & k2 <> 1 holds (Comput(
P1,s1,i).
DataLoc(Comput(P1,s1,i).a,k1) > 0 iff Comput(P2,s2,i)
.DataLoc(Comput(P2,
  s2,i).a,k1) > 0 )
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
      s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
  let i,m be Element of NAT,a be Int_position,k1,k2 be Integer;
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: IC Cs1i = IC Cs2i & (Cs1i1|dom  p) = (Cs2i1|dom  p)
           by A1,A2,AMISTD_5:7,EXTPRO_1:def 10;
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
A5: m+1>=0 by NAT_1:2;
 IC SCMPDS in dom p by AMISTD_5:6;
 then IC SCMPDS in dom  p;
 then
A6: (Cs1i1|dom  p).IC SCMPDS =
 Cs1i1.IC SCMPDS & (Cs2i1|dom  p).IC SCMPDS =
  Cs2i1. IC SCMPDS by FUNCT_1:49;
A7: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
  assume that
A8: I = (a,k1)<=0_goto k2 and
A9: m= IC Cs1i & m+k2 >= 0 & k2 <> 1;
A10: I = CurInstr(P2,Comput(P2,s2,i))
 by A1,A2,AMISTD_5:7;
A11: now
    assume that
A12: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) > 0 and
A13: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) <= 0;
A14: Cs1i1.IC SCMPDS = ICplusConst(Cs1i,k2) by A4,A8,A13,SCMPDS_2:56;
    Cs2i1.IC SCMPDS = succ IC Cs2i by A10,A7,A8,A12,SCMPDS_2:56
      .=ICplusConst(Cs2i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A14,Th18;
  end;
  now
    assume that
A15: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) > 0 and
A16: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) <= 0;
A17: Cs2i1.IC SCMPDS = ICplusConst(Cs2i,k2) by A10,A7,A8,A16,SCMPDS_2:56;
    Cs1i1.IC SCMPDS = succ IC Cs1i by A4,A8,A15,SCMPDS_2:56
      .=ICplusConst(Cs1i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A17,Th18;
  end;
  hence thesis by A11;
end;

theorem
  for q be non halt-free finite
   (the Instructions of SCMPDS)-valued NAT-defined Function
  for p being q-autonomic non empty FinPartState of SCMPDS, s1, s2
being State of SCMPDS st  p c= s1 &  p c= s2  &
 q c= P1 & q c= P2
for i,m being Element of NAT,a being
Int_position,k1,k2 be Integer st CurInstr(P1,
Comput(P1,s1,i)) = (a,k1)>=0_goto
  k2 & m= IC Comput(P1,s1,i) & m+k2 >= 0 & k2 <> 1 holds (Comput(
P1,s1,i).
DataLoc(Comput(P1,s1,i).a,k1) < 0 iff Comput(P2,s2,i)
.DataLoc(Comput(P2,
  s2,i).a,k1) < 0 )
proof
   let q be non halt-free finite
    (the Instructions of SCMPDS)-valued NAT-defined Function;
  let p be q-autonomic non empty FinPartState of SCMPDS,
     s1, s2 be State
  of SCMPDS such that
A1:  p c= s1 &  p c= s2 and
A2: q c= P1 & q c= P2;
  let i,m be Element of NAT,a be Int_position,k1,k2 be Integer;
  set Cs1i = Comput(P1,s1,i);
  set Cs2i = Comput(P2,s2,i);
  set Cs1i1 = Comput(P1,s1,i+1);
  set Cs2i1 = Comput(P2,s2,i+1);
A3: IC Cs1i = IC Cs2i & (Cs1i1|dom  p) = (Cs2i1|dom  p)
        by A1,A2,AMISTD_5:7,EXTPRO_1:def 10;
  set I = CurInstr(P1,Comput(P1,s1,i));
A4: Cs1i1 = Following(P1,Cs1i) by EXTPRO_1:3
    .= Exec (CurInstr(P1,Cs1i), Cs1i);
A5: m+1>=0 by NAT_1:2;
 IC SCMPDS in dom p by AMISTD_5:6;
 then IC SCMPDS in dom  p;
 then
A6: (Cs1i1|dom  p).IC SCMPDS = Cs1i1.IC SCMPDS &
(Cs2i1|dom  p).IC SCMPDS =
  Cs2i1. IC SCMPDS by FUNCT_1:49;
A7: Cs2i1 = Following(P2,Cs2i) by EXTPRO_1:3
    .= Exec (CurInstr(P2,Cs2i), Cs2i);
  assume that
A8: I = (a,k1)>=0_goto k2 and
A9: m= IC Cs1i & m+k2 >= 0 & k2 <> 1;
A10: I = CurInstr(P2,Comput(P2,s2,i))
 by A1,A2,AMISTD_5:7;
A11: now
    assume that
A12: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) < 0 and
A13: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) >= 0;
A14: Cs1i1.IC SCMPDS = ICplusConst(Cs1i,k2) by A4,A8,A13,SCMPDS_2:57;
    Cs2i1.IC SCMPDS = succ IC Cs2i by A10,A7,A8,A12,SCMPDS_2:57
      .=ICplusConst(Cs2i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A14,Th18;
  end;
  now
    assume that
A15: Comput(P1,s1,i).DataLoc(Cs1i.a,k1) < 0 and
A16: Comput(P2,s2,i).DataLoc(Cs2i.a,k1) >= 0;
A17: Cs2i1.IC SCMPDS = ICplusConst(Cs2i,k2) by A10,A7,A8,A16,SCMPDS_2:57;
    Cs1i1.IC SCMPDS = succ IC Cs1i by A4,A8,A15,SCMPDS_2:57
      .=ICplusConst(Cs1i,1) by Th20;
    hence contradiction by A6,A3,A9,A5,A17,Th18;
  end;
  hence thesis by A11;
end;

