:: Some Remarks on Simple Concrete Model of Computer
::  by Andrzej Trybulec and Yatsuka Nakamura
::
:: Received October 8, 1993
:: Copyright (c) 1993 Association of Mizar Users

environ

 vocabularies NUMBERS, SUBSET_1, STRUCT_0, AMI_1, AMI_2, FUNCT_7, XBOOLE_0,
      RELAT_1, TARSKI, ZFMISC_1, CAT_1, FSM_1, FUNCT_1, INT_1, NAT_1, GRAPHSP,
      FINSEQ_1, CARD_1, ORDINAL1, ARYTM_3, ARYTM_1, FUNCOP_1, XXREAL_0,
      GLIB_000, FUNCT_4, AMI_3, RECDEF_2, COMPOS_1, AMISTD_2;
 notations TARSKI, XBOOLE_0, ENUMSET1, SUBSET_1, ORDINAL1, XCMPLX_0, FUNCT_1,
      XXREAL_0, INT_1, NAT_1, ZFMISC_1, MCART_1, FUNCOP_1, CARD_1, CARD_3,
      RELAT_1, FUNCT_4, FUNCT_7, FINSEQ_1, RECDEF_2, NUMBERS,
      STRUCT_0, COMPOS_1, EXTPRO_1, AMI_2;
 constructors DOMAIN_1, XXREAL_0, FINSEQ_4, CAT_2, AMI_2, RELSET_1,
      PRE_POLY, RECDEF_2, EXTPRO_1;
 registrations XBOOLE_0, SETFAM_1, ORDINAL1, FUNCOP_1, NUMBERS, XREAL_0, INT_1,
      CARD_3, AMI_2, XXREAL_0, FUNCT_1, FINSEQ_1, FUNCT_2, RELSET_1,
      COMPOS_1, EXTPRO_1;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions RELAT_1, COMPOS_1, EXTPRO_1, FUNCOP_1, AMI_2, CARD_1, NAT_1,
      STRUCT_0;
 theorems TARSKI, ZFMISC_1, ENUMSET1, AMI_2, FUNCOP_1, FUNCT_4, CARD_3,
      FUNCT_2, MCART_1, INT_1, STRUCT_0, ORDINAL1, XBOOLE_0, XBOOLE_1, FUNCT_7,
      ARYTM_3, XXREAL_0, NAT_1, RELAT_1, FINSEQ_1, FUNCT_1, PARTFUN1, PBOOLE,
      RECDEF_2, COMPOS_1, EXTPRO_1;

begin :: A small concrete machine

reserve i,j,k for Element of NAT;

definition
  func SCM -> strict AMI-Struct over { INT } equals
  AMI-Struct(#
    SCM-Memory,In(NAT,SCM-Memory),SCM-Instr,
    In([0,{},{}],SCM-Instr),
    SCM-OK,SCM-Exec#);
  coherence;
end;

Lm1: NAT c= SCM-Memory by XBOOLE_1:7;

registration
  cluster SCM -> non empty stored-program standard-ins;
  coherence
  proof
    thus SCM is non empty stored-program by COMPOS_1:def 2,STRUCT_0:def 1,Lm1;
    consider X being non empty set such that
A1:   proj2 SCM-Instr c= X* by FINSEQ_1:106;
    take X;
A2:   SCM-Instr c= [: NAT,NAT*,proj2 SCM-Instr:] by AMI_2:34;
     [: NAT,NAT*,proj2 SCM-Instr:] c= [: NAT,NAT*,X*:] by A1,MCART_1:77;
     then SCM-Instr c= [: NAT,NAT*,X*:] by A2,XBOOLE_1:1;
    hence the Instructions of SCM c= [: NAT,NAT*,X*:];
  end;
end;

registration
 cluster NAT-defined -> (the carrier of SCM)-defined Function;
 coherence
  proof let F be Function;
   assume
A1:  dom F c= NAT;
   thus dom F c= the carrier of SCM by A1,XBOOLE_1:1,Lm1;
  end;
end;

canceled 2;

  [0,{},{}] in SCM-Instr by AMI_2:2;
  then the haltF of SCM = [0,{},{}] by FUNCT_7:def 1;
  then
Lm2: halt SCM = [0,{},{}];

registration
  cluster SCM -> proper-halt IC-Ins-separated definite;
  coherence
  proof
    JumpPart halt SCM is empty by Lm2,RECDEF_2:def 2;
    then halt SCM is ins-loc-free by COMPOS_1:def 37;
   hence SCM is proper-halt by COMPOS_1:def 39;
    IC SCM = NAT by AMI_2:30,FUNCT_7:def 1;
    then ObjectKind IC SCM = NAT by AMI_2:def 5;
    hence SCM is IC-Ins-separated by COMPOS_1:def 6;
  let l be Element of NAT;
  thus thesis by AMI_2:11;
  end;
end;

definition
  mode Data-Location -> Object of SCM means
    :Def2:
    it in SCM-Data-Loc;
  existence
  proof
    set x =the  Element of SCM-Data-Loc;
    reconsider x as Object of SCM;
    take x;
    thus thesis;
  end;
end;

definition
  let s be State of SCM, d be Data-Location;
  redefine func s.d -> Integer;
  coherence
  proof
    reconsider D = d as Element of SCM-Data-Loc by Def2;
    reconsider S = s as SCM-State by PBOOLE:155;
    S.D = s.d;
    hence thesis;
  end;
end;

reserve a,b,c for Data-Location,
  loc for Nat,
  I for Instruction of SCM;

definition
  let a,b;
  func a := b -> Instruction of SCM equals
  [ 1, {}, <*a, b*>];
  correctness
  proof
    reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
    1 in { 1,2,3,4,5} by ENUMSET1:def 3;
    then [ 1, {}, <*mk, ml*>] in SCM-Instr by AMI_2:5;
    hence thesis;
  end;
  func AddTo(a,b) -> Instruction of SCM equals
  [ 2, {}, <*a, b*>];
  correctness
  proof
    reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
    2 in { 1,2,3,4,5} by ENUMSET1:def 3;
    then [ 2, {}, <*mk, ml*>] in SCM-Instr by AMI_2:5;
    hence thesis;
  end;
  func SubFrom(a,b) -> Instruction of SCM equals
  [ 3, {}, <*a, b*>];
  correctness
  proof
    reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
    3 in { 1,2,3,4,5} by ENUMSET1:def 3;
    then [ 3, {}, <*mk, ml*>] in SCM-Instr by AMI_2:5;
    hence thesis;
  end;
  func MultBy(a,b) -> Instruction of SCM equals
  [ 4, {}, <*a, b*>];
  correctness
  proof
    reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
    4 in { 1,2,3,4,5} by ENUMSET1:def 3;
    then [ 4, {}, <*mk, ml*>] in SCM-Instr by AMI_2:5;
    hence thesis;
  end;
  func Divide(a,b) -> Instruction of SCM equals
  [ 5, {}, <*a, b*>];
  correctness
  proof
    reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
    5 in { 1,2,3,4,5} by ENUMSET1:def 3;
    then [ 5, {}, <*mk, ml*>] in SCM-Instr by AMI_2:5;
    hence thesis;
  end;
end;

definition
  let loc;
  func SCM-goto loc -> Instruction of SCM equals
  [ 6, <*loc*>, {} ];
  correctness
  proof
    loc in NAT by ORDINAL1:def 13;
    hence thesis by AMI_2:3;
  end;
  let a;
  func a=0_goto loc -> Instruction of SCM equals
  [ 7, <*loc*>, <*a*>];
  correctness
  proof
    reconsider a as Element of SCM-Data-Loc by Def2;
    reconsider loc as Element of NAT by ORDINAL1:def 13;
    7 in { 7,8 } by TARSKI:def 2;
    then [ 7, <*loc*>, <*a*>] in SCM-Instr by AMI_2:4;
    hence thesis;
  end;
  func a>0_goto loc -> Instruction of SCM equals
  [ 8, <*loc*>, <*a*>];
  correctness
  proof
    reconsider a as Element of SCM-Data-Loc by Def2;
    reconsider loc as Element of NAT by ORDINAL1:def 13;
    8 in { 7,8 } by TARSKI:def 2;
    then [ 8, <*loc*>, <*a*>] in SCM-Instr by AMI_2:4;
    hence thesis;
  end;
end;

reserve s for State of SCM;

canceled;

theorem Th4:
  IC SCM = NAT by AMI_2:30,FUNCT_7:def 1;

begin :: Users guide

canceled 3;

theorem Th8:
  Exec(a:=b, s).IC SCM = succ IC s & Exec(a:=b, s).a = s.b & for c
  st c <> a holds Exec(a:=b, s).c = s.c
proof
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
  reconsider I = a:=b as Element of SCM-Instr;
  set S1 = SCM-Chg(S, I address_1,S.(I address_2));
  reconsider i = 1 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, {}, <*mk, ml*>];
  then
A2: I address_1 = mk by AMI_2:23;
A3: I address_2 = ml by A1,AMI_2:23;
A4: Exec(a:=b, s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S1, succ IC S)) by A1,AMI_2:def 16;
  hence Exec(a:=b, s).IC SCM = succ IC s by Th4,AMI_2:16;
  thus Exec(a:=b, s).a = S1.mk by A4,AMI_2:17
    .= s.b by A2,A3,AMI_2:20;
  let c;
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  assume
A5: c <> a;
  thus Exec(a:=b, s).c = S1.mn by A4,AMI_2:17
    .= s.c by A2,A5,AMI_2:21;
end;

theorem Th9:
  Exec(AddTo(a,b), s).IC SCM = succ IC s & Exec(AddTo(a,b), s).a =
  s.a + s.b & for c st c <> a holds Exec(AddTo(a,b), s).c = s.c
proof
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
  reconsider I = AddTo(a,b) as Element of SCM-Instr;
  set S1 = SCM-Chg(S, I address_1,S.(I address_1)+S.(I address_2));
  reconsider i = 2 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, {}, <*mk, ml*>];
  then
A2: I address_1 = mk by AMI_2:23;
A3: I address_2 = ml by A1,AMI_2:23;
A4: Exec(AddTo(a,b), s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S1, succ IC S)) by A1,AMI_2:def 16;
  hence Exec(AddTo(a,b), s).IC SCM = succ IC s by Th4,AMI_2:16;
  thus Exec(AddTo(a,b), s).a = S1.mk by A4,AMI_2:17
    .= s.a + s.b by A2,A3,AMI_2:20;
  let c;
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  assume
A5: c <> a;
  thus Exec(AddTo(a,b), s).c = S1.mn by A4,AMI_2:17
    .= s.c by A2,A5,AMI_2:21;
end;

theorem Th10:
  Exec(SubFrom(a,b), s).IC SCM = succ IC s & Exec(SubFrom(a,b), s)
  .a = s.a - s.b & for c st c <> a holds Exec(SubFrom(a,b), s).c = s.c
proof
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
  reconsider I = SubFrom(a,b) as Element of SCM-Instr;
  set S1 = SCM-Chg(S, I address_1,S.(I address_1)-S.(I address_2));
  reconsider i = 3 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, {}, <*mk, ml*>];
  then
A2: I address_1 = mk by AMI_2:23;
A3: I address_2 = ml by A1,AMI_2:23;
A4: Exec(SubFrom(a,b), s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S1, succ IC S)) by A1,AMI_2:def 16;
  hence Exec(SubFrom(a,b), s).IC SCM = succ IC s by Th4,AMI_2:16;
  thus Exec(SubFrom(a,b), s).a = S1.mk by A4,AMI_2:17
    .= s.a - s.b by A2,A3,AMI_2:20;
  let c;
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  assume
A5: c <> a;
  thus Exec(SubFrom(a,b), s).c = S1.mn by A4,AMI_2:17
    .= s.c by A2,A5,AMI_2:21;
end;

theorem Th11:
  Exec(MultBy(a,b), s).IC SCM = succ IC s & Exec(MultBy(a,b), s).a
  = s.a * s.b & for c st c <> a holds Exec(MultBy(a,b), s).c = s.c
proof
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
  reconsider I = MultBy(a,b) as Element of SCM-Instr;
  set S1 = SCM-Chg(S, I address_1,S.(I address_1)*S.(I address_2));
  reconsider i = 4 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, {}, <*mk, ml*>];
  then
A2: I address_1 = mk by AMI_2:23;
A3: I address_2 = ml by A1,AMI_2:23;
A4: Exec(MultBy(a,b), s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S1, succ IC S)) by A1,AMI_2:def 16;
  hence Exec(MultBy(a,b), s).IC SCM = succ IC s by Th4,AMI_2:16;
  thus Exec(MultBy(a,b), s).a = S1.mk by A4,AMI_2:17
    .= s.a * s.b by A2,A3,AMI_2:20;
  let c;
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  assume
A5: c <> a;
  thus Exec(MultBy(a,b), s).c = S1.mn by A4,AMI_2:17
    .= s.c by A2,A5,AMI_2:21;
end;

theorem Th12:
  Exec(Divide(a,b), s).IC SCM = succ IC s & (a <> b implies Exec(
Divide(a,b), s).a = s.a div s.b) & Exec(Divide(a,b), s).b = s.a mod s.b & for c
  st c <> a & c <> b holds Exec(Divide(a,b), s).c = s.c
proof
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider mk = a, ml = b as Element of SCM-Data-Loc by Def2;
  reconsider I = Divide(a,b) as Element of SCM-Instr;
  set S1 = SCM-Chg(S, I address_1,S.(I address_1) div S.(I address_2));
  set S19 = SCM-Chg(S1, I address_2,S.(I address_1) mod S.(I address_2));
  reconsider i = 5 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, {}, <*mk, ml*>];
  then
A2: I address_1 = mk by AMI_2:23;
A3: Exec(Divide(a,b), s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S19, succ IC S)) by A1,AMI_2:def 16;
  hence Exec(Divide(a,b), s).IC SCM = succ IC s by Th4,AMI_2:16;
A4: I address_2 = ml by A1,AMI_2:23;
  hereby
    assume
A5: a <> b;
    thus Exec(Divide(a,b), s).a = S19.mk by A3,AMI_2:17
      .= S1.mk by A4,A5,AMI_2:21
      .= s.a div s.b by A2,A4,AMI_2:20;
  end;
  thus Exec(Divide(a,b), s).b = S19.ml by A3,AMI_2:17
    .= s.a mod s.b by A2,A4,AMI_2:20;
  let c;
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  assume that
A6: c <> a and
A7: c <> b;
  thus Exec(Divide(a,b), s).c = S19.mn by A3,AMI_2:17
    .= S1.mn by A4,A7,AMI_2:21
    .= s.c by A2,A6,AMI_2:21;
end;

theorem
  Exec(SCM-goto loc, s).IC SCM = loc & Exec(SCM-goto loc, s).c = s.c
proof
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  reconsider mj = loc as Element of NAT by ORDINAL1:def 13;
  reconsider I = SCM-goto loc as Element of SCM-Instr;
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider i = 6 as Element of Segm 9 by NAT_1:45;
A1: I = [ i, <*mj*>, {} ];
A2: Exec(SCM-goto loc, s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= (SCM-Chg(S,I jump_address)) by A1,AMI_2:def 16;
  I jump_address = mj by A1,AMI_2:24;
  hence Exec(SCM-goto loc, s).IC SCM = loc by A2,Th4,AMI_2:16;
  thus Exec(SCM-goto loc, s).c = S.mn by A2,AMI_2:17
    .= s.c;
end;

theorem Th14:
  (s.a = 0 implies Exec(a =0_goto loc, s).IC SCM = loc) & (s.a <>
0 implies Exec(a=0_goto loc, s).IC SCM = succ IC s) & Exec(a=0_goto loc, s).c =
  s.c
proof
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  reconsider I = a=0_goto loc as Element of SCM-Instr;
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider i = 7 as Element of Segm 9 by NAT_1:45;
  reconsider a9 = a as Element of SCM-Data-Loc by Def2;
  reconsider mj = loc as Element of NAT by ORDINAL1:def 13;
A1: I = [ i, <*mj*>, <*a9*>];
A2: Exec(a=0_goto loc, s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= SCM-Chg(S,IFEQ(S.(I cond_address),0,I cjump_address,succ IC S)) by A1,
AMI_2:def 16;
  thus s.a = 0 implies Exec(a=0_goto loc, s).IC SCM = loc
  proof
    assume s.a = 0;
    then
A3: S.(I cond_address)=0 by A1,AMI_2:25;
    thus Exec(a=0_goto loc, s).IC SCM = IFEQ(S.(I cond_address),0,I
    cjump_address,succ IC S) by A2,Th4,AMI_2:16
      .= I cjump_address by A3,FUNCOP_1:def 8
      .= loc by A1,AMI_2:25;
  end;
  thus s.a <> 0 implies Exec(a=0_goto loc, s).IC SCM = succ IC s
  proof
    assume s.a <> 0;
    then
A4: S.(I cond_address) <> 0 by A1,AMI_2:25;
    thus Exec(a=0_goto loc, s).IC SCM = IFEQ(S.(I cond_address),0,I
    cjump_address,succ IC S) by A2,Th4,AMI_2:16
      .= succ IC s by A4,Th4,FUNCOP_1:def 8;
  end;
  thus Exec(a=0_goto loc, s).c = S.mn by A2,AMI_2:17
    .= s.c;
end;

theorem Th15:
  (s.a > 0 implies Exec(a >0_goto loc, s).IC SCM = loc) & (s.a <=
0 implies Exec(a>0_goto loc, s).IC SCM = succ IC s) & Exec(a>0_goto loc, s).c =
  s.c
proof
  reconsider mn = c as Element of SCM-Data-Loc by Def2;
  reconsider I = a>0_goto loc as Element of SCM-Instr;
  reconsider S = s as SCM-State by PBOOLE:155;
  reconsider i = 8 as Element of Segm 9 by NAT_1:45;
  reconsider a9 = a as Element of SCM-Data-Loc by Def2;
  reconsider mj = loc as Element of NAT by ORDINAL1:def 13;
A1: I = [ i, <*mj*>, <*a9*>];
A2: Exec(a>0_goto loc, s) = SCM-Exec-Res(I,S) by AMI_2:def 17
    .= SCM-Chg(S,IFGT(S.(I cond_address),0,I cjump_address,succ IC S)) by A1,
AMI_2:def 16;
  thus s.a > 0 implies Exec(a>0_goto loc, s).IC SCM = loc
  proof
    assume s.a > 0;
    then
A3: S.(I cond_address) > 0 by A1,AMI_2:25;
    thus Exec(a>0_goto loc, s).IC SCM = IFGT(S.(I cond_address),0,I
    cjump_address,succ IC S) by A2,Th4,AMI_2:16
      .= I cjump_address by A3,XXREAL_0:def 11
      .= loc by A1,AMI_2:25;
  end;
  thus s.a <= 0 implies Exec(a>0_goto loc, s).IC SCM = succ IC s
  proof
    assume s.a <= 0;
    then
A4: S.(I cond_address) <= 0 by A1,AMI_2:25;
    thus Exec(a>0_goto loc, s).IC SCM = IFGT(S.(I cond_address),0,I
    cjump_address,succ IC S) by A2,Th4,AMI_2:16
      .= succ IC s by A4,Th4,XXREAL_0:def 11;
  end;
  thus Exec(a>0_goto loc, s).c = S.mn by A2,AMI_2:17
    .= s.c;
end;

reserve Y,K,T for Element of Segm 9,
  a1,a2,a3 for Element of NAT,
  b1,b2,c1,c2,
  c3 for Element of SCM-Data-Loc;

Lm3: for I being Instruction of SCM st ex s st Exec(I,s).IC SCM = succ IC s
holds I is non halting

proof
  let I be Instruction of SCM;
  given s such that
A1: Exec(I, s).IC SCM = succ IC s;
  assume I is halting;
  then Exec(I,s).IC SCM = s.NAT by Th4,EXTPRO_1:def 3;
  hence contradiction by A1,Th4;
  IC s = s.NAT by AMI_2:30,FUNCT_7:def 1;
  then reconsider w = s.NAT as Element of NAT;
end;

Lm4: for I being Instruction of SCM st I = [0,{},{}] holds I is halting
proof
  let I be Instruction of SCM;
  assume
A1: I = [0,{},{}];
  then
A2: I`3_3 = {} by RECDEF_2:def 3;
  then
A3: ( not(ex mk, ml being Element of SCM-Data-Loc st I = [ 1, {}, <*mk, ml*>]))
  &
  not( ex mk, ml being Element of SCM-Data-Loc st I = [ 2, {}, <*mk, ml*>])
   by RECDEF_2:def 3;

A4: ( not(ex mk being Element of NAT, ml being Element of SCM-Data-Loc st I
  = [ 7, <*mk*>, <*ml*>]))& not(ex mk being Element of NAT, ml being Element of
  SCM-Data-Loc st I = [ 8, <*mk*>, <*ml*>]) by A2,RECDEF_2:def 3;
   I`2_3 = {} by A1,RECDEF_2:def 2;
   then
A5: ( not(ex mk, ml being Element of SCM-Data-Loc st
    I = [ 5, {}, <*mk, ml*>]))
  &
not( ex mk being Element of NAT st I = [ 6, <*mk*>, {}])
 by A2,RECDEF_2:def 2,def 3;

  reconsider L = I as Element of SCM-Instr;
  let s be State of SCM;
  reconsider t = s as SCM-State by PBOOLE:155;

A6: ( not(ex mk, ml being Element of SCM-Data-Loc st I = [ 3, {}, <*mk, ml*>]))
  &
  not( ex mk, ml being Element of SCM-Data-Loc st I = [ 4, {}, <*mk, ml*>])
   by A2,RECDEF_2:def 3;

  thus Exec(I,s) = SCM-Exec-Res(L,t) by AMI_2:def 17
    .= s by A3,A6,A5,A4,AMI_2:def 16;
end;

Lm5: a := b is non halting
proof
  set s =the  State of SCM;
  Exec(a:=b,s).IC SCM = succ IC s by Th8;
  hence thesis by Lm3;
end;

Lm6: AddTo(a,b) is non halting
proof
  set s =the  State of SCM;
  Exec(AddTo(a,b),s).IC SCM = succ IC s by Th9;
  hence thesis by Lm3;
end;

Lm7: SubFrom(a,b) is non halting
proof
  set s =the  State of SCM;
  Exec(SubFrom(a,b),s).IC SCM = succ IC s by Th10;
  hence thesis by Lm3;
end;

Lm8: MultBy(a,b) is non halting
proof
  set s =the  State of SCM;
  Exec(MultBy(a,b),s).IC SCM = succ IC s by Th11;
  hence thesis by Lm3;
end;

Lm9: Divide(a,b) is non halting
proof
  set s =the  State of SCM;
  Exec(Divide(a,b),s).IC SCM = succ IC s by Th12;
  hence thesis by Lm3;
end;

Lm10: SCM-goto loc is non halting
proof
  set f = the Object-Kind of SCM;
  set s =the  SCM-State;
  assume
A1: SCM-goto loc is halting;
  reconsider a3 = loc as Element of NAT by ORDINAL1:def 13;
  reconsider V = SCM-goto loc as Element of SCM-Instr;
  set t = s +* (NAT.--> succ a3);
A2: dom s = the carrier of SCM by PARTFUN1:def 4;
A3: dom(NAT .--> succ a3) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT.--> succ a3) by TARSKI:def 1;
  then
A4: t.NAT = (NAT.--> succ a3).NAT by FUNCT_4:14
    .= succ a3 by FUNCOP_1:87;
A5: for x being set st x in dom f holds t.x in f.x
  proof
    let x be set such that
A6: x in dom f;
    per cases;
    suppose
A7:   x = NAT;
      then f.x = NAT by AMI_2:7,30;
      hence thesis by A4,A7;
    end;
    suppose
      x <> NAT;
      then not x in dom (NAT.--> succ a3) by A3,TARSKI:def 1;
      then t.x = s.x by FUNCT_4:12;
      hence thesis by A6,CARD_3:18;
    end;
  end;
A8: {NAT} c= SCM-Memory by AMI_2:30,ZFMISC_1:37;
A9: dom t = dom s \/ dom (NAT.--> succ a3) by FUNCT_4:def 1
    .= SCM-Memory \/ dom (NAT.--> succ a3) by A2
    .= SCM-Memory \/ {NAT} by FUNCOP_1:19
    .= SCM-Memory by A8,XBOOLE_1:12;
  dom f = SCM-Memory by FUNCT_2:def 1;
  then reconsider t as State of SCM by A9,A5,FUNCT_1:def 20,PARTFUN1:def 4
,RELAT_1:def 18;
  reconsider w = t as SCM-State by PBOOLE:155;
  dom(NAT .--> loc) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT .--> loc) by TARSKI:def 1;
  then
A10: (w +* (NAT .--> loc)).NAT = (NAT .--> loc).NAT by FUNCT_4:14
    .= loc by FUNCOP_1:87;
  6 is Element of Segm 9 by NAT_1:45;
  then w +* (NAT .--> loc) = SCM-Chg(w,V jump_address) by AMI_2:24
    .= SCM-Exec-Res(V,w) by AMI_2:def 16
    .= Exec(SCM-goto loc,t) by AMI_2:def 17
    .= t by A1,EXTPRO_1:def 3;
  hence contradiction by A4,A10;
end;

Lm11: a=0_goto loc is non halting
proof
  set f = the Object-Kind of SCM;
  set s =the  SCM-State;
  reconsider V = a=0_goto loc as Element of SCM-Instr;
  reconsider a3 = loc as Element of NAT by ORDINAL1:def 13;
  set t = s +* (NAT.--> succ a3);
A1: {NAT} c= SCM-Memory by AMI_2:30,ZFMISC_1:37;
A2: dom s = the carrier of SCM by PARTFUN1:def 4;
A3: dom t = dom s \/ dom (NAT.--> succ a3) by FUNCT_4:def 1
    .= SCM-Memory \/ dom (NAT.--> succ a3) by A2
    .= SCM-Memory \/ {NAT} by FUNCOP_1:19
    .= SCM-Memory by A1,XBOOLE_1:12;
A4: 7 is Element of Segm 9 by NAT_1:45;
A5: dom(NAT .--> succ a3) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT.--> succ a3) by TARSKI:def 1;
  then
A6: t.NAT = (NAT.--> succ a3).NAT by FUNCT_4:14
    .= succ a3 by FUNCOP_1:87;
A7: for x being set st x in dom f holds t.x in f.x
  proof
    let x be set such that
A8: x in dom f;
    per cases;
    suppose
A9:   x = NAT;
      then f.x = NAT by AMI_2:7,30;
      hence thesis by A6,A9;
    end;
    suppose
      x <> NAT;
      then not x in dom (NAT.--> succ a3) by A5,TARSKI:def 1;
      then t.x = s.x by FUNCT_4:12;
      hence thesis by A8,CARD_3:18;
    end;
  end;
  dom f = SCM-Memory by FUNCT_2:def 1;
  then reconsider t as State of SCM by A3,A7,FUNCT_1:def 20,PARTFUN1:def 4
,RELAT_1:def 18;
  reconsider w = t as SCM-State by PBOOLE:155;
  dom(NAT .--> loc) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT .--> loc) by TARSKI:def 1;
  then
A10: (w +* (NAT .--> loc)).NAT = (NAT .--> loc).NAT by FUNCT_4:14
    .= loc by FUNCOP_1:87;
  assume
A11: a=0_goto loc is halting;
A12: a is Element of SCM-Data-Loc by Def2;
  per cases;
  suppose
A13: w.(V cond_address) <> 0;
    IC w = w.NAT;
    then reconsider e = w.NAT as Element of NAT;
    IC t = IC w & t.a <> 0 by A4,A12,A13,AMI_2:25,30,FUNCT_7:def 1;
    then
A14: Exec(a=0_goto loc,t).IC SCM = succ e by Th14;
    Exec(a=0_goto loc,t).IC SCM = w.NAT by A11,Th4,EXTPRO_1:def 3;
    hence contradiction by A14;
  end;
  suppose
    w.(V cond_address) = 0;

    then IFEQ(w.(V cond_address),0,V cjump_address,succ IC w) = V
    cjump_address by FUNCOP_1:def 8;

    then w +* (NAT .--> loc) = SCM-Chg(w,IFEQ(w.(V cond_address),0,V
    cjump_address,succ IC w)) by A4,A12,AMI_2:25

      .= SCM-Exec-Res(V,w) by A12,AMI_2:def 16
      .= Exec(a=0_goto loc,t) by AMI_2:def 17
      .= t by A11,EXTPRO_1:def 3;
    hence contradiction by A6,A10;
  end;
end;

Lm12: a>0_goto loc is non halting
proof
  set f = the Object-Kind of SCM;
  set s =the  SCM-State;
  reconsider V = a>0_goto loc as Element of SCM-Instr;
  reconsider a3 = loc as Element of NAT by ORDINAL1:def 13;
  set t = s +* (NAT.--> succ a3);
A1: {NAT} c= SCM-Memory by AMI_2:30,ZFMISC_1:37;
A2: dom s = the carrier of SCM by PARTFUN1:def 4;
A3: dom t = dom s \/ dom (NAT.--> succ a3) by FUNCT_4:def 1
    .= SCM-Memory \/ dom (NAT.--> succ a3) by A2
    .= SCM-Memory \/ {NAT} by FUNCOP_1:19
    .= SCM-Memory by A1,XBOOLE_1:12;
A4: 8 is Element of Segm 9 by NAT_1:45;
A5: dom(NAT .--> succ a3) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT.--> succ a3) by TARSKI:def 1;
  then
A6: t.NAT = (NAT.--> succ a3).NAT by FUNCT_4:14
    .= succ a3 by FUNCOP_1:87;
A7: for x being set st x in dom f holds t.x in f.x
  proof
    let x be set such that
A8: x in dom f;
    per cases;
    suppose
A9:   x = NAT;
      then f.x = NAT by AMI_2:7,30;
      hence thesis by A6,A9;
    end;
    suppose
      x <> NAT;
      then not x in dom (NAT.--> succ a3) by A5,TARSKI:def 1;
      then t.x = s.x by FUNCT_4:12;
      hence thesis by A8,CARD_3:18;
    end;
  end;
  dom f = SCM-Memory by FUNCT_2:def 1;
  then reconsider t as State of SCM by A3,A7,FUNCT_1:def 20,PARTFUN1:def 4
,RELAT_1:def 18;
  reconsider w = t as SCM-State by PBOOLE:155;
  dom(NAT .--> loc) = {NAT} by FUNCOP_1:19;
  then NAT in dom (NAT .--> loc) by TARSKI:def 1;
  then
A10: (w +* (NAT .--> loc)).NAT = (NAT .--> loc).NAT by FUNCT_4:14
    .= loc by FUNCOP_1:87;
  assume
A11: a>0_goto loc is halting;
A12: a is Element of SCM-Data-Loc by Def2;
  per cases;
  suppose
A13: w.(V cond_address) <= 0;
    IC w = w.NAT;
    then reconsider e = w.NAT as Element of NAT;
    IC t = IC w & t.a <= 0 by A4,A12,A13,AMI_2:25,30,FUNCT_7:def 1;
    then
A14: Exec(a>0_goto loc,t).IC SCM = succ e by Th15;
    Exec(a>0_goto loc,t).IC SCM = w.NAT by A11,Th4,EXTPRO_1:def 3;
    hence contradiction by A14;
  end;
  suppose
    w.(V cond_address) > 0;

    then IFGT(w.(V cond_address),0,V cjump_address,succ IC w) = V
    cjump_address by XXREAL_0:def 11;

    then w +* (NAT .--> loc) = SCM-Chg(w,IFGT(w.(V cond_address),0,V
    cjump_address,succ IC w)) by A4,A12,AMI_2:25

      .= SCM-Exec-Res(V,w) by A12,AMI_2:def 16
      .= Exec(a>0_goto loc,t) by AMI_2:def 17
      .= t by A11,EXTPRO_1:def 3;
    hence contradiction by A6,A10;
  end;
end;

Lm13: for I being set holds I is Instruction of SCM iff I = [0,{},{}]
  or (ex a,b st I = a:=b) or (ex a,b st I = AddTo(a,b)) or
  (ex a,b st I = SubFrom(a,b)) or (
ex a,b st I = MultBy(a,b)) or (ex a,b st I = Divide(a,b)) or (ex loc st I =
SCM-goto loc) or (ex a,loc st I = a=0_goto loc) or ex a,loc
 st I = a>0_goto loc

proof
  let I be set;

  thus I is Instruction of SCM implies I = [0,{},{}]
   or (ex a,b st I = a:=b) or (
  ex a,b st I = AddTo(a,b)) or (ex a,b st I = SubFrom(a,b)) or (ex a,b st I =

MultBy(a,b)) or (ex a,b st I = Divide(a,b)) or (ex loc st I = SCM-goto loc)
 or (ex
  a,loc st I = a=0_goto loc) or ex a,loc st I = a>0_goto loc

  proof
    assume I is Instruction of SCM;

    then
    I in { [SCM-Halt,{},{}] } \/ { [Y,<*a3*>,{}] : Y = 6 }
     \/ { [K,<*a1*>, <*b1*>] :
    K in { 7,8 } } or I in { [T,{},<*c2,c3*>] : T in { 1,2,3,4,5 } } by
XBOOLE_0:def 3;

    then
A1: I in { [SCM-Halt,{},{}] } \/ { [Y,<*a3*>,{}] : Y = 6 } or
 I in { [K,<*a1*>,<*b1*>]: K in { 7,8 } }
  or I in { [T,{},<*c2,c3*>] : T in { 1,2,3,4,5 } } by XBOOLE_0:def 3;

    per cases by A1,XBOOLE_0:def 3;
    suppose
      I in { [SCM-Halt,{},{}] };
      hence thesis by TARSKI:def 1;
    end;
    suppose
      I in { [Y,<*a3*>,{}] : Y = 6 };
      then consider Y, a3 such that
A2:   I = [Y,<*a3*>,{}] & Y = 6;
      I = SCM-goto a3 by A2;
      hence thesis;
    end;
    suppose
      I in { [K,<*a1*>,<*b1*>]: K in { 7,8 } };
      then consider K, a1, b1 such that
A3:   I = [K,<*a1*>,<*b1*>]& K in { 7,8 };
      reconsider a = b1 as Data-Location by Def2;
      reconsider loc = a1 as Element of NAT;
      I = a=0_goto a1 or I = a>0_goto a1 by A3,TARSKI:def 2;
      hence thesis;
    end;
    suppose
      I in { [T,{},<*c2,c3*>] : T in { 1,2,3,4,5 } };
      then consider T, c2, c3 such that
A4:   I = [T,{},<*c2,c3*>] & T in { 1,2,3,4,5 };
      reconsider a = c2, b = c3 as Data-Location by Def2;

      I = a:=b or I = AddTo(a,b) or I = SubFrom(a,b) or I = MultBy(a,b)
      or I = Divide(a,b) by A4,ENUMSET1:def 3;

      hence thesis;
    end;
  end;
  thus thesis by AMI_2:2;
end;

Lm14: for W being Instruction of SCM st W is halting holds W = [0,{},{}]
proof
  set I = [0,{},{}];
  let W be Instruction of SCM such that
A1: W is halting;
  assume
A2: I <> W;
  per cases by Lm13;
  suppose
    W = [0,{},{}];
    hence thesis by A2;
  end;
  suppose
    ex a,b st W = a:=b;
    hence thesis by A1,Lm5;
  end;
  suppose
    ex a,b st W = AddTo(a,b);
    hence thesis by A1,Lm6;
  end;
  suppose
    ex a,b st W = SubFrom(a,b);
    hence thesis by A1,Lm7;
  end;
  suppose
    ex a,b st W = MultBy(a,b);
    hence thesis by A1,Lm8;
  end;
  suppose
    ex a,b st W = Divide(a,b);
    hence thesis by A1,Lm9;
  end;
  suppose
    ex loc st W = SCM-goto loc;
    hence thesis by A1,Lm10;
  end;
  suppose
    ex a,loc st W = a=0_goto loc;
    hence thesis by A1,Lm11;
  end;
  suppose
    ex a,loc st W = a>0_goto loc;
    hence thesis by A1,Lm12;
  end;
end;

registration
  cluster SCM -> halting;
  coherence
  proof
    [0,{},{}] in SCM-Instr by AMI_2:2;
    then the haltF of SCM = [0,{},{}] by FUNCT_7:def 1;
   hence the haltF of SCM is halting by Lm4;
  end;
end;

Lm15: halt SCM = [0,{},{}] by Lm14;

begin :: Small concrete model

canceled 35;

theorem Th51:
  SCM is realistic
proof
  assume the ZeroF of SCM in NAT;
  hence contradiction by Th4;
end;

registration
  cluster SCM -> realistic;
  coherence
  proof
    thus thesis by Th51;
  end;
end;

definition
  let k be natural number;
  canceled 8;
  func dl.k -> Data-Location equals
  [1,k];
  coherence
  proof
    reconsider k as Element of NAT by ORDINAL1:def 13;
    1 in {1} by TARSKI:def 1;
    then [1,k] in SCM-Data-Loc by ZFMISC_1:106;
    hence thesis by Def2;
  end;
 canceled;
end;

reserve i,j,k for natural number;

theorem
  i <> j implies dl.i <> dl.j by ZFMISC_1:33;

canceled 2;

theorem Th55:
  for l being Data-Location holds ObjectKind l = INT
proof
  let l be Data-Location;
  l in SCM-Data-Loc by Def2;
  hence thesis by AMI_2:10;
end;

definition
  let la be Data-Location;
  let a be Integer;
  redefine func la .--> a -> FinPartState of SCM;
  coherence
  proof
    a is Element of INT & ObjectKind la = INT by Th55,INT_1:def 2;
    hence thesis by COMPOS_1:5;
  end;
end;

definition
  let la,lb be Data-Location;
  let a, b be Integer;
  redefine func (la,lb) --> (a,b) -> FinPartState of SCM;
  coherence
  proof
A1: a is Element of INT & b is Element of INT by INT_1:def 2;
    ObjectKind la = INT & ObjectKind lb = INT by Th55;
    hence thesis by A1,COMPOS_1:4;
  end;
end;

theorem
  dl.i <> j
proof
  j in NAT by ORDINAL1:def 13;
  hence thesis by ARYTM_3:38;
end;

theorem
  IC SCM <> dl.i & IC SCM <> i
proof
  thus IC SCM <> dl.i by Th4,ARYTM_3:36;
  assume IC SCM = i;
  then IC SCM in NAT by ORDINAL1:def 13;
  hence contradiction by Th4;
end;

begin  :: Halt Instruction

theorem
  for I being Instruction of SCM st ex s st Exec(I,s).IC SCM = succ IC s
  holds I is non halting by Lm3;

theorem
  for I being Instruction of SCM st I = [0,{},{}] holds I is halting by Lm4;

theorem
  a := b is non halting by Lm5;

theorem
  AddTo(a,b) is non halting by Lm6;

theorem
  SubFrom(a,b) is non halting by Lm7;

theorem
  MultBy(a,b) is non halting by Lm8;

theorem
  Divide(a,b) is non halting by Lm9;

theorem
  SCM-goto loc is non halting by Lm10;

theorem
  a=0_goto loc is non halting by Lm11;

theorem
  a>0_goto loc is non halting by Lm12;

canceled;

theorem
  for I being set holds I is Instruction of SCM iff I = [0,{},{}] or (ex a,
b st I = a:=b) or (ex a,b st I = AddTo(a,b)) or (ex a,b st I = SubFrom(a,b)) or
  (ex a,b st I = MultBy(a,b)) or (ex a,b st I = Divide(a,b)) or (ex loc st I =
SCM-goto loc) or (ex a,loc st I = a=0_goto loc) or
 ex a,loc st I = a>0_goto loc by Lm13;

theorem
  for I being Instruction of SCM st I is halting holds I = halt SCM by Lm14
,Lm15;

theorem
  halt SCM = [0,{},{}] by Lm14;

theorem Th72:
  Data-Locations SCM = SCM-Data-Loc
proof
  SCM-Data-Loc misses {NAT} by AMI_2:27,ZFMISC_1:56;
  then
A1: SCM-Data-Loc misses {NAT} \/ NAT by AMI_2:29,XBOOLE_1:70;
  thus Data-Locations SCM = {NAT} \/ SCM-Data-Loc \/ NAT \ ({NAT} \/ NAT) by
AMI_2:30,FUNCT_7:def 1
    .= SCM-Data-Loc \/ ({NAT} \/ NAT) \ ({NAT} \/ NAT) by XBOOLE_1:4
    .= SCM-Data-Loc \ ({NAT} \/ NAT) by XBOOLE_1:40
    .= SCM-Data-Loc by A1,XBOOLE_1:83;
end;

theorem
 for d being Data-Location holds
  d in Data-Locations SCM
proof let d be Data-Location;
 d in SCM-Data-Loc by Def2;
 hence thesis by Th72;
end;
