:: On the Instructions of { \bf SCM }
::  by Artur Korni{\l}owicz
::
:: Received May 8, 2001
:: Copyright (c) 2001 Association of Mizar Users

environ

 vocabularies NUMBERS, AMI_3, AMI_1, FSM_1, ORDINAL1, AMI_2, CAT_1, XBOOLE_0,
      FUNCT_7, FUNCT_1, RELAT_1, STRUCT_0, FINSEQ_1, CARD_1, AMISTD_2, GRAPHSP,
      CARD_3, AMISTD_1, SUBSET_1, CIRCUIT2, FUNCT_4, FUNCOP_1, SETFAM_1,
      ZFMISC_1, XXREAL_0, TARSKI, ARYTM_3, GOBOARD5, FRECHET, ARYTM_1,
      INT_1, UNIALG_1, CARD_5, PARTFUN1, NAT_1, SCMNORM;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, RELAT_1, FUNCT_1, FUNCT_2,
      REALSET1, ORDINAL1, NAT_1, NUMBERS, XCMPLX_0, INT_1, FUNCOP_1, PARTFUN1,
      FINSEQ_1, FUNCT_4, XXREAL_0, MCART_1, VALUED_1, STRUCT_0, CARD_3,
      FUNCT_7, COMPOS_1, EXTPRO_1, AMI_2, AMI_3, AMISTD_1, AMISTD_2;
 constructors XXREAL_0, NAT_1, NAT_D, REALSET1, AMI_5, AMISTD_2, RELSET_1,
      RECDEF_2, MCART_1, VALUED_1, AMI_2, EXTPRO_1, AMI_1;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, ORDINAL1, FUNCOP_1,
      NUMBERS, XREAL_0, NAT_1, INT_1, FINSEQ_1, CARD_3, AMI_1, AMI_3, AMISTD_2,
      RELSET_1, ZFMISC_1, FUNCT_2, FUNCT_4, VALUED_0, COMPOS_1, EXTPRO_1;
 requirements NUMERALS, BOOLE, SUBSET, REAL, ARITHM;
 definitions TARSKI, FUNCT_1, FUNCT_7, AMISTD_1, AMISTD_2, XBOOLE_0, AMI_3,
      FUNCOP_1, AMI_2, COMPOS_1, EXTPRO_1, CARD_3, NAT_1, MCART_1;
 theorems TARSKI, NAT_1, AMI_1, AMI_3, FUNCT_4, AMI_5, FUNCT_1,
      FUNCOP_1, SETFAM_1, AMI_2, AMISTD_1, MCART_1, FINSEQ_1,
      AMISTD_2, FUNCT_7, CARD_3, XBOOLE_0, XBOOLE_1, NAT_D, RELAT_1, ORDINAL1,
      PARTFUN1, PBOOLE, RECDEF_2, VALUED_1, COMPOS_1, EXTPRO_1;

begin

reserve a, b, d1, d2 for Data-Location,
  il, i1, i2 for Element of NAT,
  I for Instruction of SCM,
  s, s1, s2 for State of SCM,
  T for InsType of SCM,
  k,k1 for natural number;

theorem Th1:
  not a in NAT
proof
  a in SCM-Data-Loc by AMI_3:def 2;
  hence thesis by AMI_2:29,XBOOLE_0:3;
end;

theorem
  SCM-Data-Loc <> NAT by AMI_2:12;

theorem Th3:
  for o being Object of SCM holds o = IC SCM or o in NAT or o is
  Data-Location
proof
  let o be Object of SCM;
  o in {IC SCM} \/ Data-Locations SCM or
   o in NAT by AMI_5:23,XBOOLE_0:def 3;
  then o in {IC SCM} or o in Data-Locations SCM
   or o in NAT by XBOOLE_0:def 3;
  hence thesis by AMI_3:72,def 2,TARSKI:def 1;
end;

canceled;

theorem Th5:
  s1,s2 equal_outside NAT implies s1.a = s2.a
proof
  assume
A1: s1,s2 equal_outside NAT;
A2: not a in NAT by Th1;
  dom s2 = the carrier of SCM by PARTFUN1:def 4;
  then a in dom s2 \ NAT by A2,XBOOLE_0:def 5;
  then
A3: a in dom s2 /\ (dom s2 \ NAT) by XBOOLE_0:def 4;
  dom s1 = the carrier of SCM by PARTFUN1:def 4;
  then a in dom s1 \ NAT by A2,XBOOLE_0:def 5;
  then a in dom s1 /\ (dom s1 \ NAT) by XBOOLE_0:def 4;
  hence s1.a = (s1|(dom s1 \ NAT)).a by FUNCT_1:71
    .= (s2|(dom s2 \ NAT)).a by A1,FUNCT_7:def 2
    .= s2.a by A3,FUNCT_1:71;
end;


registration
 cluster InsCodes SCM -> non empty;
 coherence;
end;

canceled;

theorem
Lm3: T = 0 or T = 1 or T = 2 or T = 3 or T = 4 or T = 5 or T = 6 or T = 7 or T
= 8

proof
  consider y being set such that
B1: [T,y] in proj1 the Instructions of SCM by RELAT_1:def 4;
  consider x being set such that
A1: [[T,y],x] in the Instructions of SCM by B1,RELAT_1:def 4;
   reconsider I = [T,y,x] as Instruction of SCM by A1;
   T = InsCode I by RECDEF_2:def 1;
  hence thesis by AMI_5:36,NAT_1:33;
end;

canceled;

theorem Th7:
  JumpPart halt SCM = {};

canceled 8;

theorem Th16:
  T = 0 implies JumpParts T = {0}
proof
  assume
A1: T = 0;
  hereby
    let a be set;
    assume a in JumpParts T;
    then consider I such that
A2: a = JumpPart I and
A3: InsCode I = T;
    I = halt SCM by A1,A3,AMI_5:46;
    hence a in {0} by A2,Th7,TARSKI:def 1;
  end;
  let a be set;
  assume a in {0};
  then a = 0 by TARSKI:def 1;
  hence thesis by A1,Th7,AMI_5:37;
end;

theorem Th17:
  T = 1 implies JumpParts T = {{}}
proof
  assume
A1: T = 1;
  hereby
    let x be set;
    assume x in JumpParts T;
     then consider I being Instruction of SCM such that
W1:   x = JumpPart I and
W2:   InsCode I = T;
     consider a,b such that
W3:   I = a:=b by A1,W2,AMI_5:47;
     x = {} by W1,W3,RECDEF_2:def 2;
    hence x in {{}} by TARSKI:def 1;
  end;
  set a = the Data-Location;
  let x be set;
  assume x in {{}};
   then x = {} by TARSKI:def 1;
   then
X:  x = JumpPart(a:= a) by RECDEF_2:def 2;
    InsCode(a:= a) = 1 by RECDEF_2:def 1;
  hence thesis by X,A1;
end;

theorem Th18:
  T = 2 implies JumpParts T = {{}}
proof
  assume
A1: T = 2;
  hereby
    let x be set;
    assume x in JumpParts T;
     then consider I being Instruction of SCM such that
W1:   x = JumpPart I and
W2:   InsCode I = T;
     consider a,b such that
W3:   I = AddTo(a,b) by A1,W2,AMI_5:48;
     x = {} by W1,W3,RECDEF_2:def 2;
    hence x in {{}} by TARSKI:def 1;
  end;
  set a = the Data-Location;
  let x be set;
  assume x in {{}};
   then x = {} by TARSKI:def 1;
   then
X:  x = JumpPart AddTo(a,a) by RECDEF_2:def 2;
    InsCode AddTo(a,a) = 2 by RECDEF_2:def 1;
  hence thesis by X,A1;
end;

theorem Th19:
  T = 3 implies JumpParts T = {{}}
proof
  assume
A1: T = 3;
  hereby
    let x be set;
    assume x in JumpParts T;
     then consider I being Instruction of SCM such that
W1:   x = JumpPart I and
W2:   InsCode I = T;
     consider a,b such that
W3:   I = SubFrom(a,b) by A1,W2,AMI_5:49;
     x = {} by W1,W3,RECDEF_2:def 2;
    hence x in {{}} by TARSKI:def 1;
  end;
  set a = the Data-Location;
  let x be set;
  assume x in {{}};
   then x = {} by TARSKI:def 1;
   then
X:  x = JumpPart SubFrom(a,a) by RECDEF_2:def 2;
    InsCode SubFrom(a,a) = 3 by RECDEF_2:def 1;
  hence thesis by X,A1;
end;

theorem Th20:
  T = 4 implies JumpParts T = {{}}
proof
  assume
A1: T = 4;
  hereby
    let x be set;
    assume x in JumpParts T;
     then consider I being Instruction of SCM such that
W1:   x = JumpPart I and
W2:   InsCode I = T;
     consider a,b such that
W3:   I = MultBy(a,b) by A1,W2,AMI_5:50;
     x = {} by W1,W3,RECDEF_2:def 2;
    hence x in {{}} by TARSKI:def 1;
  end;
  set a = the Data-Location;
  let x be set;
  assume x in {{}};
   then x = {} by TARSKI:def 1;
   then
X:  x = JumpPart MultBy(a,a) by RECDEF_2:def 2;
    InsCode MultBy(a,a) = 4 by RECDEF_2:def 1;
  hence thesis by X,A1;
end;

theorem Th21:
  T = 5 implies JumpParts T = {{}}
proof
  assume
A1: T = 5;
  hereby
    let x be set;
    assume x in JumpParts T;
     then consider I being Instruction of SCM such that
W1:   x = JumpPart I and
W2:   InsCode I = T;
     consider a,b such that
W3:   I = Divide(a,b) by A1,W2,AMI_5:51;
     x = {} by W1,W3,RECDEF_2:def 2;
    hence x in {{}} by TARSKI:def 1;
  end;
  set a = the Data-Location;
  let x be set;
  assume x in {{}};
   then x = {} by TARSKI:def 1;
   then
X:  x = JumpPart Divide(a,a) by RECDEF_2:def 2;
    InsCode Divide(a,a) = 5 by RECDEF_2:def 1;
  hence thesis by X,A1;
end;

theorem Th22:
  T = 6 implies dom product" JumpParts T = {1}
proof
  consider i1;
  assume
A1: T = 6;
A2: JumpPart SCM-goto i1 = <*i1*> by RECDEF_2:def 2;
  hereby
    let x be set;
    InsCode SCM-goto i1 = 6 by RECDEF_2:def 1;
    then
A3: JumpPart SCM-goto i1 in JumpParts T by A1;
    assume x in dom product" JumpParts T;
    then x in dom JumpPart SCM-goto i1 by A3,CARD_3:def 13;
    hence x in {1} by A2,FINSEQ_1:4,def 8;
  end;
  let x be set;
  assume
A4: x in {1};
  for f being Function st f in JumpParts T holds x in dom f
  proof
    let f be Function;
    assume f in JumpParts T;
    then consider I being Instruction of SCM such that
A5: f = JumpPart I and
A6: InsCode I = T;
    consider i1 such that
A7: I = SCM-goto i1 by A1,A6,AMI_5:52;
    f = <*i1*> by A5,A7,RECDEF_2:def 2;
    hence thesis by A4,FINSEQ_1:4,def 8;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th23:
  T = 7 implies dom product" JumpParts T = {1}
proof
  consider i1, a;
  assume
A1: T = 7;
A2: JumpPart (a =0_goto i1) = <*i1*> by RECDEF_2:def 2;
  hereby
    let x be set;
    InsCode (a =0_goto i1) = 7 by RECDEF_2:def 1;
    then
A3: JumpPart (a =0_goto i1) in JumpParts T by A1;
    assume x in dom product" JumpParts T;
    then x in dom JumpPart (a =0_goto i1) by A3,CARD_3:def 13;
    hence x in {1} by A2,FINSEQ_1:4,55;
  end;
  let x be set;
  assume
A4: x in {1};
  for f being Function st f in JumpParts T holds x in dom f
  proof
    let f be Function;
    assume f in JumpParts T;
    then consider I being Instruction of SCM such that
A5: f = JumpPart I and
A6: InsCode I = T;
    consider i1, a such that
A7: I = a =0_goto i1 by A1,A6,AMI_5:53;
    f = <*i1*> by A5,A7,RECDEF_2:def 2;
    hence thesis by A4,FINSEQ_1:4,55;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th24:
  T = 8 implies dom product" JumpParts T = {1}
proof
  consider i1, a;
  assume
A1: T = 8;
A2: JumpPart (a >0_goto i1) = <*i1*> by RECDEF_2:def 2;
  hereby
    let x be set;
    InsCode (a >0_goto i1) = 8 by RECDEF_2:def 1;
    then
A3: JumpPart (a >0_goto i1) in JumpParts T by A1;
    assume x in dom product" JumpParts T;
    then x in dom JumpPart (a >0_goto i1) by A3,CARD_3:def 13;
    hence x in {1} by A2,FINSEQ_1:4,55;
  end;
  let x be set;
  assume
A4: x in {1};
  for f being Function st f in JumpParts T holds x in dom f
  proof
    let f be Function;
    assume f in JumpParts T;
    then consider I being Instruction of SCM such that
A5: f = JumpPart I and
A6: InsCode I = T;
    consider i1, a such that
A7: I = a >0_goto i1 by A1,A6,AMI_5:54;
    f = <*i1*> by A5,A7,RECDEF_2:def 2;
    hence thesis by A4,FINSEQ_1:4,55;
  end;
  hence thesis by CARD_3:def 13;
end;

canceled 10;

theorem Th35:
  (product" JumpParts InsCode SCM-goto k1).1 = NAT
proof
 InsCode SCM-goto k1 = 6 by RECDEF_2:def 1;
 then dom product" JumpParts InsCode SCM-goto k1 = {1}
   by Th22;
  then
A1: 1 in dom product" JumpParts InsCode SCM-goto k1 by TARSKI:def 1;
  hereby
    let x be set;
    assume x in (product" JumpParts InsCode SCM-goto k1).1;
    then x in pi(JumpParts InsCode SCM-goto k1,1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in JumpParts InsCode SCM-goto k1 and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = JumpPart I and
A5: InsCode I = InsCode SCM-goto k1 by A2;
    InsCode I = 6 by A5,RECDEF_2:def 1;
    then consider i2 such that
A6: I = SCM-goto i2 by AMI_5:52;
    g = <*i2*> by A4,A6,RECDEF_2:def 2;
    then x = i2 by A3,FINSEQ_1:def 8;
    hence x in NAT;
  end;
  let x be set;
  assume x in NAT;
  then reconsider x as Element of NAT;
  InsCode SCM-goto k1 = 6 by RECDEF_2:def 1;
  then JumpPart SCM-goto x = <*x*> & InsCode SCM-goto k1
   = InsCode SCM-goto x by RECDEF_2:def 1,def 2;
  then
A7: <*x*> in JumpParts InsCode SCM-goto k1;
  <*x*>.1 = x by FINSEQ_1:def 8;
  then x in pi(JumpParts InsCode SCM-goto k1,1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

theorem Th36:
  (product" JumpParts InsCode (a =0_goto k1)).1 = NAT
proof
 InsCode (a =0_goto k1) = 7 by RECDEF_2:def 1;
 then dom product" JumpParts InsCode (a =0_goto k1) = {1} by Th23;
  then
A1: 1 in dom product" JumpParts InsCode (a =0_goto k1) by TARSKI:def 1;
  hereby
    let x be set;
    assume x in (product" JumpParts InsCode (a =0_goto k1)).1;
    then x in pi(JumpParts InsCode (a =0_goto k1),1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in JumpParts InsCode (a =0_goto k1) and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = JumpPart I and
A5: InsCode I = InsCode (a =0_goto k1) by A2;
    InsCode I = 7 by A5,RECDEF_2:def 1;
    then consider i2, b such that
A6: I = b =0_goto i2 by AMI_5:53;
    g = <*i2*> by A4,A6,RECDEF_2:def 2;
    then x = i2 by A3,FINSEQ_1:57;
    hence x in NAT;
  end;
  let x be set;
  assume x in NAT;
  then reconsider x as Element of NAT;
  InsCode (a =0_goto k1) = 7 by RECDEF_2:def 1;
  then JumpPart (a =0_goto x) = <*x*> & InsCode (a =0_goto k1) = InsCode
  (a =0_goto x) by RECDEF_2:def 1,def 2;
  then
A7: <*x*> in JumpParts InsCode (a =0_goto k1);
  <*x*>.1 = x by FINSEQ_1:57;
  then x in pi(JumpParts InsCode (a =0_goto k1),1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

canceled;

theorem Th38:
  (product" JumpParts InsCode (a >0_goto k1)).1 = NAT
proof
 InsCode (a >0_goto k1) = 8 by RECDEF_2:def 1;
 then dom product" JumpParts InsCode (a >0_goto k1) = {1} by Th24;
  then
A1: 1 in dom product" JumpParts InsCode (a >0_goto k1) by TARSKI:def 1;
  hereby
    let x be set;
    assume x in (product" JumpParts InsCode (a >0_goto k1)).1;
    then x in pi(JumpParts InsCode (a >0_goto k1),1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in JumpParts InsCode (a >0_goto k1) and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = JumpPart I and
A5: InsCode I = InsCode (a >0_goto k1) by A2;
    InsCode I = 8 by A5,RECDEF_2:def 1;
    then consider i2, b such that
A6: I = b >0_goto i2 by AMI_5:54;
    g = <*i2*> by A4,A6,RECDEF_2:def 2;
    then x = i2 by A3,FINSEQ_1:57;
    hence x in NAT;
  end;
  let x be set;
  assume x in NAT;
  then reconsider x as Element of NAT;
  InsCode (a >0_goto k1) = 8 by RECDEF_2:def 1;
  then JumpPart (a >0_goto x) = <*x*> & InsCode (a >0_goto k1) = InsCode
  (a >0_goto x) by RECDEF_2:def 1,def 2;
  then
A7: <*x*> in JumpParts InsCode (a >0_goto k1);
  <*x*>.1 = x by FINSEQ_1:57;
  then x in pi(JumpParts InsCode (a >0_goto k1),1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

Lm4: for l being Element of NAT, i being Instruction of SCM holds
(for s being State of SCM st IC s = l holds Exec(i,s).IC SCM = succ
IC s) implies NIC(i, l) = {succ l}

proof
  consider t being State of SCM;
  let l be Element of NAT, i be Instruction of SCM;
  reconsider I = i as Element of (the Object-Kind of SCM).l by COMPOS_1:def 8;
  assume

A1: for s being State of SCM st IC s = l holds Exec(i, s).IC
  SCM = succ IC s;

  hereby
    let x be set;
    assume x in NIC(i,l);

    then consider s being Element of product the Object-Kind of SCM
     such that
W:      x = IC Exec(i,s) & IC s = l;
    x = succ l by A1,W;
    hence x in {succ l} by TARSKI:def 1;
  end;
  reconsider il1 = l as Element of ObjectKind IC SCM by COMPOS_1:def 6;
  reconsider n = l as Element of NAT;
  reconsider p = (IC SCM, l)-->(il1, I) as PartState of SCM by COMPOS_1:37;
  reconsider u = t+*p
   as Element of product the Object-Kind of SCM by PBOOLE:155;
  let x be set;
X:  (ProgramPart u)/.l = u.l by COMPOS_1:38;
  assume x in {succ l};
  then
A2: x = succ l by TARSKI:def 1;
A3: IC u = n & u.n = i by EXTPRO_1:26;
  then IC Following(ProgramPart u,u) = succ l by A1,X;
  hence thesis by A2,A3,X;
end;

Lm5: for i being Instruction of SCM holds (for l being Element of NAT
holds NIC(i,l)={succ l}) implies JUMP i is empty

proof
  set p=1, q=2;
  let i be Instruction of SCM;
  assume
A1: for l being Element of NAT holds NIC(i,l)={succ l};

  set X = { NIC(i,f) where f is Element of NAT: not contradiction
  };

  reconsider p, q as Element of NAT;
  assume not thesis;
  then consider x being set such that
A2: x in meet X by XBOOLE_0:def 1;
  NIC(i,p) = {succ p} by A1;
  then {succ p} in X;
  then x in {succ p} by A2,SETFAM_1:def 1;
  then
A3: x = succ p by TARSKI:def 1;
  NIC(i,q) = {succ q} by A1;
  then {succ q} in X;
  then x in {succ q} by A2,SETFAM_1:def 1;
  hence contradiction by A3,TARSKI:def 1;
end;

canceled;

theorem Th40:
  NIC(halt SCM, il) = {il}
proof
  now
    let x be set;
A1: now
      reconsider il1 = il as Element of ObjectKind IC SCM by COMPOS_1:def 6;
      reconsider I = halt SCM as Element of (the Object-Kind of SCM).il
       by COMPOS_1:def 8;
      consider t being State of SCM;
      assume
A2:   x = il;
      reconsider p = (IC SCM, il)-->(il1, I) as PartState of SCM by COMPOS_1:37
;
      reconsider u = t+*p
       as Element of product the Object-Kind of SCM by PBOOLE:155;
      reconsider n = il as Element of NAT;
      dom ((IC SCM, il)-->(il1, I)) = {IC SCM, il} by FUNCT_4:65;
      then
A3:   IC SCM in dom ((IC SCM, il)-->(il1, I)) by TARSKI:def 2;
X:  (ProgramPart u)/.il = u.il by COMPOS_1:38;
A4:   u.n = halt SCM & IC u = n by EXTPRO_1:26;
      then IC Following(ProgramPart u,u) = u.IC SCM by X,EXTPRO_1:def 3
        .= ((IC SCM, il)-->(il1, I)).IC SCM by A3,FUNCT_4:14
        .= il by COMPOS_1:3,FUNCT_4:66;
      hence x in {IC Exec(halt SCM,s)
       where s is Element of product the Object-Kind of SCM
       : IC s = il} by A2,A4,X;
    end;
    now
      assume x in {IC Exec(halt SCM,s)
       where s is Element of product the Object-Kind of SCM: IC s = il};
      then ex s being Element of product the Object-Kind of SCM
       st x = IC Exec(halt SCM,s) & IC s = il;
      hence x = il by EXTPRO_1:def 3;
    end;
    hence
    x in {il} iff x in {IC Exec(halt SCM,s)
       where s is Element of product the Object-Kind of SCM
     : IC s = il} by A1,TARSKI:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  cluster JUMP halt SCM -> empty;
  coherence;
end;

theorem Th41:
  NIC(a := b, il) = {succ il}
proof
  set i = a:=b;
  for s being State of SCM st IC s = il holds Exec(i,s).IC SCM
  = succ IC s by AMI_3:8;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP (a := b) -> empty;
  coherence
  proof
    for l being Element of NAT holds NIC(a:=b,l)={succ l} by Th41;
    hence thesis by Lm5;
  end;
end;

theorem Th42:
  NIC(AddTo(a,b), il) = {succ il}
proof
  set i = AddTo(a,b);
  for s being State of SCM st IC s = il holds Exec(i,s).IC SCM
  = succ IC s by AMI_3:9;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP AddTo(a, b) -> empty;
  coherence
  proof
    for l being Element of NAT holds NIC(AddTo(a,b),l)={succ
    l} by Th42;
    hence thesis by Lm5;
  end;
end;

theorem Th43:
  NIC(SubFrom(a,b), il) = {succ il}
proof
  set i = SubFrom(a,b);
  for s being State of SCM st IC s = il holds Exec(i,s).IC SCM
  = succ IC s by AMI_3:10;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP SubFrom(a, b) -> empty;
  coherence
  proof
    for l being Element of NAT holds NIC(SubFrom(a,b),l)={
    succ l} by Th43;
    hence thesis by Lm5;
  end;
end;

theorem Th44:
  NIC(MultBy(a,b), il) = {succ il}
proof
  set i = MultBy(a,b);
  for s being State of SCM st IC s = il holds Exec(i,s).IC SCM
  = succ IC s by AMI_3:11;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP MultBy(a,b) -> empty;
  coherence
  proof
    for l being Element of NAT holds NIC(MultBy(a,b),l)={succ
    l} by Th44;
    hence thesis by Lm5;
  end;
end;

theorem Th45:
  NIC(Divide(a,b), il) = {succ il}
proof
  set i = Divide(a,b);
  for s being State of SCM st IC s = il holds Exec(i,s).IC SCM
  = succ IC s by AMI_3:12;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP Divide(a,b) -> empty;
  coherence
  proof
    for l being Element of NAT holds NIC(Divide(a,b),l)={succ
    l} by Th45;
    hence thesis by Lm5;
  end;
end;

theorem Th46:
  NIC(SCM-goto k, il) = {k}
proof
  now
    let x be set;
A1: now
      reconsider il1 = il as Element of ObjectKind IC SCM by COMPOS_1:def 6;
      reconsider I = SCM-goto k as Element of (the Object-Kind of SCM).il
       by COMPOS_1:def 8;
      consider t being State of SCM;
      assume
A2:   x = k;
      reconsider n = il as Element of NAT;
      reconsider p = (IC SCM, il)-->(il1, I) as PartState of SCM by COMPOS_1:37
;
      reconsider u = t+*p
       as Element of product the Object-Kind of SCM by PBOOLE:155;
X:  (ProgramPart u)/.il = u.il by COMPOS_1:38;
A3:   IC u = n & u.n = SCM-goto k by EXTPRO_1:26;
      then IC Following(ProgramPart u,u) = k by X,AMI_3:13;
      hence x in {IC Exec(SCM-goto k,s)
       where s is Element of product the Object-Kind of SCM
       : IC s = il} by A2,A3,X;
    end;
    now
      assume x in {IC Exec(SCM-goto k,s)
       where s is Element of product the Object-Kind of SCM
       : IC s = il};
      then ex s being Element of product the Object-Kind of SCM
      st x = IC Exec(SCM-goto k,s) & IC s = il;
      hence x = k by AMI_3:13;
    end;
    hence
    x in {k} iff x in {IC Exec(SCM-goto k,s)
       where s is Element of product the Object-Kind of SCM
     : IC s = il} by A1,TARSKI:def 1;
  end;
  hence thesis by TARSKI:2;
end;

theorem Th47:
  JUMP SCM-goto k = {k}
proof
  set X = { NIC(SCM-goto k, il) : not contradiction };
  now
    let x be set;
    hereby
      set il1 = 1;
A1:   NIC(SCM-goto k, il1) in X;
      assume x in meet X;
      then x in NIC(SCM-goto k, il1) by A1,SETFAM_1:def 1;
      hence x in {k} by Th46;
    end;
    assume x in {k};
    then
A2: x = k by TARSKI:def 1;
A3: now
      let Y be set;
      assume Y in X;
      then consider il being Element of NAT such that
A4:   Y = NIC(SCM-goto k, il);
      NIC(SCM-goto k, il) = {k} by Th46;
      hence k in Y by A4,TARSKI:def 1;
    end;
    reconsider k as Element of NAT by ORDINAL1:def 13;
    NIC(SCM-goto k, k) in X;
    hence x in meet X by A2,A3,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let i1;
  cluster JUMP SCM-goto i1 -> non empty trivial;
  coherence
  proof
    JUMP SCM-goto i1 = {i1} by Th47;
    hence thesis;
  end;
end;

theorem Th48:
  NIC(a=0_goto k, il) = {k, succ il}
proof
  consider t being State of SCM;
  hereby
    let x be set;
    assume x in NIC(a=0_goto k, il);
    then consider s being Element of product the Object-Kind of SCM
    such that
A1: x = IC Exec(a=0_goto k,s) & IC s = il;
    per cases;
    suppose
      s.a = 0;
      then x = k by A1,AMI_3:14;
      hence x in {k, succ il} by TARSKI:def 2;
    end;
    suppose
      s.a <> 0;
      then x = succ il by A1,AMI_3:14;
      hence x in {k, succ il} by TARSKI:def 2;
    end;
  end;
  let x be set;
  reconsider I = a=0_goto k as Element of (the Object-Kind of SCM).il
   by COMPOS_1:def 8;
A2: IC SCM <> a by AMI_5:20;
  reconsider il1 = il as Element of ObjectKind IC SCM by COMPOS_1:def 6;
  reconsider n = il as Element of NAT;
  reconsider p = (IC SCM, il)-->(il1, I) as PartState of SCM by COMPOS_1:37;
  reconsider u = t+*p as State of SCM;
A3: a <> il by Th1;
  assume
A4: x in {k,succ il};
  per cases by A4,TARSKI:def 2;
  suppose
A5: x = k;
    reconsider v = u+*(a .--> 0)
     as Element of product the Object-Kind of SCM by PBOOLE:155;
A6: dom (a .--> 0) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 0) by A2,TARSKI:def 1;
    then
A7: IC v = IC u by FUNCT_4:12
      .= n by EXTPRO_1:26;
U:    not il in dom (a .--> 0) by A3,A6,TARSKI:def 1;
A8: (ProgramPart v)/.il = v.il by COMPOS_1:38
.= u.n by U,FUNCT_4:12
      .= I by EXTPRO_1:26;
    a in dom (a .--> 0) by A6,TARSKI:def 1;
    then v.a = (a .--> 0).a by FUNCT_4:14
      .= 0 by FUNCOP_1:87;
    then IC Following(ProgramPart v,v) = k by A7,A8,AMI_3:14;
    hence thesis by A5,A7,A8;
  end;
  suppose
A9: x = succ il;
    reconsider v = u+*(a .--> 1)
     as Element of product the Object-Kind of SCM by PBOOLE:155;
A10: dom (a .--> 1) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 1) by A2,TARSKI:def 1;
    then
A11: IC v = IC u by FUNCT_4:12
      .= n by EXTPRO_1:26;
U:    not il in dom (a .--> 1) by A3,A10,TARSKI:def 1;
A12: (ProgramPart v)/.il = v.il by COMPOS_1:38
.= u.n by U,FUNCT_4:12
      .= I by EXTPRO_1:26;
    a in dom (a .--> 1) by A10,TARSKI:def 1;
    then v.a = (a .--> 1).a by FUNCT_4:14
      .= 1 by FUNCOP_1:87;
    then IC Following(ProgramPart v,v) = succ il by A11,A12,AMI_3:14;
    hence thesis by A9,A11,A12;
  end;
end;

theorem Th49:
  JUMP (a=0_goto k) = {k}
proof
  set X = { NIC(a=0_goto k, il) : not contradiction };
  now
    let x be set;
A1: now
      let Y be set;
      assume Y in X;
      then consider il being Element of NAT such that
A2:   Y = NIC(a=0_goto k, il);
      NIC(a=0_goto k, il) = {k, succ il} by Th48;
      hence k in Y by A2,TARSKI:def 2;
    end;
    hereby
      set il1 = 1, il2 = 2;
      assume
A3:   x in meet X;
A4:   NIC(a=0_goto k, il2) = {k, succ il2} by Th48;
      NIC(a=0_goto k, il2) in X;
      then x in NIC(a=0_goto k, il2) by A3,SETFAM_1:def 1;
      then
A5:   x = k or x = succ il2 by A4,TARSKI:def 2;
A6:   NIC(a=0_goto k, il1) = {k, succ il1} by Th48;
      NIC(a=0_goto k, il1) in X;
      then x in NIC(a=0_goto k, il1) by A3,SETFAM_1:def 1;
      then x = k or x = succ il1 by A6,TARSKI:def 2;
      hence x in {k} by A5,TARSKI:def 1;
    end;
    assume x in {k};
    then
A7: x = k by TARSKI:def 1;
    reconsider k as Element of NAT by ORDINAL1:def 13;
    NIC(a=0_goto k, k) in X;
    hence x in meet X by A7,A1,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let a, i1;
  cluster JUMP (a =0_goto i1) -> non empty trivial;
  coherence
  proof
    JUMP (a =0_goto i1) = {i1} by Th49;
    hence thesis;
  end;
end;

theorem Th50:
  NIC(a>0_goto k, il) = {k, succ il}
proof
  consider t being State of SCM;
  hereby
    let x be set;
    assume x in NIC(a>0_goto k, il);
    then consider s being Element of product the Object-Kind of SCM
    such that
A1: x = IC Exec(a>0_goto k,s) & IC s = il;
    per cases;
    suppose
      s.a > 0;
      then x = k by A1,AMI_3:15;
      hence x in {k, succ il} by TARSKI:def 2;
    end;
    suppose
      s.a <= 0;
      then x = succ il by A1,AMI_3:15;
      hence x in {k, succ il} by TARSKI:def 2;
    end;
  end;
  let x be set;
  reconsider I = a>0_goto k as Element of (the Object-Kind of SCM).il
   by COMPOS_1:def 8;
A2: IC SCM <> a by AMI_5:20;
  reconsider il1 = il as Element of ObjectKind IC SCM by COMPOS_1:def 6;
  reconsider p = (IC SCM, il)-->(il1, I) as PartState of SCM by COMPOS_1:37;
  reconsider u = t+*p as State of SCM;
A3: a <> il by Th1;
   reconsider n = il1 as Element of NAT;
  assume
A4: x in {k,succ il};
  per cases by A4,TARSKI:def 2;
  suppose
A5: x = k;
    reconsider v = u+*(a .--> 1)
     as Element of product the Object-Kind of SCM by PBOOLE:155;
A6: dom (a .--> 1) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 1) by A2,TARSKI:def 1;
    then
A7: IC v = IC u by FUNCT_4:12
      .= n by EXTPRO_1:26;
U:    not il in dom (a .--> 1) by A3,A6,TARSKI:def 1;
A8: (ProgramPart v)/.il = v.il by COMPOS_1:38
.= u.n by U,FUNCT_4:12
      .= I by EXTPRO_1:26;
    a in dom (a .--> 1) by A6,TARSKI:def 1;
    then v.a = (a .--> 1).a by FUNCT_4:14
      .= 1 by FUNCOP_1:87;
    then IC Following(ProgramPart v,v) = k by A7,A8,AMI_3:15;
    hence thesis by A5,A7,A8;
  end;
  suppose
A9: x = succ il;
    reconsider v = u+*(a .--> 0)
     as Element of product the Object-Kind of SCM by PBOOLE:155;
A10: dom (a .--> 0) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 0) by A2,TARSKI:def 1;
    then
A11: IC v = IC u by FUNCT_4:12
      .= n by EXTPRO_1:26;
U:    not il in dom (a .--> 0) by A3,A10,TARSKI:def 1;
A12: (ProgramPart v)/.il = v.il by COMPOS_1:38
.= u.n by U,FUNCT_4:12
      .= I by EXTPRO_1:26;
    a in dom (a .--> 0) by A10,TARSKI:def 1;
    then v.a = (a .--> 0).a by FUNCT_4:14
      .= 0 by FUNCOP_1:87;
    then IC Following(ProgramPart v,v) = succ il by A11,A12,AMI_3:15;
    hence thesis by A9,A11,A12;
  end;
end;

theorem Th51:
  JUMP (a>0_goto k) = {k}
proof
  set X = { NIC(a>0_goto k, il) : not contradiction };
  now
    let x be set;
A1: now
      let Y be set;
      assume Y in X;
      then consider il being Element of NAT such that
A2:   Y = NIC(a>0_goto k, il);
      NIC(a>0_goto k, il) = {k, succ il} by Th50;
      hence k in Y by A2,TARSKI:def 2;
    end;
    hereby
      set il1 = 1, il2 = 2;
      assume
A3:   x in meet X;
A4:   NIC(a>0_goto k, il2) = {k, succ il2} by Th50;
      NIC(a>0_goto k, il2) in X;
      then x in NIC(a>0_goto k, il2) by A3,SETFAM_1:def 1;
      then
A5:   x = k or x = succ il2 by A4,TARSKI:def 2;
A6:   NIC(a>0_goto k, il1) = {k, succ il1} by Th50;
      NIC(a>0_goto k, il1) in X;
      then x in NIC(a>0_goto k, il1) by A3,SETFAM_1:def 1;
      then x = k or x = succ il1 by A6,TARSKI:def 2;
      hence x in {k} by A5,TARSKI:def 1;
    end;
    assume x in {k};
    then
A7: x = k by TARSKI:def 1;
    reconsider k as Element of NAT by ORDINAL1:def 13;
    NIC(a>0_goto k, k) in X;
    hence x in meet X by A7,A1,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let a, i1;
  cluster JUMP (a >0_goto i1) -> non empty trivial;
  coherence
  proof
    JUMP (a >0_goto i1) = {i1} by Th51;
    hence thesis;
  end;
end;

theorem Th52:
  SUCC(il,SCM) = {il, succ il}
proof
  set X = { NIC(I, il) \ JUMP I where I is Element of the Instructions of SCM:
  not contradiction };
  set N = {il, succ il};
  now
    let x be set;
    hereby
      assume x in union X;
      then consider Y being set such that
A1:   x in Y and
A2:   Y in X by TARSKI:def 4;
      consider i being Element of the Instructions of SCM such that
A3:   Y = NIC(i, il) \ JUMP i by A2;
      per cases by AMI_3:69;
      suppose
        i = [0,{},{}];
        then x in {il} \ JUMP halt SCM by A1,A3,Th40,AMI_3:71;
        then x = il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = a:=b;
        then consider a, b such that
A4:     i = a:=b;
        x in {succ il} \ JUMP (a:=b) by A1,A3,A4,Th41;
        then x = succ il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = AddTo(a,b);
        then consider a, b such that
A5:     i = AddTo(a,b);
        x in {succ il} \ JUMP AddTo(a,b) by A1,A3,A5,Th42;
        then x = succ il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = SubFrom(a,b);
        then consider a, b such that
A6:     i = SubFrom(a,b);
        x in {succ il} \ JUMP SubFrom(a,b) by A1,A3,A6,Th43;
        then x = succ il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = MultBy(a,b);
        then consider a, b such that
A7:     i = MultBy(a,b);
        x in {succ il} \ JUMP MultBy(a,b) by A1,A3,A7,Th44;
        then x = succ il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = Divide(a,b);
        then consider a, b such that
A8:     i = Divide(a,b);
        x in {succ il} \ JUMP Divide(a,b) by A1,A3,A8,Th45;
        then x = succ il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex k st i = SCM-goto k;
        then consider k such that
A9:     i = SCM-goto k;
        x in {k} \ JUMP i by A1,A3,A9,Th46;
        then x in {k} \ {k} by A9,Th47;
        hence x in N by XBOOLE_1:37;
      end;
      suppose
        ex a,k st i = a=0_goto k;
        then consider a, k such that
A10:    i = a=0_goto k;
A11:    NIC(i, il) = {k, succ il} by A10,Th48;
        x in NIC(i, il) by A1,A3,XBOOLE_0:def 5;
        then
A12:    x = k or x = succ il by A11,TARSKI:def 2;
        x in NIC(i, il) \ {k} by A1,A3,A10,Th49;
        then not x in {k} by XBOOLE_0:def 5;
        hence x in N by A12,TARSKI:def 1,def 2;
      end;
      suppose
        ex a,k st i = a>0_goto k;
        then consider a, k such that
A13:    i = a>0_goto k;
A14:    NIC(i, il) = {k, succ il} by A13,Th50;
        x in NIC(i, il) by A1,A3,XBOOLE_0:def 5;
        then
A15:    x = k or x = succ il by A14,TARSKI:def 2;
        x in NIC(i, il) \ {k} by A1,A3,A13,Th51;
        then not x in {k} by XBOOLE_0:def 5;
        hence x in N by A15,TARSKI:def 1,def 2;
      end;
    end;
    assume
A16: x in {il, succ il};
    per cases by A16,TARSKI:def 2;
    suppose
A17:  x = il;
      set i = halt SCM;
      NIC(i, il) \ JUMP i = {il} by Th40;
      then
A18:  {il} in X;
      x in {il} by A17,TARSKI:def 1;
      hence x in union X by A18,TARSKI:def 4;
    end;
    suppose
A19:  x = succ il;
      consider a, b being Data-Location;
      set i = AddTo(a,b);
      NIC(i, il) \ JUMP i = {succ il} by Th42;
      then
A20:  {succ il} in X;
      x in {succ il} by A19,TARSKI:def 1;
      hence x in union X by A20,TARSKI:def 4;
    end;
  end;
  hence thesis by TARSKI:2;
end;

theorem Th53:
for k being Element of NAT holds k+1 in SUCC(k,SCM) &
 for j being Element of NAT st j in SUCC(k,SCM) holds k <= j
proof
  let k be Element of NAT;
  reconsider fk = k as Element of NAT;
A8: SUCC(k,SCM) = {k, succ (fk)} by Th52;
  hence k+1 in SUCC(k,SCM) by TARSKI:def 2;
  let j be Element of NAT;
  assume
A10: j in SUCC(k,SCM);
  reconsider fk = k as Element of NAT;
  per cases by A8,A10,TARSKI:def 2;
  suppose
    j = k;
    hence thesis;
  end;
  suppose
    j = succ (fk);
    hence thesis by NAT_1:11;
  end;
end;

registration
  cluster SCM -> standard;
  coherence by Th53,AMISTD_1:19;
end;

registration
  cluster InsCode halt SCM -> jump-only InsType of SCM;
  coherence
  proof
    now
      let s be State of SCM, o be Object of SCM, I be Instruction of SCM;
      assume that
A1:   InsCode I = InsCode halt SCM and
:::      o <> IC SCM;
      o in Data-Locations SCM;
      I = halt SCM by A1,AMI_5:37,46;
      hence Exec(I, s).o = s.o by EXTPRO_1:def 3;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  cluster halt SCM -> jump-only;
  coherence
  proof
    thus InsCode halt SCM is jump-only;
  end;
end;

registration
  let i1;
  cluster InsCode SCM-goto i1 -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A1:   InsCode I = InsCode SCM-goto i1 and
:::A2:   o <> IC S;
A2:   o in Data-Locations SCM;
      InsCode I = 6 by A1,RECDEF_2:def 1;
      then
A3:   ex i2 st I = SCM-goto i2 by AMI_5:52;
:::      per cases by A2,Th3;
:::      suppose
:::        o in NAT;
:::        then reconsider l=o as Element of NAT;
:::        l=o;
:::        hence Exec(I, s).o = s.o by AMI_1:def 13;
:::      end;
:::      suppose
        o is Data-Location by A2,AMI_3:72,def 2;
        hence Exec(I, s).o = s.o by A3,AMI_3:13;
:::      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  let i1;
  cluster SCM-goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode SCM-goto i1 is jump-only;
    JUMP SCM-goto i1 <> {};
    hence SCM-goto i1 is non sequential by AMISTD_1:43;
    dom JumpPart SCM-goto i1 = dom <*i1*> by RECDEF_2:def 2
      .= {1} by FINSEQ_1:4,def 8;
   hence JumpPart SCM-goto i1 is not empty;
  end;
end;

registration
  let a, i1;
  cluster InsCode (a =0_goto i1) -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A1:   InsCode I = InsCode (a =0_goto i1) and
:::A2:   o <> IC S;
A2:   o in Data-Locations SCM;
      InsCode I = 7 by A1,RECDEF_2:def 1;
      then
A3:   ex i2, b st I = (b =0_goto i2) by AMI_5:53;
:::      per cases by A2,Th3;
:::      suppose
:::        o in NAT;
:::        then reconsider l=o as Element of NAT;
:::        l=o;
:::        hence Exec(I, s).o = s.o by AMI_1:def 13;
:::      end;
:::      suppose
        o is Data-Location by A2,AMI_3:72,def 2;
        hence Exec(I, s).o = s.o by A3,AMI_3:14;
:::      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
  cluster InsCode (a >0_goto i1) -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A4:   InsCode I = InsCode (a >0_goto i1) and
:::A5:   o <> IC S;
A5:   o in Data-Locations SCM;
      InsCode I = 8 by A4,RECDEF_2:def 1;
      then
A6:   ex i2, b st I = (b >0_goto i2) by AMI_5:54;
:::      per cases by A5,Th3;
:::      suppose
:::        o in NAT;
:::        then reconsider l=o as Element of NAT;
:::        l=o;
:::        hence Exec(I, s).o = s.o by AMI_1:def 13;
:::      end;
:::      suppose
        o is Data-Location by A5,AMI_3:72,def 2;
        hence Exec(I, s).o = s.o by A6,AMI_3:15;
:::      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  let a, i1;
  cluster a =0_goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode (a =0_goto i1) is jump-only;
    JUMP (a =0_goto i1) <> {};
    hence a =0_goto i1 is non sequential by AMISTD_1:43;
    dom JumpPart (a =0_goto i1) = dom <*i1*> by RECDEF_2:def 2
      .= {1} by FINSEQ_1:4,55;
    hence JumpPart(a =0_goto i1) is not empty;
  end;
  cluster a >0_goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode (a >0_goto i1) is jump-only;
    JUMP (a >0_goto i1) <> {};
    hence a >0_goto i1 is non sequential by AMISTD_1:43;
    dom JumpPart (a >0_goto i1) = dom <*i1*> by RECDEF_2:def 2
      .= {1} by FINSEQ_1:4,55;
   hence JumpPart(a >0_goto i1) is not empty;
  end;
end;

Lm6: dl.0 <> dl.1 by AMI_3:52;

registration
  let a, b;
  cluster InsCode (a:=b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A1: InsCode (a:=b) = 1 by RECDEF_2:def 1
      .= InsCode (dl.0:=dl.1) by RECDEF_2:def 1;
:::A2: dl.0 <> IC SCM by AMI_3:57;
A2: dl.0 in Data-Locations SCM by AMI_3:73;
A3: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then
A4: dl.1 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    dl.0 in dom ((dl.0, dl.1)-->(0,1)) by A3,TARSKI:def 2;
    then
A5: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
    Exec((dl.0:=dl.1), t).dl.0 = t.dl.1 by AMI_3:8
      .= (dl.0, dl.1)-->(0,1).dl.1 by A4,FUNCT_4:14
      .= 1 by FUNCT_4:66;
    hence thesis by A1,A2,A5,AMISTD_1:def 3;
  end;
  cluster InsCode AddTo(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A6: InsCode AddTo(a,b) = 2 by RECDEF_2:def 1
      .= InsCode AddTo(dl.0, dl.1) by RECDEF_2:def 1;
A7: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    then
A8: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
XX: dl.0 in Data-Locations SCM by AMI_3:73;
    dl.1 in dom ((dl.0, dl.1)-->(0,1)) by A7,TARSKI:def 2;
    then t.dl.1 = (dl.0, dl.1)-->(0,1).dl.1 by FUNCT_4:14
      .= 1 by FUNCT_4:66;
    then dl.0 <> IC SCM &
    Exec(AddTo(dl.0, dl.1), t).dl.0 = (0 qua Nat)+1 by A8,AMI_3:9,57;
    hence thesis by A6,A8,AMISTD_1:def 3,XX;
  end;
  cluster InsCode SubFrom(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A9: InsCode SubFrom(a,b) = 3 by RECDEF_2:def 1
      .= InsCode SubFrom(dl.0, dl.1) by RECDEF_2:def 1;
A10: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    then
A11: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
XX: dl.0 in Data-Locations SCM by AMI_3:73;
    dl.1 in dom ((dl.0, dl.1)-->(0,1)) by A10,TARSKI:def 2;
    then
A13: t.dl.1 = (dl.0, dl.1)-->(0,1).dl.1 by FUNCT_4:14
      .= 1 by FUNCT_4:66;
    Exec(SubFrom(dl.0, dl.1), t).dl.0 = t.dl.0 - t.dl.1 by AMI_3:10
      .= -1 by A11,A13;
    hence thesis by A9,A11,AMISTD_1:def 3,XX;
  end;
  cluster InsCode MultBy(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(1,0));
A14: InsCode MultBy(a,b) = 4 by RECDEF_2:def 1
      .= InsCode MultBy(dl.0, dl.1) by RECDEF_2:def 1;
A15: dom ((dl.0, dl.1)-->(1,0)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(1,0)) by TARSKI:def 2;
    then
A16: t.dl.0 = (dl.0, dl.1)-->(1,0).dl.0 by FUNCT_4:14
      .= 1 by AMI_3:52,FUNCT_4:66;
XX: dl.0 in Data-Locations SCM by AMI_3:73;
    dl.1 in dom ((dl.0, dl.1)-->(1,0)) by A15,TARSKI:def 2;
    then
A18: t.dl.1 = (dl.0, dl.1)-->(1,0).dl.1 by FUNCT_4:14
      .= 0 by FUNCT_4:66;
    Exec(MultBy(dl.0, dl.1), t).dl.0 = t.dl.0 * t.dl.1 by AMI_3:11
      .= 0 by A18;
    hence thesis by A14,A16,AMISTD_1:def 3,XX;
  end;
  cluster InsCode Divide(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(7,3));
A19: InsCode Divide(a,b) = 5 by RECDEF_2:def 1
      .= InsCode Divide(dl.0, dl.1) by RECDEF_2:def 1;
A20: dom ((dl.0, dl.1)-->(7,3)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(7,3)) by TARSKI:def 2;
    then
A21: t.dl.0 = (dl.0, dl.1)-->(7,3).dl.0 by FUNCT_4:14
      .= 7 by AMI_3:52,FUNCT_4:66;
A22: 7 = 2 * 3 + 1;
XX: dl.0 in Data-Locations SCM by AMI_3:73;
    dl.1 in dom ((dl.0, dl.1)-->(7,3)) by A20,TARSKI:def 2;
    then t.dl.1 = (dl.0, dl.1)-->(7,3).dl.1 by FUNCT_4:14
      .= 3 by FUNCT_4:66;
    then Exec(Divide(dl.0, dl.1), t).dl.0 = 7 div (3 qua Element of NAT) by A21
,Lm6,AMI_3:12
      .= 2 by A22,NAT_D:def 1;
    hence thesis by A19,A21,AMISTD_1:def 3,XX;
  end;
end;

registration
  let a, b;
  cluster a:=b -> non jump-only sequential;
  coherence
  proof
    thus InsCode (a:=b) is not jump-only;
    let s be State of SCM;
    thus thesis by AMI_3:8;
  end;
  cluster AddTo(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode AddTo(a,b) is not jump-only;
    let s be State of SCM;
    thus thesis by AMI_3:9;
  end;
  cluster SubFrom(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode SubFrom(a,b) is not jump-only;
    let s be State of SCM;
    thus thesis by AMI_3:10;
  end;
  cluster MultBy(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode MultBy(a,b) is not jump-only;
    let s be State of SCM;
    thus thesis by AMI_3:11;
  end;
  cluster Divide(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode Divide(a,b) is not jump-only;
    let s be State of SCM;
    thus thesis by AMI_3:12;
  end;
end;

registration
  cluster SCM -> homogeneous with_explicit_jumps;
  coherence
  proof
    thus SCM is homogeneous
    proof
      let I, J be Instruction of SCM such that
A1:   InsCode I = InsCode J;
A2:   J = [0,{},{}] or (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or
(ex a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = SCM-goto k) or (ex a,k st J = a=0_goto k) or ex a,
      k st J = a>0_goto k by AMI_3:69;
      per cases by AMI_3:69;
      suppose
        I = [0,{},{}];
        hence thesis by A1,A2,AMI_3:71,AMI_5:37,RECDEF_2:def 1;
      end;
      suppose
        ex a,b st I = a:=b;
        then consider a, b such that
A3:     I = a:=b;
A4:     InsCode I = 1 by A3,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A3,AMI_3:71;
          end;
          suppose
            ex a,b st J = a:=b;
            then consider d1, d2 such that
A5:         J = d1:=d2;
            thus dom JumpPart I = dom {} by A3,RECDEF_2:def 2
              .= dom JumpPart J by A5,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = AddTo(a,b)) or (ex a,b st J = SubFrom(a,b)
) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or (ex k st J
= SCM-goto k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A4,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        then consider a, b such that
A6:     I = AddTo(a,b);
A7:     InsCode I = 2 by A6,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A6,AMI_3:71;
          end;
          suppose
            ex a,b st J = AddTo(a,b);
            then consider d1, d2 such that
A8:         J = AddTo(d1,d2);
            thus dom JumpPart I = dom {} by A6,RECDEF_2:def 2
              .= dom JumpPart J by A8,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = SubFrom(a,b)) or (
ex a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or
 (ex k st J = SCM-goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A7,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        then consider a, b such that
A9:     I = SubFrom(a,b);
A10:    InsCode I = 3 by A9,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A9,AMI_3:71;
          end;
          suppose
            ex a,b st J = SubFrom(a,b);
            then consider d1, d2 such that
A11:        J = SubFrom(d1,d2);
            thus dom JumpPart I = dom {} by A9,RECDEF_2:def 2
              .= dom JumpPart J by A11,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or
 (ex k st J = SCM-goto k
            ) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A10,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        then consider a, b such that
A12:    I = MultBy(a,b);
A13:    InsCode I = 4 by A12,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A12,AMI_3:71;
          end;
          suppose
            ex a,b st J = MultBy(a,b);
            then consider d1, d2 such that
A14:        J = MultBy(d1,d2);
            thus dom JumpPart I = dom {} by A12,RECDEF_2:def 2
              .= dom JumpPart J by A14,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = Divide(a,b)) or
 (ex k st J = SCM-goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A13,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        then consider a, b such that
A15:    I = Divide(a,b);
A16:    InsCode I = 5 by A15,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A15,AMI_3:71;
          end;
          suppose
            ex a,b st J = Divide(a,b);
            then consider d1, d2 such that
A17:        J = Divide(d1,d2);
            thus dom JumpPart I = dom {} by A15,RECDEF_2:def 2
              .= dom JumpPart J by A17,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or
 (ex k st J = SCM-goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A16,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex k st I = SCM-goto k;
        then consider k such that
A18:    I = SCM-goto k;
A19:    InsCode I = 6 by A18,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A18,AMI_3:71,AMI_5:37,RECDEF_2:def 1;
          end;
          suppose
            ex k st J = SCM-goto k;
            then consider k1 such that
A20:        J = SCM-goto k1;
            thus dom JumpPart I = dom <*k*> by A18,RECDEF_2:def 2
              .= Seg 1 by FINSEQ_1:def 8
              .= dom <*k1*> by FINSEQ_1:def 8
              .= dom JumpPart J by A20,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A19,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a=0_goto k;
        then consider a, k such that
A21:    I = a=0_goto k;
A22:    InsCode I = 7 by A21,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A21,AMI_3:71,AMI_5:37,RECDEF_2:def 1;
          end;
          suppose
            ex d1,k st J = d1 =0_goto k;
            then consider d1, k1 such that
A23:        J = d1 =0_goto k1;
            thus dom JumpPart I = dom <*k*> by A21,RECDEF_2:def 2
              .= Seg 1 by FINSEQ_1:55
              .= dom <*k1*> by FINSEQ_1:55
              .= dom JumpPart J by A23,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = SCM-goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A22,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a>0_goto k;
        then consider a, k such that
A24:    I = a>0_goto k;
A25:    InsCode I = 8 by A24,RECDEF_2:def 1;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{},{}];
            hence thesis by A1,A24,AMI_3:71,AMI_5:37,RECDEF_2:def 1;
          end;
          suppose
            ex d1,k st J = d1 >0_goto k;
            then consider d1, k1 such that
A26:        J = d1 >0_goto k1;
            thus dom JumpPart I = dom <*k*> by A24,RECDEF_2:def 2
              .= Seg 1 by FINSEQ_1:55
              .= dom <*k1*> by FINSEQ_1:55
              .= dom JumpPart J by A26,RECDEF_2:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = SCM-goto k) or ex a,k st J = a=0_goto k;
            hence thesis by A1,A25,RECDEF_2:def 1;
          end;
        end;
        hence thesis;
      end;
    end;
    thus SCM is with_explicit_jumps
    proof
     let I be Instruction of SCM;
     thus JUMP I c= rng JumpPart I
     proof
      let f be set such that
A27:  f in JUMP I;
      per cases by AMI_3:69;
      suppose
        I = [0,{},{}];
        hence thesis by A27,AMI_3:71;
      end;
      suppose
        ex a,b st I = a:=b;
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        hence thesis by A27;
      end;
      suppose
A28:    ex k st I = SCM-goto k;
        consider k1 such that
A29:    I = SCM-goto k1 by A28;
A30:    JumpPart SCM-goto k1 = <*k1*> by RECDEF_2:def 2;
X:      rng<*k1*> = {k1} by FINSEQ_1:56;
        JUMP SCM-goto k1 = {k1} by Th47;
        then f = k1 by A27,A29,TARSKI:def 1;
        hence thesis by A29,A30,X,TARSKI:def 1;
      end;
      suppose
A31:    ex a,k1 st I = a=0_goto k1;
        consider a, k1 such that
A32:    I = a=0_goto k1 by A31;
A33:    JumpPart (a=0_goto k1) = <*k1*> by RECDEF_2:def 2;
X:      rng<*k1*> = {k1} by FINSEQ_1:56;
        JUMP (a=0_goto k1) = {k1} by Th49;
        then f = k1 by A27,A32,TARSKI:def 1;
        hence thesis by A32,A33,X,TARSKI:def 1;
      end;
      suppose
A34:    ex a,k1 st I = a>0_goto k1;
        consider a, k1 such that
A35:    I = a>0_goto k1 by A34;
A36:    JumpPart (a>0_goto k1) = <*k1*> by RECDEF_2:def 2;
X:      rng<*k1*> = {k1} by FINSEQ_1:56;
        JUMP (a>0_goto k1) = {k1} by Th51;
        then f = k1 by A27,A35,TARSKI:def 1;
        hence thesis by A35,A36,X,TARSKI:def 1;
      end;
    end;
    let f being set;
    assume f in rng JumpPart I;
    then consider k being set such that
A37: k in dom JumpPart I and
B37: f = (JumpPart I).k by FUNCT_1:def 5;
    per cases by AMI_3:69;
    suppose
      I = [0,{},{}];
      then dom JumpPart I = dom {} by RECDEF_2:def 2;
      hence thesis by A37;
    end;
    suppose
      ex a,b st I = a:=b;
      then consider a, b such that
A40:  I = a:=b;
      k in dom {} by A37,A40,RECDEF_2:def 2;
      hence thesis;
    end;
    suppose
      ex a,b st I = AddTo(a,b);
      then consider a, b such that
A41:  I = AddTo(a,b);
      k in dom {} by A37,A41,RECDEF_2:def 2;
      hence thesis;
    end;
    suppose
      ex a,b st I = SubFrom(a,b);
      then consider a, b such that
A42:  I = SubFrom(a,b);
      k in dom {} by A37,A42,RECDEF_2:def 2;
      hence thesis;
    end;
    suppose
      ex a,b st I = MultBy(a,b);
      then consider a, b such that
A43:  I = MultBy(a,b);
      k in dom {} by A37,A43,RECDEF_2:def 2;
      hence thesis;
    end;
    suppose
      ex a,b st I = Divide(a,b);
      then consider a, b such that
A44:  I = Divide(a,b);
      k in dom {} by A37,A44,RECDEF_2:def 2;
      hence thesis;
    end;
    suppose
      ex k st I = SCM-goto k;
      then consider k1 such that
A45:  I = SCM-goto k1;
A46:  JumpPart I = <*k1*> by A45,RECDEF_2:def 2;
      then k = 1 by A37,FINSEQ_1:111;
      then
A47:  f = k1 by A46,B37,FINSEQ_1:def 8;
      JUMP I = {k1} by A45,Th47;
      hence thesis by A47,TARSKI:def 1;
    end;
    suppose
      ex a,k st I = a=0_goto k;
      then consider a, k1 such that
A48:  I = a=0_goto k1;
A49:  JumpPart I = <*k1*> by A48,RECDEF_2:def 2;
      then k = 1  by A37,FINSEQ_1:111;
      then
A50:  f = k1 by A49,B37,FINSEQ_1:57;
      JUMP I = {k1} by A48,Th49;
      hence thesis by A50,TARSKI:def 1;
    end;
    suppose
      ex a,k1 st I = a>0_goto k1;
      then consider a, k1 such that
A51:  I = a>0_goto k1;
A52:  JumpPart I = <*k1*> by A51,RECDEF_2:def 2;
      then k = 1 by A37,FINSEQ_1:111;
      then
A53:  f = k1 by A52,B37,FINSEQ_1:57;
      JUMP I = {k1} by A51,Th51;
      hence thesis by A53,TARSKI:def 1;
    end;
   end;
  end;
end;

registration
  cluster SCM -> regular J/A-independent;
  coherence
  proof
   thus SCM is regular
    proof
    let I be Instruction of SCM;
     set T = InsCode I;
X:   JumpPart I in JumpParts T;
    per cases by Lm3;
    suppose T = 0;
      then I = halt SCM by AMI_5:46;
     hence thesis;
    end;
    suppose T = 1;
      then JumpParts T = {{}} by Th17;
      then JumpPart I = {} by X,TARSKI:def 1;
     hence thesis;
    end;
    suppose T = 2;
      then JumpParts T = {{}} by Th18;
      then JumpPart I = {} by X,TARSKI:def 1;
     hence thesis;
    end;
    suppose T = 3;
      then JumpParts T = {{}} by Th19;
      then JumpPart I = {} by X,TARSKI:def 1;
     hence thesis;
    end;
    suppose T = 4;
      then JumpParts T = {{}} by Th20;
      then JumpPart I = {} by X,TARSKI:def 1;
     hence thesis;
    end;
    suppose T = 5;
      then JumpParts T = {{}} by Th21;
      then JumpPart I = {} by X,TARSKI:def 1;
     hence thesis;
    end;
    suppose
A122: T = 6;
     then consider i2 such that
W:    I = SCM-goto i2 by AMI_5:52;
     let k be set;
     assume
Z:      k in dom JumpPart I;
      for f being Function st f in JumpParts T holds k in dom f
       proof let f be Function;
        assume f in JumpParts T;
         then consider J being Instruction of SCM such that
W1:       f = JumpPart J and
W2:       InsCode J = T;
        thus k in dom f by Z,W1,W2,COMPOS_1:def 33;
       end;
      then k in dom product" JumpParts T by CARD_3:def 13;
      then k in {1} by A122,Th22;
      then k = 1 by TARSKI:def 1;
     hence (product" JumpParts InsCode I).k = NAT by W,Th35;
    end;
    suppose
A135: T = 7;
     then consider i1,a such that
W:    I = a=0_goto i1 by AMI_5:53;
     let k be set;
     assume
Z:      k in dom JumpPart I;
      for f being Function st f in JumpParts T holds k in dom f
       proof let f be Function;
        assume f in JumpParts T;
         then consider J being Instruction of SCM such that
W1:       f = JumpPart J and
W2:       InsCode J = T;
        thus k in dom f by Z,W1,W2,COMPOS_1:def 33;
       end;
      then k in dom product" JumpParts T by CARD_3:def 13;
      then k in {1} by A135,Th23;
      then k = 1 by TARSKI:def 1;
     hence (product" JumpParts InsCode I).k = NAT by W,Th36;
    end;
    suppose
A159: T = 8;
     then consider i1,a such that
W:    I = a>0_goto i1 by AMI_5:54;
     let k be set;
     assume
Z:      k in dom JumpPart I;
      for f being Function st f in JumpParts T holds k in dom f
       proof let f be Function;
        assume f in JumpParts T;
         then consider J being Instruction of SCM such that
W1:       f = JumpPart J and
W2:       InsCode J = T;
        thus k in dom f by Z,W1,W2,COMPOS_1:def 33;
       end;
      then k in dom product" JumpParts T by CARD_3:def 13;
      then k in {1} by A159,Th24;
      then k = 1 by TARSKI:def 1;
     hence (product" JumpParts InsCode I).k = NAT by W,Th38;
    end;
   end;
   let T be InsType of SCM, f1,f2 be Function, p be set such that
Z1: f1 in JumpParts T and
Z2: f2 in product product" JumpParts T and
Z3: [T,f1,p] in the Instructions of SCM;
    per cases by Lm3;
    suppose T = 0 or T = 1 or T = 2 or T = 3 or T = 4 or T = 5;
     then
A:  JumpParts T = {0} by Th16,Th17,Th18,Th19,Th20,Th21;
     f1 = 0 by A,Z1,TARSKI:def 1 .= f2 by Z2,A,CARD_3:19,156,TARSKI:def 1;
    hence [T,f2,p] in the Instructions of SCM by Z3;
    end;
    suppose
S:    T = 6;
    reconsider J = [T,f1,p] as Instruction of SCM by Z3;
SS: InsCode J = 6 by S,RECDEF_2:def 1;
    then consider i1 being Element of NAT such that
B7:  J = SCM-goto i1 by AMI_5:52;
P:   p = {} by B7,MCART_1:28;
U1: dom f2 = dom product" JumpParts T  by Z2,CARD_3:18;
XX: dom f2 = {1} by S,U1,Th22;
    then 1 in dom f2 by TARSKI:def 1;
    then f2.1 in (product" JumpParts T).1 by U1,Z2,CARD_3:18;
    then reconsider l = f2.1 as Element of NAT by B7,S,SS,Th35;
    set I = [T,f2,{}];
    I = SCM-goto l by S,XX,FINSEQ_1:4,def 8;
    then  reconsider I as Instruction of SCM;
    f2 = JumpPart I by RECDEF_2:def 2;
    hence [T,f2,p] in the Instructions of SCM by P;
    end;
    suppose
S:    T = 7;
    reconsider J = [T,f1,p] as Instruction of SCM by Z3;
SS: InsCode J = T by RECDEF_2:def 1;
    then consider i1,a such that
B7:  J = a=0_goto i1 by S,AMI_5:53;
P:   p = <*a*> by B7,MCART_1:28;
U1: dom f2 = dom product" JumpParts T  by Z2,CARD_3:18;
XX: dom f2 = {1} by S,U1,Th23;
    then 1 in dom f2 by TARSKI:def 1;
    then f2.1 in (product" JumpParts T).1 by U1,Z2,CARD_3:18;
    then reconsider l = f2.1 as Element of NAT by B7,SS,Th36;
    set I = [T,f2,p];
    I = a=0_goto l by P,S,XX,FINSEQ_1:4,def 8;
    then  reconsider I as Instruction of SCM;
A6: InsCode I = T by RECDEF_2:def 1;
    consider i2,b such that
A7: I = b=0_goto i2 by S,A6,AMI_5:53;
    thus [T,f2,p] in the Instructions of SCM by A7;
    end;
    suppose
S:    T = 8;
    reconsider J = [T,f1,p] as Instruction of SCM by Z3;
SS: InsCode J = T by RECDEF_2:def 1;
    then consider i1,a such that
B7:  J = a>0_goto i1 by S,AMI_5:54;
P:   p = <*a*> by B7,MCART_1:28;
U1: dom f2 = dom product" JumpParts T  by Z2,CARD_3:18;
XX: dom f2 = {1} by S,U1,Th24;
    then 1 in dom f2 by TARSKI:def 1;
    then f2.1 in (product" JumpParts T).1 by U1,Z2,CARD_3:18;
    then reconsider l = f2.1 as Element of NAT by B7,SS,Th38;
    set I = [T,f2,p];
    I = a>0_goto l by P,S,XX,FINSEQ_1:4,def 8;
    then  reconsider I as Instruction of SCM;
A6: InsCode I = T by RECDEF_2:def 1;
    consider i2,b such that
A7: I = b>0_goto i2 by S,A6,AMI_5:54;
    thus [T,f2,p] in the Instructions of SCM by A7;
    end;
  end;
end;

canceled 3;

theorem Th57:
  IncAddr(SCM-goto i1,k) = SCM-goto(i1+k)
proof
X1: JumpPart IncAddr(SCM-goto i1,k) = k + JumpPart SCM-goto i1
   by COMPOS_1:def 38;
 then
A1: dom JumpPart IncAddr(SCM-goto i1,k) = dom JumpPart SCM-goto i1
   by VALUED_1:def 2;
A2: dom JumpPart SCM-goto(i1+k)
 = dom <*i1+k*> by RECDEF_2:def 2
    .= Seg 1 by FINSEQ_1:def 8
    .= dom <*i1*> by FINSEQ_1:def 8
    .= dom JumpPart SCM-goto i1 by RECDEF_2:def 2;
A3: for x being set st x in dom JumpPart SCM-goto i1 holds (JumpPart
  IncAddr(SCM-goto i1,k)).x = (JumpPart SCM-goto(i1+k)).x
  proof
    let x be set;
    assume
A4: x in dom JumpPart SCM-goto i1;
    then x in dom <*i1*> by RECDEF_2:def 2;
    then
A5: x = 1 by FINSEQ_1:111;
    set f = (JumpPart SCM-goto i1).x;
A7: (JumpPart IncAddr(SCM-goto i1,k)).x = k + f by A4,A1,X1,VALUED_1:def 2;
    f = <*i1*>.x by RECDEF_2:def 2
      .= i1 by A5,FINSEQ_1:def 8;
    hence
    (JumpPart IncAddr(SCM-goto i1,k)).x = <*i1+k*>.x
     by A5,A7,FINSEQ_1:def 8
      .= (JumpPart SCM-goto(i1+k)).x
       by RECDEF_2:def 2;
  end;
AA: AddressPart IncAddr(SCM-goto i1,k) = AddressPart SCM-goto i1
          by COMPOS_1:def 38
    .= {} by RECDEF_2:def 3
    .= AddressPart SCM-goto(i1+k) by RECDEF_2:def 3;
BB: InsCode IncAddr(SCM-goto i1,k) = InsCode SCM-goto i1 by COMPOS_1:def 38
    .= 6 by RECDEF_2:def 1
    .= InsCode SCM-goto(i1+k) by RECDEF_2:def 1;
   JumpPart IncAddr(SCM-goto i1,k) = JumpPart SCM-goto(i1+k)
     by A1,A2,A3,FUNCT_1:9;
  hence thesis by AA,BB,COMPOS_1:7;
end;

theorem Th58:
  IncAddr(a=0_goto i1,k) = a=0_goto(i1+k)
proof
X1: JumpPart IncAddr(a=0_goto i1,k) = k + JumpPart (a=0_goto i1)
  by COMPOS_1:def 38;
  then
A1: dom JumpPart IncAddr(a=0_goto i1,k) = dom JumpPart (a=0_goto i1)
  by VALUED_1:def 2;
A2: dom JumpPart (a=0_goto(i1+k)) = dom <*i1 + k*> by RECDEF_2:def 2
    .= Seg 1 by FINSEQ_1:55
    .= dom <*i1*> by FINSEQ_1:55
    .= dom JumpPart (a=0_goto i1) by RECDEF_2:def 2;
A3: for x being set st x in dom JumpPart (a=0_goto i1) holds (JumpPart
IncAddr(a=0_goto i1,k)).x =
 (JumpPart (a=0_goto(i1+k))).x
  proof
    let x be set;
    assume
A4: x in dom JumpPart (a=0_goto i1);
    then x in dom <*i1*> by RECDEF_2:def 2;
    then
A6:   x = 1 by FINSEQ_1:111;
    set f = (JumpPart (a=0_goto i1)).x;
A8:   (JumpPart IncAddr(a=0_goto i1,k)).x = k + f by X1,A1,A4,VALUED_1:def 2;
      f = <*i1*>.x by RECDEF_2:def 2
        .= i1 by A6,FINSEQ_1:57;
      hence
      (JumpPart IncAddr(a=0_goto i1,k)).x
         = <*i1+k*>.x by A6,A8,FINSEQ_1:57
        .= (JumpPart (a=0_goto(i1+k))).x
         by RECDEF_2:def 2;
  end;
AA: AddressPart IncAddr(a=0_goto i1,k) = AddressPart (a=0_goto i1)
       by COMPOS_1:def 38
    .= <*a*> by RECDEF_2:def 3
    .= AddressPart (a=0_goto(i1+k)) by RECDEF_2:def 3;
BB: InsCode IncAddr(a=0_goto i1,k) = InsCode (a=0_goto i1) by COMPOS_1:def 38
    .= 7 by RECDEF_2:def 1
    .= InsCode (a=0_goto(i1+k)) by RECDEF_2:def 1;
   JumpPart IncAddr(a=0_goto i1,k) = JumpPart (a=0_goto(i1+k))
       by A1,A2,A3,FUNCT_1:9;
  hence thesis by AA,BB,COMPOS_1:7;
end;

theorem Th59:
  IncAddr(a>0_goto i1,k) = a>0_goto(i1+k)
proof
X1: JumpPart IncAddr(a>0_goto i1,k) = k + JumpPart (a>0_goto i1)
  by COMPOS_1:def 38;
  then
A1: dom JumpPart IncAddr(a>0_goto i1,k) = dom JumpPart (a>0_goto i1)
  by VALUED_1:def 2;
A2: dom JumpPart (a>0_goto(i1+k)) = dom <*i1 + k*> by RECDEF_2:def 2
    .= Seg 1 by FINSEQ_1:55
    .= dom <*i1*> by FINSEQ_1:55
    .= dom JumpPart (a>0_goto i1) by RECDEF_2:def 2;
A3: for x being set st x in dom JumpPart (a>0_goto i1) holds (JumpPart
IncAddr(a>0_goto i1,k)).x = (JumpPart (a>0_goto(i1+k))).x
  proof
    let x be set;
    assume
A4: x in dom JumpPart (a>0_goto i1);
    then x in dom <*i1*> by RECDEF_2:def 2;
      then
A6:   x = 1 by FINSEQ_1:111;
     set f = (JumpPart (a>0_goto i1)).x;
A8:   (JumpPart IncAddr(a>0_goto i1,k)).x = k + f by X1,A1,A4,VALUED_1:def 2;
      f = <*i1*>.x by RECDEF_2:def 2
        .= i1 by A6,FINSEQ_1:57;
      hence
      (JumpPart IncAddr(a>0_goto i1,k)).x
         = <*i1+k*>.x by A6,A8,FINSEQ_1:57
        .= (JumpPart (a>0_goto(i1+k))).x
         by RECDEF_2:def 2;
  end;
AA: AddressPart IncAddr(a>0_goto i1,k) = AddressPart (a>0_goto i1)
           by COMPOS_1:def 38
    .= <*a*> by RECDEF_2:def 3
    .= AddressPart (a>0_goto(i1+k)) by RECDEF_2:def 3;
BB:  InsCode IncAddr(a>0_goto i1,k) = InsCode (a>0_goto i1) by COMPOS_1:def 38
    .= 8 by RECDEF_2:def 1
    .= InsCode (a>0_goto(i1+k)) by RECDEF_2:def 1;
   JumpPart IncAddr(a>0_goto i1,k) = JumpPart (a>0_goto(i1+k))
      by A1,A2,A3,FUNCT_1:9;
  hence thesis by AA,BB,COMPOS_1:7;
end;

registration
  cluster SCM -> IC-good Exec-preserving;
  coherence
  proof
    thus SCM is IC-good
    proof
      let I be Instruction of SCM;
      per cases by AMI_3:69;
      suppose
        I = [0,{},{}];
        hence thesis by AMI_3:71;
      end;
      suppose
        ex a,b st I = a:=b;
        hence thesis;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        hence thesis;
      end;
      suppose
A1:     ex k st I = SCM-goto k;
        let k be Nat, s1 be State of SCM;
        set s2 = IncrIC(s1,k);
        consider k1 such that
A2:     I = SCM-goto k1 by A1;
        reconsider i1=k1 as Element of NAT by ORDINAL1:def 13;
        IC Exec(I,s1) = k1 by A2,AMI_3:13;
        hence IC Exec(I,s1) + k =
         IC Exec(SCM-goto(i1+k),s2) by AMI_3:13
          .= IC Exec(IncAddr(I,k), s2) by A2,Th57;
      end;
      suppose
        ex a,k st I = a=0_goto k;
        then consider a, k1 such that
A3:     I = a=0_goto k1;
        reconsider i1=k1 as Element of NAT by ORDINAL1:def 13;
        let k be natural number, s1 be State of SCM;
        set s2 = IncrIC(s1,k);
        a <> IC SCM & dom (IC SCM .--> (IC s1 + k)) = {IC SCM}
        by AMI_5:20,FUNCOP_1:19;
        then not a in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
        then
A5:     s1.a = s2.a by FUNCT_4:12;
        now
          per cases;
          suppose
A6:         s1.a = 0;
            then IC Exec(I,s1) = k1 by A3,AMI_3:14;
            hence
            IC Exec(I,s1) + k
             = IC Exec(a=0_goto(i1+k),s2) by A5,A6,AMI_3:14
              .= IC Exec(IncAddr(I,k), s2) by A3,Th58;
          end;
          suppose
A7:         s1.a <> 0;
            dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by FUNCOP_1:19;
            then IC SCM in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
            then
A8:         IC s2 = (IC SCM .--> (IC s1 + k)).IC SCM by FUNCT_4:14
              .= (IC s1 + k) by FUNCOP_1:87;
A9:         IC Exec(I,s1) = succ IC s1 by A3,A7,AMI_3:14
              .= IC s1 + 1;
            IC Exec(I, s2) = succ IC s2 by A3,A5,A7,AMI_3:14
              .= IC s1 + 1 + k by A8;
            hence IC Exec(I,s1) + k
              = succ IC s2 by A3,A5,A7,A9,AMI_3:14
              .= IC Exec(a=0_goto(i1+k),s2)
               by A5,A7,AMI_3:14
              .= IC Exec(IncAddr(I,k), s2) by A3,Th58;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a>0_goto k;
        then consider a, k1 such that
A10:    I = a>0_goto k1;
        reconsider i1=k1 as Element of NAT by ORDINAL1:def 13;
        let k be natural number, s1 be State of SCM;
        set s2 = IncrIC(s1,k);
        a <> IC SCM & dom (IC SCM .--> (IC s1 + k)) = {IC SCM}
        by AMI_5:20,FUNCOP_1:19;
        then not a in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
        then
A12:    s1.a = s2.a by FUNCT_4:12;
        now
          per cases;
          suppose
A13:        s1.a > 0;
            then IC Exec(I,s1) = k1 by A10,AMI_3:15;
            hence
            IC Exec(I,s1) + k
            = IC Exec(a>0_goto(i1+k),s2) by A12,A13,AMI_3:15
              .= IC Exec(IncAddr(I,k), s2) by A10,Th59;
          end;
          suppose
A14:        s1.a <= 0;
            dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by FUNCOP_1:19;
            then IC SCM in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
            then
A15:        IC s2 = (IC SCM .--> (IC s1 + k)).IC SCM by FUNCT_4:14
              .= (IC s1 + k) by FUNCOP_1:87;
A16:        IC Exec(I,s1) = succ IC s1 by A10,A14,AMI_3:15
              .= IC s1+ 1;
            IC Exec(I, s2) = succ IC s2 by A10,A12,A14,AMI_3:15
              .= IC s1+ 1 + k by A15;
            hence IC Exec(I,s1) + k
              = succ IC s2 by A10,A12,A14,A16,AMI_3:15
              .= IC Exec(a>0_goto(i1+k),s2) by A12,A14,AMI_3:15
              .= IC Exec(IncAddr(I,k), s2) by A10,Th59;
          end;
        end;
        hence thesis;
      end;
    end;
    let I be Instruction of SCM;
    let s1, s2 be State of SCM such that
A18: s1, s2 equal_outside NAT;
A19: IC s1 = IC s2 by A18,COMPOS_1:24;
A20: dom Exec(I,s1) = the carrier of SCM
 by PARTFUN1:def 4;
    then
A21: dom Exec(I,s1) = dom Exec(I,s2) by PARTFUN1:def 4;
    per cases by AMI_3:69;
    suppose
      I = [0,{},{}];
      hence thesis by A18,AMISTD_2:def 20,AMI_3:71;
    end;
    suppose
      ex a,b st I = a:=b;
      then consider a, b such that
A22:  I = a:=b;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A23:    x in dom Exec(I,s1) \ NAT;
        then
A24:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A23,A24,Th3;
        suppose
A25:      x = IC SCM;
          hence Exec(I,s1).x = succ IC s1 by A22,AMI_3:8
            .= Exec(I,s2).x by A19,A22,A25,AMI_3:8;
        end;
        suppose
A26:      x = a;
          hence Exec(I,s1).x = s1.b by A22,AMI_3:8
            .= s2.b by A18,Th5
            .= Exec(I,s2).x by A22,A26,AMI_3:8;
        end;
        suppose that
A27:      x is Data-Location and
A28:      x <> a;
          thus Exec(I,s1).x = s1.x by A22,A27,A28,AMI_3:8
            .= s2.x by A18,A27,Th5
            .= Exec(I,s2).x by A22,A27,A28,AMI_3:8;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = AddTo(a,b);
      then consider a, b such that
A29:  I = AddTo(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A30:    x in dom Exec(I,s1) \ NAT;
        then
A31:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A30,A31,Th3;
        suppose
A32:      x = IC SCM;
          hence Exec(I,s1).x = succ IC s1 by A29,AMI_3:9
            .= Exec(I,s2).x by A19,A29,A32,AMI_3:9;
        end;
        suppose
A33:      x = a;
          hence Exec(I,s1).x = s1.a + s1.b by A29,AMI_3:9
            .= s1.a + s2.b by A18,Th5
            .= s2.a + s2.b by A18,Th5
            .= Exec(I,s2).x by A29,A33,AMI_3:9;
        end;
        suppose that
A34:      x is Data-Location and
A35:      x <> a;
          thus Exec(I,s1).x = s1.x by A29,A34,A35,AMI_3:9
            .= s2.x by A18,A34,Th5
            .= Exec(I,s2).x by A29,A34,A35,AMI_3:9;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = SubFrom(a,b);
      then consider a, b such that
A36:  I = SubFrom(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A37:    x in dom Exec(I,s1) \ NAT;
        then
A38:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A37,A38,Th3;
        suppose
A39:      x = IC SCM;
          hence Exec(I,s1).x = succ IC s1 by A36,AMI_3:10
            .= Exec(I,s2).x by A19,A36,A39,AMI_3:10;
        end;
        suppose
A40:      x = a;
          hence Exec(I,s1).x = s1.a - s1.b by A36,AMI_3:10
            .= s1.a - s2.b by A18,Th5
            .= s2.a - s2.b by A18,Th5
            .= Exec(I,s2).x by A36,A40,AMI_3:10;
        end;
        suppose that
A41:      x is Data-Location and
A42:      x <> a;
          thus Exec(I,s1).x = s1.x by A36,A41,A42,AMI_3:10
            .= s2.x by A18,A41,Th5
            .= Exec(I,s2).x by A36,A41,A42,AMI_3:10;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = MultBy(a,b);
      then consider a, b such that
A43:  I = MultBy(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A44:    x in dom Exec(I,s1) \ NAT;
        then
A45:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A44,A45,Th3;
        suppose
A46:      x = IC SCM;
          hence Exec(I,s1).x = succ IC s1 by A43,AMI_3:11
            .= Exec(I,s2).x by A19,A43,A46,AMI_3:11;
        end;
        suppose
A47:      x = a;
          hence Exec(I,s1).x = s1.a * s1.b by A43,AMI_3:11
            .= s1.a * s2.b by A18,Th5
            .= s2.a * s2.b by A18,Th5
            .= Exec(I,s2).x by A43,A47,AMI_3:11;
        end;
        suppose that
A48:      x is Data-Location and
A49:      x <> a;
          thus Exec(I,s1).x = s1.x by A43,A48,A49,AMI_3:11
            .= s2.x by A18,A48,Th5
            .= Exec(I,s2).x by A43,A48,A49,AMI_3:11;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = Divide(a,b);
      then consider a, b such that
A50:  I = Divide(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A51:    x in dom Exec(I,s1) \ NAT;
        then
A52:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A51,A52,Th3;
        suppose
A53:      x = IC SCM;
          hence Exec(I,s1).x = succ IC s1 by A50,AMI_3:12
            .= Exec(I,s2).x by A19,A50,A53,AMI_3:12;
        end;
        suppose
A54:      x is Data-Location;
A55:      s1.a = s2.a & s1.b = s2.b by A18,Th5;
          now
            let c be Data-Location;
            per cases;
            suppose
A56:          c = b;
              hence Exec(I,s1).c = s2.a mod s2.b by A50,A55,AMI_3:12
                .= Exec(I,s2).c by A50,A56,AMI_3:12;
            end;
            suppose
A57:          c = a & c <> b;
              hence Exec(I,s1).c = s2.a div s2.b by A50,A55,AMI_3:12
                .= Exec(I,s2).c by A50,A57,AMI_3:12;
            end;
            suppose
A58:          c <> a & c <> b;
              hence Exec(I,s1).c = s1.c by A50,AMI_3:12
                .= s2.c by A18,Th5
                .= Exec(I,s2).c by A50,A58,AMI_3:12;
            end;
          end;
          hence thesis by A54;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex k st I = SCM-goto k;
      then consider k1 such that
A59:  I = SCM-goto k1;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A60:    x in dom Exec(I,s1) \ NAT;
        then
A61:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A60,A61,Th3;
        suppose
A62:      x = IC SCM;
          hence Exec(I,s1).x = k1 by A59,AMI_3:13
            .= Exec(I,s2).x by A59,A62,AMI_3:13;
        end;
        suppose
A63:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A59,AMI_3:13
            .= s2.x by A18,A63,Th5
            .= Exec(I,s2).x by A59,A63,AMI_3:13;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,k st I = a=0_goto k;
      then consider a, k1 such that
A64:  I = a=0_goto k1;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A65:    x in dom Exec(I,s1) \ NAT;
        then
A66:    not x in NAT by XBOOLE_0:def 5;
A67:    s1.a = s2.a by A18,Th5;
        per cases by A20,A65,A66,Th3;
        suppose that
A68:      x = IC SCM & s1.a = 0;
          thus Exec(I,s1).x = k1 by A64,A68,AMI_3:14
            .= Exec(I,s2).x by A64,A67,A68,AMI_3:14;
        end;
        suppose that
A69:      x = IC SCM & s1.a <> 0;
          thus Exec(I,s1).x = succ IC s1 by A64,A69,AMI_3:14
            .= Exec(I,s2).x by A19,A64,A67,A69,AMI_3:14;
        end;
        suppose
A70:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A64,AMI_3:14
            .= s2.x by A18,A70,Th5
            .= Exec(I,s2).x by A64,A70,AMI_3:14;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,k st I = a>0_goto k;
      then consider a, k such that
A71:  I = a>0_goto k;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A72:    x in dom Exec(I,s1) \ NAT;
        then
A73:    not x in NAT by XBOOLE_0:def 5;
A74:    s1.a = s2.a by A18,Th5;
        per cases by A20,A72,A73,Th3;
        suppose that
A75:      x = IC SCM & s1.a > 0;
          thus Exec(I,s1).x = k by A71,A75,AMI_3:15
            .= Exec(I,s2).x by A71,A74,A75,AMI_3:15;
        end;
        suppose that
A76:      x = IC SCM & s1.a <= 0;
          thus Exec(I,s1).x = succ IC s1 by A71,A76,AMI_3:15
            .= Exec(I,s2).x by A19,A71,A74,A76,AMI_3:15;
        end;
        suppose
A77:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A71,AMI_3:15
            .= s2.x by A18,A77,Th5
            .= Exec(I,s2).x by A71,A77,AMI_3:15;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
  end;
end;

