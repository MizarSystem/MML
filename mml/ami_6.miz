:: On the Instructions of { \bf SCM }
::  by Artur Korni{\l}owicz
::
:: Received May 8, 2001
:: Copyright (c) 2001 Association of Mizar Users

environ

 vocabularies NUMBERS, AMI_3, AMI_1, FSM_1, ORDINAL1, AMI_2, CAT_1, XBOOLE_0,
      FUNCT_7, FUNCT_1, RELAT_1, STRUCT_0, FINSEQ_1, CARD_1, AMISTD_2, GRAPHSP,
      CARD_3, SCMNORM, AMISTD_1, SUBSET_1, CIRCUIT2, FUNCT_4, FUNCOP_1,
      SETFAM_1, ZFMISC_1, XXREAL_0, TARSKI, FUNCT_2, ARYTM_3, GOBOARD5,
      FRECHET, ARYTM_1, INT_1, UNIALG_1, CARD_5;
 notations TARSKI, XBOOLE_0, SUBSET_1, SETFAM_1, RELAT_1, FUNCT_1, FUNCT_2,
      REALSET1, ORDINAL1, NUMBERS, XCMPLX_0, INT_1, FUNCOP_1, FINSEQ_1,
      FUNCT_4, XXREAL_0, STRUCT_0, CARD_3, FUNCT_7, AMI_1, AMI_2, AMI_3,
      AMISTD_1, AMISTD_2, SCMNORM;
 constructors XXREAL_0, NAT_1, NAT_D, REALSET1, AMI_5, AMISTD_2, RELSET_1;
 registrations XBOOLE_0, SETFAM_1, RELAT_1, FUNCT_1, ORDINAL1, FUNCOP_1,
      NUMBERS, XREAL_0, NAT_1, INT_1, FINSEQ_1, CARD_3, AMI_1, AMI_3, AMI_5,
      AMISTD_2, REALSET1, RELSET_1, ZFMISC_1;
 requirements NUMERALS, BOOLE, SUBSET, REAL, ARITHM;
 definitions TARSKI, FUNCT_1, FUNCT_2, FUNCT_7, AMISTD_1, AMISTD_2, XBOOLE_0,
      AMI_3, FUNCOP_1, AMI_2, AMI_1, CARD_3, NAT_1;
 theorems TARSKI, NAT_1, AMI_1, AMI_3, FUNCT_4, AMI_5, FUNCT_1, FUNCT_2,
      FUNCOP_1, SETFAM_1, AMI_2, AMISTD_1, MCART_1, FINSEQ_1, FINSEQ_3,
      AMISTD_2, FUNCT_7, CARD_3, XBOOLE_0, XBOOLE_1, NAT_D, RELAT_1, ORDINAL1;
 schemes FUNCT_2;

begin

reserve a, b, d1, d2 for Data-Location,
  il, i1, i2 for Instruction-Location of
  SCM,
  I for Instruction of SCM,
  s, s1, s2 for State of SCM,
  T for InsType of SCM,
  k,k1 for natural number;

theorem Th1:
  not a in NAT
proof
  a in SCM-Data-Loc by AMI_3:def 2;
  hence thesis by AMI_2:29,XBOOLE_0:3;
end;

theorem Th2:
  SCM-Data-Loc <> NAT by AMI_2:12;

theorem Th3:
  for o being Object of SCM holds o = IC SCM or o in NAT or o is
  Data-Location
proof
  let o be Object of SCM;
  o in {IC SCM} \/ SCM-Data-Loc or o in NAT by AMI_5:23,XBOOLE_0:def 3;
  then o in {IC SCM} or o in SCM-Data-Loc or o in NAT by XBOOLE_0:def 3;
  hence thesis by AMI_3:def 2,TARSKI:def 1;
end;

canceled;

theorem Th5:
  s1,s2 equal_outside NAT implies s1.a = s2.a
proof
  assume
A1: s1,s2 equal_outside NAT;
A2: not a in NAT by Th1;
  dom s2 = the carrier of SCM by AMI_1:79;
  then a in dom s2 \ NAT by A2,XBOOLE_0:def 5;
  then
A3: a in dom s2 /\ (dom s2 \ NAT) by XBOOLE_0:def 4;
  dom s1 = the carrier of SCM by AMI_1:79;
  then a in dom s1 \ NAT by A2,XBOOLE_0:def 5;
  then a in dom s1 /\ (dom s1 \ NAT) by XBOOLE_0:def 4;
  hence s1.a = (s1|(dom s1 \ NAT)).a by FUNCT_1:71
    .= (s2|(dom s2 \ NAT)).a by A1,FUNCT_7:def 2
    .= s2.a by A3,FUNCT_1:71;
end;

Lm1: for x, y being set st x in dom <*y*> holds x = 1
proof
  let x, y be set;
  assume
  x in dom <*y*>;
  then x in Seg 1 by FINSEQ_1:def 8;
  hence thesis by FINSEQ_1:4,TARSKI:def 1;
end;

Lm2: for x, y, z being set st x in dom <*y,z*> holds x = 1 or x = 2
proof
  let x, y, z be set;
  assume
  x in dom <*y,z*>;
  then x in Seg 2 by FINSEQ_3:29;
  hence thesis by FINSEQ_1:4,TARSKI:def 2;
end;

Lm3: T = 0 or T = 1 or T = 2 or T = 3 or T = 4 or T = 5 or T = 6 or T = 7 or T
= 8

proof
  consider y being set such that
A1: [T,y] in the Instructions of SCM by RELAT_1:def 4;
  reconsider I = [T,y] as Instruction of SCM by A1;
  T = InsCode I by MCART_1:7;
  hence thesis by AMI_5:36,NAT_1:33;
end;

canceled;

theorem Th7:
  AddressPart halt SCM = {} by AMI_3:71,MCART_1:def 2;

canceled 8;

theorem Th16:
  T = 0 implies AddressParts T = {0}
proof
  assume
A1: T = 0;
  hereby
    let a be set;
    assume
    a in AddressParts T;
    then consider I such that
A2: a = AddressPart I and
A3: InsCode I = T;
    I = halt SCM by A1,A3,AMI_5:46;
    hence a in {0} by A2,Th7,TARSKI:def 1;
  end;
  let a be set;
  assume
  a in {0};
  then a = 0 by TARSKI:def 1;
  hence thesis by A1,Th7,AMI_5:37;
end;

registration
  let T;
  cluster AddressParts T -> non empty;
  coherence
  proof
    consider a, b, i1;
A1: InsCode (a:=b) = 1 & InsCode AddTo(a,b) = 2 by MCART_1:7;
A2: InsCode SubFrom(a,b) = 3 & InsCode MultBy(a,b) = 4 by MCART_1:7;
A3: InsCode (a =0_goto i1) = 7 & InsCode (a >0_goto i1) = 8 by MCART_1:7;
A4: InsCode Divide(a,b) = 5 & InsCode goto i1 = 6 by MCART_1:7;
    T = 0 or T = 1 or T = 2 or T = 3 or T = 4 or T = 5 or T = 6 or T = 7
    or T = 8 by Lm3;
    then AddressPart halt SCM in AddressParts T or AddressPart (a:=b) in
    AddressParts T or AddressPart AddTo(a,b) in AddressParts T or AddressPart
SubFrom(a,b) in AddressParts T or AddressPart MultBy(a,b) in AddressParts T or
    AddressPart Divide(a,b) in AddressParts T or AddressPart goto i1 in
AddressParts T or AddressPart (a =0_goto i1) in AddressParts T or AddressPart (
    a >0_goto i1) in AddressParts T by A1,A2,A4,A3,AMI_5:37;
    hence thesis;
  end;
end;

theorem Th17:
  T = 1 implies dom product" AddressParts T = {1,2}
proof
  consider a, b;
  assume
A1: T = 1;
A2: AddressPart (a:=b) = <*a,b*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode (a:=b) = 1 by MCART_1:7;
    then
A3: AddressPart (a:=b) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart (a:=b) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider d1, d2 such that
A7: I = d1:=d2 by A1,A6,AMI_5:47;
    f = <*d1,d2*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th18:
  T = 2 implies dom product" AddressParts T = {1,2}
proof
  consider a, b;
  assume
A1: T = 2;
A2: AddressPart AddTo(a,b) = <*a,b*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode AddTo(a,b) = 2 by MCART_1:7;
    then
A3: AddressPart AddTo(a,b) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart AddTo(a,b) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider d1, d2 such that
A7: I = AddTo(d1,d2) by A1,A6,AMI_5:48;
    f = <*d1,d2*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th19:
  T = 3 implies dom product" AddressParts T = {1,2}
proof
  consider a, b;
  assume
A1: T = 3;
A2: AddressPart SubFrom(a,b) = <*a,b*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode SubFrom(a,b) = 3 by MCART_1:7;
    then
A3: AddressPart SubFrom(a,b) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart SubFrom(a,b) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider d1, d2 such that
A7: I = SubFrom(d1,d2) by A1,A6,AMI_5:49;
    f = <*d1,d2*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th20:
  T = 4 implies dom product" AddressParts T = {1,2}
proof
  consider a, b;
  assume
A1: T = 4;
A2: AddressPart MultBy(a,b) = <*a,b*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode MultBy(a,b) = 4 by MCART_1:7;
    then
A3: AddressPart MultBy(a,b) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart MultBy(a,b) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider d1, d2 such that
A7: I = MultBy(d1,d2) by A1,A6,AMI_5:50;
    f = <*d1,d2*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th21:
  T = 5 implies dom product" AddressParts T = {1,2}
proof
  consider a, b;
  assume
A1: T = 5;
A2: AddressPart Divide(a,b) = <*a,b*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode Divide(a,b) = 5 by MCART_1:7;
    then
A3: AddressPart Divide(a,b) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart Divide(a,b) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider d1, d2 such that
A7: I = Divide(d1,d2) by A1,A6,AMI_5:51;
    f = <*d1,d2*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th22:
  T = 6 implies dom product" AddressParts T = {1}
proof
  consider i1;
  assume
A1: T = 6;
A2: AddressPart goto i1 = <*i1*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode goto i1 = 6 by MCART_1:7;
    then
A3: AddressPart goto i1 in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart goto i1 by A3,CARD_3:def 13;
    hence x in {1} by A2,FINSEQ_1:4,def 8;
  end;
  let x be set;
  assume
A4: x in {1};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider i1 such that
A7: I = goto i1 by A1,A6,AMI_5:52;
    f = <*i1*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,def 8;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th23:
  T = 7 implies dom product" AddressParts T = {1,2}
proof
  consider i1, a;
  assume
A1: T = 7;
A2: AddressPart (a =0_goto i1) = <*i1,a*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode (a =0_goto i1) = 7 by MCART_1:7;
    then
A3: AddressPart (a =0_goto i1) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart (a =0_goto i1) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider i1, a such that
A7: I = a =0_goto i1 by A1,A6,AMI_5:53;
    f = <*i1,a*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th24:
  T = 8 implies dom product" AddressParts T = {1,2}
proof
  consider i1, a;
  assume
A1: T = 8;
A2: AddressPart (a >0_goto i1) = <*i1,a*> by MCART_1:def 2;
  hereby
    let x be set;
    InsCode (a >0_goto i1) = 8 by MCART_1:7;
    then
A3: AddressPart (a >0_goto i1) in AddressParts T by A1;
    assume
    x in dom product" AddressParts T;
    then x in dom AddressPart (a >0_goto i1) by A3,CARD_3:def 13;
    hence x in {1,2} by A2,FINSEQ_1:4,FINSEQ_3:29;
  end;
  let x be set;
  assume
A4: x in {1,2};
  for f being Function st f in AddressParts T holds x in dom f
  proof
    let f be Function;
    assume
    f in AddressParts T;
    then consider I being Instruction of SCM such that
A5: f = AddressPart I and
A6: InsCode I = T;
    consider i1, a such that
A7: I = a >0_goto i1 by A1,A6,AMI_5:54;
    f = <*i1,a*> by A5,A7,MCART_1:def 2;
    hence thesis by A4,FINSEQ_1:4,FINSEQ_3:29;
  end;
  hence thesis by CARD_3:def 13;
end;

theorem Th25:
  (product" AddressParts InsCode (a:=b)).1 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode (a:=b) = {1,2} by Th17,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode (a:=b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a:=b)).1;
    then x in pi(AddressParts InsCode (a:=b),1) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode (a:=b) and
A3: f.1 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode (a:=b) by A2;
    consider d1, d2 such that
A6: I = d1:=d2 by A5,AMI_5:47,MCART_1:7;
    x = <*d1,d2*>.1 by A3,A4,A6,MCART_1:def 2
      .= d1 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode (a:=b) = 1 & InsCode (x:=b) = 1 by MCART_1:7;
  then AddressPart (x:=b) in AddressParts InsCode (a:=b);
  then
A7: (AddressPart (x:=b)).1 in pi (AddressParts InsCode (a:=b),1) by
CARD_3:def 6;
  (AddressPart (x:=b)).1 = <*x,b*>.1 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th26:
  (product" AddressParts InsCode (a:=b)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode (a:=b) = {1,2} by Th17,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode (a:=b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a:=b)).2;
    then x in pi(AddressParts InsCode (a:=b),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode (a:=b) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode (a:=b) by A2;
    consider d1, d2 such that
A6: I = d1:=d2 by A5,AMI_5:47,MCART_1:7;
    x = <*d1,d2*>.2 by A3,A4,A6,MCART_1:def 2
      .= d2 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode (a:=b) = 1 & InsCode (a:=x) = 1 by MCART_1:7;
  then AddressPart (a:=x) in AddressParts InsCode (a:=b);
  then
A7: (AddressPart (a:=x)).2 in pi (AddressParts InsCode (a:=b),2) by
CARD_3:def 6;
  (AddressPart (a:=x)).2 = <*a,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th27:
  (product" AddressParts InsCode AddTo(a,b)).1 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode AddTo(a,b) = {1,2} by Th18,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode AddTo(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode AddTo(a,b)).1;
    then x in pi(AddressParts InsCode AddTo(a,b),1) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode AddTo(a,b) and
A3: f.1 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode AddTo(a,b) by A2;
    consider d1, d2 such that
A6: I = AddTo(d1,d2) by A5,AMI_5:48,MCART_1:7;
    x = <*d1,d2*>.1 by A3,A4,A6,MCART_1:def 2
      .= d1 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode AddTo(a,b) = 2 & InsCode AddTo(x,b) = 2 by MCART_1:7;
  then AddressPart AddTo(x,b) in AddressParts InsCode AddTo(a,b);
  then
A7: (AddressPart AddTo(x,b)).1 in pi(AddressParts InsCode AddTo(a,b),1) by
CARD_3:def 6;
  (AddressPart AddTo(x,b)).1 = <*x,b*>.1 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th28:
  (product" AddressParts InsCode AddTo(a,b)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode AddTo(a,b) = {1,2} by Th18,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode AddTo(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode AddTo(a,b)).2;
    then x in pi(AddressParts InsCode AddTo(a,b),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode AddTo(a,b) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode AddTo(a,b) by A2;
    consider d1, d2 such that
A6: I = AddTo(d1,d2) by A5,AMI_5:48,MCART_1:7;
    x = <*d1,d2*>.2 by A3,A4,A6,MCART_1:def 2
      .= d2 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode AddTo(a,b) = 2 & InsCode AddTo(a,x) = 2 by MCART_1:7;
  then AddressPart AddTo(a,x) in AddressParts InsCode AddTo(a,b);
  then
A7: (AddressPart AddTo(a,x)).2 in pi(AddressParts InsCode AddTo(a,b),2) by
CARD_3:def 6;
  (AddressPart AddTo(a,x)).2 = <*a,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th29:
  (product" AddressParts InsCode SubFrom(a,b)).1 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode SubFrom(a,b) = {1,2} by Th19,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode SubFrom(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode SubFrom(a,b)).1;
    then x in pi(AddressParts InsCode SubFrom(a,b),1) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode SubFrom(a,b) and
A3: f.1 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode SubFrom(a,b) by A2;
    consider d1, d2 such that
A6: I = SubFrom(d1,d2) by A5,AMI_5:49,MCART_1:7;
    x = <*d1,d2*>.1 by A3,A4,A6,MCART_1:def 2
      .= d1 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode SubFrom(a,b) = 3 & InsCode SubFrom(x,b) = 3 by MCART_1:7;
  then AddressPart SubFrom(x,b) in AddressParts InsCode SubFrom(a,b);
  then
A7: (AddressPart SubFrom(x,b)).1 in pi(AddressParts InsCode SubFrom( a,b ),
  1) by CARD_3:def 6;
  (AddressPart SubFrom(x,b)).1 = <*x,b*>.1 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th30:
  (product" AddressParts InsCode SubFrom(a,b)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode SubFrom(a,b) = {1,2} by Th19,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode SubFrom(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode SubFrom(a,b)).2;
    then x in pi(AddressParts InsCode SubFrom(a,b),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode SubFrom(a,b) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode SubFrom(a,b) by A2;
    consider d1, d2 such that
A6: I = SubFrom(d1,d2) by A5,AMI_5:49,MCART_1:7;
    x = <*d1,d2*>.2 by A3,A4,A6,MCART_1:def 2
      .= d2 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode SubFrom(a,b) = 3 & InsCode SubFrom(a,x) = 3 by MCART_1:7;
  then AddressPart SubFrom(a,x) in AddressParts InsCode SubFrom(a,b);
  then
A7: (AddressPart SubFrom(a,x)).2 in pi(AddressParts InsCode SubFrom( a,b ),
  2) by CARD_3:def 6;
  (AddressPart SubFrom(a,x)).2 = <*a,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th31:
  (product" AddressParts InsCode MultBy(a,b)).1 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode MultBy(a,b) = {1,2} by Th20,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode MultBy(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode MultBy(a,b)).1;
    then x in pi(AddressParts InsCode MultBy(a,b),1) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode MultBy(a,b) and
A3: f.1 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode MultBy(a,b) by A2;
    consider d1, d2 such that
A6: I = MultBy(d1,d2) by A5,AMI_5:50,MCART_1:7;
    x = <*d1,d2*>.1 by A3,A4,A6,MCART_1:def 2
      .= d1 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode MultBy(a,b) = 4 & InsCode MultBy(x,b) = 4 by MCART_1:7;
  then AddressPart MultBy(x,b) in AddressParts InsCode MultBy(a,b);
  then
A7: (AddressPart MultBy(x,b)).1 in pi(AddressParts InsCode MultBy(a, b), 1)
  by CARD_3:def 6;
  (AddressPart MultBy(x,b)).1 = <*x,b*>.1 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th32:
  (product" AddressParts InsCode MultBy(a,b)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode MultBy(a,b) = {1,2} by Th20,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode MultBy(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode MultBy(a,b)).2;
    then x in pi(AddressParts InsCode MultBy(a,b),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode MultBy(a,b) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode MultBy(a,b) by A2;
    consider d1, d2 such that
A6: I = MultBy(d1,d2) by A5,AMI_5:50,MCART_1:7;
    x = <*d1,d2*>.2 by A3,A4,A6,MCART_1:def 2
      .= d2 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode MultBy(a,b) = 4 & InsCode MultBy(a,x) = 4 by MCART_1:7;
  then AddressPart MultBy(a,x) in AddressParts InsCode MultBy(a,b);
  then
A7: (AddressPart MultBy(a,x)).2 in pi(AddressParts InsCode MultBy(a, b), 2)
  by CARD_3:def 6;
  (AddressPart MultBy(a,x)).2 = <*a,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th33:
  (product" AddressParts InsCode Divide(a,b)).1 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode Divide(a,b) = {1,2} by Th21,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode Divide(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode Divide(a,b)).1;
    then x in pi(AddressParts InsCode Divide(a,b),1) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode Divide(a,b) and
A3: f.1 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode Divide(a,b) by A2;
    consider d1, d2 such that
A6: I = Divide(d1,d2) by A5,AMI_5:51,MCART_1:7;
    x = <*d1,d2*>.1 by A3,A4,A6,MCART_1:def 2
      .= d1 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode Divide(a,b) = 5 & InsCode Divide(x,b) = 5 by MCART_1:7;
  then AddressPart Divide(x,b) in AddressParts InsCode Divide(a,b);
  then
A7: (AddressPart Divide(x,b)).1 in pi(AddressParts InsCode Divide(a, b), 1)
  by CARD_3:def 6;
  (AddressPart Divide(x,b)).1 = <*x,b*>.1 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th34:
  (product" AddressParts InsCode Divide(a,b)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode Divide(a,b) = {1,2} by Th21,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode Divide(a,b) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode Divide(a,b)).2;
    then x in pi(AddressParts InsCode Divide(a,b),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode Divide(a,b) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode Divide(a,b) by A2;
    consider d1, d2 such that
A6: I = Divide(d1,d2) by A5,AMI_5:51,MCART_1:7;
    x = <*d1,d2*>.2 by A3,A4,A6,MCART_1:def 2
      .= d2 by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode Divide(a,b) = 5 & InsCode Divide(a,x) = 5 by MCART_1:7;
  then AddressPart Divide(a,x) in AddressParts InsCode Divide(a,b);
  then
A7: (AddressPart Divide(a,x)).2 in pi(AddressParts InsCode Divide(a, b), 2)
  by CARD_3:def 6;
  (AddressPart Divide(a,x)).2 = <*a,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th35:
  (product" AddressParts InsCode goto k1).1 = NAT
proof
  dom product" AddressParts InsCode goto k1 = {1} by Th22,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode goto k1 by TARSKI:def 1;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode goto k1).1;
    then x in pi(AddressParts InsCode goto k1,1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in AddressParts InsCode goto k1 and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = AddressPart I and
A5: InsCode I = InsCode goto k1 by A2;
    consider i2 such that
A6: I = goto i2 by A5,AMI_5:52,MCART_1:7;
    g = <*i2*> by A4,A6,MCART_1:def 2;
    then x = i2 by A3,FINSEQ_1:def 8;
    hence x in NAT by AMI_1:def 4;
  end;
  let x be set;
  assume
  x in NAT;
  then reconsider x as Instruction-Location of SCM by AMI_1:def 4;
  InsCode goto k1 = 6 by MCART_1:7;
  then AddressPart goto x = <*x*> & InsCode goto k1 = InsCode goto x by
MCART_1:7,def 2;
  then
A7: <*x*> in AddressParts InsCode goto k1;
  <*x*>.1 = x by FINSEQ_1:def 8;
  then x in pi(AddressParts InsCode goto k1,1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

theorem Th36:
  (product" AddressParts InsCode (a =0_goto k1)).1 = NAT
proof
  dom product" AddressParts InsCode (a =0_goto k1) = {1,2} by Th23,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode (a =0_goto k1) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a =0_goto k1)).1;
    then x in pi(AddressParts InsCode (a =0_goto k1),1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in AddressParts InsCode (a =0_goto k1) and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = AddressPart I and
A5: InsCode I = InsCode (a =0_goto k1) by A2;
    consider i2, b such that
A6: I = b =0_goto i2 by A5,AMI_5:53,MCART_1:7;
    g = <*i2,b*> by A4,A6,MCART_1:def 2;
    then x = i2 by A3,FINSEQ_1:61;
    hence x in NAT by AMI_1:def 4;
  end;
  let x be set;
  assume
  x in NAT;
  then reconsider x as Instruction-Location of SCM by AMI_1:def 4;
  InsCode (a =0_goto k1) = 7 by MCART_1:7;
  then AddressPart (a =0_goto x) = <*x,a*> & InsCode (a =0_goto k1) = InsCode
  (a =0_goto x) by MCART_1:7,def 2;
  then
A7: <*x,a*> in AddressParts InsCode (a =0_goto k1);
  <*x,a*>.1 = x by FINSEQ_1:61;
  then x in pi(AddressParts InsCode (a =0_goto k1),1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

theorem Th37:
  (product" AddressParts InsCode (a =0_goto k1)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode (a =0_goto k1) = {1,2} by Th23,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode (a =0_goto k1) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a =0_goto k1)).2;
    then x in pi(AddressParts InsCode (a =0_goto k1),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode (a =0_goto k1) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode (a =0_goto k1) by A2;
    consider i2, b such that
A6: I = b =0_goto i2 by A5,AMI_5:53,MCART_1:7;
    x = <*i2,b*>.2 by A3,A4,A6,MCART_1:def 2
      .= b by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode (a =0_goto k1) = 7 & InsCode (x =0_goto k1) = 7 by MCART_1:7;
  then AddressPart (x =0_goto k1) in AddressParts InsCode (a =0_goto k1);
  then
A7: (AddressPart (x =0_goto k1)).2 in pi(AddressParts InsCode (a =0_goto k1
  ),2) by CARD_3:def 6;
  (AddressPart (x =0_goto k1)).2 = <*k1,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

theorem Th38:
  (product" AddressParts InsCode (a >0_goto k1)).1 = NAT
proof
  dom product" AddressParts InsCode (a >0_goto k1) = {1,2} by Th24,MCART_1:7;
  then
A1: 1 in dom product" AddressParts InsCode (a >0_goto k1) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a >0_goto k1)).1;
    then x in pi(AddressParts InsCode (a >0_goto k1),1) by A1,CARD_3:93;
    then consider g being Function such that
A2: g in AddressParts InsCode (a >0_goto k1) and
A3: x = g.1 by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: g = AddressPart I and
A5: InsCode I = InsCode (a >0_goto k1) by A2;
    consider i2, b such that
A6: I = b >0_goto i2 by A5,AMI_5:54,MCART_1:7;
    g = <*i2,b*> by A4,A6,MCART_1:def 2;
    then x = i2 by A3,FINSEQ_1:61;
    hence x in NAT by AMI_1:def 4;
  end;
  let x be set;
  assume
  x in NAT;
  then reconsider x as Instruction-Location of SCM by AMI_1:def 4;
  InsCode (a >0_goto k1) = 8 by MCART_1:7;
  then AddressPart (a >0_goto x) = <*x,a*> & InsCode (a >0_goto k1) = InsCode
  (a >0_goto x) by MCART_1:7,def 2;
  then
A7: <*x,a*> in AddressParts InsCode (a >0_goto k1);
  <*x,a*>.1 = x by FINSEQ_1:61;
  then x in pi(AddressParts InsCode (a >0_goto k1),1) by A7,CARD_3:def 6;
  hence thesis by A1,CARD_3:93;
end;

theorem Th39:
  (product" AddressParts InsCode (a >0_goto k1)).2 = SCM-Data-Loc
proof
  dom product" AddressParts InsCode (a >0_goto k1) = {1,2} by Th24,MCART_1:7;
  then
A1: 2 in dom product" AddressParts InsCode (a >0_goto k1) by TARSKI:def 2;
  hereby
    let x be set;
    assume
    x in (product" AddressParts InsCode (a >0_goto k1)).2;
    then x in pi(AddressParts InsCode (a >0_goto k1),2) by A1,CARD_3:def 13;
    then consider f being Function such that
A2: f in AddressParts InsCode (a >0_goto k1) and
A3: f.2 = x by CARD_3:def 6;
    consider I being Instruction of SCM such that
A4: f = AddressPart I and
A5: InsCode I = InsCode (a >0_goto k1) by A2;
    consider i2, b such that
A6: I = b >0_goto i2 by A5,AMI_5:54,MCART_1:7;
    x = <*i2,b*>.2 by A3,A4,A6,MCART_1:def 2
      .= b by FINSEQ_1:61;
    hence x in SCM-Data-Loc by AMI_3:def 2;
  end;
  let x be set;
  assume
  x in SCM-Data-Loc;
  then reconsider x as Data-Location by AMI_3:def 2;
  InsCode (a >0_goto k1) = 8 & InsCode (x >0_goto k1) = 8 by MCART_1:7;
  then AddressPart (x >0_goto k1) in AddressParts InsCode (a >0_goto k1);
  then
A7: (AddressPart (x >0_goto k1)).2 in pi(AddressParts InsCode (a >0_goto k1
  ),2) by CARD_3:def 6;
  (AddressPart (x >0_goto k1)).2 = <*k1,x*>.2 by MCART_1:def 2
    .= x by FINSEQ_1:61;
  hence thesis by A1,A7,CARD_3:def 13;
end;

Lm4: for l being Instruction-Location of SCM, i being Instruction of SCM holds
(for s being State of SCM st IC s = l & s.l = i holds Exec(i,s).IC SCM = Next
IC s) implies NIC(i, l) = {Next l}

proof
  consider t being State of SCM;
  let l be Instruction-Location of SCM, i be Instruction of SCM;
  reconsider I = i as Element of ObjectKind l by AMI_1:def 14;
  assume

A1: for s being State of SCM st IC s = l & s.l = i holds Exec(i, s).IC
  SCM = Next IC s;

  hereby
    let x be set;
    assume
    x in NIC(i,l);

    then ex s being State of SCM st x = IC Following s & IC s = l & s.l = i;

    then x = Next l by A1;
    hence x in {Next l} by TARSKI:def 1;
  end;
  l in NAT by AMI_1:def 4;
  then reconsider il1 = l as Element of ObjectKind IC SCM by AMI_1:def 11;
  set u = t+*((IC SCM, l)-->(il1, I));
  let x be set;
  assume
  x in {Next l};
  then
A2: x = Next l by TARSKI:def 1;
A3: IC u = l & u.l = i by AMI_1:129;
  then IC Following u = Next l by A1;
  hence thesis by A2,A3;
end;

Lm5: for i being Instruction of SCM holds (for l being Instruction-Location of
SCM holds NIC(i,l)={Next l}) implies JUMP i is empty

proof
  set p=1, q=2;
  let i be Instruction of SCM;
  assume
A1: for l being Instruction-Location of SCM holds NIC(i,l)={Next l};

  set X = { NIC(i,f) where f is Instruction-Location of SCM: not contradiction
  };

  reconsider p, q as Instruction-Location of SCM by AMI_1:def 4;
  assume
  not thesis;
  then consider x being set such that
A2: x in meet X by XBOOLE_0:def 1;
  NIC(i,p) = {Next p} by A1;
  then {Next p} in X;
  then x in {Next p} by A2,SETFAM_1:def 1;
  then
A3: x = Next p by TARSKI:def 1;
  NIC(i,q) = {Next q} by A1;
  then {Next q} in X;
  then x in {Next q} by A2,SETFAM_1:def 1;
  hence contradiction by A3,TARSKI:def 1;
end;

theorem Th40:
  NIC(halt SCM, il) = {il}
proof
  now
    let x be set;
A1: now
      il in NAT by AMI_1:def 4;
      then reconsider il1 = il as Element of ObjectKind IC SCM by AMI_1:def 11;
      reconsider I = halt SCM as Element of ObjectKind il by AMI_1:def 14;
      consider t being State of SCM;
      assume
A2:   x = il;
      set u = t+*((IC SCM, il)-->(il1, I));
      dom ((IC SCM, il)-->(il1, I)) = {IC SCM, il} by FUNCT_4:65;
      then
A3:   IC SCM in dom ((IC SCM, il)-->(il1, I)) by TARSKI:def 2;
A4:   u.il = halt SCM & IC u = il by AMI_1:129;
      then IC Following u = u.IC SCM by AMI_1:def 8
        .= ((IC SCM, il)-->(il1, I)).IC SCM by A3,FUNCT_4:14
        .= il by AMI_1:48,FUNCT_4:66;
      hence x in {IC Following s : IC s = il & s.il=halt SCM} by A2,A4;
    end;
    now
      assume
      x in {IC Following s : IC s = il & s.il=halt SCM};
      then ex s being State of SCM st x = IC Following s & IC s = il & s.il =
      halt SCM;
      hence x = il by AMI_1:def 8;
    end;
    hence
    x in {il} iff x in {IC Following s : IC s = il & s.il=halt SCM} by A1,
TARSKI:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  cluster JUMP halt SCM -> empty;
  coherence;
end;

theorem Th41:
  NIC(a := b, il) = {Next il}
proof
  set i = a:=b;
  for s being State of SCM st IC s = il & s.il = i holds Exec(i,s).IC SCM
  = Next IC s by AMI_3:8;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP (a := b) -> empty;
  coherence
  proof
    for l being Instruction-Location of SCM holds NIC(a:=b,l)={Next l} by Th41;
    hence thesis by Lm5;
  end;
end;

theorem Th42:
  NIC(AddTo(a,b), il) = {Next il}
proof
  set i = AddTo(a,b);
  for s being State of SCM st IC s = il & s.il = i holds Exec(i,s).IC SCM
  = Next IC s by AMI_3:9;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP AddTo(a, b) -> empty;
  coherence
  proof
    for l being Instruction-Location of SCM holds NIC(AddTo(a,b),l)={Next
    l} by Th42;
    hence thesis by Lm5;
  end;
end;

theorem Th43:
  NIC(SubFrom(a,b), il) = {Next il}
proof
  set i = SubFrom(a,b);
  for s being State of SCM st IC s = il & s.il = i holds Exec(i,s).IC SCM
  = Next IC s by AMI_3:10;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP SubFrom(a, b) -> empty;
  coherence
  proof
    for l being Instruction-Location of SCM holds NIC(SubFrom(a,b),l)={
    Next l} by Th43;
    hence thesis by Lm5;
  end;
end;

theorem Th44:
  NIC(MultBy(a,b), il) = {Next il}
proof
  set i = MultBy(a,b);
  for s being State of SCM st IC s = il & s.il = i holds Exec(i,s).IC SCM
  = Next IC s by AMI_3:11;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP MultBy(a,b) -> empty;
  coherence
  proof
    for l being Instruction-Location of SCM holds NIC(MultBy(a,b),l)={Next
    l} by Th44;
    hence thesis by Lm5;
  end;
end;

theorem Th45:
  NIC(Divide(a,b), il) = {Next il}
proof
  set i = Divide(a,b);
  for s being State of SCM st IC s = il & s.il = i holds Exec(i,s).IC SCM
  = Next IC s by AMI_3:12;
  hence thesis by Lm4;
end;

registration
  let a, b;
  cluster JUMP Divide(a,b) -> empty;
  coherence
  proof
    for l being Instruction-Location of SCM holds NIC(Divide(a,b),l)={Next
    l} by Th45;
    hence thesis by Lm5;
  end;
end;

theorem Th46:
  NIC(goto k, il) = {k}
proof
  now
    let x be set;
A1: now
      il in NAT by AMI_1:def 4;
      then reconsider il1 = il as Element of ObjectKind IC SCM by AMI_1:def 11;
      reconsider I = goto k as Element of ObjectKind il by AMI_1:def 14;
      consider t being State of SCM;
      assume
A2:   x = k;
      set u = t+*((IC SCM, il)-->(il1, I));
A3:   IC u = il & u.il = goto k by AMI_1:129;
      then IC Following u = k by AMI_3:13;
      hence x in {IC Following s : IC s = il & s.il=goto k} by A2,A3;
    end;
    now
      assume
      x in {IC Following s : IC s = il & s.il=goto k};
      then ex s being State of SCM st x = IC Following s & IC s = il & s.il =
      goto k;
      hence x = k by AMI_3:13;
    end;
    hence
    x in {k} iff x in {IC Following s : IC s = il & s.il=goto k} by A1,
TARSKI:def 1;
  end;
  hence thesis by TARSKI:2;
end;

theorem Th47:
  JUMP goto k = {k}
proof
  set X = { NIC(goto k, il) : not contradiction };
  now
    let x be set;
    hereby
      set il1 = il.1;
A1:   NIC(goto k, il1) in X;
      assume
      x in meet X;
      then x in NIC(goto k, il1) by A1,SETFAM_1:def 1;
      hence x in {k} by Th46;
    end;
    assume
    x in {k};
    then
A2: x = k by TARSKI:def 1;
A3: now
      let Y be set;
      assume
      Y in X;
      then consider il being Instruction-Location of SCM such that
A4:   Y = NIC(goto k, il);
      NIC(goto k, il) = {k} by Th46;
      hence k in Y by A4,TARSKI:def 1;
    end;
    k in NAT by ORDINAL1:def 13;
    then reconsider k as Instruction-Location of SCM by AMI_1:def 4;
    NIC(goto k, k) in X;
    hence x in meet X by A2,A3,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let i1;
  cluster JUMP goto i1 -> non empty trivial;
  coherence
  proof
    JUMP goto i1 = {i1} by Th47;
    hence thesis;
  end;
end;

theorem Th48:
  NIC(a=0_goto k, il) = {k, Next il}
proof
  consider t being State of SCM;
  hereby
    let x be set;
    assume
    x in NIC(a=0_goto k, il);
    then consider s being State of SCM such that
A1: x = IC Following s & IC s = il & s.il = a=0_goto k;
    per cases;
    suppose
      s.a = 0;
      then x = k by A1,AMI_3:14;
      hence x in {k, Next il} by TARSKI:def 2;
    end;
    suppose
      s.a <> 0;
      then x = Next il by A1,AMI_3:14;
      hence x in {k, Next il} by TARSKI:def 2;
    end;
  end;
  let x be set;
  reconsider I = a=0_goto k as Element of ObjectKind il by AMI_1:def 14;
A2: IC SCM <> a by AMI_5:20;
  il in NAT by AMI_1:def 4;
  then reconsider il1 = il as Element of ObjectKind IC SCM by AMI_1:def 11;
  set u = t+*((IC SCM, il)-->(il1, I));
  il in NAT by AMI_1:def 4;
  then
A3: a <> il by Th1;
  assume
A4: x in {k,Next il};
  per cases by A4,TARSKI:def 2;
  suppose
A5: x = k;
    set v = u+*(a .--> 0);
A6: dom (a .--> 0) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 0) by A2,TARSKI:def 1;
    then
A7: IC v = IC u by FUNCT_4:12
      .= il1 by AMI_1:129;
    not il in dom (a .--> 0) by A3,A6,TARSKI:def 1;
    then
A8: v.il = u.il by FUNCT_4:12
      .= I by AMI_1:129;
    a in dom (a .--> 0) by A6,TARSKI:def 1;
    then v.a = (a .--> 0).a by FUNCT_4:14
      .= 0 by FUNCOP_1:87;
    then IC Following v = k by A7,A8,AMI_3:14;
    hence thesis by A5,A7,A8;
  end;
  suppose
A9: x = Next il;
    set v = u+*(a .--> 1);
A10: dom (a .--> 1) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 1) by A2,TARSKI:def 1;
    then
A11: IC v = IC u by FUNCT_4:12
      .= il1 by AMI_1:129;
    not il in dom (a .--> 1) by A3,A10,TARSKI:def 1;
    then
A12: v.il = u.il by FUNCT_4:12
      .= I by AMI_1:129;
    a in dom (a .--> 1) by A10,TARSKI:def 1;
    then v.a = (a .--> 1).a by FUNCT_4:14
      .= 1 by FUNCOP_1:87;
    then IC Following v = Next il by A11,A12,AMI_3:14;
    hence thesis by A9,A11,A12;
  end;
end;

theorem Th49:
  JUMP (a=0_goto k) = {k}
proof
  set X = { NIC(a=0_goto k, il) : not contradiction };
  now
    let x be set;
A1: now
      let Y be set;
      assume
      Y in X;
      then consider il being Instruction-Location of SCM such that
A2:   Y = NIC(a=0_goto k, il);
      NIC(a=0_goto k, il) = {k, Next il} by Th48;
      hence k in Y by A2,TARSKI:def 2;
    end;
    hereby
      set il1 = il.1, il2 = il.2;
      assume
A3:   x in meet X;
A4:   NIC(a=0_goto k, il2) = {k, Next il2} by Th48;
      NIC(a=0_goto k, il2) in X;
      then x in NIC(a=0_goto k, il2) by A3,SETFAM_1:def 1;
      then
A5:   x = k or x = Next il2 by A4,TARSKI:def 2;
A6:   NIC(a=0_goto k, il1) = {k, Next il1} by Th48;
      NIC(a=0_goto k, il1) in X;
      then x in NIC(a=0_goto k, il1) by A3,SETFAM_1:def 1;
      then x = k or x = Next il1 by A6,TARSKI:def 2;
      hence x in {k} by A5,TARSKI:def 1;
    end;
    assume
    x in {k};
    then
A7: x = k by TARSKI:def 1;
    k in NAT by ORDINAL1:def 13;
    then reconsider k as Instruction-Location of SCM by AMI_1:def 4;
    NIC(a=0_goto k, k) in X;
    hence x in meet X by A7,A1,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let a, i1;
  cluster JUMP (a =0_goto i1) -> non empty trivial;
  coherence
  proof
    JUMP (a =0_goto i1) = {i1} by Th49;
    hence thesis;
  end;
end;

theorem Th50:
  NIC(a>0_goto k, il) = {k, Next il}
proof
  consider t being State of SCM;
  hereby
    let x be set;
    assume
    x in NIC(a>0_goto k, il);
    then consider s being State of SCM such that
A1: x = IC Following s & IC s = il & s.il = a>0_goto k;
    per cases;
    suppose
      s.a > 0;
      then x = k by A1,AMI_3:15;
      hence x in {k, Next il} by TARSKI:def 2;
    end;
    suppose
      s.a <= 0;
      then x = Next il by A1,AMI_3:15;
      hence x in {k, Next il} by TARSKI:def 2;
    end;
  end;
  let x be set;
  reconsider I = a>0_goto k as Element of ObjectKind il by AMI_1:def 14;
A2: IC SCM <> a by AMI_5:20;
  il in NAT by AMI_1:def 4;
  then reconsider il1 = il as Element of ObjectKind IC SCM by AMI_1:def 11;
  set u = t+*((IC SCM, il)-->(il1, I));
  il in NAT by AMI_1:def 4;
  then
A3: a <> il by Th1;
  assume
A4: x in {k,Next il};
  per cases by A4,TARSKI:def 2;
  suppose
A5: x = k;
    set v = u+*(a .--> 1);
A6: dom (a .--> 1) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 1) by A2,TARSKI:def 1;
    then
A7: IC v = IC u by FUNCT_4:12
      .= il1 by AMI_1:129;
    not il in dom (a .--> 1) by A3,A6,TARSKI:def 1;
    then
A8: v.il = u.il by FUNCT_4:12
      .= I by AMI_1:129;
    a in dom (a .--> 1) by A6,TARSKI:def 1;
    then v.a = (a .--> 1).a by FUNCT_4:14
      .= 1 by FUNCOP_1:87;
    then IC Following v = k by A7,A8,AMI_3:15;
    hence thesis by A5,A7,A8;
  end;
  suppose
A9: x = Next il;
    set v = u+*(a .--> 0);
A10: dom (a .--> 0) = {a} by FUNCOP_1:19;
    then not IC SCM in dom (a .--> 0) by A2,TARSKI:def 1;
    then
A11: IC v = IC u by FUNCT_4:12
      .= il1 by AMI_1:129;
    not il in dom (a .--> 0) by A3,A10,TARSKI:def 1;
    then
A12: v.il = u.il by FUNCT_4:12
      .= I by AMI_1:129;
    a in dom (a .--> 0) by A10,TARSKI:def 1;
    then v.a = (a .--> 0).a by FUNCT_4:14
      .= 0 by FUNCOP_1:87;
    then IC Following v = Next il by A11,A12,AMI_3:15;
    hence thesis by A9,A11,A12;
  end;
end;

theorem Th51:
  JUMP (a>0_goto k) = {k}
proof
  set X = { NIC(a>0_goto k, il) : not contradiction };
  now
    let x be set;
A1: now
      let Y be set;
      assume
      Y in X;
      then consider il being Instruction-Location of SCM such that
A2:   Y = NIC(a>0_goto k, il);
      NIC(a>0_goto k, il) = {k, Next il} by Th50;
      hence k in Y by A2,TARSKI:def 2;
    end;
    hereby
      set il1 = il.1, il2 = il.2;
      assume
A3:   x in meet X;
A4:   NIC(a>0_goto k, il2) = {k, Next il2} by Th50;
      NIC(a>0_goto k, il2) in X;
      then x in NIC(a>0_goto k, il2) by A3,SETFAM_1:def 1;
      then
A5:   x = k or x = Next il2 by A4,TARSKI:def 2;
A6:   NIC(a>0_goto k, il1) = {k, Next il1} by Th50;
      NIC(a>0_goto k, il1) in X;
      then x in NIC(a>0_goto k, il1) by A3,SETFAM_1:def 1;
      then x = k or x = Next il1 by A6,TARSKI:def 2;
      hence x in {k} by A5,TARSKI:def 1;
    end;
    assume
    x in {k};
    then
A7: x = k by TARSKI:def 1;
    k in NAT by ORDINAL1:def 13;
    then reconsider k as Instruction-Location of SCM by AMI_1:def 4;
    NIC(a>0_goto k, k) in X;
    hence x in meet X by A7,A1,SETFAM_1:def 1;
  end;
  hence thesis by TARSKI:2;
end;

registration
  let a, i1;
  cluster JUMP (a >0_goto i1) -> non empty trivial;
  coherence
  proof
    JUMP (a >0_goto i1) = {i1} by Th51;
    hence thesis;
  end;
end;

theorem Th52:
  SUCC il = {il, Next il}
proof
  set X = { NIC(I, il) \ JUMP I where I is Element of the Instructions of SCM:
  not contradiction };
  set N = {il, Next il};
  now
    let x be set;
    hereby
      assume
      x in union X;
      then consider Y being set such that
A1:   x in Y and
A2:   Y in X by TARSKI:def 4;
      consider i being Element of the Instructions of SCM such that
A3:   Y = NIC(i, il) \ JUMP i by A2;
      per cases by AMI_3:69;
      suppose
        i = [0,{}];
        then x in {il} \ JUMP halt SCM by A1,A3,Th40,AMI_3:71;
        then x = il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = a:=b;
        then consider a, b such that
A4:     i = a:=b;
        x in {Next il} \ JUMP (a:=b) by A1,A3,A4,Th41;
        then x = Next il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = AddTo(a,b);
        then consider a, b such that
A5:     i = AddTo(a,b);
        x in {Next il} \ JUMP AddTo(a,b) by A1,A3,A5,Th42;
        then x = Next il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = SubFrom(a,b);
        then consider a, b such that
A6:     i = SubFrom(a,b);
        x in {Next il} \ JUMP SubFrom(a,b) by A1,A3,A6,Th43;
        then x = Next il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = MultBy(a,b);
        then consider a, b such that
A7:     i = MultBy(a,b);
        x in {Next il} \ JUMP MultBy(a,b) by A1,A3,A7,Th44;
        then x = Next il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex a,b st i = Divide(a,b);
        then consider a, b such that
A8:     i = Divide(a,b);
        x in {Next il} \ JUMP Divide(a,b) by A1,A3,A8,Th45;
        then x = Next il by TARSKI:def 1;
        hence x in N by TARSKI:def 2;
      end;
      suppose
        ex k st i = goto k;
        then consider k such that
A9:     i = goto k;
        x in {k} \ JUMP i by A1,A3,A9,Th46;
        then x in {k} \ {k} by A9,Th47;
        hence x in N by XBOOLE_1:37;
      end;
      suppose
        ex a,k st i = a=0_goto k;
        then consider a, k such that
A10:    i = a=0_goto k;
A11:    NIC(i, il) = {k, Next il} by A10,Th48;
        x in NIC(i, il) by A1,A3,XBOOLE_0:def 5;
        then
A12:    x = k or x = Next il by A11,TARSKI:def 2;
        x in NIC(i, il) \ {k} by A1,A3,A10,Th49;
        then not x in {k} by XBOOLE_0:def 5;
        hence x in N by A12,TARSKI:def 1,def 2;
      end;
      suppose
        ex a,k st i = a>0_goto k;
        then consider a, k such that
A13:    i = a>0_goto k;
A14:    NIC(i, il) = {k, Next il} by A13,Th50;
        x in NIC(i, il) by A1,A3,XBOOLE_0:def 5;
        then
A15:    x = k or x = Next il by A14,TARSKI:def 2;
        x in NIC(i, il) \ {k} by A1,A3,A13,Th51;
        then not x in {k} by XBOOLE_0:def 5;
        hence x in N by A15,TARSKI:def 1,def 2;
      end;
    end;
    assume
A16: x in {il, Next il};
    per cases by A16,TARSKI:def 2;
    suppose
A17:  x = il;
      set i = halt SCM;
      NIC(i, il) \ JUMP i = {il} by Th40;
      then
A18:  {il} in X;
      x in {il} by A17,TARSKI:def 1;
      hence x in union X by A18,TARSKI:def 4;
    end;
    suppose
A19:  x = Next il;
      consider a, b being Data-Location;
      set i = AddTo(a,b);
      NIC(i, il) \ JUMP i = {Next il} by Th42;
      then
A20:  {Next il} in X;
      x in {Next il} by A19,TARSKI:def 1;
      hence x in union X by A20,TARSKI:def 4;
    end;
  end;
  hence thesis by TARSKI:2;
end;

theorem Th53:
  for f being IL-Function of NAT, SCM st for k being Element of
NAT holds f.k = il.k holds f is bijective & for k being Element of NAT holds f.
  (k+1) in SUCC (f.k) & for j being Element of NAT st f.j in SUCC (f.k) holds k
  <= j
proof
  let f be IL-Function of NAT, SCM such that
A1: for k being Element of NAT holds f.k = il.k;
A2: f is one-to-one
  proof
    let x1, x2 be set such that
A3: x1 in dom f & x2 in dom f and
A4: f.x1 = f.x2;
    reconsider k1 = x1, k2 = x2 as Element of NAT by A3,FUNCT_2:def 1;
    f.k1 = il.k1 & f.k2 = il.k2 by A1;
    hence thesis by A4;
  end;
A5: NAT c= rng f
  proof
    let x be set;
    assume
    x in NAT;
    then reconsider i=x as Element of NAT;
    dom f = NAT & il.i = f.i by A1,FUNCT_2:def 1;
    hence thesis by FUNCT_1:def 5;
  end;
  rng f c= NAT by RELAT_1:def 19;
  then rng f= NAT by A5,XBOOLE_0:def 10;
  then f is onto by FUNCT_2:def 3;
  hence f is bijective by A2,FUNCT_2:def 4;
  let k be Element of NAT;
A6: f.k = il.k by A1;
  il.(k+1) in NAT by AMI_1:def 4;
  then
A7: f.(k+1) = il.(k+1) by A1;
A8: SUCC (f.k) = {f.k, Next (f.k)} by Th52;
  hence f.(k+1) in SUCC (f.k) by A7,A6,TARSKI:def 2;
A9: dom f = NAT by FUNCT_2:def 1;
  let j be Element of NAT;
  assume
A10: f.j in SUCC (f.k);
  per cases by A8,A10,TARSKI:def 2;
  suppose
    f.j = f.k;
    hence thesis by A2,A9,FUNCT_1:def 8;
  end;
  suppose
    f.j = Next (f.k);
    then j = k+1 by A2,A7,A6,A9,FUNCT_1:def 8;
    hence thesis by NAT_1:11;
  end;
end;

registration
  cluster SCM -> standard;
  coherence
  proof
    deffunc F(Element of NAT) = il.$1;
A1: for k being Element of NAT holds F(k) is Element of NAT;
    consider f being Function of NAT, NAT such that
A2: for k being Element of NAT holds f.k = F(k) from FUNCT_2:sch 9(A1);
    reconsider f as IL-Function of NAT, SCM by AMI_1:def 36;
    f is bijective & for k being Element of NAT holds f.(k+1) in SUCC (f.k
) & for j being Element of NAT st f.j in SUCC (f.k) holds k <= j by A2,Th53;
    hence thesis by AMISTD_1:19;
  end;
end;

theorem Th54:
  il.(SCM,k) = il.k
proof
  deffunc F(Element of NAT) = il.$1;
A1: for k being Element of NAT holds F(k) is Element of NAT;
  consider f being Function of NAT, NAT such that
A2: for k being Element of NAT holds f.k = F(k) from FUNCT_2:sch 9(A1);
  reconsider f as IL-Function of NAT, SCM by AMI_1:def 36;
A3: f is bijective & for k being Element of NAT holds f.(k+1) in SUCC (f.k)
  & for j being Element of NAT st f.j in SUCC (f.k) holds k <= j by A2,Th53;
  ex f being IL-Function of NAT, SCM st f is bijective & (for m, n being
  Element of NAT holds m <= n iff f.m <= f.n) & il.k = f.k
  proof
    take f;
    thus f is bijective by A2,Th53;
    thus for m, n being Element of NAT holds m <= n iff f.m <= f.n by A3,
AMISTD_1:18;
    il.k in NAT by AMI_1:def 4;
    hence thesis by A2;
  end;
  hence thesis by AMISTD_1:def 12;
end;

theorem Th55:
  Next il.(SCM,k) = il.(SCM,k+1)
proof
  thus Next il.(SCM,k) = Next il.k by Th54
    .= il.(k+1)
    .= il.(SCM,k+1) by Th54;
end;

theorem Th56:
  Next il = NextLoc il
proof
  Next il.(SCM,locnum il) = il.(SCM,locnum il+1) by Th55;
  hence thesis by AMISTD_1:def 13;
end;

registration
  cluster InsCode halt SCM -> jump-only InsType of SCM;
  coherence
  proof
    now
      let s be State of SCM, o be Object of SCM, I be Instruction of SCM;
      assume that
A1:   InsCode I = InsCode halt SCM and
      o <> IC SCM;
      I = halt SCM by A1,AMI_5:37,46;
      hence Exec(I, s).o = s.o by AMI_1:def 8;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  cluster halt SCM -> jump-only;
  coherence
  proof
    thus InsCode halt SCM is jump-only;
  end;
end;

registration
  let i1;
  cluster InsCode goto i1 -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A1:   InsCode I = InsCode goto i1 and
A2:   o <> IC S;
A3:   ex i2 st I = goto i2 by A1,AMI_5:52,MCART_1:7;
      per cases by A2,Th3;
      suppose
        o in NAT;
        then reconsider l=o as Instruction-Location of S by AMI_1:def 4;
        l=o;
        hence Exec(I, s).o = s.o by AMI_1:def 13;
      end;
      suppose
        o is Data-Location;
        hence Exec(I, s).o = s.o by A3,AMI_3:13;
      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  let i1;
  cluster goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode goto i1 is jump-only;
    JUMP goto i1 <> {};
    hence goto i1 is non sequential by AMISTD_1:43;
    take 1;
    dom AddressPart goto i1 = dom <*i1*> by MCART_1:def 2
      .= {1} by FINSEQ_1:4,def 8;
    hence 1 in dom AddressPart goto i1 by TARSKI:def 1;
    thus thesis by Th35;
  end;
end;

registration
  let a, i1;
  cluster InsCode (a =0_goto i1) -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A1:   InsCode I = InsCode (a =0_goto i1) and
A2:   o <> IC S;
A3:   ex i2, b st I = (b =0_goto i2) by A1,AMI_5:53,MCART_1:7;
      per cases by A2,Th3;
      suppose
        o in NAT;
        then reconsider l=o as Instruction-Location of S by AMI_1:def 4;
        l=o;
        hence Exec(I, s).o = s.o by AMI_1:def 13;
      end;
      suppose
        o is Data-Location;
        hence Exec(I, s).o = s.o by A3,AMI_3:14;
      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
  cluster InsCode (a >0_goto i1) -> jump-only InsType of SCM;
  coherence
  proof
    set S = SCM;
    now
      let s be State of S, o be Object of S, I be Instruction of S;
      assume that
A4:   InsCode I = InsCode (a >0_goto i1) and
A5:   o <> IC S;
A6:   ex i2, b st I = (b >0_goto i2) by A4,AMI_5:54,MCART_1:7;
      per cases by A5,Th3;
      suppose
        o in NAT;
        then reconsider l=o as Instruction-Location of S by AMI_1:def 4;
        l=o;
        hence Exec(I, s).o = s.o by AMI_1:def 13;
      end;
      suppose
        o is Data-Location;
        hence Exec(I, s).o = s.o by A6,AMI_3:15;
      end;
    end;
    hence thesis by AMISTD_1:def 3;
  end;
end;

registration
  let a, i1;
  cluster a =0_goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode (a =0_goto i1) is jump-only;
    JUMP (a =0_goto i1) <> {};
    hence a =0_goto i1 is non sequential by AMISTD_1:43;
    take 1;
    dom AddressPart (a =0_goto i1) = dom <*i1,a*> by MCART_1:def 2
      .= {1,2} by FINSEQ_1:4,FINSEQ_3:29;
    hence 1 in dom AddressPart (a =0_goto i1) by TARSKI:def 2;
    thus thesis by Th36;
  end;
  cluster a >0_goto i1 -> jump-only non sequential non ins-loc-free;
  coherence
  proof
    thus InsCode (a >0_goto i1) is jump-only;
    JUMP (a >0_goto i1) <> {};
    hence a >0_goto i1 is non sequential by AMISTD_1:43;
    take 1;
    dom AddressPart (a >0_goto i1) = dom <*i1,a*> by MCART_1:def 2
      .= {1,2} by FINSEQ_1:4,FINSEQ_3:29;
    hence 1 in dom AddressPart (a >0_goto i1) by TARSKI:def 2;
    thus thesis by Th38;
  end;
end;

Lm6: dl.0 <> dl.1 by AMI_3:52;

registration
  let a, b;
  cluster InsCode (a:=b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A1: InsCode (a:=b) = 1 by MCART_1:7
      .= InsCode (dl.0:=dl.1) by MCART_1:7;
A2: dl.0 <> IC SCM by AMI_3:57;
A3: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then
A4: dl.1 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    dl.0 in dom ((dl.0, dl.1)-->(0,1)) by A3,TARSKI:def 2;
    then
A5: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
    Exec((dl.0:=dl.1), t).dl.0 = t.dl.1 by AMI_3:8
      .= (dl.0, dl.1)-->(0,1).dl.1 by A4,FUNCT_4:14
      .= 1 by FUNCT_4:66;
    hence thesis by A1,A2,A5,AMISTD_1:def 3;
  end;
  cluster InsCode AddTo(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A6: InsCode AddTo(a,b) = 2 by MCART_1:7
      .= InsCode AddTo(dl.0, dl.1) by MCART_1:7;
A7: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    then
A8: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
    dl.1 in dom ((dl.0, dl.1)-->(0,1)) by A7,TARSKI:def 2;
    then t.dl.1 = (dl.0, dl.1)-->(0,1).dl.1 by FUNCT_4:14
      .= 1 by FUNCT_4:66;
    then dl.0 <> IC SCM & Exec(AddTo(dl.0, dl.1), t).dl.0 = 0+1 by A8,AMI_3:9
,57;
    hence thesis by A6,A8,AMISTD_1:def 3;
  end;
  cluster InsCode SubFrom(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(0,1));
A9: InsCode SubFrom(a,b) = 3 by MCART_1:7
      .= InsCode SubFrom(dl.0, dl.1) by MCART_1:7;
A10: dom ((dl.0, dl.1)-->(0,1)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(0,1)) by TARSKI:def 2;
    then
A11: t.dl.0 = (dl.0, dl.1)-->(0,1).dl.0 by FUNCT_4:14
      .= 0 by AMI_3:52,FUNCT_4:66;
A12: dl.0 <> IC SCM by AMI_3:57;
    dl.1 in dom ((dl.0, dl.1)-->(0,1)) by A10,TARSKI:def 2;
    then
A13: t.dl.1 = (dl.0, dl.1)-->(0,1).dl.1 by FUNCT_4:14
      .= 1 by FUNCT_4:66;
    Exec(SubFrom(dl.0, dl.1), t).dl.0 = t.dl.0 - t.dl.1 by AMI_3:10
      .= -1 by A11,A13;
    hence thesis by A9,A12,A11,AMISTD_1:def 3;
  end;
  cluster InsCode MultBy(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(1,0));
A14: InsCode MultBy(a,b) = 4 by MCART_1:7
      .= InsCode MultBy(dl.0, dl.1) by MCART_1:7;
A15: dom ((dl.0, dl.1)-->(1,0)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(1,0)) by TARSKI:def 2;
    then
A16: t.dl.0 = (dl.0, dl.1)-->(1,0).dl.0 by FUNCT_4:14
      .= 1 by AMI_3:52,FUNCT_4:66;
A17: dl.0 <> IC SCM by AMI_3:57;
    dl.1 in dom ((dl.0, dl.1)-->(1,0)) by A15,TARSKI:def 2;
    then
A18: t.dl.1 = (dl.0, dl.1)-->(1,0).dl.1 by FUNCT_4:14
      .= 0 by FUNCT_4:66;
    Exec(MultBy(dl.0, dl.1), t).dl.0 = t.dl.0 * t.dl.1 by AMI_3:11
      .= 0 by A18;
    hence thesis by A14,A17,A16,AMISTD_1:def 3;
  end;
  cluster InsCode Divide(a,b) -> non jump-only InsType of SCM;
  coherence
  proof
    consider w being State of SCM;
    set t = w+*((dl.0, dl.1)-->(7,3));
A19: InsCode Divide(a,b) = 5 by MCART_1:7
      .= InsCode Divide(dl.0, dl.1) by MCART_1:7;
A20: dom ((dl.0, dl.1)-->(7,3)) = {dl.0, dl.1} by FUNCT_4:65;
    then dl.0 in dom ((dl.0, dl.1)-->(7,3)) by TARSKI:def 2;
    then
A21: t.dl.0 = (dl.0, dl.1)-->(7,3).dl.0 by FUNCT_4:14
      .= 7 by AMI_3:52,FUNCT_4:66;
A22: 7 = 2 * 3 + 1;
A23: dl.0 <> IC SCM by AMI_3:57;
    dl.1 in dom ((dl.0, dl.1)-->(7,3)) by A20,TARSKI:def 2;
    then t.dl.1 = (dl.0, dl.1)-->(7,3).dl.1 by FUNCT_4:14
      .= 3 by FUNCT_4:66;
    then Exec(Divide(dl.0, dl.1), t).dl.0 = 7 div (3 qua Element of NAT) by A21
,Lm6,AMI_3:12
      .= 2 by A22,NAT_D:def 1;
    hence thesis by A19,A23,A21,AMISTD_1:def 3;
  end;
end;

registration
  let a, b;
  cluster a:=b -> non jump-only sequential;
  coherence
  proof
    thus InsCode (a:=b) is not jump-only;
    let s be State of SCM;
    Next IC s = NextLoc IC s by Th56;
    hence thesis by AMI_3:8;
  end;
  cluster AddTo(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode AddTo(a,b) is not jump-only;
    let s be State of SCM;
    Next IC s = NextLoc IC s by Th56;
    hence thesis by AMI_3:9;
  end;
  cluster SubFrom(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode SubFrom(a,b) is not jump-only;
    let s be State of SCM;
    Next IC s = NextLoc IC s by Th56;
    hence thesis by AMI_3:10;
  end;
  cluster MultBy(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode MultBy(a,b) is not jump-only;
    let s be State of SCM;
    Next IC s = NextLoc IC s by Th56;
    hence thesis by AMI_3:11;
  end;
  cluster Divide(a,b) -> non jump-only sequential;
  coherence
  proof
    thus InsCode Divide(a,b) is not jump-only;
    let s be State of SCM;
    Next IC s = NextLoc IC s by Th56;
    hence thesis by AMI_3:12;
  end;
end;

registration
  cluster SCM -> homogeneous with_explicit_jumps without_implicit_jumps;
  coherence
  proof
    thus SCM is homogeneous
    proof
      let I, J be Instruction of SCM such that
A1:   InsCode I = InsCode J;
A2:   J = [0,{}] or (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or
(ex a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = goto k) or (ex a,k st J = a=0_goto k) or ex a,
      k st J = a>0_goto k by AMI_3:69;
      per cases by AMI_3:69;
      suppose
        I = [0,{}];
        hence thesis by A1,A2,AMI_3:71,AMI_5:37,MCART_1:7;
      end;
      suppose
        ex a,b st I = a:=b;
        then consider a, b such that
A3:     I = a:=b;
A4:     InsCode I = 1 by A3,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A3,AMI_3:71;
          end;
          suppose
            ex a,b st J = a:=b;
            then consider d1, d2 such that
A5:         J = d1:=d2;
            thus dom AddressPart I = dom <*a,b*> by A3,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*d1,d2*> by FINSEQ_3:29
              .= dom AddressPart J by A5,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = AddTo(a,b)) or (ex a,b st J = SubFrom(a,b)
) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or (ex k st J
= goto k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A4,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        then consider a, b such that
A6:     I = AddTo(a,b);
A7:     InsCode I = 2 by A6,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A6,AMI_3:71;
          end;
          suppose
            ex a,b st J = AddTo(a,b);
            then consider d1, d2 such that
A8:         J = AddTo(d1,d2);
            thus dom AddressPart I = dom <*a,b*> by A6,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*d1,d2*> by FINSEQ_3:29
              .= dom AddressPart J by A8,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = SubFrom(a,b)) or (
ex a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or (ex k st J = goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A7,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        then consider a, b such that
A9:     I = SubFrom(a,b);
A10:    InsCode I = 3 by A9,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A9,AMI_3:71;
          end;
          suppose
            ex a,b st J = SubFrom(a,b);
            then consider d1, d2 such that
A11:        J = SubFrom(d1,d2);
            thus dom AddressPart I = dom <*a,b*> by A9,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*d1,d2*> by FINSEQ_3:29
              .= dom AddressPart J by A11,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = MultBy(a,b)) or (ex a,b st J = Divide(a,b)) or (ex k st J = goto k
            ) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A10,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        then consider a, b such that
A12:    I = MultBy(a,b);
A13:    InsCode I = 4 by A12,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A12,AMI_3:71;
          end;
          suppose
            ex a,b st J = MultBy(a,b);
            then consider d1, d2 such that
A14:        J = MultBy(d1,d2);
            thus dom AddressPart I = dom <*a,b*> by A12,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*d1,d2*> by FINSEQ_3:29
              .= dom AddressPart J by A14,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = Divide(a,b)) or (ex k st J = goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A13,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        then consider a, b such that
A15:    I = Divide(a,b);
A16:    InsCode I = 5 by A15,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A15,AMI_3:71;
          end;
          suppose
            ex a,b st J = Divide(a,b);
            then consider d1, d2 such that
A17:        J = Divide(d1,d2);
            thus dom AddressPart I = dom <*a,b*> by A15,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*d1,d2*> by FINSEQ_3:29
              .= dom AddressPart J by A17,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex k st J = goto
            k) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A16,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex k st I = goto k;
        then consider k such that
A18:    I = goto k;
A19:    InsCode I = 6 by A18,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A18,AMI_3:71,AMI_5:37,MCART_1:7;
          end;
          suppose
            ex k st J = goto k;
            then consider k1 such that
A20:        J = goto k1;
            thus dom AddressPart I = dom <*k*> by A18,MCART_1:def 2
              .= Seg 1 by FINSEQ_1:def 8
              .= dom <*k1*> by FINSEQ_1:def 8
              .= dom AddressPart J by A20,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex a,k st J = a=0_goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A19,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a=0_goto k;
        then consider a, k such that
A21:    I = a=0_goto k;
A22:    InsCode I = 7 by A21,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A21,AMI_3:71,AMI_5:37,MCART_1:7;
          end;
          suppose
            ex d1,k st J = d1 =0_goto k;
            then consider d1, k1 such that
A23:        J = d1 =0_goto k1;
            thus dom AddressPart I = dom <*k,a*> by A21,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*k1,d1*> by FINSEQ_3:29
              .= dom AddressPart J by A23,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = goto k) or ex a,k st J = a>0_goto k;
            hence thesis by A1,A22,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a>0_goto k;
        then consider a, k such that
A24:    I = a>0_goto k;
A25:    InsCode I = 8 by A24,MCART_1:7;
        now
          per cases by AMI_3:69;
          suppose
            J = [0,{}];
            hence thesis by A1,A24,AMI_3:71,AMI_5:37,MCART_1:7;
          end;
          suppose
            ex d1,k st J = d1 >0_goto k;
            then consider d1, k1 such that
A26:        J = d1 >0_goto k1;
            thus dom AddressPart I = dom <*k,a*> by A24,MCART_1:def 2
              .= Seg 2 by FINSEQ_3:29
              .= dom <*k1,d1*> by FINSEQ_3:29
              .= dom AddressPart J by A26,MCART_1:def 2;
          end;
          suppose
            (ex a,b st J = a:=b) or (ex a,b st J = AddTo(a,b)) or (ex
a,b st J = SubFrom(a,b)) or (ex a,b st J = MultBy(a,b)) or (ex a,b st J =
Divide(a,b)) or (ex k st J = goto k) or ex a,k st J = a=0_goto k;
            hence thesis by A1,A25,MCART_1:7;
          end;
        end;
        hence thesis;
      end;
    end;
    thus SCM is with_explicit_jumps
    proof
      let I be Instruction of SCM;
      let f be set such that
A27:  f in JUMP I;
      per cases by AMI_3:69;
      suppose
        I = [0,{}];
        hence thesis by A27,AMI_3:71;
      end;
      suppose
        ex a,b st I = a:=b;
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        hence thesis by A27;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        hence thesis by A27;
      end;
      suppose
A28:    ex k st I = goto k;
        take 1;
        consider k1 such that
A29:    I = goto k1 by A28;
A30:    AddressPart goto k1 = <*k1*> by MCART_1:def 2;
        dom <*k1*> = Seg 1 by FINSEQ_1:def 8;
        hence 1 in dom AddressPart I by A29,A30,FINSEQ_1:4,TARSKI:def 1;
        JUMP goto k1 = {k1} by Th47;
        then f = k1 by A27,A29,TARSKI:def 1;
        hence thesis by A29,A30,Th35,FINSEQ_1:def 8;
      end;
      suppose
A31:    ex a,k1 st I = a=0_goto k1;
        take 1;
        consider a, k1 such that
A32:    I = a=0_goto k1 by A31;
A33:    AddressPart (a=0_goto k1) = <*k1,a*> by MCART_1:def 2;
        dom <*k1,a*> = Seg 2 by FINSEQ_3:29;
        hence 1 in dom AddressPart I by A32,A33,FINSEQ_1:4,TARSKI:def 2;
        JUMP (a=0_goto k1) = {k1} by Th49;
        then f = k1 by A27,A32,TARSKI:def 1;
        hence thesis by A32,A33,Th36,FINSEQ_1:61;
      end;
      suppose
A34:    ex a,k1 st I = a>0_goto k1;
        take 1;
        consider a, k1 such that
A35:    I = a>0_goto k1 by A34;
A36:    AddressPart (a>0_goto k1) = <*k1,a*> by MCART_1:def 2;
        dom <*k1,a*> = Seg 2 by FINSEQ_3:29;
        hence 1 in dom AddressPart I by A35,A36,FINSEQ_1:4,TARSKI:def 2;
        JUMP (a>0_goto k1) = {k1} by Th51;
        then f = k1 by A27,A35,TARSKI:def 1;
        hence thesis by A35,A36,Th38,FINSEQ_1:61;
      end;
    end;
    let I be Instruction of SCM;
    let f be set;
    given k being set such that
A37: k in dom AddressPart I and
A38: f = (AddressPart I).k and
A39: (product" AddressParts InsCode I).k = NAT;
    per cases by AMI_3:69;
    suppose
      I = [0,{}];
      then dom AddressPart I = dom {} by MCART_1:def 2;
      hence thesis by A37;
    end;
    suppose
      ex a,b st I = a:=b;
      then consider a, b such that
A40:  I = a:=b;
      k in dom <*a,b*> by A37,A40,MCART_1:def 2;
      then k = 1 or k = 2 by Lm2;
      hence thesis by A39,A40,Th2,Th25,Th26;
    end;
    suppose
      ex a,b st I = AddTo(a,b);
      then consider a, b such that
A41:  I = AddTo(a,b);
      k in dom <*a,b*> by A37,A41,MCART_1:def 2;
      then k = 1 or k = 2 by Lm2;
      hence thesis by A39,A41,Th2,Th27,Th28;
    end;
    suppose
      ex a,b st I = SubFrom(a,b);
      then consider a, b such that
A42:  I = SubFrom(a,b);
      k in dom <*a,b*> by A37,A42,MCART_1:def 2;
      then k = 1 or k = 2 by Lm2;
      hence thesis by A39,A42,Th2,Th29,Th30;
    end;
    suppose
      ex a,b st I = MultBy(a,b);
      then consider a, b such that
A43:  I = MultBy(a,b);
      k in dom <*a,b*> by A37,A43,MCART_1:def 2;
      then k = 1 or k = 2 by Lm2;
      hence thesis by A39,A43,Th2,Th31,Th32;
    end;
    suppose
      ex a,b st I = Divide(a,b);
      then consider a, b such that
A44:  I = Divide(a,b);
      k in dom <*a,b*> by A37,A44,MCART_1:def 2;
      then k = 1 or k = 2 by Lm2;
      hence thesis by A39,A44,Th2,Th33,Th34;
    end;
    suppose
      ex k st I = goto k;
      then consider k1 such that
A45:  I = goto k1;
A46:  AddressPart I = <*k1*> by A45,MCART_1:def 2;
      then k = 1 by A37,Lm1;
      then
A47:  f = k1 by A38,A46,FINSEQ_1:def 8;
      JUMP I = {k1} by A45,Th47;
      hence thesis by A47,TARSKI:def 1;
    end;
    suppose
      ex a,k st I = a=0_goto k;
      then consider a, k1 such that
A48:  I = a=0_goto k1;
A49:  AddressPart I = <*k1,a*> by A48,MCART_1:def 2;
      then k = 1 or k = 2 by A37,Lm2;
      then
A50:  f = k1 by A38,A39,A48,A49,Th2,Th37,FINSEQ_1:61;
      JUMP I = {k1} by A48,Th49;
      hence thesis by A50,TARSKI:def 1;
    end;
    suppose
      ex a,k1 st I = a>0_goto k1;
      then consider a, k1 such that
A51:  I = a>0_goto k1;
A52:  AddressPart I = <*k1,a*> by A51,MCART_1:def 2;
      then k = 1 or k = 2 by A37,Lm2;
      then
A53:  f = k1 by A38,A39,A51,A52,Th2,Th39,FINSEQ_1:61;
      JUMP I = {k1} by A51,Th51;
      hence thesis by A53,TARSKI:def 1;
    end;
  end;
end;

registration
  cluster SCM -> regular;
  coherence
  proof
    let T be InsType of SCM;
    per cases by Lm3;
    suppose
A1:   T = 0;
      reconsider f = {} as Function;
      take f;
      thus thesis by A1,Th16,CARD_3:19;
    end;
    suppose
A2:   T = 1;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A3:   x = f and
A4:   dom f = dom product" AddressParts T and
A5:   for k being set st k in dom product" AddressParts T holds f.k in
      (product" AddressParts T).k by CARD_3:def 5;
A6:   dom product" AddressParts T = {1,2} by A2,Th17;
      then
A7:   1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A5;
      then f.1 in pi(AddressParts T,1) by A7,CARD_3:def 13;
      then consider g being Function such that
A8:   g in AddressParts T and
A9:   g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A10:  g = AddressPart I and
A11:  InsCode I = T by A8;
      consider d1, b such that
A12:  I = d1:=b by A2,A11,AMI_5:47;
A13:  2 in dom product" AddressParts T by A6,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A5;
      then f.2 in pi(AddressParts T,2) by A13,CARD_3:def 13;
      then consider h being Function such that
A14:  h in AddressParts T and
A15:  h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A16:  h = AddressPart J and
A17:  InsCode J = T by A14;
      consider a, d2 such that
A18:  J = a:=d2 by A2,A17,AMI_5:47;
A19:  h = <*a,d2*> by A16,A18,MCART_1:def 2;
A20:  g = <*d1,b*> by A10,A12,MCART_1:def 2;
A21:  for k being set st k in {1,2} holds <*d1,d2*>.k = f.k
      proof
        let k be set;
        assume
A22:    k in {1,2};
        per cases by A22,TARSKI:def 2;
        suppose
A23:      k = 1;
          <*d1,d2*>.1 = d1 by FINSEQ_1:61
            .= f.1 by A9,A20,FINSEQ_1:61;
          hence thesis by A23;
        end;
        suppose
A24:      k = 2;
          <*d1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A15,A19,FINSEQ_1:61;
          hence thesis by A24;
        end;
      end;
A25:  InsCode (d1:=d2) = 1 & AddressPart (d1:=d2) = <*d1,d2*> by MCART_1:7;
      dom <*d1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*d1,d2*> = f by A4,A6,A21,FUNCT_1:9;
      hence thesis by A2,A3,A25;
    end;
    suppose
A26:  T = 2;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A27:  x = f and
A28:  dom f = dom product" AddressParts T and
A29:  for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A30:  dom product" AddressParts T = {1,2} by A26,Th18;
      then
A31:  1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A29;
      then f.1 in pi(AddressParts T,1) by A31,CARD_3:def 13;
      then consider g being Function such that
A32:  g in AddressParts T and
A33:  g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A34:  g = AddressPart I and
A35:  InsCode I = T by A32;
      consider d1, b such that
A36:  I = AddTo(d1,b) by A26,A35,AMI_5:48;
A37:  2 in dom product" AddressParts T by A30,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A29;
      then f.2 in pi(AddressParts T,2) by A37,CARD_3:def 13;
      then consider h being Function such that
A38:  h in AddressParts T and
A39:  h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A40:  h = AddressPart J and
A41:  InsCode J = T by A38;
      consider a, d2 such that
A42:  J = AddTo(a,d2) by A26,A41,AMI_5:48;
A43:  h = <*a,d2*> by A40,A42,MCART_1:def 2;
A44:  g = <*d1,b*> by A34,A36,MCART_1:def 2;
A45:  for k being set st k in {1,2} holds <*d1,d2*>.k = f.k
      proof
        let k be set;
        assume
A46:    k in {1,2};
        per cases by A46,TARSKI:def 2;
        suppose
A47:      k = 1;
          <*d1,d2*>.1 = d1 by FINSEQ_1:61
            .= f.1 by A33,A44,FINSEQ_1:61;
          hence thesis by A47;
        end;
        suppose
A48:      k = 2;
          <*d1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A39,A43,FINSEQ_1:61;
          hence thesis by A48;
        end;
      end;
A49:  InsCode AddTo(d1,d2) = 2 & AddressPart AddTo(d1,d2) = <*d1,d2*> by
MCART_1:7;
      dom <*d1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*d1,d2*> = f by A28,A30,A45,FUNCT_1:9;
      hence thesis by A26,A27,A49;
    end;
    suppose
A50:  T = 3;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A51:  x = f and
A52:  dom f = dom product" AddressParts T and
A53:  for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A54:  dom product" AddressParts T = {1,2} by A50,Th19;
      then
A55:  1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A53;
      then f.1 in pi(AddressParts T,1) by A55,CARD_3:def 13;
      then consider g being Function such that
A56:  g in AddressParts T and
A57:  g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A58:  g = AddressPart I and
A59:  InsCode I = T by A56;
      consider d1, b such that
A60:  I = SubFrom(d1,b) by A50,A59,AMI_5:49;
A61:  2 in dom product" AddressParts T by A54,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A53;
      then f.2 in pi(AddressParts T,2) by A61,CARD_3:def 13;
      then consider h being Function such that
A62:  h in AddressParts T and
A63:  h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A64:  h = AddressPart J and
A65:  InsCode J = T by A62;
      consider a, d2 such that
A66:  J = SubFrom(a,d2) by A50,A65,AMI_5:49;
A67:  h = <*a,d2*> by A64,A66,MCART_1:def 2;
A68:  g = <*d1,b*> by A58,A60,MCART_1:def 2;
A69:  for k being set st k in {1,2} holds <*d1,d2*>.k = f.k
      proof
        let k be set;
        assume
A70:    k in {1,2};
        per cases by A70,TARSKI:def 2;
        suppose
A71:      k = 1;
          <*d1,d2*>.1 = d1 by FINSEQ_1:61
            .= f.1 by A57,A68,FINSEQ_1:61;
          hence thesis by A71;
        end;
        suppose
A72:      k = 2;
          <*d1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A63,A67,FINSEQ_1:61;
          hence thesis by A72;
        end;
      end;
A73:  InsCode SubFrom(d1,d2) = 3 & AddressPart SubFrom(d1,d2) = <*d1,d2
      *> by MCART_1:7;
      dom <*d1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*d1,d2*> = f by A52,A54,A69,FUNCT_1:9;
      hence thesis by A50,A51,A73;
    end;
    suppose
A74:  T = 4;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A75:  x = f and
A76:  dom f = dom product" AddressParts T and
A77:  for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A78:  dom product" AddressParts T = {1,2} by A74,Th20;
      then
A79:  1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A77;
      then f.1 in pi(AddressParts T,1) by A79,CARD_3:def 13;
      then consider g being Function such that
A80:  g in AddressParts T and
A81:  g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A82:  g = AddressPart I and
A83:  InsCode I = T by A80;
      consider d1, b such that
A84:  I = MultBy(d1,b) by A74,A83,AMI_5:50;
A85:  2 in dom product" AddressParts T by A78,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A77;
      then f.2 in pi(AddressParts T,2) by A85,CARD_3:def 13;
      then consider h being Function such that
A86:  h in AddressParts T and
A87:  h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A88:  h = AddressPart J and
A89:  InsCode J = T by A86;
      consider a, d2 such that
A90:  J = MultBy(a,d2) by A74,A89,AMI_5:50;
A91:  h = <*a,d2*> by A88,A90,MCART_1:def 2;
A92:  g = <*d1,b*> by A82,A84,MCART_1:def 2;
A93:  for k being set st k in {1,2} holds <*d1,d2*>.k = f.k
      proof
        let k be set;
        assume
A94:    k in {1,2};
        per cases by A94,TARSKI:def 2;
        suppose
A95:      k = 1;
          <*d1,d2*>.1 = d1 by FINSEQ_1:61
            .= f.1 by A81,A92,FINSEQ_1:61;
          hence thesis by A95;
        end;
        suppose
A96:      k = 2;
          <*d1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A87,A91,FINSEQ_1:61;
          hence thesis by A96;
        end;
      end;
A97:  InsCode MultBy(d1,d2) = 4 & AddressPart MultBy(d1,d2) = <*d1,d2*>
      by MCART_1:7;
      dom <*d1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*d1,d2*> = f by A76,A78,A93,FUNCT_1:9;
      hence thesis by A74,A75,A97;
    end;
    suppose
A98:  T = 5;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A99:  x = f and
A100: dom f = dom product" AddressParts T and
A101: for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A102: dom product" AddressParts T = {1,2} by A98,Th21;
      then
A103: 1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A101;
      then f.1 in pi(AddressParts T,1) by A103,CARD_3:def 13;
      then consider g being Function such that
A104: g in AddressParts T and
A105: g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A106: g = AddressPart I and
A107: InsCode I = T by A104;
      consider d1, b such that
A108: I = Divide(d1,b) by A98,A107,AMI_5:51;
A109: 2 in dom product" AddressParts T by A102,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A101;
      then f.2 in pi(AddressParts T,2) by A109,CARD_3:def 13;
      then consider h being Function such that
A110: h in AddressParts T and
A111: h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A112: h = AddressPart J and
A113: InsCode J = T by A110;
      consider a, d2 such that
A114: J = Divide(a,d2) by A98,A113,AMI_5:51;
A115: h = <*a,d2*> by A112,A114,MCART_1:def 2;
A116: g = <*d1,b*> by A106,A108,MCART_1:def 2;
A117: for k being set st k in {1,2} holds <*d1,d2*>.k = f.k
      proof
        let k be set;
        assume
A118:   k in {1,2};
        per cases by A118,TARSKI:def 2;
        suppose
A119:     k = 1;
          <*d1,d2*>.1 = d1 by FINSEQ_1:61
            .= f.1 by A105,A116,FINSEQ_1:61;
          hence thesis by A119;
        end;
        suppose
A120:     k = 2;
          <*d1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A111,A115,FINSEQ_1:61;
          hence thesis by A120;
        end;
      end;
A121: InsCode Divide(d1,d2) = 5 & AddressPart Divide(d1,d2) = <*d1,d2*>
      by MCART_1:7;
      dom <*d1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*d1,d2*> = f by A100,A102,A117,FUNCT_1:9;
      hence thesis by A98,A99,A121;
    end;
    suppose
A122: T = 6;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A123: x = f and
A124: dom f = dom product" AddressParts T and
A125: for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A126: dom product" AddressParts T = {1} by A122,Th22;
      then
A127: 1 in dom product" AddressParts T by TARSKI:def 1;
      then f.1 in (product" AddressParts T).1 by A125;
      then f.1 in pi(AddressParts T,1) by A127,CARD_3:def 13;
      then consider g being Function such that
A128: g in AddressParts T and
A129: g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A130: g = AddressPart I and
A131: InsCode I = T by A128;
      consider i1 such that
A132: I = goto i1 by A122,A131,AMI_5:52;
A133: for k being set st k in {1} holds <*i1*>.k = f.k
      proof
        let k be set;
        assume
        k in {1};
        then k = 1 by TARSKI:def 1;
        hence thesis by A129,A130,A132,MCART_1:def 2;
      end;
A134: InsCode goto i1 = 6 & AddressPart goto i1 = <*i1*> by MCART_1:7;
      dom <*i1*> = {1} by FINSEQ_1:4,def 8;
      then <*i1*> = f by A124,A126,A133,FUNCT_1:9;
      hence thesis by A122,A123,A134;
    end;
    suppose
A135: T = 7;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A136: x = f and
A137: dom f = dom product" AddressParts T and
A138: for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A139: dom product" AddressParts T = {1,2} by A135,Th23;
      then
A140: 1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A138;
      then f.1 in pi(AddressParts T,1) by A140,CARD_3:def 13;
      then consider g being Function such that
A141: g in AddressParts T and
A142: g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A143: g = AddressPart I and
A144: InsCode I = T by A141;
      consider i1, d1 such that
A145: I = d1 =0_goto i1 by A135,A144,AMI_5:53;
A146: 2 in dom product" AddressParts T by A139,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A138;
      then f.2 in pi(AddressParts T,2) by A146,CARD_3:def 13;
      then consider h being Function such that
A147: h in AddressParts T and
A148: h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A149: h = AddressPart J and
A150: InsCode J = T by A147;
      consider i2, d2 such that
A151: J = d2 =0_goto i2 by A135,A150,AMI_5:53;
A152: h = <*i2,d2*> by A149,A151,MCART_1:def 2;
A153: g = <*i1,d1*> by A143,A145,MCART_1:def 2;
A154: for k being set st k in {1,2} holds <*i1,d2*>.k = f.k
      proof
        let k be set;
        assume
A155:   k in {1,2};
        per cases by A155,TARSKI:def 2;
        suppose
A156:     k = 1;
          <*i1,d2*>.1 = i1 by FINSEQ_1:61
            .= f.1 by A142,A153,FINSEQ_1:61;
          hence thesis by A156;
        end;
        suppose
A157:     k = 2;
          <*i1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A148,A152,FINSEQ_1:61;
          hence thesis by A157;
        end;
      end;
A158: InsCode (d2 =0_goto i1) = 7 & AddressPart (d2 =0_goto i1) = <*i1,
      d2*> by MCART_1:7;
      dom <*i1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*i1,d2*> = f by A137,A139,A154,FUNCT_1:9;
      hence thesis by A135,A136,A158;
    end;
    suppose
A159: T = 8;
      take product" AddressParts T;
      thus AddressParts T c= product product" AddressParts T by CARD_3:94;
      let x be set;
      assume
      x in product product" AddressParts T;
      then consider f being Function such that
A160: x = f and
A161: dom f = dom product" AddressParts T and
A162: for k being set st k in dom product" AddressParts T holds f.k
      in (product" AddressParts T).k by CARD_3:def 5;
A163: dom product" AddressParts T = {1,2} by A159,Th24;
      then
A164: 1 in dom product" AddressParts T by TARSKI:def 2;
      then f.1 in (product" AddressParts T).1 by A162;
      then f.1 in pi(AddressParts T,1) by A164,CARD_3:def 13;
      then consider g being Function such that
A165: g in AddressParts T and
A166: g.1 = f.1 by CARD_3:def 6;
      consider I being Instruction of SCM such that
A167: g = AddressPart I and
A168: InsCode I = T by A165;
      consider i1, d1 such that
A169: I = d1 >0_goto i1 by A159,A168,AMI_5:54;
A170: 2 in dom product" AddressParts T by A163,TARSKI:def 2;
      then f.2 in (product" AddressParts T).2 by A162;
      then f.2 in pi(AddressParts T,2) by A170,CARD_3:def 13;
      then consider h being Function such that
A171: h in AddressParts T and
A172: h.2 = f.2 by CARD_3:def 6;
      consider J being Instruction of SCM such that
A173: h = AddressPart J and
A174: InsCode J = T by A171;
      consider i2, d2 such that
A175: J = d2 >0_goto i2 by A159,A174,AMI_5:54;
A176: h = <*i2,d2*> by A173,A175,MCART_1:def 2;
A177: g = <*i1,d1*> by A167,A169,MCART_1:def 2;
A178: for k being set st k in {1,2} holds <*i1,d2*>.k = f.k
      proof
        let k be set;
        assume
A179:   k in {1,2};
        per cases by A179,TARSKI:def 2;
        suppose
A180:     k = 1;
          <*i1,d2*>.1 = i1 by FINSEQ_1:61
            .= f.1 by A166,A177,FINSEQ_1:61;
          hence thesis by A180;
        end;
        suppose
A181:     k = 2;
          <*i1,d2*>.2 = d2 by FINSEQ_1:61
            .= f.2 by A172,A176,FINSEQ_1:61;
          hence thesis by A181;
        end;
      end;
A182: InsCode (d2 >0_goto i1) = 8 & AddressPart (d2 >0_goto i1) = <*i1,
      d2*> by MCART_1:7;
      dom <*i1,d2*> = {1,2} by FINSEQ_1:4,FINSEQ_3:29;
      then <*i1,d2*> = f by A161,A163,A178,FUNCT_1:9;
      hence thesis by A159,A160,A182;
    end;
  end;
end;

theorem Th57:
  IncAddr(goto i1,k) = goto il.(SCM, locnum i1 + k)
proof
A1: dom AddressPart IncAddr(goto i1,k) = dom AddressPart goto i1 by
AMISTD_2:def 14;
A2: dom AddressPart goto il.(SCM, locnum i1 + k) = dom <*il.(SCM, locnum i1
  + k)*> by MCART_1:def 2
    .= Seg 1 by FINSEQ_1:def 8
    .= dom <*i1*> by FINSEQ_1:def 8
    .= dom AddressPart goto i1 by MCART_1:def 2;
A3: for x being set st x in dom AddressPart goto i1 holds (AddressPart
  IncAddr(goto i1,k)).x = (AddressPart goto il.(SCM, locnum i1 + k)).x
  proof
    let x be set;
    assume
A4: x in dom AddressPart goto i1;
    then x in dom <*i1*> by MCART_1:def 2;
    then
A5: x = 1 by Lm1;
    then (product" AddressParts InsCode goto i1).x = NAT by Th35;
    then consider f being Instruction-Location of SCM such that
A6: f = (AddressPart goto i1).x and
A7: (AddressPart IncAddr(goto i1,k)).x = il.(SCM,k + locnum f) by A4,
AMISTD_2:def 14;
    f = <*i1*>.x by A6,MCART_1:def 2
      .= i1 by A5,FINSEQ_1:def 8;
    hence
    (AddressPart IncAddr(goto i1,k)).x = <*il.(SCM, locnum i1 + k)*>.x by A5,A7
,FINSEQ_1:def 8
      .= (AddressPart goto il.(SCM, locnum i1 + k)).x by MCART_1:def 2;
  end;
  InsCode IncAddr(goto i1,k) = InsCode goto i1 by AMISTD_2:def 14
    .= 6 by MCART_1:7
    .= InsCode goto il.(SCM, locnum i1 + k) by MCART_1:7;
  hence thesis by A1,A2,A3,FUNCT_1:9,MCART_1:95;
end;

theorem Th58:
  IncAddr(a=0_goto i1,k) = a=0_goto il.(SCM, locnum i1 + k)
proof
A1: dom AddressPart IncAddr(a=0_goto i1,k) = dom AddressPart (a=0_goto i1)
  by AMISTD_2:def 14;
A2: dom AddressPart (a=0_goto il.(SCM, locnum i1 + k)) = dom <*il.(SCM,
  locnum i1 + k), a*> by MCART_1:def 2
    .= Seg 2 by FINSEQ_3:29
    .= dom <*i1,a*> by FINSEQ_3:29
    .= dom AddressPart (a=0_goto i1) by MCART_1:def 2;
A3: for x being set st x in dom AddressPart (a=0_goto i1) holds (AddressPart
IncAddr(a=0_goto i1,k)).x = (AddressPart (a=0_goto il.(SCM, locnum i1 + k))).x
  proof
    let x be set;
    assume
A4: x in dom AddressPart (a=0_goto i1);
    then
A5: x in dom <*i1,a*> by MCART_1:def 2;
    per cases by A5,Lm2;
    suppose
A6:   x = 1;
      then (product" AddressParts InsCode (a=0_goto i1)).x = NAT by Th36;
      then consider f being Instruction-Location of SCM such that
A7:   f = (AddressPart (a=0_goto i1)).x and
A8:   (AddressPart IncAddr(a=0_goto i1,k)).x = il.(SCM,k + locnum f)
      by A4,AMISTD_2:def 14;
      f = <*i1,a*>.x by A7,MCART_1:def 2
        .= i1 by A6,FINSEQ_1:61;
      hence
      (AddressPart IncAddr(a=0_goto i1,k)).x = <*il.(SCM, locnum i1 + k),
      a*>.x by A6,A8,FINSEQ_1:61
        .= (AddressPart (a=0_goto il.(SCM, locnum i1 + k))).x by MCART_1:def 2;
    end;
    suppose
A9:   x = 2;
      then (product" AddressParts InsCode (a=0_goto i1)).x <> NAT by Th2,Th37;
      hence
      (AddressPart IncAddr(a=0_goto i1,k)).x = (AddressPart (a=0_goto i1)
      ).x by A4,AMISTD_2:def 14
        .= <*i1,a*>.x by MCART_1:def 2
        .= a by A9,FINSEQ_1:61
        .= <*il.(SCM, locnum i1 + k),a*>.x by A9,FINSEQ_1:61
        .= (AddressPart (a=0_goto il.(SCM, locnum i1 + k))).x by MCART_1:def 2;
    end;
  end;
  InsCode IncAddr(a=0_goto i1,k) = InsCode (a=0_goto i1) by AMISTD_2:def 14
    .= 7 by MCART_1:7
    .= InsCode (a=0_goto il.(SCM, locnum i1 + k)) by MCART_1:7;
  hence thesis by A1,A2,A3,FUNCT_1:9,MCART_1:95;
end;

theorem Th59:
  IncAddr(a>0_goto i1,k) = a>0_goto il.(SCM, locnum i1 + k)
proof
A1: dom AddressPart IncAddr(a>0_goto i1,k) = dom AddressPart (a>0_goto i1)
  by AMISTD_2:def 14;
A2: dom AddressPart (a>0_goto il.(SCM, locnum i1 + k)) = dom <*il.(SCM,
  locnum i1 + k), a*> by MCART_1:def 2
    .= Seg 2 by FINSEQ_3:29
    .= dom <*i1,a*> by FINSEQ_3:29
    .= dom AddressPart (a>0_goto i1) by MCART_1:def 2;
A3: for x being set st x in dom AddressPart (a>0_goto i1) holds (AddressPart
IncAddr(a>0_goto i1,k)).x = (AddressPart (a>0_goto il.(SCM, locnum i1 + k))).x
  proof
    let x be set;
    assume
A4: x in dom AddressPart (a>0_goto i1);
    then
A5: x in dom <*i1,a*> by MCART_1:def 2;
    per cases by A5,Lm2;
    suppose
A6:   x = 1;
      then (product" AddressParts InsCode (a>0_goto i1)).x = NAT by Th38;
      then consider f being Instruction-Location of SCM such that
A7:   f = (AddressPart (a>0_goto i1)).x and
A8:   (AddressPart IncAddr(a>0_goto i1,k)).x = il.(SCM,k + locnum f)
      by A4,AMISTD_2:def 14;
      f = <*i1,a*>.x by A7,MCART_1:def 2
        .= i1 by A6,FINSEQ_1:61;
      hence
      (AddressPart IncAddr(a>0_goto i1,k)).x = <*il.(SCM, locnum i1 + k),
      a*>.x by A6,A8,FINSEQ_1:61
        .= (AddressPart (a>0_goto il.(SCM, locnum i1 + k))).x by MCART_1:def 2;
    end;
    suppose
A9:   x = 2;
      then (product" AddressParts InsCode (a>0_goto i1)).x <> NAT by Th2,Th39;
      hence
      (AddressPart IncAddr(a>0_goto i1,k)).x = (AddressPart (a>0_goto i1)
      ).x by A4,AMISTD_2:def 14
        .= <*i1,a*>.x by MCART_1:def 2
        .= a by A9,FINSEQ_1:61
        .= <*il.(SCM, locnum i1 + k),a*>.x by A9,FINSEQ_1:61
        .= (AddressPart (a>0_goto il.(SCM, locnum i1 + k))).x by MCART_1:def 2;
    end;
  end;
  InsCode IncAddr(a>0_goto i1,k) = InsCode (a>0_goto i1) by AMISTD_2:def 14
    .= 8 by MCART_1:7
    .= InsCode (a>0_goto il.(SCM, locnum i1 + k)) by MCART_1:7;
  hence thesis by A1,A2,A3,FUNCT_1:9,MCART_1:95;
end;

registration
  cluster SCM -> IC-good Exec-preserving;
  coherence
  proof
    thus SCM is IC-good
    proof
      let I be Instruction of SCM;
      per cases by AMI_3:69;
      suppose
        I = [0,{}];
        hence thesis by AMI_3:71;
      end;
      suppose
        ex a,b st I = a:=b;
        hence thesis;
      end;
      suppose
        ex a,b st I = AddTo(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = SubFrom(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = MultBy(a,b);
        hence thesis;
      end;
      suppose
        ex a,b st I = Divide(a,b);
        hence thesis;
      end;
      suppose
A1:     ex k st I = goto k;
        let k be natural number, s1, s2 be State of SCM such that
        s2 = s1 +* (IC SCM .--> (IC s1 + k));
        consider k1 such that
A2:     I = goto k1 by A1;
        k1 in NAT by ORDINAL1:def 13;
        then reconsider i1=k1 as Instruction-Location of SCM by AMI_1:def 4;
        IC Exec(I,s1) = k1 by A2,AMI_3:13;
        hence IC Exec(I,s1) + k = IC Exec(goto il.(SCM, locnum i1 + k),s2) by
AMI_3:13
          .= IC Exec(IncAddr(I,k), s2) by A2,Th57;
      end;
      suppose
        ex a,k st I = a=0_goto k;
        then consider a, k1 such that
A3:     I = a=0_goto k1;
        k1 in NAT by ORDINAL1:def 13;
        then reconsider i1=k1 as Instruction-Location of SCM by AMI_1:def 4;
        let k be natural number, s1, s2 be State of SCM such that
A4:     s2 = s1 +* (IC SCM .--> (IC s1 + k));
        a <> IC SCM & dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by AMI_5:20
,FUNCOP_1:19;
        then not a in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
        then
A5:     s1.a = s2.a by A4,FUNCT_4:12;
        now
          per cases;
          suppose
A6:         s1.a = 0;
            then IC Exec(I,s1) = k1 by A3,AMI_3:14;
            hence
            IC Exec(I,s1) + k = IC Exec(a=0_goto il.(SCM, locnum i1 + k),
            s2) by A5,A6,AMI_3:14
              .= IC Exec(IncAddr(I,k), s2) by A3,Th58;
          end;
          suppose
A7:         s1.a <> 0;
            dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by FUNCOP_1:19;
            then IC SCM in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
            then
A8:         IC s2 = (IC SCM .--> (IC s1 + k)).IC SCM by A4,FUNCT_4:14
              .= il.(SCM,locnum IC s1 + k) by FUNCOP_1:87;
A9:         IC Exec(I,s1) = Next IC s1 by A3,A7,AMI_3:14
              .= NextLoc IC s1 by Th56
              .= il.(SCM,locnum IC s1 + 1);
            IC Exec(I, s2) = Next IC s2 by A3,A5,A7,AMI_3:14
              .= NextLoc IC s2 by Th56
              .= il.(SCM,locnum IC s1 + k + 1) by A8,AMISTD_1:def 13
              .= il.(SCM,locnum IC s1 + 1 + k);
            hence IC Exec(I,s1) + k = Exec(I,s2).IC SCM by A9,AMISTD_1:def 13
              .= Next IC s2 by A3,A5,A7,AMI_3:14
              .= IC Exec(a=0_goto il.(SCM, locnum i1 + k),s2) by A5,A7,AMI_3:14
              .= IC Exec(IncAddr(I,k), s2) by A3,Th58;
          end;
        end;
        hence thesis;
      end;
      suppose
        ex a,k st I = a>0_goto k;
        then consider a, k1 such that
A10:    I = a>0_goto k1;
        k1 in NAT by ORDINAL1:def 13;
        then reconsider i1=k1 as Instruction-Location of SCM by AMI_1:def 4;
        let k be natural number, s1, s2 be State of SCM such that
A11:    s2 = s1 +* (IC SCM .--> (IC s1 + k));
        a <> IC SCM & dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by AMI_5:20
,FUNCOP_1:19;
        then not a in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
        then
A12:    s1.a = s2.a by A11,FUNCT_4:12;
        now
          per cases;
          suppose
A13:        s1.a > 0;
            then IC Exec(I,s1) = k1 by A10,AMI_3:15;
            hence
            IC Exec(I,s1) + k = IC Exec(a>0_goto il.(SCM, locnum i1 + k),
            s2) by A12,A13,AMI_3:15
              .= IC Exec(IncAddr(I,k), s2) by A10,Th59;
          end;
          suppose
A14:        s1.a <= 0;
            dom (IC SCM .--> (IC s1 + k)) = {IC SCM} by FUNCOP_1:19;
            then IC SCM in dom (IC SCM .--> (IC s1 + k)) by TARSKI:def 1;
            then
A15:        IC s2 = (IC SCM .--> (IC s1 + k)).IC SCM by A11,FUNCT_4:14
              .= il.(SCM,locnum IC s1 + k) by FUNCOP_1:87;
A16:        IC Exec(I,s1) = Next IC s1 by A10,A14,AMI_3:15
              .= NextLoc IC s1 by Th56
              .= il.(SCM,locnum IC s1 + 1);
            IC Exec(I, s2) = Next IC s2 by A10,A12,A14,AMI_3:15
              .= NextLoc IC s2 by Th56
              .= il.(SCM,locnum IC s1 + k + 1) by A15,AMISTD_1:def 13
              .= il.(SCM,locnum IC s1 + 1 + k);
            hence IC Exec(I,s1) + k = Exec(I,s2).IC SCM by A16,AMISTD_1:def 13
              .= Next IC s2 by A10,A12,A14,AMI_3:15
              .= IC Exec(a>0_goto il.(SCM, locnum i1 + k),s2) by A12,A14,
AMI_3:15
              .= IC Exec(IncAddr(I,k), s2) by A10,Th59;
          end;
        end;
        hence thesis;
      end;
    end;
    let I be Instruction of SCM;
A17: dom the Object-Kind of SCM = the carrier of SCM by FUNCT_2:def 1;
    let s1, s2 be State of SCM such that
A18: s1, s2 equal_outside NAT;
A19: IC s1 = IC s2 by A18,AMI_1:121;
A20: dom Exec(I,s1) = dom the Object-Kind of SCM by CARD_3:18;
    then
A21: dom Exec(I,s1) = dom Exec(I,s2) by CARD_3:18;
    per cases by AMI_3:69;
    suppose
      I = [0,{}];
      hence thesis by A18,AMISTD_2:def 19,AMI_3:71;
    end;
    suppose
      ex a,b st I = a:=b;
      then consider a, b such that
A22:  I = a:=b;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A23:    x in dom Exec(I,s1) \ NAT;
        then
A24:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A23,A24,Th3;
        suppose
A25:      x = IC SCM;
          hence Exec(I,s1).x = Next IC s1 by A22,AMI_3:8
            .= Exec(I,s2).x by A19,A22,A25,AMI_3:8;
        end;
        suppose
A26:      x = a;
          hence Exec(I,s1).x = s1.b by A22,AMI_3:8
            .= s2.b by A18,Th5
            .= Exec(I,s2).x by A22,A26,AMI_3:8;
        end;
        suppose that
A27:      x is Data-Location and
A28:      x <> a;
          thus Exec(I,s1).x = s1.x by A22,A27,A28,AMI_3:8
            .= s2.x by A18,A27,Th5
            .= Exec(I,s2).x by A22,A27,A28,AMI_3:8;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = AddTo(a,b);
      then consider a, b such that
A29:  I = AddTo(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A30:    x in dom Exec(I,s1) \ NAT;
        then
A31:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A30,A31,Th3;
        suppose
A32:      x = IC SCM;
          hence Exec(I,s1).x = Next IC s1 by A29,AMI_3:9
            .= Exec(I,s2).x by A19,A29,A32,AMI_3:9;
        end;
        suppose
A33:      x = a;
          hence Exec(I,s1).x = s1.a + s1.b by A29,AMI_3:9
            .= s1.a + s2.b by A18,Th5
            .= s2.a + s2.b by A18,Th5
            .= Exec(I,s2).x by A29,A33,AMI_3:9;
        end;
        suppose that
A34:      x is Data-Location and
A35:      x <> a;
          thus Exec(I,s1).x = s1.x by A29,A34,A35,AMI_3:9
            .= s2.x by A18,A34,Th5
            .= Exec(I,s2).x by A29,A34,A35,AMI_3:9;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = SubFrom(a,b);
      then consider a, b such that
A36:  I = SubFrom(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A37:    x in dom Exec(I,s1) \ NAT;
        then
A38:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A37,A38,Th3;
        suppose
A39:      x = IC SCM;
          hence Exec(I,s1).x = Next IC s1 by A36,AMI_3:10
            .= Exec(I,s2).x by A19,A36,A39,AMI_3:10;
        end;
        suppose
A40:      x = a;
          hence Exec(I,s1).x = s1.a - s1.b by A36,AMI_3:10
            .= s1.a - s2.b by A18,Th5
            .= s2.a - s2.b by A18,Th5
            .= Exec(I,s2).x by A36,A40,AMI_3:10;
        end;
        suppose that
A41:      x is Data-Location and
A42:      x <> a;
          thus Exec(I,s1).x = s1.x by A36,A41,A42,AMI_3:10
            .= s2.x by A18,A41,Th5
            .= Exec(I,s2).x by A36,A41,A42,AMI_3:10;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = MultBy(a,b);
      then consider a, b such that
A43:  I = MultBy(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A44:    x in dom Exec(I,s1) \ NAT;
        then
A45:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A44,A45,Th3;
        suppose
A46:      x = IC SCM;
          hence Exec(I,s1).x = Next IC s1 by A43,AMI_3:11
            .= Exec(I,s2).x by A19,A43,A46,AMI_3:11;
        end;
        suppose
A47:      x = a;
          hence Exec(I,s1).x = s1.a * s1.b by A43,AMI_3:11
            .= s1.a * s2.b by A18,Th5
            .= s2.a * s2.b by A18,Th5
            .= Exec(I,s2).x by A43,A47,AMI_3:11;
        end;
        suppose that
A48:      x is Data-Location and
A49:      x <> a;
          thus Exec(I,s1).x = s1.x by A43,A48,A49,AMI_3:11
            .= s2.x by A18,A48,Th5
            .= Exec(I,s2).x by A43,A48,A49,AMI_3:11;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,b st I = Divide(a,b);
      then consider a, b such that
A50:  I = Divide(a,b);
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A51:    x in dom Exec(I,s1) \ NAT;
        then
A52:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A51,A52,Th3;
        suppose
A53:      x = IC SCM;
          hence Exec(I,s1).x = Next IC s1 by A50,AMI_3:12
            .= Exec(I,s2).x by A19,A50,A53,AMI_3:12;
        end;
        suppose
A54:      x is Data-Location;
A55:      s1.a = s2.a & s1.b = s2.b by A18,Th5;
          now
            let c be Data-Location;
            per cases;
            suppose
A56:          c = b;
              hence Exec(I,s1).c = s2.a mod s2.b by A50,A55,AMI_3:12
                .= Exec(I,s2).c by A50,A56,AMI_3:12;
            end;
            suppose
A57:          c = a & c <> b;
              hence Exec(I,s1).c = s2.a div s2.b by A50,A55,AMI_3:12
                .= Exec(I,s2).c by A50,A57,AMI_3:12;
            end;
            suppose
A58:          c <> a & c <> b;
              hence Exec(I,s1).c = s1.c by A50,AMI_3:12
                .= s2.c by A18,Th5
                .= Exec(I,s2).c by A50,A58,AMI_3:12;
            end;
          end;
          hence thesis by A54;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex k st I = goto k;
      then consider k1 such that
A59:  I = goto k1;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A60:    x in dom Exec(I,s1) \ NAT;
        then
A61:    not x in NAT by XBOOLE_0:def 5;
        per cases by A20,A17,A60,A61,Th3;
        suppose
A62:      x = IC SCM;
          hence Exec(I,s1).x = k1 by A59,AMI_3:13
            .= Exec(I,s2).x by A59,A62,AMI_3:13;
        end;
        suppose
A63:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A59,AMI_3:13
            .= s2.x by A18,A63,Th5
            .= Exec(I,s2).x by A59,A63,AMI_3:13;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,k st I = a=0_goto k;
      then consider a, k1 such that
A64:  I = a=0_goto k1;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A65:    x in dom Exec(I,s1) \ NAT;
        then
A66:    not x in NAT by XBOOLE_0:def 5;
A67:    s1.a = s2.a by A18,Th5;
        per cases by A20,A17,A65,A66,Th3;
        suppose that
A68:      x = IC SCM & s1.a = 0;
          thus Exec(I,s1).x = k1 by A64,A68,AMI_3:14
            .= Exec(I,s2).x by A64,A67,A68,AMI_3:14;
        end;
        suppose that
A69:      x = IC SCM & s1.a <> 0;
          thus Exec(I,s1).x = Next IC s1 by A64,A69,AMI_3:14
            .= Exec(I,s2).x by A19,A64,A67,A69,AMI_3:14;
        end;
        suppose
A70:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A64,AMI_3:14
            .= s2.x by A18,A70,Th5
            .= Exec(I,s2).x by A64,A70,AMI_3:14;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
    suppose
      ex a,k st I = a>0_goto k;
      then consider a, k such that
A71:  I = a>0_goto k;
      for x being set st x in dom Exec(I,s1) \ NAT holds Exec(I,s1).x =
      Exec(I,s2).x
      proof
        let x be set;
        assume
A72:    x in dom Exec(I,s1) \ NAT;
        then
A73:    not x in NAT by XBOOLE_0:def 5;
A74:    s1.a = s2.a by A18,Th5;
        per cases by A20,A17,A72,A73,Th3;
        suppose that
A75:      x = IC SCM & s1.a > 0;
          thus Exec(I,s1).x = k by A71,A75,AMI_3:15
            .= Exec(I,s2).x by A71,A74,A75,AMI_3:15;
        end;
        suppose that
A76:      x = IC SCM & s1.a <= 0;
          thus Exec(I,s1).x = Next IC s1 by A71,A76,AMI_3:15
            .= Exec(I,s2).x by A19,A71,A74,A76,AMI_3:15;
        end;
        suppose
A77:      x is Data-Location;
          hence Exec(I,s1).x = s1.x by A71,AMI_3:15
            .= s2.x by A18,A77,Th5
            .= Exec(I,s2).x by A71,A77,AMI_3:15;
        end;
      end;
      hence Exec(I,s1)|(dom Exec(I,s1) \ NAT) = Exec(I,s2)|(dom Exec(I,s2) \
      NAT) by A21,FUNCT_1:165;
    end;
  end;
end;

