:: Two Programs for {\bf SCM}. Part II - Proofs
::  by Grzegorz Bancerek and Piotr Rudnicki
::
:: Received October 8, 1993
:: Copyright (c) 1993 Association of Mizar Users

environ

 vocabularies NUMBERS, CARD_1, INT_1, POWER, SUBSET_1, XXREAL_0, RELAT_1,
      ARYTM_3, ARYTM_1, NAT_1, AMI_3, AFINSQ_1, AMI_1, ORDINAL4, GRAPHSP,
      SCM_1, FINSEQ_1, MSUALG_1, FUNCT_1, PRE_FF, FSM_1, NEWTON,
      FIB_FUSC, SCMNORM;
 notations XCMPLX_0, SUBSET_1, NUMBERS, INT_1, NAT_1, NEWTON, POWER, CARD_3,
      ORDINAL4, FUNCT_1, AFINSQ_1, FINSEQ_1, AMI_1, SCM_1, AMI_3, PRE_FF,
      XXREAL_0;
 constructors XXREAL_0, REAL_1, NAT_1, NEWTON, POWER, PRE_FF, SCM_1, AFINSQ_1,
      ORDINAL4, FINSUB_1, SCMNORM, CARD_3;
 registrations SETFAM_1, NUMBERS, XREAL_0, INT_1, AMI_3, XBOOLE_0, ORDINAL1,
      AMI_1, AFINSQ_1, CARD_3, SCMNORM, FUNCT_1, RELSET_1;
 requirements REAL, NUMERALS, SUBSET, ARITHM, BOOLE;
 definitions AMI_1, AFINSQ_1;
 theorems NAT_1, INT_1, POWER, NEWTON, SCM_1, PRE_FF, AMI_3, AMI_1, XREAL_1,
      XXREAL_0, ORDINAL1;
 schemes NAT_1;

begin

Lm1: 0 = [\ log(2, 1) /]
proof
  thus 0 = [\ 0 /] by INT_1:47
    .= [\ log(2, 1) /] by POWER:59;
end;

Lm2: for nn9 being Element of NAT st nn9 > 0 holds [\ log(2, nn9) /] is
Element of NAT & 6 * ([\ log(2, nn9) /] + 1) + 1 > 0

proof
  let nn9 be Element of NAT;
  assume
  nn9 > 0;
  then
A1: nn9 >= 0+1 by NAT_1:13;
  log(2, 1) = 0 by POWER:59;
  then log(2, nn9) >= 0 by A1,PRE_FF:12;
  then [\ log(2, nn9) /] >= [\ 0 /] by PRE_FF:11;
  then [\ log(2, nn9) /] >= 0 by INT_1:47;
  then reconsider F = [\ log(2, nn9) /] as Element of NAT by INT_1:16;
  F is Element of NAT;
  hence [\ log(2, nn9) /] is Element of NAT;
  6 * F + 6 * 1 >= 0 by NAT_1:12;
  hence thesis by NAT_1:13;
end;

Lm3: for nn, nn9 being Element of NAT st nn = 2*nn9+1 & nn9 > 0 holds 6+(6*([\
log(2, nn9)/]+1)+1)=6*([\ log(2,nn)/]+1) + 1

proof
  let nn, nn9 be Element of NAT such that
A1: nn = 2*nn9+1 & nn9 > 0;
  set F = [\ log(2, nn9) /];
  thus 6 + (6 * (F+1)+1) = 6 * (1 + (F + 1)) + 1
    .= 6 * ([\ log(2, nn) /] + 1) + 1 by A1,PRE_FF:16;
end;

Lm4: for n being Element of NAT st n > 0 holds log (2, 2*n) = 1+log(2,n) & log
(2, 2*n) = log(2,n)+1

proof
  let n be Element of NAT;
  assume
  n > 0;
  hence log (2,2*n) = log (2,2)+log (2, n) by POWER:61
    .= 1+log (2, n) by POWER:60;
  hence thesis;
end;

Lm5: for nn, nn9 being Element of NAT st nn = 2*nn9 & nn9 > 0 holds 6+(6*([\
log(2, nn9)/]+1)+1)=6*([\ log(2,nn)/]+1) + 1

proof
  let nn, nn9 be Element of NAT such that
A1: nn = 2*nn9 & nn9 > 0;
  set F = [\ log(2, nn9) /];
  thus 6 + (6 * (F+1)+1) = 6 * (1 + (F + 1)) + 1
    .= 6 * (1 + [\ log(2, nn9)+1 /]) + 1 by INT_1:51
    .= 6 * ([\ log(2, nn) /] + 1) + 1 by A1,Lm4;
end;

Lm6: for N being Element of NAT st N <> 0 holds 6*N - 4 > 0
proof
  let N be Element of NAT;
  assume
  N<>0;
  then consider L being Nat such that
A1: N = L+1 by NAT_1:6;
  reconsider L as Element of NAT by ORDINAL1:def 13;
  6 * L + 2 <> 0 by NAT_1:7;
  hence thesis by A1,NAT_1:3;
end;

Lm7: dl.0<>dl.1 by AMI_3:52;
Lm8: dl.0<>dl.2 by AMI_3:52;
Lm9: dl.0<>dl.3 by AMI_3:52;
Lm10: dl.1<>dl.2 by AMI_3:52;
Lm11: dl.1<>dl.3 by AMI_3:52;
Lm12: dl.2<>dl.3 by AMI_3:52;

Lm13: dl.0<>dl.4 by AMI_3:52;
Lm14: dl.1<>dl.4 by AMI_3:52;
Lm15: dl.2<>dl.4 by AMI_3:52;
Lm16: dl.3<>dl.4 by AMI_3:52;

definition
  func Fib_Program -> XFinSequence of the Instructions of SCM equals
  <% dl.1
>0_goto 2 %>^ <% halt SCM %>^ <% dl.3 := dl.0 %>^ <% SubFrom(dl.1, dl.0) %>^
<% dl.1 =0_goto 1 %>^ <% dl.4 := dl.2 %>^ <% dl.2 := dl.3 %>^ <% AddTo(dl.3,
  dl.4) %>^ <% SCM-goto 3 %>;
  coherence;
end;

theorem
  for N being Element of NAT, s being State-consisting of 0, 0, 0,
  Fib_Program, <*1*>^<*N*>^<*0*>^<*0*>
   holds ProgramPart (s qua PartState of SCM)
   halts_on s &
   (N = 0 implies
  LifeSpan(ProgramPart(s),s) = 1) & (N > 0 implies LifeSpan(ProgramPart(s),s) =
6 * N - 2) & (Result(ProgramPart(s),s)).dl.3 =
  Fib N
proof
  let N be Element of NAT, s be State-consisting of 0, 0, 0, Fib_Program, <*1
  *>^<*N*>^<*0*>^<*0*>;
  set C1 = dl.0, n = dl.1, FP = dl.2, FC = dl.3, AUX = dl.4;
  set L6 = 6, L7 = 7, L8 = 8;
  set L0 = 0, L1 = 1, L2 = 2, L3 = 3, L4 = 4, L5 = 5;
A1: IC s = L0 & s.L0 = n >0_goto L2 by SCM_1:14;
  set s1 = Comput(ProgramPart(s),s,0+1);
  set s0 = Comput(ProgramPart(s),s,0);
A2: s = s0 by AMI_1:13;
  s.C1 = 1 by SCM_1:14;
  then
A3: s1.C1 = 1 by A1,A2,SCM_1:25;
A4: s.L3 = SubFrom(n, C1) by SCM_1:14;
  s.FP = 0 by SCM_1:14;
  then
A5: s1.FP = 0 by A1,A2,SCM_1:25;
A6: s.L4 = n =0_goto L1 by SCM_1:14;
  s.FC = 0 by SCM_1:14;
  then
A7: s1.FC = 0 by A1,A2,SCM_1:25;
A8: s.L6 = FP := FC by SCM_1:14;
  defpred P[Element of NAT] means $1 < N implies for u being State of SCM st u
= Comput(ProgramPart(s),s,6*$1+3) holds u.C1 = 1 & u.n = N-1-$1 & u.FP = Fib $1
& u.FC =
  Fib ($1+1) & IC u = L4;
A9: s.L2 = FC := C1 by SCM_1:14;
A10: s.L7 = AddTo(FC, AUX) by SCM_1:14;
A11: s.L8 = SCM-goto L3 by SCM_1:14;
A12: s.L5 = AUX := FP by SCM_1:14;
A13: for k being Element of NAT st P[k] holds P[k+1]
  proof
    let k be Element of NAT such that
A14: k < N implies for u being State of SCM st u = Comput(ProgramPart(s),s,6*k+
3
) holds u.C1 = 1 & u.n = N-1-k & u.FP = Fib k & u.FC = Fib (k+1) & IC u = L4
    and
A15: k+1 < N;
    set b = 6*k+3;
    set s5 = Comput(ProgramPart(s),s,b+1);
    set s6 = Comput(ProgramPart(s),s,b+1+1);
    set s7 = Comput(ProgramPart(s),s,b+1+1+1);
    set s8 = Comput(ProgramPart(s),s,b+1+1+1+1);
    set s9 = Comput(ProgramPart(s),s,b+1+1+1+1+1);
    set s10 = Comput(ProgramPart(s),s,b+1+1+1+1+1+1);
    set s4 = Comput(ProgramPart(s),s,6*k+3);
A16: IC s4 = L4 by A14,A15,NAT_1:13;
    let t be State of SCM;
    assume
A17: t = Comput(ProgramPart(s),s,6*(k+1)+3);
A18: s4.n = N-1-k by A14,A15,NAT_1:13;
    then s4.n <> 0 by A15;
    then
A19: IC s5 = (4+1) by A6,A16,SCM_1:24;
    then
A20: IC s6 = (5+1) by A12,SCM_1:18;
    then
A21: IC s7 = (6+1) by A8,SCM_1:18;
    then
A22: IC s8 = (7+1) by A10,SCM_1:19;
    then
A23: IC s9 = L3 by A11,SCM_1:23;
    then
A24: IC s10 = (3+1) by A4,SCM_1:20;
    s4.C1 = 1 by A14,A15,NAT_1:13;
    then s5.C1 = 1 by A6,A16,SCM_1:24;
    then s6.C1 = 1 by A12,A19,Lm13,SCM_1:18;
    then s7.C1 = 1 by A8,A20,Lm8,SCM_1:18;
    then s8.C1 = 1 by A10,A21,Lm9,SCM_1:19;
    then
A25: s9.C1 = 1 by A11,A22,SCM_1:23;
    s4.FC = Fib (k+1) by A14,A15,NAT_1:13;
    then s5.FC = Fib (k+1) by A6,A16,SCM_1:24;
    then
A26: s6.FC = Fib (k+1) by A12,A19,Lm16,SCM_1:18;
    then
A27: s7.FC = Fib (k+1) by A8,A20,Lm12,SCM_1:18;
    s4.FP = Fib k by A14,A15,NAT_1:13;
    then s5.FP = Fib k by A6,A16,SCM_1:24;
    then s6.AUX = Fib k by A12,A19,SCM_1:18;
    then
A28: s7.AUX = Fib k by A8,A20,Lm15,SCM_1:18;
    s8.FC = s7.AUX + s7.FC by A10,A21,SCM_1:19
      .= Fib (k+1+1) by A27,A28,PRE_FF:1;
    then
A29: s9.FC = Fib (k+1+1) by A11,A22,SCM_1:23;
    s7.FP = Fib (k+1) by A8,A20,A26,SCM_1:18;
    then s8.FP = Fib (k+1) by A10,A21,Lm12,SCM_1:19;
    then
A30: s9.FP = Fib (k+1) by A11,A22,SCM_1:23;
    s5.n = N-1-k by A6,A18,A16,SCM_1:24;
    then s6.n = N-1-k by A12,A19,Lm14,SCM_1:18;
    then s7.n = N-1-k by A8,A20,Lm10,SCM_1:18;
    then s8.n = N-1-k by A10,A21,Lm11,SCM_1:19;
    then s9.n = N-1-k by A11,A22,SCM_1:23;
    then s10.n = N-1-k - 1 by A4,A23,A25,SCM_1:20;
    hence thesis by A4,A17,A23,A25,A30,A29,A24,Lm7,Lm10,Lm11,SCM_1:20;
  end;
A31: s.L1 = halt SCM by SCM_1:14;
A32: s.n = N by SCM_1:14;
  then
A33: s1.n = N by A1,A2,SCM_1:25;
A34: P[0]
  proof
    set s3 = Comput(ProgramPart(s),s,2+1);
    set s2 = Comput(ProgramPart(s),s,1+1);
    assume
    0 < N;
    then
A35: IC s1 = L2 by A1,A32,A2,SCM_1:25;
    then
A36: s2.FC = 1 & s2.C1 = 1 by A9,A3,A7,SCM_1:18;
    let t be State of SCM;
    assume
A37: t = Comput(ProgramPart(s),s,6*0+3);
A38: s2.n = N & s2.FP = 0 by A9,A33,A5,A35,Lm11,Lm12,SCM_1:18;
A39: IC s2 = (2+1) by A9,A35,SCM_1:18;
    then IC s3 = (3+1) by A4,SCM_1:20;
    hence thesis by A4,A37,A36,A38,A39,Lm7,Lm10,Lm11,PRE_FF:1,SCM_1:20;
  end;
A40: for k being Element of NAT holds P[k] from NAT_1:sch 1(A34, A13);
  per cases by NAT_1:6;
  suppose
A41: N = 0;
    then
A42: s.(IC s1) = halt SCM by A1,A31,A32,A2,SCM_1:25;
    hence ProgramPart s halts_on s by SCM_1:3;
    hereby
      assume
      N = 0;
      halt SCM <> n >0_goto L2 by SCM_1:26;
      hence LifeSpan(ProgramPart(s),s) = 1 by A1,A2,A42,SCM_1:17;
    end;
    thus N > 0 implies LifeSpan(ProgramPart(s),s) = 6 * N - 2 by A41;
    thus thesis by A7,A41,A42,PRE_FF:1,SCM_1:4;
  end;
  suppose
    ex k being Nat st N = k+1;
    then consider k being Nat such that
A43: N = k+1;
    reconsider k as Element of NAT by ORDINAL1:def 13;
    set r = Comput(ProgramPart(s),s,6*k+3);
A44: k < N by A43,NAT_1:13;
    then
A45: IC r = L4 by A40;
A46: r.FC = Fib (k+1) by A40,A44;
    set t = Comput(ProgramPart(s),s,6*k+3+1);
    r.n = k+(1-1)-k by A40,A43,A44
      .= 0;
    then
A47: IC t = L1 by A6,A45,SCM_1:24;
    hence ProgramPart s halts_on s by A31,SCM_1:3;
    thus N = 0 implies LifeSpan(ProgramPart(s),s) = 1 by A43,NAT_1:5;
    thus N > 0 implies LifeSpan(ProgramPart(s),s) = 6 * N - 2 by A31,A43,A45
,A47,SCM_1:17;
    thus (Result(ProgramPart(s),s)).FC = t.FC by A31,A47,SCM_1:4
      .= Fib N by A6,A43,A46,A45,SCM_1:24;
  end;
end;

:: Fusc

definition
  let i be Integer;
  func Fusc' i -> Element of NAT means
  :Def2:
  (ex n being Element of NAT st i
  = n & it = Fusc n) or i is not Element of NAT & it = 0;
  existence
  proof
    per cases;
    suppose
      i is Element of NAT;
      then reconsider n = i as Element of NAT;
      take Fusc n;
      thus thesis;
    end;
    suppose
      i is not Element of NAT;
      hence thesis;
    end;
  end;
  uniqueness;
end;

definition
  func Fusc_Program -> XFinSequence of the Instructions of SCM equals
  <% dl.1
=0_goto 8 %>^ <% dl.4 := dl.0 %>^ <% Divide(dl.1, dl.4) %>^ <% dl.4 =0_goto
6 %>^ <% AddTo(dl.3, dl.2) %>^ <% SCM-goto 0 %>^ <% AddTo(dl.2, dl.3) %>
^ <% SCM-goto 0 %>^ <% halt SCM %>;
  coherence;
end;

theorem
  for N being Element of NAT st N > 0 for s being State-consisting of 0,
0, 0, Fusc_Program, <*2*>^<*N*>^<*1*>^<*0*> holds ProgramPart s halts_on s &
 (Result(ProgramPart(s),s)).dl.
  3 = Fusc N & LifeSpan(ProgramPart(s),s) = 6 * ([\ log(2, N) /] + 1) + 1
proof
  set c2 = dl.0, n = dl.1, a = dl.2, b = dl.3, aux = dl.4;
  set L6 = 6, L7 = 7, L8 = 8;
  set L0 = 0, L1 = 1, L2 = 2, L3 = 3, L4 = 4, L5 = 5;
  let N be Element of NAT such that
A1: N > 0;
  set k = [\log(2, N)/];
  log(2, N) - 1 < k by INT_1:def 4;
  then
A2: log(2, N) < k+1 by XREAL_1:21;
  N >= 0+1 by A1,NAT_1:13;
  then log (2, N) >= log (2, 1) by PRE_FF:12;
  then log (2, N) >= 0 by POWER:59;
  then k+1 > 0 by A2,XXREAL_0:2;
  then reconsider k as Element of NAT by INT_1:16,20;
  2 to_power (k+1) > 2 to_power log(2, N) by A2,POWER:44;
  then 2 to_power (k+1) > N by A1,POWER:def 3;
  then
A3: 2 |^ (k+1) > N by POWER:46;
  let S be State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*N*>^<*1*>^<*0*>;
  consider s being State of SCM such that
A4: s = S;
  defpred P[Element of NAT] means $1 <= log(2, N) + 1 implies for u being
  State of SCM st u = Comput(ProgramPart(s),s,6*$1) holds IC u = L0 & u.c2 = 2
& u.n = N
qua Integer div (2 |^ $1) & u.n is Element of NAT & Fusc N = u.a*Fusc' u.n + u.
  b*Fusc' (u.n+1);
A5: s.L0 = n =0_goto L8 by A4,SCM_1:14;
A6: s.L7 = SCM-goto L0 by A4,SCM_1:14;
A7: s.L1 = aux := c2 by A4,SCM_1:14;
A8: s.L4 = AddTo(b, a) by A4,SCM_1:14;
A9: s.L2 = Divide(n, aux) by A4,SCM_1:14;
A10: s.L6 = AddTo(a, b) by A4,SCM_1:14;
A11: s.L3 = aux =0_goto L6 by A4,SCM_1:14;
A12: s.L5 = SCM-goto L0 by A4,SCM_1:14;
A13: for k being Element of NAT st P[k] holds P[k+1]
  proof
    let k be Element of NAT;
    assume
A14: k <= log(2, N) + 1 implies for u being State of SCM st u =
Comput(ProgramPart(s),s,6*k) holds IC u = L0 & u.c2 = 2 & u.n = N qua Integer
div (2 |^ k
    ) & u.n is Element of NAT & Fusc N = u.a*Fusc' u.n + u.b*Fusc' (u.n+1);
    set t = 6*k;
    set t0 = Comput(ProgramPart(s),s,t);
    assume
A15: k+1 <= log(2, N) + 1;
    then k <= log(2, N) by XREAL_1:8;
    then 2 to_power k <= 2 to_power log(2, N) by PRE_FF:10;
    then 2 to_power k <= N by A1,POWER:def 3;
    then
A16: 2 |^ k <= N by POWER:46;
A17: k <= k+1 by NAT_1:11;
    then
A18: t0.n is Element of NAT by A14,A15,XXREAL_0:2;
A19: t0.n = N qua Integer div (2 |^ k) by A14,A15,A17,XXREAL_0:2;
A20: IC t0 = L0 by A14,A15,A17,XXREAL_0:2;
    set t3 = Comput(ProgramPart(s),s,t+3);
    set t2 = Comput(ProgramPart(s),s,t+2);
    set t1 = Comput(ProgramPart(s),s,t+1);
A21: t+1+1 = t + 2;
    (2 |^ k) > 0 by NEWTON:102;
    then t0.n <> 0 by A19,A16,PRE_FF:3;
    then
A22: IC t1 = (0+1) by A5,A20,SCM_1:24;
    then
A23: IC t2 = (1+1) by A7,A21,SCM_1:18;
A24: t+2+1 = t+3;
    then
A25: IC t3 = (2+1) by A9,A23,Lm14,SCM_1:22;
    t1.n = t0.n by A5,A20,SCM_1:24;
    then
A26: t2.n = t0.n by A7,A22,A21,Lm14,SCM_1:18;
A27: t0.n mod 2 = t0.n - (t0.n div 2)*2 by INT_1:def 8;
    let u be State of SCM;
    assume
A28: u = Comput(ProgramPart(s),s,6*(k+1));
    t0.c2 = 2 by A14,A15,A17,XXREAL_0:2;
    then
A29: t1.c2 = 2 by A5,A20,SCM_1:24;
    then t2.c2 = 2 by A7,A22,A21,Lm13,SCM_1:18;
    then
A30: t3.c2 = 2 by A9,A23,A24,Lm7,Lm13,Lm14,SCM_1:22;
A31: t2.aux = 2 by A7,A22,A29,A21,SCM_1:18;
    then
A32: t3.n = t0.n div 2 by A9,A23,A26,A24,Lm14,SCM_1:22;
    then
A33: t3.n = N qua Integer div (2|^k)*2 by A19,PRE_FF:5
      .= N qua Integer div (2|^(k+1)) by NEWTON:11;
A34: t3.aux = t0.n mod 2 by A9,A23,A31,A26,A24,Lm14,SCM_1:22;
    set t6 = Comput(ProgramPart(s),s,t+6);
    set t5 = Comput(ProgramPart(s),s,t+5);
    set t4 = Comput(ProgramPart(s),s,t+4);
A35: t+3+1 = t+4;
    t1.b = t0.b by A5,A20,SCM_1:24;
    then t2.b = t0.b by A7,A22,A21,Lm16,SCM_1:18;
    then
A36: t3.b = t0.b by A9,A23,A24,Lm11,Lm14,Lm16,SCM_1:22;
A37: t+5+1 = t+6;
    t1.a = t0.a by A5,A20,SCM_1:24;
    then t2.a = t0.a by A7,A22,A21,Lm15,SCM_1:18;
    then
A38: t3.a = t0.a by A9,A23,A24,Lm10,Lm14,Lm15,SCM_1:22;
A39: t+4+1 = t+5;
    per cases;
    suppose
A40:  t3.aux <> 0;
      reconsider ta = t0.a, tb = t0.b as Integer;
A41:  t4.a = t0.a by A11,A25,A38,A35,SCM_1:24;
A42:  IC t4 = (3+1) by A11,A25,A35,A40,SCM_1:24;
      then
A43:  IC t5 = (4+1) by A8,A39,SCM_1:19;
      t4.n = t3.n by A11,A25,A35,SCM_1:24;
      then
A44:  t5.n = t3.n by A8,A39,A42,Lm11,SCM_1:19;
      then
A45:  t6.n = t3.n by A12,A37,A43,SCM_1:23;
      then reconsider un = u.n, tn = t0.n as Element of NAT by A28,A18,A32,
PRE_FF:7;
A46:  tn = (t0.n div 2)*2 + (t0.n mod 2) by A27
        .= 2 * un + 1 by A28,A32,A34,A40,A45,PRE_FF:6;
      then
A47:  tn+1 = 2*(un+1);
      t4.c2 = 2 by A11,A25,A30,A35,SCM_1:24;
      then t5.c2 = 2 by A8,A39,A42,Lm9,SCM_1:19;
      hence IC u = L0 & u.c2 = 2 & u.n = N qua Integer div (2 |^ (k+1)) by A12
,A28,A33,A37,A43,A44,SCM_1:23;
      thus u.n is Element of NAT by A28,A18,A32,A45,PRE_FF:7;
A48:  Fusc' (t0.n+1) = Fusc (tn+1) by Def2
        .= Fusc (un+1) by A47,PRE_FF:17
        .= Fusc' (u.n+1) by Def2;
      t4.b = t0.b by A11,A25,A36,A35,SCM_1:24;
      then t5.b = t0.b + t0.a by A8,A39,A42,A41,SCM_1:19;
      then
A49:  t6.b = t0.b+t0.a by A12,A37,A43,SCM_1:23;
A50:  Fusc' t0.n = Fusc tn by Def2
        .= Fusc un + Fusc (un+1) by A46,PRE_FF:17
        .= Fusc' u.n + Fusc (un+1) by Def2
        .= Fusc' u.n + Fusc' (u.n+1) by Def2;
      reconsider un = u.n, tn = t0.n as Integer;
      t5.a = t0.a by A8,A39,A42,A41,Lm12,SCM_1:19;
      then t6.a = t0.a by A12,A37,A43,SCM_1:23;
      then (ta * Fusc' tn) + (tb * Fusc' (tn+1)) = (u.a * Fusc' un) + (u.b) *
      Fusc' (un+1) by A28,A49,A50,A48;
      hence thesis by A14,A15,A17,XXREAL_0:2;
    end;
    suppose
A51:  t3.aux = 0;
      then
A52:  IC t4 = 6 by A11,A25,A35,SCM_1:24;
      then
A53:  IC t5 = (6+1) by A10,A39,SCM_1:19;
      t4.n = t3.n by A11,A25,A35,SCM_1:24;
      then t5.n = t3.n by A10,A39,A52,Lm10,SCM_1:19;
      then
A54:  t6.n = t3.n by A6,A37,A53,SCM_1:23;
      then reconsider un = u.n, tn = t0.n as Element of NAT by A28,A18,A32,
PRE_FF:7;
A55:  Fusc' (t0.n+1) = Fusc (tn+1) by Def2
        .= Fusc un + Fusc (un+1) by A28,A32,A34,A27,A51,A54,PRE_FF:17
        .= Fusc un + Fusc' (u.n+1) by Def2
        .= Fusc' u.n + Fusc' (u.n+1) by Def2;
A56:  t4.b = t0.b by A11,A25,A36,A35,SCM_1:24;
      then t5.b = t0.b by A10,A39,A52,Lm12,SCM_1:19;
      then
A57:  t6.b = t0.b by A6,A37,A53,SCM_1:23;
      t4.c2 = 2 by A11,A25,A30,A35,SCM_1:24;
      then t5.c2 = 2 by A10,A39,A52,Lm8,SCM_1:19;
      hence IC u = L0 & u.c2 = 2 & u.n = N qua Integer div (2 |^ (k+1)) & u.n
      is Element of NAT by A6,A28,A18,A32,A33,A37,A53,A54,PRE_FF:7,SCM_1:23;
A58:  Fusc' t0.n = Fusc tn by Def2
        .= Fusc un by A28,A32,A34,A27,A51,A54,PRE_FF:17
        .= Fusc' u.n by Def2;
      t4.a = t0.a by A11,A25,A38,A35,SCM_1:24;
      then t5.a = t0.a + t0.b by A10,A39,A52,A56,SCM_1:19;
      then
A59:  t6.a = t0.a+t0.b by A6,A37,A53,SCM_1:23;
      reconsider un = u.n, tn = t0.n, ta = t0.a, tb = t0.b as Integer;
      (ta * Fusc' tn) + (tb * Fusc' (tn+1)) = (ta+tb) * Fusc' un + tb *
      Fusc' (un+1) by A58,A55;
      hence thesis by A14,A15,A28,A17,A59,A57,XXREAL_0:2;
    end;
  end;
  set h = Comput(ProgramPart(s),s,6*(k+1)+1);
  set u = Comput(ProgramPart(s),s,6*(k+1));
A60: s.n = N by A4,SCM_1:14;
A61: s.a = 1 & s.b = 0 by A4,SCM_1:14;
A62: P[0]
  proof
    assume
    0 <= log(2, N) + 1;
    let u be State of SCM;
    assume
    u = Comput(ProgramPart(s),s,6*0);
    then
A63: u = s by AMI_1:13;
    hence IC u = L0 & u.c2 = 2 by A4,SCM_1:14;
    thus u.n = N qua Integer div 1 by A60,A63,PRE_FF:2
      .= N qua Integer div (2 |^ 0) by NEWTON:9;
    thus u.n is Element of NAT by A4,A63,SCM_1:14;
    thus thesis by A60,A61,A63,Def2;
  end;
A64: for k being Element of NAT holds P[k] from NAT_1:sch 1( A62, A13 );
  [\log(2, N)/] <= log(2, N) by INT_1:def 4;
  then
A65: k+1 <= log(2, N)+1 by XREAL_1:8;
  then
A66: Fusc N = u.a*Fusc' u.n + u.b*Fusc' (u.n+1) by A64;
A67: IC u = L0 by A64,A65;
  then
A68: h.b = u.b by A5,SCM_1:24;
  u.n = N qua Integer div (2 |^ (k+1)) by A64,A65;
  then
A69: u.n = 0 by A3,NAT_1:2,PRE_FF:4;
  then
A70: IC h = L8 by A5,A67,SCM_1:24;
A71: s.(IC u)<>halt SCM by A5,A67,SCM_1:26;
A72: s.L8 = halt SCM by A4,SCM_1:14;
  hence ProgramPart S halts_on S by A4,A70,SCM_1:3;
  u.a*Fusc' u.n + u.b*Fusc' (u.n+1) = u.a * 0 + u.b * Fusc' (u.n+1) by A69,Def2
,PRE_FF:17
    .= u.b * Fusc (0+1) by A69,Def2
    .= u.b by PRE_FF:17;
  hence (Result(ProgramPart(S),S)).dl.3 = Fusc N by A4,A72,A66,A70,A68,SCM_1:4;
  s.(IC h)=halt SCM by A4,A70,SCM_1:14;
  hence thesis by A4,A71,SCM_1:17;
end;

theorem
  for N being Element of NAT, k, Fk, Fk1 being Element of NAT, s being
State-consisting of 3, 0, 0, Fib_Program, <* 1 *>^<* N *>^<* Fk *>^<* Fk1 *> st
N > 0 & Fk = Fib k & Fk1 = Fib (k+1) holds ProgramPart s halts_on s &
 LifeSpan(ProgramPart(s),s) = 6 * N -
4 & ex m being Element of NAT st m = k+N-1 & (Result(ProgramPart(s),s)).dl.2 =
Fib m & Result(ProgramPart s,
  s).dl.3 = Fib (m+1)
proof
  defpred P[Element of NAT] means for k, Fk, Fk1 be Element of NAT, s be
  State-consisting of 3, 0, 0, Fib_Program, <* 1 *>^<* $1 *>^<* Fk *>^<* Fk1 *>
st $1 > 0 & Fk = Fib k & Fk1 = Fib (k+1) holds ProgramPart s halts_on s &
 LifeSpan(ProgramPart(s),s) = 6 *
$1 - 4 & ex m being Element of NAT st m = k+$1-1 & (Result(ProgramPart(s),s)).
dl.2 = Fib m & (
  Result(ProgramPart(s),s)).dl.3 = Fib (m+1);
A1: for N be Element of NAT st P[N] holds P[N+1]
  proof
    set C1 = dl.0, n = dl.1, FP = dl.2, FC = dl.3, AUX = dl.4;
    let N be Element of NAT;
    assume
A2: P[N];
A3: N >= 0 by NAT_1:2;
    let k, Fk, Fk1 be Element of NAT, s be State-consisting of 3, 0, 0,
    Fib_Program, <* 1 *>^<* N+1 *>^<* Fk *>^<* Fk1 *>;
    assume that
    (N+1) > 0 and
A4: Fk = Fib k and
A5: Fk1 = Fib (k+1);
A6: s.3 = SubFrom(n, C1) by SCM_1:14;
    set s0 = Comput(ProgramPart(s),s,0);
A7: s.0 = n >0_goto 2 by SCM_1:14;
    set s1 = Comput(ProgramPart(s),s,0+1);
A8: s.1 = halt SCM by SCM_1:14;
A9: IC s = 3 & s = s0 by AMI_1:13,SCM_1:def 1;
    then
A10: IC s1 = (3+1) by A6,SCM_1:20
      .= 4;
    set s2 = Comput(ProgramPart(s),s,1+1);
A11: s.2 = FC := C1 by SCM_1:14;
A12: s.4 = n =0_goto 1 by SCM_1:14;
    s.FC = Fk1 by SCM_1:14;
    then s1.FC=Fk1 by A6,A9,Lm11,SCM_1:20;
    then
A13: s2.FC=Fk1 by A12,A10,SCM_1:24;
A14: s.7 = AddTo(FC, AUX) by SCM_1:14;
    s.FP = Fk by SCM_1:14;
    then s1.FP=Fk by A6,A9,Lm10,SCM_1:20;
    then
A15: s2.FP=Fk by A12,A10,SCM_1:24;
A16: s.6 = FP := FC by SCM_1:14;
A17: s.C1 = 1 by SCM_1:14;
    then s1.C1=1 by A6,A9,Lm7,SCM_1:20;
    then
A18: s2.C1=1 by A12,A10,SCM_1:24;
    s.n = N+1 by SCM_1:14;
    then
A19: s1.n = (N+1)-1 by A6,A17,A9,SCM_1:20
      .= N;
    then
A20: s2.n=N by A12,A10,SCM_1:24;
A21: s.5 = AUX := FP by SCM_1:14;
A22: s.8 = SCM-goto 3 by SCM_1:14;
    per cases by A3,XXREAL_0:1;
    suppose
A23:  N = 0;
      then
A24:  s.(IC s2) = halt SCM by A8,A12,A19,A10,SCM_1:24;
      hence ProgramPart s halts_on s by SCM_1:3;
      s.(IC s1) <> halt SCM by A12,A10,SCM_1:26;
      hence LifeSpan(ProgramPart(s),s) = 6 * (N+1) - 4 by A23,A24,SCM_1:16;
      take m = k;
      thus m = k+(N+1)-1 by A23;
      thus thesis by A4,A5,A15,A13,A24,SCM_1:4;
    end;
    suppose
A25:  N > 0;
      then
A26:  6 * N - 4 > 0 by Lm6;
      set Fk2 = Fib (k+1+1);
      set s6 = Comput(ProgramPart(s),s,5+1);
A27:  s6.8=SCM-goto 3 by A22,AMI_1:54;
A28:  s6.0=n >0_goto 2 & s6.1=halt SCM by A7,A8,AMI_1:54;
      set s5 = Comput(ProgramPart(s),s,4+1);
      set s4 = Comput(ProgramPart(s),s,3+1);
      set s3 = Comput(ProgramPart(s),s,2+1);
A29:  IC s2 = (4+1) by A12,A19,A10,A25,SCM_1:24;
      then
A30:  IC s3 = (5+1) by A21,SCM_1:18;
      then
A31:  IC s4 = (6+1) by A16,SCM_1:18;
      then
A32:  IC s5 = (7+1) by A14,SCM_1:19;
A33:  s3.FC = Fib (k+1) by A5,A21,A13,A29,Lm16,SCM_1:18;
      then
A34:  s4.FC = Fib (k+1) by A16,A30,Lm12,SCM_1:18;
      s4.FP = Fib (k+1) by A16,A30,A33,SCM_1:18;
      then s5.FP = Fib (k+1) by A14,A31,Lm12,SCM_1:19;
      then
A35:  s6.FP = Fib (k+1) by A22,A32,SCM_1:23;
      s3.C1 = 1 by A21,A18,A29,Lm13,SCM_1:18;
      then s4.C1 = 1 by A16,A30,Lm8,SCM_1:18;
      then s5.C1 = 1 by A14,A31,Lm9,SCM_1:19;
      then
A36:  s6.C1 = 1 by A22,A32,SCM_1:23;
A37:  s6.6=FP := FC & s6.7=AddTo(FC, AUX) by A16,A14,AMI_1:54;
      s3.AUX = Fib k by A4,A21,A15,A29,SCM_1:18;
      then
A38:  s4.AUX = Fib k by A16,A30,Lm15,SCM_1:18;
      s5.FC = s4.AUX + s4.FC by A14,A31,SCM_1:19
        .= Fib (k+1+1) by A34,A38,PRE_FF:1;
      then
A39:  s6.FC = Fib (k+1+1) by A22,A32,SCM_1:23;
      s3.n = N by A21,A20,A29,Lm14,SCM_1:18;
      then s4.n = N by A16,A30,Lm10,SCM_1:18;
      then s5.n = N by A14,A31,Lm11,SCM_1:19;
      then
A40:  s6.n = N by A22,A32,SCM_1:23;
A41:  s6.4=n =0_goto 1 & s6.5=AUX := FP by A12,A21,AMI_1:54;
A42:  s6.2=FC := C1 & s6.3=SubFrom(n, C1) by A11,A6,AMI_1:54;
      IC s6 = 3 by A22,A32,SCM_1:23;
      then
A43:  s6 is State-consisting of 3, 0, 0, Fib_Program, <* 1 *>^<* N *>^<*
      Fk1 *>^<* Fk2 *> by A5,A36,A40,A35,A39,A28,A42,A41,A37,A27,SCM_1:30;
      then consider m being Element of NAT such that
A44:  m = (k+1)+N-1 and
      (Result(ProgramPart(s6),s6)).dl.2 = Fib m and
      (Result(ProgramPart(s6),s6)).dl.3 = Fib (m+1) by A2,A5,A25;
A45:  ProgramPart s6 halts_on s6 by A2,A5,A25,A43;
      then
Y:     ProgramPart s halts_on s6 by AMI_1:123;
      hence ProgramPart s halts_on s by AMI_1:93;
      LifeSpan(ProgramPart(s6),s6) = 6 * N - 4 by A2,A5,A25,A43;
      hence LifeSpan(ProgramPart(s),s) = 6 + (6 * N - 4) by A45,A26,SCM_1:28
        .= 6 * (N+1) - 4;
      take m;
      thus m = k+(N+1)-1 by A44;
X:    Result(ProgramPart(s6),s6) = Result(ProgramPart(s),s) by Y,SCM_1:29;
      ex m being Element of NAT st m = (k+1)+N-1 & (Result(ProgramPart(s6),s6))
.dl.2 = Fib
      m & (Result(ProgramPart(s6),s6)).dl.3 = Fib (m+1) by A2,A5,A25,A43;
      hence thesis by A44,X;
    end;
  end;
A46: P[0];
  thus for N be Element of NAT holds P[N] from NAT_1:sch 1 ( A46, A1 );
end;

canceled;

theorem Th5:
  for n being Element of NAT, N, A, B being Element of NAT, s being
  State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*n*>^<*A*>^<*B*> st N > 0 &
  Fusc N = A * Fusc n + B * Fusc (n+1) holds ProgramPart s halts_on s &
   (Result(ProgramPart(s),s)).dl.3 =
  Fusc N & (n = 0 implies LifeSpan(ProgramPart(s),s) = 1) & (n > 0 implies
LifeSpan(ProgramPart(s),s) = 6 * ([\
  log(2, n) /] + 1) + 1)
proof
  defpred P[Nat] means for N, A, B being Element of NAT, s being
State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*$1*>^<*A*>^<*B*> st N > 0 &
  Fusc N = A * Fusc $1 + B * Fusc ($1+1) holds ProgramPart s halts_on s &
   (Result(ProgramPart(s),s)).dl.3 =
Fusc N & ($1 = 0 implies LifeSpan(ProgramPart(s),s) = 1) & ($1 > 0 implies
LifeSpan(ProgramPart(s),s) = 6 * ([\
  log(2, $1) /] + 1)+1);
A1: for k being Nat st for n being Nat st n < k holds P[n] holds P[k]
  proof
    set c2 = dl.0, n = dl.1, a = dl.2, b = dl.3, aux = dl.4;
    let nn be Nat;
    assume
A2: for n9 being Nat st n9 < nn holds for N, A, B being Element of NAT
, s being State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*n9*>^<*A*>^<*B*>
st N > 0 & Fusc N = A * Fusc n9 + B * Fusc (n9+1)
 holds ProgramPart s halts_on s & Result(ProgramPart s,
s).dl.3 = Fusc N & (n9 = 0 implies LifeSpan(ProgramPart(s),s) = 1) & (n9 > 0
implies LifeSpan(ProgramPart(s),s)
    = 6 * ([\ log(2, n9) /] + 1)+1);
    reconsider n2 = nn as Element of NAT by ORDINAL1:def 13;
    let N, A, B be Element of NAT, s be State-consisting of 0, 0, 0,
    Fusc_Program, <*2*>^<*nn*>^<*A*>^<*B*>;
    assume that
A3: N > 0 and
A4: Fusc N = A * Fusc nn + B * Fusc (nn+1);
A5: s.n = nn by SCM_1:14;
    set s0 = Comput(ProgramPart(s),s,0);
A6: s.0 = n =0_goto 8 by SCM_1:14;
    set s1 = Comput(ProgramPart(s),s,0+1);
A7: s.8 = halt SCM by SCM_1:14;
A8: s.3 = aux =0_goto 6 by SCM_1:14;
A9: IC s = 0 & s = s0 by AMI_1:13,SCM_1:14;
    s.a = A by SCM_1:14;
    then
A10: s1.a = A by A6,A9,SCM_1:24;
    s.c2 = 2 by SCM_1:14;
    then
A11: s1.c2 = 2 by A6,A9,SCM_1:24;
A12: s.2 = Divide(n, aux) by SCM_1:14;
    s.b = B by SCM_1:14;
    then
A13: s1.b = B by A6,A9,SCM_1:24;
A14: now
      assume
A15:  nn = 0;
      then
A16:  s.(IC s1) = halt SCM by A6,A7,A5,A9,SCM_1:24;
      hence ProgramPart s halts_on s by SCM_1:3;
      thus (Result(ProgramPart(s),s)).b = s1.b by A16,SCM_1:4
        .= Fusc N by A4,A13,A15,PRE_FF:20;
      hereby
        assume
        nn = 0;
        halt SCM <> n =0_goto 8 by SCM_1:26;
        hence LifeSpan(ProgramPart(s),s) = 1 by A6,A9,A16,SCM_1:17;
      end;
      thus nn>0 implies LifeSpan(ProgramPart(s),s)=6 * ([\ log(2, nn) /] + 1)+1
by A15;
    end;
A17: s.1 = aux := c2 by SCM_1:14;
A18: s.5 = SCM-goto 0 by SCM_1:14;
A19: s.4 = AddTo(b, a) by SCM_1:14;
A20: s.7 = SCM-goto 0 by SCM_1:14;
A21: s.6 = AddTo(a, b) by SCM_1:14;
A22: s1.n = nn by A6,A5,A9,SCM_1:24;
A23: now
      set s6 = Comput(ProgramPart(s),s,5+1);
      set s5 = Comput(ProgramPart(s),s,4+1);
      set s4 = Comput(ProgramPart(s),s,3+1);
      set s3 = Comput(ProgramPart(s),s,2+1);
      set s2 = Comput(ProgramPart(s),s,1+1);
A24:  nn mod 2 = nn - (nn div 2) * 2 by INT_1:def 8;
      assume
A25:  nn > 0;
      then
A26:  IC s1 = (0+1) by A6,A5,A9,SCM_1:24;
      then
A27:  IC s2 = (1+1) by A17,SCM_1:18;
      then
A28:  IC s3 = (2+1) by A12,Lm14,SCM_1:22;
      s2.a = A by A17,A10,A26,Lm15,SCM_1:18;
      then
A29:  s3.a =A by A12,A27,Lm10,Lm14,Lm15,SCM_1:22;
      s2.c2 = 2 by A17,A11,A26,Lm13,SCM_1:18;
      then
A30:  s3.c2 =2 by A12,A27,Lm7,Lm13,Lm14,SCM_1:22;
      s2.b = B by A17,A13,A26,Lm16,SCM_1:18;
      then
A31:  s3.b =B by A12,A27,Lm11,Lm14,Lm16,SCM_1:22;
A32:  s2.aux = 2 & s2.n = nn by A17,A11,A22,A26,Lm14,SCM_1:18;
      then
A33:  s3.n = n2 div 2 by A12,A27,Lm14,SCM_1:22;
      then reconsider nn9 = s3.n as Element of NAT by PRE_FF:7;
A34:  s3.aux = nn mod 2 by A12,A27,A32,Lm14,SCM_1:22;
      per cases;
      suppose
A35:    s3.aux <> 0;
        then
A36:    IC s4 = (3+1) by A8,A28,SCM_1:24;
        then
A37:    IC s5 = (4+1) by A19,SCM_1:19;
A38:    s4.a = A by A8,A28,A29,SCM_1:24;
        then s5.a = A by A19,A36,Lm12,SCM_1:19;
        then
A39:    s6.a = A by A18,A37,SCM_1:23;
        s4.b = B by A8,A28,A31,SCM_1:24;
        then
A40:    s5.b = B + A by A19,A36,A38,SCM_1:19;
A41:    s3.aux = 1 by A34,A35,PRE_FF:6;
        s4.n = s3.n by A8,A28,SCM_1:24;
        then s5.n = s3.n by A19,A36,Lm11,SCM_1:19;
        then
A42:    s6.n = s3.n by A18,A37,SCM_1:23;
A43:    s6.0 = n =0_goto 8 & s6.1 = aux := c2 by A6,A17,AMI_1:54;
A44:    s6.8 = halt SCM by A7,AMI_1:54;
        s4.c2 = 2 by A8,A28,A30,SCM_1:24;
        then s5.c2 = 2 by A19,A36,Lm9,SCM_1:19;
        then
A45:    s6.c2 = 2 by A18,A37,SCM_1:23;
A46:    s6.6 = AddTo(a, b) & s6.7 = SCM-goto 0 by A21,A20,AMI_1:54;
A47:    s6.4 = AddTo(b, a) & s6.5 = SCM-goto 0 by A19,A18,AMI_1:54;
A48:    s6.2 = Divide(n, aux) & s6.3 = aux =0_goto 6 by A12,A8,AMI_1:54;
        IC s6 = 0 & s6.b = s5.b by A18,A37,SCM_1:23;
        then
A49:    s6 is State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*nn9*>^<*
        A*>^<*B+A*> by A40,A45,A42,A39,A43,A48,A47,A46,A44,SCM_1:30;
A50:    nn mod 2 + (nn div 2) * 2 = nn by A24;
        then
A51:    nn9 < nn by A33,A34,A41,PRE_FF:19;
A52:    Fusc N = A * Fusc nn9 + (B+A)*Fusc (nn9+1) by A4,A33,A34,A41,A50,
PRE_FF:21;
        then
A53:    nn9 > 0 implies LifeSpan(ProgramPart(s6),s6) = 6 * ([\ log(2, nn9) /] +
1)+1 by A2,A3,A49,A51;
A54:    ProgramPart s6 halts_on s6 by A2,A3,A49,A51,A52;
        then
Y:       ProgramPart s halts_on s6 by AMI_1:123;
        hence ProgramPart s halts_on s by AMI_1:93;
X:      Result(ProgramPart(s6),s6) = Result(ProgramPart(s),s) by Y,SCM_1:29;
        (Result(ProgramPart(s6),s6)).dl.3 = Fusc N by A2,A3,A49,A51,A52;
        hence (Result(ProgramPart(s),s)).dl.3 = Fusc N by X;
        thus nn = 0 implies LifeSpan(ProgramPart(s),s) = 1 by A25;
A55:    nn9 = 0 implies LifeSpan(ProgramPart(s6),s6) = 1 by A2,A3,A33,A34,A24
,A41,A49,A52;
        thus nn > 0 implies LifeSpan(ProgramPart(s),s) = 6 * ([\ log(2, nn) /]
+ 1)+1
        proof
          assume
          nn > 0;
          per cases;
          suppose
            nn9 = 0;
            hence thesis by A33,A34,A24,A41,A54,A55,Lm1,SCM_1:28;
          end;
          suppose
A56:        nn9 <> 0;
            then
A57:        nn9 > 0 by NAT_1:3;
            then reconsider F = [\ log(2, nn9) /] as Element of NAT by Lm2;
            6 * (F+1)+1 > 0 by A57,Lm2;
            hence LifeSpan(ProgramPart(s),s)=6 + (6 * (F+1)+1) by A54,A53,A56,
NAT_1:3,SCM_1:28
              .= 6 * ([\ log(2, nn) /] + 1) + 1 by A33,A34,A41,A50,A57,Lm3;
          end;
        end;
      end;
      suppose
A58:    s3.aux = 0;
        then
A59:    IC s4 = 6 by A8,A28,SCM_1:24;
        then
A60:    IC s5 = (6+1) by A21,SCM_1:19;
        s4.c2 = 2 by A8,A28,A30,SCM_1:24;
        then s5.c2 = 2 by A21,A59,Lm8,SCM_1:19;
        then
A61:    s6.c2 = 2 by A20,A60,SCM_1:23;
A62:    s6.6 = AddTo(a, b) & s6.7 = SCM-goto 0 by A21,A20,AMI_1:54;
A63:    s4.b = B by A8,A28,A31,SCM_1:24;
        then s5.b = B by A21,A59,Lm12,SCM_1:19;
        then
A64:    s6.b = B by A20,A60,SCM_1:23;
        s4.n = s3.n by A8,A28,SCM_1:24;
        then s5.n = s3.n by A21,A59,Lm10,SCM_1:19;
        then
A65:    s6.n = s3.n by A20,A60,SCM_1:23;
A66:    s6.4 = AddTo(b, a) & s6.5 = SCM-goto 0 by A19,A18,AMI_1:54;
A67:    s6.2 = Divide(n, aux) & s6.3 = aux =0_goto 6 by A12,A8,AMI_1:54;
        s4.a = A by A8,A28,A29,SCM_1:24;
        then
A68:    s5.a = A + B by A21,A59,A63,SCM_1:19;
        reconsider nn9 = s3.n as Element of NAT by A33,PRE_FF:7;
A69:    s6.8 = halt SCM by A7,AMI_1:54;
A70:    s6.0 = n =0_goto 8 & s6.1 = aux := c2 by A6,A17,AMI_1:54;
        IC s6 = 0 & s6.a = s5.a by A20,A60,SCM_1:23;
        then
A71:    s6 is State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*nn9*>^<*
        A+B*>^<*B*> by A68,A61,A65,A64,A70,A67,A66,A62,A69,SCM_1:30;
A72:    nn9 < nn & Fusc N = (A+B)*Fusc nn9 + B*Fusc (nn9+1) by A4,A25,A33,A34
,A24,A58,PRE_FF:18,22;
        then
A73:    ProgramPart s6 halts_on s6 by A2,A3,A71;
        then
Y:       ProgramPart s halts_on s6 by AMI_1:123;
        hence ProgramPart s halts_on s by AMI_1:93;
X:      Result(ProgramPart(s6),s6) = Result(ProgramPart(s),s) by Y,SCM_1:29;
        (Result(ProgramPart(s6),s6)).dl.3 = Fusc N by A2,A3,A71,A72;
        hence (Result(ProgramPart(s),s)).dl.3 = Fusc N by X;
        thus nn = 0 implies LifeSpan(ProgramPart(s),s) = 1 by A25;
A74:    nn9 > 0 implies LifeSpan(ProgramPart(s6),s6) = 6 * ([\ log(2, nn9) /] +
1)+1 by A2,A3,A71,A72;
        thus nn > 0 implies LifeSpan(ProgramPart(s),s) = 6 * ([\ log(2, nn) /]
+ 1)+1
        proof
          assume
          nn > 0;
          per cases;
          suppose
            nn9 = 0;
            hence thesis by A12,A25,A27,A32,A33,A24,A58,Lm14,SCM_1:22;
          end;
          suppose
A75:        nn9 <> 0;
            then
A76:        nn9 > 0 by NAT_1:3;
            then reconsider F = [\ log(2, nn9) /] as Element of NAT by Lm2;
            6 * (F+1)+1 > 0 by A76,Lm2;
            hence LifeSpan(ProgramPart(s),s)=6 + (6 * (F+1)+1) by A73,A74,A75,
NAT_1:3,SCM_1:28
              .= 6 * ([\ log(2, nn) /] + 1) + 1 by A33,A34,A24,A58,A76,Lm5;
          end;
        end;
      end;
    end;
    nn >= 0 by NAT_1:2;
    hence thesis by A14,A23,XXREAL_0:1;
  end;
  for n being Nat holds P[n] from NAT_1:sch 4 ( A1 );
  hence thesis;
end;

theorem
  for N being Element of NAT st N > 0 for s being State-consisting of 0,
0, 0, Fusc_Program, <*2*>^<*N*>^<*1*>^<*0*> holds ProgramPart s halts_on s &
 (Result(ProgramPart(s),s)).dl.
3 = Fusc N & (N = 0 implies LifeSpan(ProgramPart(s),s) = 1) & (N > 0 implies
LifeSpan(ProgramPart(s),s) = 6 * (
  [\ log(2, N) /] + 1)+1)
proof
  let N be Element of NAT such that
A1: N > 0;
  let S be State-consisting of 0, 0, 0, Fusc_Program, <*2*>^<*N*>^<*1*>^<*0*>;
  Fusc N = 1 * Fusc N + 0 * Fusc (N+1);
  hence thesis by A1,Th5;
end;

