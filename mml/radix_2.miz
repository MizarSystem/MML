:: High-speed algorithms for RSA cryptograms
::  by Yasushi Fuwa and Yoshinori Fujisawa
::
:: Received February 1, 2000
:: Copyright (c) 2000 Association of Mizar Users

environ

 vocabularies ARYTM_1, NAT_1, INT_1, ARYTM_3, FINSEQ_1, RADIX_1, POWER,
      MIDSP_3, RELAT_1, FUNCT_1, RLVECT_1, RADIX_2, FINSEQ_4, GROUP_1;
 notations TARSKI, SUBSET_1, NUMBERS, XCMPLX_0, REAL_1, INT_1, NAT_1, FUNCT_1,
      POWER, FINSEQ_1, FINSEQ_4, BINARITH, EULER_2, RVSUM_1, TREES_4, WSIERP_1,
      RADIX_1, XXREAL_0;
 constructors XXREAL_0, NAT_1, RAT_1, SEQ_1, FINSEQ_4, POWER, BINARITH,
      EULER_2, RADIX_1;
 registrations INT_1, RELSET_1, XREAL_0, WSIERP_1, MEMBERED, ORDINAL1,
      XXREAL_0, NAT_1, NEWTON;
 requirements REAL, NUMERALS, SUBSET, BOOLE, ARITHM;
 definitions TARSKI;
 theorems REAL_1, NAT_1, NAT_2, INT_1, FINSEQ_1, BINARITH, PREPOWER, POWER,
      JORDAN3, RVSUM_1, FINSEQ_2, FINSEQ_4, TARSKI, FUNCT_1, PEPIN, SPRECT_3,
      RADIX_1, EULER_2, INT_3, NEWTON, INT_2, SPPOL_1, XCMPLX_1, XREAL_1,
      XXREAL_0, XREAL_0;
 schemes NAT_1, FINSEQ_2, RECDEF_1;

begin :: Some Useful Theorems

reserve k for Element of NAT;

theorem
  for a be Element of NAT holds a mod 1 = 0
proof
  let a be Element of NAT;
  a = 1 * a + 0;
  hence thesis by NAT_1:def 2;
end;

theorem Th2:
  for a,b be Integer, n be Element of NAT st n>0 holds
    ((a mod n)+(b mod n)) mod n = (a + (b mod n)) mod n
proof
  let a,b be Integer;
  let n be Element of NAT;
  assume  n>0;
  then a mod n + (a div n)*n
    = (a-(a div n)*n) + (a div n)*n by INT_1:def 8
   .= a+0;
  then (a + (b mod n))-((a mod n)+(b mod n))
    = ((a div n)*n+((a mod n)+(b mod n)))-((a mod n)+(b mod n))
   .= (a div n)*n+0;
   then n divides (a + (b mod n))-((a mod n)+(b mod n)) by INT_1:def 9;
   then (a + (b mod n)),((a mod n)+(b mod n)) are_congruent_mod n by INT_2:19;
   hence ((a mod n)+(b mod n)) mod n = (a + (b mod n)) mod n by INT_3:12;
end;

theorem Th3:
  for a,b be Integer, n be Element of NAT st n>0 holds
    (a*b) mod n = (a*(b mod n)) mod n
proof
  let a,b be Integer;
  let n be Element of NAT;
  assume  n > 0;
  then b mod n + (b div n)*n
    = (b-(b div n)*n) + (b div n)*n by INT_1:def 8
   .= b+0;
  then (a*b)-(a*(b mod n))
    = a*(b mod n)+a*((b div n)*n)-a*(b mod n)
   .= (a*(b div n))*n;
   then n divides ((a*b)-(a*(b mod n))) by INT_1:def 9;
   then (a*b),(a*(b mod n)) are_congruent_mod n by INT_2:19;
   hence (a*b) mod n = (a*(b mod n)) mod n by INT_3:12;
end;

theorem Th4:
  for a,b,i be Element of NAT st 1 <= i & 0 < b holds
    (a mod (b |^ i)) div (b |^ (i -'1)) = (a div (b |^ (i -'1))) mod b
proof
  let a,b,i be Element of NAT;
  assume A1: 1 <= i & 0 < b;
  set j = i -' 1;
  set B0 = b |^ j;
  set B1 = b |^ (j+1);
  A2: j + 1 = i - 1 + 1 by A1,BINARITH:50
           .= i;
  A3: B1 > 0 by A1,PREPOWER:13;
  A4: B0 > 0 by A1,PREPOWER:13;
  A5: a mod B1 = a - (B1)*(a div B1) by A3,NEWTON:77;
  reconsider R = a - (B1)*(a div B1) as Integer;
  reconsider Z = (b*(-(a div B1))) as Integer;
  reconsider a' = a as Integer;
  (a mod (b |^ i)) div (b |^ (i-'1))
    = (a + (B1)*(-(a div B1))) div B0 by A2,A5,NEWTON:101
   .= (a + (B0)*b*(-(a div B1))) div B0 by NEWTON:11
   .= [\ (a + (B0)*Z)/B0 /] by INT_1:def 7
   .= [\ a/B0 + Z /] by A4,XCMPLX_1:114
   .= [\ a/B0 /] + Z by INT_1:51
   .= (a' div B0) + Z by INT_1:def 7
   .= (a div B0) + -b*(a div B1) by NEWTON:101
   .= (a div B0) - b*(a div B1)
   .= (a div B0) - b*(a div B0*b) by NEWTON:11
   .= (a div B0) - b*((a div B0) div b) by NAT_2:29;
  hence thesis by A1,NEWTON:77;
end;

theorem Th5:
  for i,n be Element of NAT st i in Seg n holds i+1 in Seg (n+1)
proof
  let i,n be Element of NAT;
  assume i in Seg n;
  then 1 <= i & i <= n by FINSEQ_1:3;
  then 1+1 <= i+1 & i+1 <= n+1 by XREAL_1:8;
  then 1 <= i+1 & i+1 <= n+1 by XXREAL_0:2;
  hence i+1 in Seg (n+1) by FINSEQ_1:3;
end;

begin :: Properties of Addition operation using radix-2^k SD numbers

theorem Th6:
  for k be Element of NAT holds Radix(k) > 0
proof
  let k be Element of NAT;
  Radix(k) = 2 to_power k by RADIX_1:def 1;
  hence thesis by POWER:39;
end;

theorem Th7:
  for x be Tuple of 1,k-SD holds SDDec(x) = DigA(x,1)
proof
  let x be Tuple of 1,k-SD;
  A1: 1 in Seg 1 by FINSEQ_1:4,TARSKI:def 1;
  1 - 1 = 0;
  then A2: 1 -' 1 = 0 by BINARITH:def 3;
  A3: (DigitSD(x))/.1 = SubDigit(x,1,k) by A1,RADIX_1:def 6;
  A4: len (DigitSD(x)) = 1 by FINSEQ_2:109;
  then 1 in dom DigitSD(x) by A1,FINSEQ_1:def 3;
  then A5:DigitSD(x).1 = SubDigit(x,1,k) by A3,FINSEQ_4:def 4;
  thus SDDec(x) = Sum DigitSD(x) by RADIX_1:def 7
               .= Sum <*SubDigit(x,1,k)*> by A4,A5,FINSEQ_1:57
               .= SubDigit(x,1,k) by RVSUM_1:103
               .= (Radix(k) |^ 0)*DigB(x,1) by A2,RADIX_1:def 5
               .= 1*DigB(x,1) by NEWTON:9
               .= DigA(x,1) by RADIX_1:def 4;
end;

theorem Th8:
  for x be Integer holds
    SD_Add_Data(x,k) + SD_Add_Carry(x)*Radix(k) = x
proof
  let x be Integer;
     SD_Add_Data(x,k) + SD_Add_Carry(x)*Radix(k)
  = x - SD_Add_Carry(x)*Radix(k) + SD_Add_Carry(x)*Radix(k) by RADIX_1:def 11;
  hence thesis;
end;

theorem Th9:
  for n be Element of NAT
    for x be Tuple of (n+1),k-SD, xn be Tuple of n,k-SD st
      (for i be Element of NAT st i in Seg n holds x.i = xn.i) holds
        Sum DigitSD(x) = Sum(DigitSD(xn)^<*SubDigit(x,n+1,k)*>)
proof
  let n be Element of NAT;
  let x be Tuple of (n+1),k-SD, xn be Tuple of n,k-SD;
  assume A1:for i be Element of NAT st i in Seg n holds x.i = xn.i;
  A2:len DigitSD(x) = n+1 by FINSEQ_2:109;
  A3:len DigitSD(xn) = n by FINSEQ_2:109;
  A4:len <*SubDigit(x,n+1,k)*> = 1 by FINSEQ_1:56;
     len (DigitSD(xn)^<*SubDigit(x,n+1,k)*>)
     = len DigitSD(xn) + len <*SubDigit(x,n+1,k)*> by FINSEQ_1:35
    .= n+1 by A4,FINSEQ_2:109;
  then A5:len DigitSD(x) = len (DigitSD(xn)^<*SubDigit(x,n+1,k)*>)
                                                        by FINSEQ_2:109;
  A6: for i be Element of NAT st i in Seg n holds DigA(x,i) = DigA(xn,i)
  proof
    let i be Element of NAT;
    assume A7: i in Seg n;
    then i in Seg (n+1) by FINSEQ_2:9;
    then DigA(x,i) = x.i by RADIX_1:def 3
             .= xn.i by A1,A7;
    hence thesis by A7,RADIX_1:def 3;
  end;
     for i be Element of NAT st 1 <= i & i <= len DigitSD(x) holds
           (DigitSD(x)).i = ((DigitSD(xn))^<*SubDigit(x,n+1,k)*>).i
  proof
    let i be Element of NAT;
    assume 1 <= i & i <= len DigitSD(x);
    then 1 <= i & i <= n+1 by FINSEQ_2:109;
    then A8:i in Seg (n+1) by FINSEQ_1:3;
    A9: n+1 in Seg(n+1) by FINSEQ_1:5;
       now per cases by A8,FINSEQ_2:8;
      suppose A10:i in Seg n;
        then A11:i in Seg (n+1) by FINSEQ_2:9;
        A12:i in dom DigitSD(xn) by A3,A10,FINSEQ_1:def 3;
        A13:i in dom DigitSD(x) by A2,A11,FINSEQ_1:def 3;
           ((DigitSD(xn))^<*SubDigit(x,n+1,k)*>).i
            = DigitSD(xn).i by A12,FINSEQ_1:def 7
           .= (DigitSD(xn))/.i by A12,FINSEQ_4:def 4
           .= SubDigit(xn,i,k) by A10,RADIX_1:def 6
           .= (Radix(k) |^ (i -'1))*DigB(xn,i) by RADIX_1:def 5
           .= (Radix(k) |^ (i -'1))*DigA(xn,i) by RADIX_1:def 4
           .= (Radix(k) |^ (i -'1))*DigA(x,i) by A6,A10
           .= (Radix(k) |^ (i -'1))*DigB(x,i) by RADIX_1:def 4
           .= SubDigit(x,i,k) by RADIX_1:def 5
           .= (DigitSD(x))/.i by A11,RADIX_1:def 6;
        hence thesis by A13,FINSEQ_4:def 4;
      end;
      suppose A14:i = n+1;
         then A15:i in dom DigitSD(x) by A2,A9,FINSEQ_1:def 3;
            ((DigitSD(xn))^<*SubDigit(x,n+1,k)*>).i
          = ((DigitSD(xn))^<*SubDigit(x,n+1,k)*>).((len (DigitSD(xn)))+1)
                                                         by A14,FINSEQ_2:109
         .= SubDigit(x,n+1,k) by FINSEQ_1:59
         .= (DigitSD(x))/.(n+1) by A9,RADIX_1:def 6
         .= DigitSD(x).(n+1) by A14,A15,FINSEQ_4:def 4;
         hence thesis by A14;
    end;
    end;
    hence thesis;
  end;
  hence thesis by A5,FINSEQ_1:18;
end;

theorem Th10:
  for n be Element of NAT
    for x be Tuple of (n+1),k-SD, xn be Tuple of n,k-SD st
      (for i be Element of NAT st i in Seg n holds x.i = xn.i) holds
        SDDec(xn) + (Radix(k) |^ n)*DigA(x,n+1) = SDDec(x)
proof
  let n be Element of NAT;
  let x be Tuple of (n+1),k-SD, xn be Tuple of n,k-SD;
  assume A1:for i be Element of NAT st i in Seg n holds x.i = xn.i;
  A2:DigitSD(xn) is FinSequence of INT;
     SDDec(x) = Sum DigitSD(x) by RADIX_1:def 7
  .= Sum(DigitSD(xn)^<*SubDigit(x,n+1,k)*>) by A1,Th9
  .= Sum DigitSD(xn) + SubDigit(x,n+1,k) by A2,RVSUM_1:104
  .= Sum DigitSD(xn) + (Radix(k) |^ (n+1-'1))*DigB(x,n+1) by RADIX_1:def 5
  .= Sum DigitSD(xn) + (Radix(k) |^ n)*DigB(x,n+1) by BINARITH:39
  .= Sum DigitSD(xn) + (Radix(k) |^ n)*DigA(x,n+1) by RADIX_1:def 4;
  hence thesis by RADIX_1:def 7;
end;

theorem
     for n be Element of NAT st n >= 1 holds
    for x,y be Tuple of n,k-SD st k >= 2 holds
      SDDec(x '+' y) + SD_Add_Carry(DigA(x,n) + DigA(y,n))
        *(Radix(k) |^ n) = SDDec(x) + SDDec(y)
proof
  defpred PP[Element of NAT] means
    for x,y be Tuple of $1,k-SD st k >= 2 holds
        SDDec(x '+' y) + SD_Add_Carry(DigA(x,$1)+DigA(y,$1))*(Radix(k) |^ $1)
             = SDDec(x) + SDDec(y);
  A1:PP[1]
  proof
    let x,y be Tuple of 1,k-SD;
    assume A2: k >= 2;
    A3: 1 in Seg 1 by FINSEQ_1:4,TARSKI:def 1;
       1 - 1 = 0;
    then A4: 1 -' 1 = 0 by BINARITH:def 3;
    A5: DigA(x '+' y,1) = Add(x,y,1,k) by A3,RADIX_1:def 14
   .= SD_Add_Data(DigA(x,1)+DigA(y,1),k) + SD_Add_Carry(DigA(x,0)+DigA(y,0))
                                                    by A2,A3,A4,RADIX_1:def 13
   .= SD_Add_Data(DigA(x,1)+DigA(y,1),k) + SD_Add_Carry(0+DigA(y,0))
                                                    by RADIX_1:def 3
   .= SD_Add_Data(DigA(x,1)+DigA(y,1),k) + 0 by RADIX_1:21,def 3;
   A6: SDDec(y) = DigA(y,1) by Th7;
   A7: SDDec(x '+' y) = SD_Add_Data(DigA(x,1)+DigA(y,1),k) by A5,Th7;
   A8: SD_Add_Data(DigA(x,1) + DigA(y,1),k)
     = DigA(x,1) + DigA(y,1) -
                SD_Add_Carry(DigA(x,1)+DigA(y,1))*Radix(k) by RADIX_1:def 11;
   thus SDDec(x '+' y) + SD_Add_Carry(DigA(x,1)+DigA(y,1))*(Radix(k) |^ 1)
     = SD_Add_Data(DigA(x,1)+DigA(y,1),k)
                + SD_Add_Carry(DigA(x,1)+DigA(y,1))*Radix(k) by A7,NEWTON:10
    .= SDDec(x) + SDDec(y) by A6,A8,Th7;
  end;
  A9:for n be Element of NAT st n >= 1 & PP[n] holds PP[n+1]
  proof
    let n be Element of NAT;
    assume that A10:n >= 1 and A11: PP[n];
    let x,y be Tuple of (n+1),k-SD;
    assume A12: k >= 2;
    deffunc F(Element of NAT) = DigB(x,$1);
    consider xn being FinSequence of INT such that
    A13: len xn = n and
    A14: for i be Element of NAT st i in Seg n holds xn.i = F(i)
     from FINSEQ_2:sch 1;
       rng xn c= k-SD
    proof
      let z be set;
      assume z in rng xn;
      then consider xx be set such that
        A15: xx in dom xn and
        A16: z = xn.xx by FUNCT_1:def 5;
      reconsider xx as Element of NAT by A15;
      A17:dom xn = Seg n by A13,FINSEQ_1:def 3;
      then A18: z = DigB(x,xx) by A14,A15,A16
                   .= DigA(x,xx) by RADIX_1:def 4;
         xx in Seg (n+1) by A15,A17,FINSEQ_2:9;
      then DigA(x,xx) is Element of k-SD by RADIX_1:19;
      hence thesis by A18;
    end;
    then reconsider xn as FinSequence of k-SD by FINSEQ_1:def 4;
    A19: for i be Element of NAT st i in Seg n holds xn.i = x.i
    proof
      let i be Element of NAT;
      assume A20: i in Seg n;
      then A21: i in Seg (n+1) by FINSEQ_2:9;
         xn.i = DigB(x,i) by A14,A20
          .= DigA(x,i) by RADIX_1:def 4;
      hence thesis by A21,RADIX_1:def 3;
    end;
    deffunc F(Element of NAT)=DigB(y,$1);
    consider yn being FinSequence of INT such that
    A22: len yn = n and
    A23: for i be Element of NAT st i in Seg n holds yn.i = F(i)
     from FINSEQ_2:sch 1;
       rng yn c= k-SD
    proof
      let z be set;
      assume z in rng yn;
      then consider yy be set such that
        A24: yy in dom yn and
        A25: z = yn.yy by FUNCT_1:def 5;
      reconsider yy as Element of NAT by A24;
      A26:dom yn = Seg n by A22,FINSEQ_1:def 3;
      then A27: z = DigB(y,yy) by A23,A24,A25
                   .= DigA(y,yy) by RADIX_1:def 4;
         yy in Seg (n+1) by A24,A26,FINSEQ_2:9;
      then DigA(y,yy) is Element of k-SD by RADIX_1:19;
      hence thesis by A27;
    end;
    then reconsider yn as FinSequence of k-SD by FINSEQ_1:def 4;
    A28: for i be Element of NAT st i in Seg n holds yn.i = y.i
    proof
      let i be Element of NAT;
      assume A29: i in Seg n;
      then A30: i in Seg (n+1) by FINSEQ_2:9;
         yn.i = DigB(y,i) by A23,A29
          .= DigA(y,i) by RADIX_1:def 4;
      hence thesis by A30,RADIX_1:def 3;
    end;
    reconsider xn as Tuple of n,(k-SD) by A13,FINSEQ_2:110;
    reconsider yn as Tuple of n,(k-SD) by A22,FINSEQ_2:110;
    A31: for i be Element of NAT st i in Seg n holds DigA(x,i) = DigA(xn,i)
    proof
      let i be Element of NAT;
      assume A32: i in Seg n;
      then i in Seg (n+1) by FINSEQ_2:9;
      then DigA(x,i) = x.i by RADIX_1:def 3
               .= xn.i by A19,A32;
      hence thesis by A32,RADIX_1:def 3;
    end;
    A33: for i be Element of NAT st i in Seg n holds DigA(y,i) = DigA(yn,i)
    proof
      let i be Element of NAT;
      assume A34: i in Seg n;
      then i in Seg (n+1) by FINSEQ_2:9;
      then DigA(y,i) = y.i by RADIX_1:def 3
               .= yn.i by A28,A34;
      hence thesis by A34,RADIX_1:def 3;
    end;
    A35: Sum DigitSD(x '+' y)
       = Sum(DigitSD(xn '+' yn) ^ <*SubDigit(x '+' y,n+1,k)*>)
    proof
         for i be Element of NAT st i in Seg n
          holds (x '+' y).i = (xn '+' yn).i
      proof
        let i be Element of NAT;
        assume A36: i in Seg n;
        then A37: i in Seg (n+1) by FINSEQ_2:9;
           (x '+' y).i = (xn '+' yn).i
        proof
          A38: i >= 1 & i <= n+1 by A37,FINSEQ_1:3;
             now per cases by A38,XXREAL_0:1;
            suppose A39:i > 1;
              then i -'1 > 1 -'1 by SPRECT_3:10;
              then i -'1 > 0;
              then A40:i -'1 >= 1 by NAT_1:39;
                 i - 1 > 1 - 1 by A39,XREAL_1:11;
              then A41:i -'1 = i - 1 by BINARITH:def 3;
                 i - 1 <= n + 1 - 1 by A38,XREAL_1:11;
              then A42:i -'1 in Seg n by A40,A41,FINSEQ_1:3;
                 (x '+' y).i
              = DigA(x '+' y,i) by A37,RADIX_1:def 3
             .= Add(x,y,i,k) by A37,RADIX_1:def 14
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(x,i -'1)+DigA(y,i -'1))
                                           by A12,A37,RADIX_1:def 13
             .= SD_Add_Data(DigA(xn,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(x,i -'1)+DigA(y,i -'1)) by A31,A36
             .= SD_Add_Data(DigA(xn,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(xn,i -'1)+DigA(y,i -'1)) by A31,A42
             .= SD_Add_Data(DigA(xn,i)+DigA(yn,i),k)
                + SD_Add_Carry(DigA(xn,i -'1)+DigA(y,i -'1)) by A33,A36
             .= SD_Add_Data(DigA(xn,i)+DigA(yn,i),k)
                + SD_Add_Carry(DigA(xn,i -'1)+DigA(yn,i -'1)) by A33,A42
             .= Add(xn,yn,i,k) by A12,A36,RADIX_1:def 13
             .= DigA(xn '+' yn,i) by A36,RADIX_1:def 14;
             hence thesis by A36,RADIX_1:def 3;
            end;
            suppose A43:i = 1;
                 (x '+' y).i
              = DigA(x '+' y,i) by A37,RADIX_1:def 3
             .= Add(x,y,i,k) by A37,RADIX_1:def 14
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(x,1 -'1)+DigA(y,1 -'1)) by A12,A37,A43,
RADIX_1:def 13
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(x,0)+DigA(y,1 -'1)) by BINARITH:51
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                + SD_Add_Carry(DigA(x,0)+DigA(y,0)) by BINARITH:51
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                + SD_Add_Carry(0+DigA(y,0)) by RADIX_1:def 3
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k) + SD_Add_Carry(0+0)
                                                    by RADIX_1:def 3
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                     + SD_Add_Carry(DigA(xn,0)+0) by RADIX_1:def 3
             .= SD_Add_Data(DigA(x,i)+DigA(y,i),k)
                     + SD_Add_Carry(DigA(xn,0)+DigA(yn,0)) by RADIX_1:def 3
             .= SD_Add_Data(DigA(xn,i)+DigA(y,i),k)
                     + SD_Add_Carry(DigA(xn,0)+DigA(yn,0)) by A31,A36
             .= SD_Add_Data(DigA(xn,i)+DigA(yn,i),k)
                     + SD_Add_Carry(DigA(xn,0)+DigA(yn,0)) by A33,A36
             .= SD_Add_Data(DigA(xn,i)+DigA(yn,i),k)
                     + SD_Add_Carry(DigA(xn,1-'1)+DigA(yn,0)) by BINARITH:51
             .= SD_Add_Data(DigA(xn,i)+DigA(yn,i),k)
                     + SD_Add_Carry(DigA(xn,i-'1)+DigA(yn,i-'1)) by A43,
BINARITH:51
             .= Add(xn,yn,i,k) by A12,A36,RADIX_1:def 13
             .= DigA(xn '+' yn,i) by A36,RADIX_1:def 14;
             hence thesis by A36,RADIX_1:def 3;
          end;
          end;
          hence thesis;
        end;
        hence thesis;
      end;
      hence thesis by Th9;
    end;
    A44:DigitSD(xn '+' yn) is FinSequence of INT;
    A45:n+1 in Seg (n+1) by FINSEQ_1:5;
       n <> 0 by A10;
    then A46:n in Seg n by FINSEQ_1:5;
       SDDec(x '+' y)
    = Sum(DigitSD(xn '+' yn)^<*SubDigit(x '+' y,n+1,k)*>) by A35,RADIX_1:def 7
   .= Sum DigitSD(xn '+' yn) + SubDigit(x '+' y,n+1,k) by A44,RVSUM_1:104
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ (n+1-'1)*DigB(x '+' y,n+1))
                                                     by RADIX_1:def 5
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ n)*DigB(x '+' y,n+1) by BINARITH:39
   .= Sum
DigitSD(xn '+' yn) + (Radix(k) |^ n)*DigA(x '+' y,n+1) by RADIX_1:def 4
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ n)*Add(x,y,n+1,k)
                                                    by A45,RADIX_1:def 14
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ n)*
        (SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
        + SD_Add_Carry(DigA(x,n+1-'1)+DigA(y,n+1-'1))) by A12,A45,
RADIX_1:def 13
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ n)*
         (SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
               + SD_Add_Carry(DigA(x,n)+DigA(y,n+1-'1))) by BINARITH:39
   .= Sum DigitSD(xn '+' yn) + (Radix(k) |^ n)*
         (SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
               + SD_Add_Carry(DigA(x,n)+DigA(y,n))) by BINARITH:39
   .= Sum DigitSD(xn '+' yn)
      + (Radix(k) |^ n)*SD_Add_Carry(DigA(x,n)+DigA(y,n))
      + (Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
   .= SDDec(xn '+' yn)
      + (Radix(k) |^ n)*SD_Add_Carry(DigA(x,n)+DigA(y,n))
      + (Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k) by RADIX_1:def 7
   .= SDDec(xn '+' yn)
      + (Radix(k) |^ n)*SD_Add_Carry(DigA(xn,n)+DigA(y,n))
      + (Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k) by A31,A46
   .= SDDec(xn '+' yn)
      + (Radix(k) |^ n)*SD_Add_Carry(DigA(xn,n)+DigA(yn,n))
      + (Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k) by A33,A46
   .= SDDec(xn) + SDDec(yn)
      + (Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k) by A11,A12;
    then SDDec(x '+' y)
        + SD_Add_Carry(DigA(x,n+1)+DigA(y,n+1))*(Radix(k) |^ (n+1))
   = SDDec(xn) + SDDec(yn)
      + ((Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
      + SD_Add_Carry(DigA(x,n+1)+DigA(y,n+1))*(Radix(k) |^ (n+1)))
   .= SDDec(xn) + SDDec(yn)
      + ((Radix(k) |^ n)*SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
      + SD_Add_Carry(DigA(x,n+1)+DigA(y,n+1))*((Radix(k) |^ n)*Radix(k)))
                                                         by NEWTON:11
   .= SDDec(xn) + SDDec(yn)
      + ((Radix(k) |^ n)
         *(SD_Add_Data(DigA(x,n+1)+DigA(y,n+1),k)
           + (SD_Add_Carry(DigA(x,n+1)+DigA(y,n+1))*Radix(k))))
   .= SDDec(xn) + SDDec(yn)
      + ((Radix(k) |^ n)*(DigA(x,n+1) + DigA(y,n+1))) by Th8
   .= (SDDec(xn) + (Radix(k) |^ n)*DigA(x,n+1))
      + (SDDec(yn) + (Radix(k) |^ n)*DigA(y,n+1))
   .= SDDec(x) + (SDDec(yn) + (Radix(k) |^ n)*DigA(y,n+1)) by A19,Th10;
    hence thesis by A28,Th10;
  end;
     for n be Element of NAT st n >= 1 holds PP[n] from NAT_1:sch 9(A1,A9);
  hence thesis;
end;

begin :: Definitions on the relation between a FinSequence of k-SD and
      :: a FinSequence of NAT and some properties about them

definition let i,k,n be Element of NAT, x be Tuple of n,NAT;
  func SubDigit2(x,i,k) -> Element of NAT equals
    (Radix(k) |^ (i -'1))*(x.i);
  coherence;
end;

definition let n,k be Element of NAT, x be Tuple of n,NAT;
  func DigitSD2(x,k) -> Tuple of n,NAT means :Def2:
    for i be Element of NAT st i in Seg n holds it/.i = SubDigit2(x,i,k);
existence
  proof
    deffunc F(Element of NAT)= SubDigit2(x,$1,k);
    consider z being FinSequence of NAT such that
A1:len z = n and
A2:for j be Element of NAT st j in Seg n holds z.j = F(j)
                                                 from FINSEQ_2:sch 1;
    reconsider z as Tuple of n,NAT by A1,FINSEQ_2:110;
    take z;
    let i be Element of NAT;
    assume A3:i in Seg n;
    then i in dom z by A1,FINSEQ_1:def 3;
    hence z/.i = z.i by FINSEQ_4:def 4
                .= SubDigit2(x,i,k) by A2,A3;
  end;
uniqueness
  proof
    let k1,k2 be Tuple of n,NAT such that
      A4:for i be Element of NAT st i in Seg n holds k1/.i = SubDigit2(x,i,k)
       and
      A5:for i be Element of NAT st i in Seg n holds k2/.i = SubDigit2(x,i,k);
    A6:len k1 = n & len k2 = n by FINSEQ_2:109;
       now let j be Element of NAT;
      assume A7:j in Seg n;
      then A8:j in dom k1 & j in dom k2 by A6,FINSEQ_1:def 3;
      then k1.j = k1/.j by FINSEQ_4:def 4
               .= SubDigit2(x,j,k) by A4,A7
               .= k2/.j by A5,A7;
      hence k1.j = k2.j by A8,FINSEQ_4:def 4;
    end;
    hence k1 = k2 by A6,FINSEQ_2:10;
  end;
end;

definition let n,k be Element of NAT, x be Tuple of n,NAT;
  func SDDec2(x,k) -> Element of NAT equals
    Sum DigitSD2(x,k);
coherence;
end;

definition let i,k,x be Element of NAT;
  func DigitDC2(x,i,k) -> Element of NAT equals
    (x mod (Radix(k) |^ i)) div (Radix(k) |^ (i -'1));
coherence;
end;

definition let k,n,x be Element of NAT;
  func DecSD2(x,n,k) -> Tuple of n,NAT means :Def5:
    for i be Element of NAT st i in Seg n holds it.i = DigitDC2(x,i,k);
existence
  proof
    deffunc F(Element of NAT)=DigitDC2(x,$1,k);
    consider z being FinSequence of NAT such that
A1: len z = n and
A2: for j be Element of NAT st j in Seg n holds z.j = F(j)
                                                 from FINSEQ_2:sch 1;
    reconsider z as Tuple of n,NAT by A1,FINSEQ_2:110;
    take z;
    let i be Element of NAT;
    assume i in Seg n;
    hence z.i = DigitDC2(x,i,k) by A2;
  end;
uniqueness
  proof
    let k1,k2 be Tuple of n,NAT such that
      A3:for i be Element of NAT st i in Seg n holds k1.i = DigitDC2(x,i,k) and
      A4:for i be Element of NAT st i in Seg n holds k2.i = DigitDC2(x,i,k);
    A5:len k1 = n & len k2 = n by FINSEQ_2:109;
       now let j be Element of NAT;
      assume A6:j in Seg n;
      then k1.j = DigitDC2(x,j,k) by A3;
      hence k1.j = k2.j by A4,A6;
    end;
    hence k1 = k2 by A5,FINSEQ_2:10;
  end;
end;

theorem Th12:
  for n,k be Element of NAT, x be Tuple of n,NAT, y be Tuple of n,k-SD
    st x = y holds DigitSD2(x,k) = DigitSD(y)
proof
  let n,k be Element of NAT;
  let x be Tuple of n,NAT;
  let y be Tuple of n,k-SD;
  assume A1: x=y;
  A2: now let i be Element of NAT;
        assume i in Seg n;
        then x.i = DigA(y,i) by A1,RADIX_1:def 3
           .= DigB(y,i) by RADIX_1:def 4;
        hence x.i = DigB(y,i);
      end;
  A3:len DigitSD2(x,k) = n & len DigitSD(y) = n by FINSEQ_2:109;
       now let j be Element of NAT;
      assume A4:j in Seg n;
      then A5:j in dom DigitSD2(x,k) & j in
 dom DigitSD(y) by A3,FINSEQ_1:def 3;
      then DigitSD2(x,k).j = (DigitSD2(x,k))/.j by FINSEQ_4:def 4
               .= SubDigit2(x,j,k) by A4,Def2
               .= (Radix(k) |^ (j -'1))*(x.j)
               .= (Radix(k) |^ (j -'1))*DigB(y,j) by A2,A4
               .= SubDigit(y,j,k) by RADIX_1:def 5
               .= (DigitSD(y))/.j by A4,RADIX_1:def 6
               .= DigitSD(y).j by A5,FINSEQ_4:def 4;
      hence DigitSD2(x,k).j = DigitSD(y).j;
    end;
    hence thesis by A3,FINSEQ_2:10;
end;

theorem Th13:
  for n,k be Element of NAT, x be Tuple of n,NAT, y be Tuple of n,k-SD
    st x = y holds SDDec2(x,k) = SDDec(y)
proof
  let n,k be Element of NAT;
  let x be Tuple of n,NAT;
  let y be Tuple of n,k-SD;
  assume A1: x = y;
  SDDec2(x,k) = Sum DigitSD2(x,k)
             .= Sum DigitSD(y) by A1,Th12;
  hence thesis by RADIX_1:def 7;
end;

theorem Th14:
  for x,n,k be Element of NAT holds DecSD2(x,n,k) = DecSD(x,n,k)
proof
  let x,n,k be Element of NAT;
  A1: len DecSD2(x,n,k) = n & len DecSD(x,n,k) = n by FINSEQ_2:109;
     now let j be Element of NAT;
    assume A2: j in Seg n;
    then DecSD2(x,n,k).j = DigitDC2(x,j,k) by Def5
               .= (x mod (Radix(k) |^ j)) div (Radix(k) |^ (j -'1))
               .= DigitDC(x,j,k) by RADIX_1:def 8
               .= DigA(DecSD(x,n,k),j) by A2,RADIX_1:def 9
               .= DecSD(x,n,k).j by A2,RADIX_1:def 3;
    hence DecSD2(x,n,k).j = DecSD(x,n,k).j;
  end;
  hence DecSD2(x,n,k) = DecSD(x,n,k) by A1,FINSEQ_2:10;
end;

theorem Th15:
  for n be Element of NAT st n >= 1 holds
    for m,k be Element of NAT st m is_represented_by n,k holds
      m = SDDec2(DecSD2(m,n,k),k)
proof
  let n be Element of NAT;
  assume A1: n >= 1;
  let m,k be Element of NAT;
  assume A2: m is_represented_by n,k;
     DecSD2(m,n,k) = DecSD(m,n,k) by Th14;
  then SDDec2(DecSD2(m,n,k),k) = SDDec(DecSD(m,n,k)) by Th13;
  hence thesis by A1,A2,RADIX_1:25;
end;

begin :: Algorithm of calculation of (a*b) mod c based on
      :: radix-2^k SD numbers and its correctness

definition let q be Integer, f,j,k,n be Element of NAT, c be Tuple of n,k-SD;
  func Table1(q,c,f,j) -> Integer equals
    (q*DigA(c,j)) mod f;
correctness;
end;

definition let q be Integer, k,f,n be Element of NAT, c be Tuple of n,k-SD;
  assume A1:n >= 1;
  func Mul_mod(q,c,f,k) -> Tuple of n,INT means
  :Def7:
    it.1 = Table1(q,c,f,n) &
    for i be Element of NAT st 1 <= i & i <= n - 1 holds
      ex I1,I2 be Integer st I1 = it.i & I2 = it.(i+1) &
        I2 = (Radix(k)*I1+Table1(q,c,f,n -'i)) mod f;
existence
  proof
    reconsider T = Table1(q,c,f,n) as Element of INT by INT_1:def 2;
    defpred PP[Element of NAT,set,set] means
      ex i1,i2 be Integer st i1 = $2 & i2 = $3 &
        i2 = (Radix(k)*i1+Table1(q,c,f,n -'$1)) mod f;
    A2: for i be Element of NAT st 1 <= i & i < n holds for x be Element of INT
      ex y be Element of INT st PP[i,x,y]
    proof
      let i be Element of NAT;
      assume 1 <= i & i < n;
      let x be Element of INT;
      reconsider x as Integer;
      consider y be Integer such that
        A3:y = (Radix(k)*x+Table1(q,c,f,n -'i)) mod f;
      reconsider z = y as Element of INT by INT_1:def 2;
      take z;
      thus thesis by A3;
    end;
    consider r be FinSequence of INT such that
      A4:len r = n & (r.1 = T or n = 0) and
      A5:for i be Element of NAT st 1 <= i & i < n holds PP[i,r.i,r.(i+1)]
                                      from RECDEF_1:sch 6(A2);
    reconsider r as Tuple of n,INT by A4,FINSEQ_2:110;
    take r;
    thus r.1 = Table1(q,c,f,n) by A1,A4;
    let i be Element of NAT;
    assume 1 <= i & i <= n - 1;
    then 1 <= i & i < n by SPPOL_1:5;
    hence thesis by A5;
  end;
uniqueness
  proof
    let s1,s2 be Tuple of n,INT such that
      A6: s1.1 = Table1(q,c,f,n) &
            for i be Element of NAT st 1 <= i & i <= n - 1 holds
              ex I1,I2 be Integer st I1 = s1.i & I2 = s1.(i+1) &
                I2 = (Radix(k)*I1+Table1(q,c,f,n -'i)) mod f
    and
      A7: s2.1 = Table1(q,c,f,n) &
            for i be Element of NAT st 1 <= i & i <= n - 1 holds
              ex I1,I2 be Integer st I1 = s2.i & I2 = s2.(i+1) &
                I2 = (Radix(k)*I1+Table1(q,c,f,n -'i)) mod f;
    A8: len s1 = n by FINSEQ_2:109;
    then A9:len s1 = len s2 by FINSEQ_2:109;
    defpred P[Element of NAT] means
     1 <= $1 & $1 <= n - 1 implies s1.$1 = s2.$1;
    A10: P[0];
    A11: for k be Element of NAT st P[k] holds P[k+1]
    proof let kk be Element of NAT;
      assume A12: 1 <= kk & kk <= n - 1 implies s1.kk = s2.kk;
      assume A13: 1 <= kk + 1 & kk + 1 <= n - 1;
      A14:0 = kk or 0 < kk & 0 + 1 = 1;
        per cases by A14,NAT_1:38;
          suppose 0 = kk;
          hence s1.(kk+1) = s2.(kk+1) by A6,A7;
          end;
          suppose
            A15: 1 <= kk;
            A16:kk <= kk + 1 by NAT_1:29;
            then A17:1 <= kk & kk <= n - 1 by A13,A15,XXREAL_0:2;
            then A18:ex I1,I2 be Integer st I1 = s1.kk & I2 = s1.(kk+1) &
              I2 = (Radix(k)*I1+Table1(q,c,f,n -'kk)) mod f by A6;
            consider i1,i2 be Integer such that
              A19: i1 = s2.kk & i2 = s2.(kk+1) &
              i2 = (Radix(k)*i1+Table1(q,c,f,n -'kk)) mod f by A7,A17;
      thus s1.(kk+1) = s2.(kk+1) by A12,A13,A15,A16,A18,A19,XXREAL_0:2;
    end;
    end;
    A20:for kk be Element of NAT holds P[kk] from NAT_1:sch 1 (A10,A11);
    A21:s1.n = s2.n
    proof
       n - 1 >= 1 - 1 by A1,XREAL_1:11;
      then reconsider U1 = n - 1 as Element of NAT by INT_1:16;
         now per cases;
        suppose U1 = 0;
          then 0 + 1 = n;
        hence thesis by A6,A7;
        end;
        suppose 0 < U1;
          then A22:1 <= U1 & U1 <= U1 by NAT_1:39;
          then consider i1,i2 be Integer such that
            A23:i1 = s1.U1 & i2 = s1.(U1+1) and
            A24:i2 = (Radix(k)*i1+Table1(q,c,f,n -'U1)) mod f by A6;
          consider j1,j2 be Integer such that
            A25:j1 = s2.U1 & j2 = s2.(U1+1) and
            A26:j2 = (Radix(k)*j1+Table1(q,c,f,n -'U1)) mod f by A7,A22;
        thus thesis by A20,A22,A23,A24,A25,A26;
      end;
      end;
      hence thesis;
    end;
       for kk be Element of NAT st 1 <= kk & kk <= len s1 holds s1.kk = s2.kk
    proof
      let kk be Element of NAT;
      assume A27:1 <= kk & kk <= len s1;
         now per cases by A27,XXREAL_0:1;
        suppose A28:kk < len s1;
           n - 1 >= 1 - 1 by A1,XREAL_1:11;
        then reconsider U1 = len s1 - 1 as Element of NAT by A8,INT_1:16;
           U1 + 1 = len s1;
        then kk <= U1 by A28,NAT_1:38;
        hence s1.kk = s2.kk by A8,A20,A27;
        end;
        suppose kk = len s1;
        hence s1.kk = s2.kk by A8,A21;
      end;
      end;
      hence thesis;
    end;
  hence s1 = s2 by A9,FINSEQ_1:18;
  end;
end;

theorem
  for n be Element of NAT st n >= 1 holds
    for q be Integer, ic,f,k be Element of NAT
      st ic is_represented_by n,k & f > 0 holds
       for c be Tuple of n,k-SD st c = DecSD(ic,n,k) holds
         Mul_mod(q,c,f,k).n = (q * ic) mod f
proof
  defpred PP[Element of NAT] means
    for q be Integer, ic,f,k be Element of NAT
      st ic is_represented_by $1,k & f > 0 holds
       for c be Tuple of $1,k-SD st c = DecSD(ic,$1,k) holds
         Mul_mod(q,c,f,k).$1 = (q * ic) mod f;
  A1:PP[1]
  proof
    let q be Integer;
    let ic,f,k be Element of NAT;
    assume A2: ic is_represented_by 1,k & f > 0;
    let c be Tuple of 1,k-SD;
    assume A3: c = DecSD(ic,1,k);
       Mul_mod(q,c,f,k).1 = Table1(q,c,f,1) by Def7
                .= (q*DigA(c,1)) mod f
                .= (q*SDDec(DecSD(ic,1,k))) mod f by A3,Th7;
    hence thesis by A2,RADIX_1:25;
  end;
  A4:for n be Element of NAT st n >= 1 & PP[n] holds PP[n+1]
  proof
    let n be Element of NAT;
    assume A5: n >= 1 & PP[n];
    A6: n+1 >= 1 by NAT_1:37;
    let q be Integer;
    let ic,f,k be Element of NAT;
    assume A7: ic is_represented_by (n+1),k & f > 0;
    let c be Tuple of (n+1),k-SD;
    assume A8: c = DecSD(ic,(n+1),k);
    set c2 = DecSD2(ic,(n+1),k);
    A9: c2 = c by A8,Th14;
    deffunc F(Element of NAT) =DigB(c,($1+1));
    consider cn being FinSequence of INT such that
    A10: len cn = n and
    A11: for i be Element of NAT st i in Seg n holds cn.i = F(i)
     from FINSEQ_2:sch 1;
       rng cn c= k-SD
    proof
      let z be set;
      assume z in rng cn;
      then consider xx be set such that
        A12: xx in dom cn and
        A13: z = cn.xx by FUNCT_1:def 5;
      reconsider xx as Element of NAT by A12;
      A14:dom cn = Seg n by A10,FINSEQ_1:def 3;
      then A15: z = DigB(c,(xx+1)) by A11,A12,A13
                   .= DigA(c,(xx+1)) by RADIX_1:def 4;
         xx+1 in Seg (n+1) by A12,A14,Th5;
      then DigA(c,(xx+1)) is Element of k-SD by RADIX_1:19;
      hence thesis by A15;
    end;
    then reconsider cn as FinSequence of k-SD by FINSEQ_1:def 4;
    reconsider cn as Tuple of n,(k-SD) by A10,FINSEQ_2:110;
    deffunc F(Element of NAT) = c2.($1+1);
    consider cn2 being FinSequence of NAT such that
    A16: len cn2 = n and
    A17: for i be Element of NAT st i in Seg n holds cn2.i = F(i)
     from FINSEQ_2:sch 1;
    reconsider cn2 as Tuple of n,NAT by A16,FINSEQ_2:110;
    A18: for i be Element of NAT st i in Seg n holds DigA(cn,i) = DigA(c,i+1)
    proof
      let i be Element of NAT;
      assume A19: i in Seg n;
         DigA(c,i+1) = DigB(c,i+1) by RADIX_1:def 4
                 .= cn.i by A11,A19;
      hence thesis by A19,RADIX_1:def 3;
    end;
    A20:cn = cn2
    proof
         for i be Element of NAT st 1 <= i & i <= len cn holds cn.i = cn2.i
      proof
        let i be Element of NAT;
        assume 1 <= i & i <= len cn;
        then A21: i in Seg n by A10,FINSEQ_1:3;
        then A22: i+1 in Seg (n+1) by Th5;
           cn.i = DigB(c,(i+1)) by A11,A21
            .= DigA(c,(i+1)) by RADIX_1:def 4
            .= c.(i+1) by A22,RADIX_1:def 3
            .= c2.(i+1) by A8,Th14;
        hence thesis by A17,A21;
      end;
      hence thesis by A10,A16,FINSEQ_1:18;
    end;
       1 in Seg 1 by FINSEQ_1:4,TARSKI:def 1;
    then A23:1 in Seg (1+n) by FINSEQ_2:9;
    A24: for i be Element of NAT st i in Seg n holds
      Mul_mod(q,cn,f,k).i = Mul_mod(q,c,f,k).i
    proof
      defpred P[Element of NAT] means $1 in Seg n implies
        Mul_mod(q,cn,f,k).$1 = Mul_mod(q,c,f,k).$1;
      A25: P[0] by FINSEQ_1:3;
      A26: for i be Element of NAT st P[i] holds P[i+1]
      proof let i be Element of NAT;
        assume A27: i in Seg n implies
          Mul_mod(q,cn,f,k).i = Mul_mod(q,c,f,k).i;
        assume A28: (i+1) in Seg n;
        A29: n in Seg n by A5,FINSEQ_1:3;
          A30: 1 <= (i+1) & (i+1) <= n by A28,FINSEQ_1:3;
        then A31:(i+1)-1 <= n - 1 by XREAL_1:11;
           (i=0 or i>0);
        then A32:(i=0 or i+1>1+0) by XREAL_1:8;
           now per cases by A32,NAT_1:38;
          case A33: i=0;
            then Mul_mod(q,cn,f,k).(i+1)
              = Table1(q,cn,f,n) by A5,Def7
             .= (q*DigA(cn,n)) mod f
             .= (q*DigA(c,n+1)) mod f by A18,A29
             .= Table1(q,c,f,n+1)
             .= Mul_mod(q,c,f,k).1 by A6,Def7;
            hence Mul_mod(q,cn,f,k).(i+1) = Mul_mod(q,c,f,k).(i+1) by A33;
          end;
          case A34: i>=1;
            reconsider nn = n - 1 as Element of NAT by A5,INT_1:18;
            A35:1 <= i & i <= nn + 1 by A31,A34,NAT_1:37;
            then A36: 1 <= i & i <= (n+1)-1;
            A37: ex I1,I2 be Integer st
             I1=Mul_mod(q,cn,f,k).i & I2=Mul_mod(q,cn,f,k).(i+1) &
             I2 = (Radix(k)*I1+Table1(q,cn,f,n -' i)) mod f by A5,A31,A34,Def7;
            A38: ex I1,I2 be Integer st
             I1=Mul_mod(q,c,f,k).i & I2=Mul_mod(q,c,f,k).(i+1) &
             I2 = (Radix(k)*I1+Table1(q,c,f,(n+1) -' i)) mod f
                                                          by A6,A36,Def7;
             1 + i - i <= n - i by A30,XREAL_1:11;
            then A39: 1 <= n -' i by A35,BINARITH:50;
               n -' i <= n by BINARITH:52;
            then A40: (n -' i) in Seg n by A39,FINSEQ_1:3;
               Mul_mod(q,cn,f,k).(i+1)
             = (Radix(k)*Mul_mod(q,c,f,k).i
                               + (q*DigA(cn,(n -' i)) mod f)) mod f by A27,A35
,A37,FINSEQ_1:3
            .= (Radix(k)*Mul_mod(q,c,f,k).i
                               + (q*DigA(c,(n -' i)+1) mod f)) mod f
                                                        by A18,A40
            .= (Radix(k)*Mul_mod(q,c,f,k).i
                    + (q*DigA(c,((n+1) -' i)) mod f)) mod f by A35,BINARITH:56
            .= Mul_mod(q,c,f,k).(i+1) by A38;
            hence Mul_mod(q,cn,f,k).(i+1)=Mul_mod(q,c,f,k).(i+1);
        end;
        end;
        hence Mul_mod(q,cn,f,k).(i+1) = Mul_mod(q,c,f,k).(i+1);
      end;
         for i be Element of NAT holds P[i] from NAT_1:sch 1(A25,A26);
      hence thesis;
    end;
       n <> 0 by A5;
    then A41: n in Seg n by FINSEQ_1:5;
    set icn = SDDec(cn);
    set icn2 = SDDec2(cn2,k);
    A42: icn = icn2 by A20,Th13;
    A43: ic = Radix(k)*icn2 + c2.1
    proof
      reconsider r2 = Radix(k) as Element of REAL by XREAL_0:def 1;
      deffunc F(Element of NAT)=DigitSD2(cn2,k).$1;
      consider rD being FinSequence of REAL such that
      A44: len rD = n and
      A45: for i be Element of NAT st i in Seg n holds rD.i = F(i)
                                                  from FINSEQ_2:sch 1;
      reconsider rD as Tuple of n,REAL by A44,FINSEQ_2:110;
      A46: dom DigitSD2(cn2,k) = Seg (len DigitSD2(cn2,k)) by FINSEQ_1:def 3
                                .= Seg n by FINSEQ_2:109;
      A47: dom rD = Seg n by A44,FINSEQ_1:def 3;
      A48:1 - 1 = 0;
      A49: DigitSD2(c2,k) = <*SubDigit2(c2,1,k)*>^(Radix(k)*DigitSD2(cn2,k))
      proof
        A50:len DigitSD2(c2,k) = n+1 by FINSEQ_2:109;
        A51:len (Radix(k) * DigitSD2(cn2,k))
           = len (r2 * rD) by A45,A46,A47,FINSEQ_1:17
          .= n by FINSEQ_2:109;
        A52:len <*SubDigit2(c2,1,k)*> = 1 by FINSEQ_1:56;
        A53:len (<*SubDigit2(c2,1,k)*> ^ (Radix(k) * DigitSD2(cn2,k)))
           = len <*SubDigit2(c2,1,k)*> + len (Radix(k) * DigitSD2(cn2,k))
                                                           by FINSEQ_1:35
          .= n+1 by A51,FINSEQ_2:109;
        then A54:len DigitSD2(c2,k)
           = len (<*SubDigit2(c2,1,k)*> ^ (Radix(k) * DigitSD2(cn2,k)))
                                                            by FINSEQ_2:109;
           for i be Element of NAT st 1 <= i & i <= len DigitSD2(c2,k) holds
         DigitSD2(c2,k).i=(<*SubDigit2(c2,1,k)*>^(Radix(k)*DigitSD2(cn2,k))).i
        proof
          let i be Element of NAT;
          assume A55:1 <= i & i <= len DigitSD2(c2,k);
          then A56:i <= n+1 by FINSEQ_2:109;
          then A57:i in Seg (n+1) by A55,FINSEQ_1:3;
          then A58: i in dom DigitSD2(c2,k) by A50,FINSEQ_1:def 3;
          per cases;
          suppose A59:i = 1;
            then (<*SubDigit2(c2,1,k)*> ^ (Radix(k)*DigitSD2(cn2,k))).i
             = SubDigit2(c2,1,k) by FINSEQ_1:58
            .= (DigitSD2(c2,k))/.1 by A23,Def2
            .= DigitSD2(c2,k).1 by A58,A59,FINSEQ_4:def 4;
          hence thesis by A59;
          end;
          suppose A60:i <> 1;
               1 - 1 <= i - 1 by A55,XREAL_1:11;
            then reconsider i1 = i - 1 as Element of NAT by INT_1:16;
               1 < i by A55,A60,REAL_1:def 5;
            then 1 + 1 <= i by INT_1:20;
            then A61: 1 + 1 - 1 <= i - 1 by XREAL_1:11;
               i - 1 <= n + 1 - 1 by A56,XREAL_1:11;
            then A62: i1 in Seg n by A61,FINSEQ_1:3;
            then reconsider rs = rD.(i-1) as Real by A47,FINSEQ_2:13;
            reconsider rs2 = DigitSD2(cn2,k).(i-1) as Element of NAT
                                             by A46,A62,FINSEQ_2:13;
               1 < i by A55,A60,REAL_1:def 5;
            then (<*SubDigit2(c2,1,k)*> ^ (Radix(k)*DigitSD2(cn2,k))).i
                  =(Radix(k)*DigitSD2(cn2,k)).(i - 1) by A52,A53,A56,
FINSEQ_1:37
                 .=(r2*rD).(i-1) by A45,A46,A47,FINSEQ_1:17
                 .=r2*rs by A62,RVSUM_1:67
                 .=Radix(k)*rs2 by A45,A46,A47,FINSEQ_1:17
                 .=Radix(k)*((DigitSD2(cn2,k))/.i1)
                          by A46,A62,FINSEQ_4:def 4
                 .=Radix(k)*SubDigit2(cn2,i1,k) by A62,Def2
                 .=Radix(k)*((Radix(k) |^ (i1-'1))*(cn2.i1))
                 .=Radix(k)*(Radix(k) |^ (i1-'1))*(cn2.i1)
                 .=(Radix(k) |^ (i1-'1+1))*(cn2.i1) by NEWTON:11
                 .=(Radix(k) |^ i1)*(cn2.i1) by A61,BINARITH:53
                 .=(Radix(k) |^ i1)*(c2.(i1+1)) by A17,A62
                 .=(Radix(k) |^ (i-'1))*(c2.i) by A55,BINARITH:50
                 .=SubDigit2(c2,i,k)
                 .=(DigitSD2(c2,k))/.i by A57,Def2;
          hence thesis by A58,FINSEQ_4:def 4;
        end;
        end;
        hence thesis by A54,FINSEQ_1:18;
      end;
         ic = SDDec2(DecSD2(ic,(n+1),k),k) by A6,A7,Th15
        .= Sum DigitSD2(c2,k)
        .= SubDigit2(c2,1,k)+ Sum(Radix(k)*DigitSD2(cn2,k)) by A49,RVSUM_1:106
        .= SubDigit2(c2,1,k) + Sum(r2 * rD) by A45,A46,A47,FINSEQ_1:17
        .= SubDigit2(c2,1,k) + r2 * Sum(rD) by RVSUM_1:117
        .= SubDigit2(c2,1,k) + Radix(k) * Sum(DigitSD2(cn2,k))
                                           by A45,A46,A47,FINSEQ_1:17
        .= SubDigit2(c2,1,k) + Radix(k) * icn2
        .= (Radix(k) |^ (1 -' 1))*(c2.1) + Radix(k) * icn2
        .= (Radix(k) |^ 0)*(c2.1) + Radix(k) * icn2 by A48,BINARITH:def 3
        .= 1*(c2.1) + Radix(k) * icn2 by NEWTON:9;
      hence thesis;
    end;
    reconsider icn as Element of NAT by A42;
    A63: ic >= Radix(k)*icn2 by A43,INT_1:19;
    A64: Radix(k) > 0 by Th6;
       ic < (Radix(k) |^ (n+1)) by A7,RADIX_1:def 12;
    then icn2 * Radix(k) < (Radix(k) |^ (n+1)) by A63,XXREAL_0:2;
    then icn2 * Radix(k) < (Radix(k) |^ n)* Radix(k) by NEWTON:11;
    then icn < (Radix(k) |^ n) by A42,XREAL_1:66;
    then A65: icn is_represented_by n,k by RADIX_1:def 12;
       cn = DecSD2(icn2,n,k)
    proof
      A66:len cn = len DecSD2(icn2,n,k) by A10,FINSEQ_2:109;
         for i be Element of NAT st 1 <= i & i <= len cn
          holds cn.i=DecSD2(icn2,n,k).i
      proof
        let i be Element of NAT;
        assume A67: 1 <= i & i <= len cn;
        then A68: i in Seg n by A10,FINSEQ_1:3;
        A69: i <= i+1 by XREAL_1:31;
        then 1 <= (i+1) & (i+1) <= (n+1) by A10,A67,XXREAL_0:2,XREAL_1:8;
        then A70: (i+1) in Seg (n+1) by FINSEQ_1:3;
           c2.1 = DigitDC2(ic,1,k) by A23,Def5
           .= (ic mod (Radix(k) |^ 1)) div (Radix(k) |^ (1 -' 1))
           .= (ic mod (Radix(k) |^ 1)) div (Radix(k) |^ 0) by BINARITH:51
           .= (ic mod (Radix(k) |^ 1)) div 1 by NEWTON:9
           .= ic mod (Radix(k) |^ 1) by NAT_2:6
           .= ic mod Radix(k) by NEWTON:10;
        then A71: c2.1 < Radix(k) by A64,NAT_1:46;
        A72:1 <= i+1 & 0 < Radix(k) by A67,A69,Th6,XXREAL_0:2;
        A73:Radix(k) <> 0 & i <> 0 by A67,Th6;
        reconsider a = c2.1 as Integer;
        reconsider b = icn2 as Integer;
        reconsider G = a + b*Radix(k) as Integer;
        A74:(c2.1 + icn2*Radix(k)) div Radix(k)
             = G div Radix(k) by NEWTON:101
            .= [\(c2.1 + icn2*Radix(k))/Radix(k)/] by INT_1:def 7
            .= [\c2.1/Radix(k) + icn2/] by A72,XCMPLX_1:114
            .= [\c2.1/Radix(k)/] + icn2 by INT_1:51
            .= a div Radix(k) + icn2 by INT_1:def 7
            .= (c2.1) div Radix(k) + icn2 by NEWTON:101
            .= 0 + icn2 by A71,NAT_1:80;
           cn.i
         = c2.(i+1) by A17,A20,A68
        .= DigitDC2(ic,(i+1),k) by A70,Def5
        .= (ic mod (Radix(k) |^ (i+1))) div (Radix(k) |^ ((i+1) -'1))
        .= ((icn2*Radix(k) + c2.1) div (Radix(k) |^ ((i+1)-'1)))
                                                mod Radix(k) by A43,A72,Th4
        .= ((icn2*Radix(k) + c2.1) div (Radix(k) |^ i))
                                                mod Radix(k) by BINARITH:39
        .= ((icn2*Radix(k) + c2.1) div (Radix(k)*(Radix(k) |^ (i -'1))))
                                                mod Radix(k) by A73,PEPIN:27
        .= (icn2 div (Radix(k) |^ (i -'1))) mod Radix(k) by A74,NAT_2:29
        .= (icn2 mod (Radix(k) |^ i)) div (Radix(k) |^ (i -'1)) by A67,A72,Th4
        .= DigitDC2(icn2,i,k);
        hence thesis by A68,Def5;
      end;
      hence thesis by A66,FINSEQ_1:18;
    end;
    then A75: cn = DecSD(icn,n,k) by A42,Th14;
    A76: (q * ic) mod f
            = (q * Radix(k)*icn2 + q * c2.1) mod f by A43
           .= (((Radix(k) *(q * icn2)) mod f) + ((q * c2.1) mod f)) mod f by
INT_3:14
           .= (((Radix(k) *((q * icn2) mod f)) mod f)
                       + ((q * c2.1) mod f)) mod f by A7,Th3
           .= ((Radix(k) *((q * icn2) mod f))
                       + ((q * c2.1) mod f)) mod f by A7,Th2;
    A77: n <= (n+1) - 1;
       n+1 >= 1 by NAT_1:29;
    then ex I1,I2 be Integer st
     I1=Mul_mod(q,c,f,k).n & I2=Mul_mod(q,c,f,k).(n+1) &
     I2 = (Radix(k)*I1+Table1(q,c,f,(n+1) -'n)) mod f by A5,A77,Def7;
    then Mul_mod(q,c,f,k).(n+1)
     = (Radix(k)*Mul_mod(q,cn,f,k).n + Table1(q,c,f,(n+1) -'n)) mod f by A24
,A41
    .= (Radix(k)*((q * icn) mod f) + Table1(q,c,f,(n+1) -'n)) mod f
                                                         by A5,A7,A65,A75
    .= (Radix(k)*((q * icn2) mod f) + Table1(q,c,f,(n+1) -'n)) mod f
                                                         by A20,Th13
    .= (Radix(k)*((q * icn2) mod f) + Table1(q,c,f,1)) mod f by BINARITH:39
    .= ((Radix(k)*((q * icn2) mod f)) + ((q*DigA(c,1)) mod f)) mod f
    .= ((Radix(k)*((q * icn2) mod f)) + ((q*c2.1) mod f)) mod f
                                             by A9,A23,RADIX_1:def 3;
    hence thesis by A76;
  end;
     for n be Element of NAT st n >= 1 holds PP[n] from NAT_1:sch 9(A1,A4);
  hence thesis;
end;

begin :: Algorithm of calculation of (a^b) mod c based on
      :: radix-2^k SD numbers and its correctness

definition let n,f,j,m be Element of NAT, e be Tuple of n,NAT;
  func Table2(m,e,f,j) -> Element of NAT equals

    (m |^ (e/.j)) mod f;
correctness;
end;

definition let k,f,m,n be Element of NAT, e be Tuple of n,NAT;
  assume A1:n >= 1;
  func Pow_mod(m,e,f,k) -> Tuple of n,NAT means
  :Def9:
    it.1 = Table2(m,e,f,n) &
    for i be Element of NAT st 1 <= i & i <= n - 1 holds
      ex i1,i2 be Element of NAT st i1 = it.i & i2 = it.(i+1) &
        i2 = (((i1 |^ Radix(k)) mod f) * Table2(m,e,f,n-'i)) mod f;
existence
  proof
    reconsider T = Table2(m,e,f,n) as Element of NAT;
    defpred PP[Element of NAT,set,set] means
      ex i1,i2 be Element of NAT st i1 = $2 & i2 = $3 &
        i2 = (((i1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'$1)) mod f;
    A2: for i be Element of NAT st 1 <= i & i < n holds for x be Element of NAT
      ex y be Element of NAT st PP[i,x,y]
    proof
      let i be Element of NAT;
      assume 1 <= i & i < n;
      let x be Element of NAT;
      reconsider x as Element of NAT;
      consider y be Element of NAT such that
        A3:y = (((x |^ Radix(k)) mod f)*Table2(m,e,f,n-'i)) mod f;
      reconsider z = y as Element of NAT;
      take z;
      thus thesis by A3;
    end;
    consider r be FinSequence of NAT such that
      A4:len r = n & (r.1 = T or n = 0) and
      A5:for i be Element of NAT st 1 <= i & i < n holds PP[i,r.i,r.(i+1)]
                                      from RECDEF_1:sch 6(A2);
    reconsider r as Tuple of n,NAT by A4,FINSEQ_2:110;
    take r;
    thus r.1 = Table2(m,e,f,n) by A1,A4;
    let i be Element of NAT;
    assume 1 <= i & i <= n - 1;
    then 1 <= i & i < n by SPPOL_1:5;
    hence thesis by A5;
  end;
uniqueness
  proof
    let s1,s2 be Tuple of n,NAT such that
      A6: s1.1 = Table2(m,e,f,n) &
          for i be Element of NAT st 1 <= i & i <= n - 1 holds
            ex I1,I2 be Element of NAT st I1 = s1.i & I2 = s1.(i+1) &
              I2 = (((I1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'i)) mod f
    and
      A7: s2.1 = Table2(m,e,f,n) &
          for i be Element of NAT st 1 <= i & i <= n - 1 holds
            ex I1,I2 be Element of NAT st I1 = s2.i & I2 = s2.(i+1) &
              I2 = (((I1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'i)) mod f;
    A8: len s1 = n by FINSEQ_2:109;
    then A9:len s1 = len s2 by FINSEQ_2:109;
    defpred P[Element of NAT] means
     1 <= $1 & $1 <= n - 1 implies s1.$1 = s2.$1;
    A10: P[0];
    A11: for i be Element of NAT st P[i] holds P[i+1]
    proof let kk be Element of NAT;
      assume A12: 1 <= kk & kk <= n - 1 implies s1.kk = s2.kk;
      assume A13: 1 <= kk + 1 & kk + 1 <= n - 1;
      A14:0 = kk or 0 < kk & 0 + 1 = 1;
        per cases by A14,NAT_1:38;
          suppose 0 = kk;
          hence s1.(kk+1) = s2.(kk+1) by A6,A7;
          end;
          suppose
            A15: 1 <= kk;
            A16: kk <= kk + 1 by NAT_1:29;
            then A17: 1 <= kk & kk <= n - 1 by A13,A15,XXREAL_0:2;
            then consider i1,i2 be Element of NAT such that
              A18: i1 = s1.kk & i2 = s1.(kk+1) &
              i2 = (((i1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'kk)) mod f by A6;
            consider i1,i2 be Element of NAT such that
              A19: i1 = s2.kk & i2 = s2.(kk+1) &
              i2 = (((i1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'kk)) mod f
                                                                  by A7,A17;
      thus s1.(kk+1) = s2.(kk+1) by A12,A13,A15,A16,A18,A19,XXREAL_0:2;
    end;
    end;
    A20:for kk be Element of NAT holds P[kk] from NAT_1:sch 1 (A10,A11);
    A21:s1.n = s2.n
    proof
       n - 1 >= 1 - 1 by A1,XREAL_1:11;
      then reconsider U1 = n - 1 as Element of NAT by INT_1:16;
         now per cases;
        suppose U1 = 0;
          then 0 + 1 = n;
        hence thesis by A6,A7;
        end;
        suppose 0 < U1;
          then A22:1 <= U1 & U1 <= U1 by NAT_1:39;
          then consider i1,i2 be Element of NAT such that
            A23:i1 = s1.U1 & i2 = s1.(U1+1) and
            A24:i2 = (((i1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'U1)) mod f
                                                                by A6;
          consider j1,j2 be Element of NAT such that
            A25:j1 = s2.U1 & j2 = s2.(U1+1) and
            A26:j2 = (((j1 |^ Radix(k)) mod f)*Table2(m,e,f,n-'U1)) mod f
                                                                by A7,A22;
        thus thesis by A20,A22,A23,A24,A25,A26;
      end;
      end;
      hence thesis;
    end;
       for kk be Element of NAT st 1 <= kk & kk <= len s1 holds s1.kk = s2.kk
    proof
      let kk be Element of NAT;
      assume A27:1 <= kk & kk <= len s1;
         now per cases by A27,XXREAL_0:1;
        suppose A28:kk < len s1;
           n - 1 >= 1 - 1 by A1,XREAL_1:11;
        then reconsider U1 = len s1 - 1 as Element of NAT by A8,INT_1:16;
           U1 + 1 = len s1;
        then kk <= U1 by A28,NAT_1:38;
        hence s1.kk = s2.kk by A8,A20,A27;
        end;
        suppose kk = len s1;
        hence s1.kk = s2.kk by A8,A21;
      end;
      end;
      hence thesis;
    end;
  hence s1 = s2 by A9,FINSEQ_1:18;
  end;
end;

theorem
  for n be Element of NAT st n >= 1 holds
    for m,k,f,ie be Element of NAT st ie is_represented_by n,k & f>0 holds
      for e be Tuple of n,NAT st e = DecSD2(ie,n,k) holds
        Pow_mod(m,e,f,k).n = (m |^ ie) mod f
proof
  defpred PP[Element of NAT] means
    for m,k,f,ie be Element of NAT st ie is_represented_by $1,k & f>0 holds
      for e be Tuple of $1,NAT st e = DecSD2(ie,$1,k) holds
        Pow_mod(m,e,f,k).$1 = (m |^ ie) mod f;
  A1:PP[1]
  proof
    let m,k,f,ie be Element of NAT;
    assume A2: ie is_represented_by 1,k & f>0;
    let e be Tuple of 1,NAT;
    assume A3: e = DecSD2(ie,1,k);
       ie < (Radix(k) |^ 1) by A2,RADIX_1:def 12;
    then A4: ie < Radix(k) by NEWTON:10;
    A5:1 - 1 = 0;
    A6: 1 in Seg 1 by FINSEQ_1:4,TARSKI:def 1;
       len DecSD2(ie,1,k) = 1 by FINSEQ_2:109;
    then 1 in dom DecSD2(ie,1,k) by A6,FINSEQ_1:def 3;
    then e/.1 = DecSD2(ie,1,k).1 by A3,FINSEQ_4:def 4
          .= DigitDC2(ie,1,k) by A6,Def5
          .= (ie mod (Radix(k) |^ 1)) div (Radix(k) |^ (1 -'1))
          .= (ie mod (Radix(k) |^ 1)) div (Radix(k) |^ 0) by A5,BINARITH:def 3
          .= (ie mod (Radix(k) |^ 1)) div 1 by NEWTON:9
          .= ie mod (Radix(k) |^ 1) by NAT_2:6
          .= ie mod Radix(k) by NEWTON:10
          .= ie by A4,NAT_1:76;
    then (m |^ ie) mod f = Table2(m,e,f,1);
    hence thesis by Def9;
  end;
  A7:for n be Element of NAT st n >= 1 & PP[n] holds PP[n+1]
  proof
    let n be Element of NAT;
    assume A8: n >= 1 & PP[n];
    A9: n+1 >= 1 by NAT_1:37;
    let m,k,f,ie be Element of NAT;
    assume A10: ie is_represented_by (n+1),k & f>0;
    let e be Tuple of (n+1),NAT;
    assume A11: e = DecSD2(ie,(n+1),k);
    deffunc F(Element of NAT)=e.($1+1);
    consider en being FinSequence of NAT such that
      A12: len en = n and
      A13: for i be Element of NAT st i in Seg n holds en.i = F(i)
       from FINSEQ_2:sch 1;
    reconsider en as Tuple of n,NAT by A12,FINSEQ_2:110;
       1 in Seg 1 by FINSEQ_1:4,TARSKI:def 1;
    then A14:1 in Seg (1+n) by FINSEQ_2:9;
    A15: n in Seg n by A8,FINSEQ_1:3;
    A16: (n+1) in Seg (n+1) by A9,FINSEQ_1:3;
    A17: for i be Element of NAT st i in Seg n holds
      Pow_mod(m,en,f,k).i = Pow_mod(m,e,f,k).i
    proof
      defpred Z[Element of NAT] means $1 in Seg n implies
        Pow_mod(m,en,f,k).$1 = Pow_mod(m,e,f,k).$1;
      A18: Z[0] by FINSEQ_1:3;
      A19: for i be Element of NAT st Z[i] holds Z[i+1]
      proof let i be Element of NAT;
        assume A20: i in Seg n implies
          Pow_mod(m,en,f,k).i = Pow_mod(m,e,f,k).i;
        assume A21: (i+1) in Seg n;
        then A22: 1 <= (i+1) & (i+1) <= n by FINSEQ_1:3;
        then A23:(i+1)-1 <= n - 1 by XREAL_1:11;
           (i=0 or i>0);
        then A24:(i=0 or i+1>1+0) by XREAL_1:8;
        A25: dom en = Seg n by A12,FINSEQ_1:def 3;
        A26:dom e = Seg (len e) by FINSEQ_1:def 3;
        then A27: dom e = Seg (n+1) by FINSEQ_2:109;
           now per cases by A24,NAT_1:38;
          case A28: i=0;
            then Pow_mod(m,en,f,k).(i+1)
              = Table2(m,en,f,n) by A8,Def9
             .= (m |^ (en/.n)) mod f
             .= (m |^ (en.n)) mod f by A15,A25,FINSEQ_4:def 4
             .= (m |^ (e.(n+1))) mod f by A13,A15
             .= (m |^ (e/.(n+1))) mod f by A16,A27,FINSEQ_4:def 4
             .= Table2(m,e,f,n+1)
             .= Pow_mod(m,e,f,k).1 by A9,Def9;
            hence Pow_mod(m,en,f,k).(i+1) = Pow_mod(m,e,f,k).(i+1) by A28;
          end;
          case A29: i>=1;
            reconsider nn = n - 1 as Element of NAT by A8,INT_1:18;
            A30:1 <= i & i <= nn + 1 by A23,A29,NAT_1:37;
            then A31: 1 <= i & i <= (n+1)-1;
            A32: ex I1,I2 be Element of NAT st
             I1=Pow_mod(m,en,f,k).i & I2=Pow_mod(m,en,f,k).(i+1) &
             I2 = (((I1 |^ Radix(k)) mod f) * Table2(m,en,f,n-'i)) mod f
                                                  by A8,A23,A29,Def9;
            A33: ex I1,I2 be Element of NAT st
             I1=Pow_mod(m,e,f,k).i & I2=Pow_mod(m,e,f,k).(i+1) &
             I2 = (((I1 |^ Radix(k)) mod f) * Table2(m,e,f,(n+1)-'i)) mod f
                                                         by A9,A31,Def9;
             1 + i - i <= n - i by A22,XREAL_1:11;
            then A34: 1 <= n -' i by A30,BINARITH:50;
               n -' i <= n by BINARITH:52;
            then A35: (n -' i) in Seg n by A34,FINSEQ_1:3;
            then A36: (n -' i) in dom en by A12,FINSEQ_1:def 3;
            A37: (n+1) -' i <= n+1 by BINARITH:52;
               i+1 <= n by A21,FINSEQ_1:3;
            then i+1-1 <= n-1 by XREAL_1:11;
            then A38: (n+1)-'i >= (n+1)-'nn by JORDAN3:4;
               (n+1)-'nn >= (n+1)-nn by BINARITH:def 3;
            then A39: (n+1)-'i >= (n+1)-(n-1) by A38,XXREAL_0:2;
            1 <= (n+1)-'i by A39,XXREAL_0:2;
            then ((n+1)-'i) in Seg (n+1) by A37,FINSEQ_1:3;
            then A40: ((n+1) -' i) in dom e by A26,FINSEQ_2:109;
               Pow_mod(m,en,f,k).(i+1)
             = ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
          * ((m |^ (en/.(n-'i))) mod f)) mod f by A20,A30,A32,FINSEQ_1:3
            .= ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
                   * ((m |^ (en.(n-'i))) mod f)) mod f by A36,FINSEQ_4:def 4
            .= ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
                   * ((m |^ (e.(n-'i+1))) mod f)) mod f by A13,A35
            .= ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
                   * ((m |^ (e.((n+1) -'i))) mod f)) mod f by A30,BINARITH:56
            .= ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
                * ((m |^ (e/.((n+1) -'i))) mod f)) mod f by A40,FINSEQ_4:def 4
            .= ((((Pow_mod(m,e,f,k).i) |^ Radix(k)) mod f)
                   * Table2(m,e,f,(n+1)-'i)) mod f;
            hence Pow_mod(m,en,f,k).(i+1)=Pow_mod(m,e,f,k).(i+1) by A33;
        end;
        end;
        hence Pow_mod(m,en,f,k).(i+1) = Pow_mod(m,e,f,k).(i+1);
      end;
         for i be Element of NAT holds Z[i] from NAT_1:sch 1(A18,A19);
      hence thesis;
    end;
       n <> 0 by A8;
    then A41: n in Seg n by FINSEQ_1:5;
    set ien = SDDec2(en,k);
    A42: ie = ien*Radix(k) + (e/.1)
    proof
      reconsider r2 = Radix(k) as Element of REAL by XREAL_0:def 1;
      deffunc F(Element of NAT)=DigitSD2(en,k).$1;
      consider rD being FinSequence of REAL such that
      A43: len rD = n and
      A44: for i be Element of NAT st i in Seg n holds rD.i = F(i)
                                                  from FINSEQ_2:sch 1;
      reconsider rD as Tuple of n,REAL by A43,FINSEQ_2:110;
      A45: dom DigitSD2(en,k) = Seg (len DigitSD2(en,k)) by FINSEQ_1:def 3
                               .= Seg n by FINSEQ_2:109;
      A46: dom rD = Seg n by A43,FINSEQ_1:def 3;
      A47:1 - 1 = 0;
      A48: DigitSD2(e,k) = <*SubDigit2(e,1,k)*>^(Radix(k)*DigitSD2(en,k))
      proof
        A49:len DigitSD2(e,k) = n+1 by FINSEQ_2:109;
        A50:len (Radix(k) * DigitSD2(en,k))
           = len (r2 * rD) by A44,A45,A46,FINSEQ_1:17
          .= n by FINSEQ_2:109;
        A51:len <*SubDigit2(e,1,k)*> = 1 by FINSEQ_1:56;
        A52:len (<*SubDigit2(e,1,k)*> ^ (Radix(k) * DigitSD2(en,k)))
           = len <*SubDigit2(e,1,k)*> + len (Radix(k) * DigitSD2(en,k))
                                                           by FINSEQ_1:35
          .= n+1 by A50,FINSEQ_2:109;
        then A53:len DigitSD2(e,k)
           = len (<*SubDigit2(e,1,k)*> ^ (Radix(k) * DigitSD2(en,k)))
                                                            by FINSEQ_2:109;
           for i be Element of NAT st 1 <= i & i <= len DigitSD2(e,k) holds
         DigitSD2(e,k).i=(<*SubDigit2(e,1,k)*> ^ (Radix(k)*DigitSD2(en,k))).i
        proof
          let i be Element of NAT;
          assume A54:1 <= i & i <= len DigitSD2(e,k);
          then A55:i <= n+1 by FINSEQ_2:109;
          then A56:i in Seg (n+1) by A54,FINSEQ_1:3;
          then A57: i in dom DigitSD2(e,k) by A49,FINSEQ_1:def 3;
          per cases;
          suppose A58:i = 1;
            then (<*SubDigit2(e,1,k)*> ^ (Radix(k)*DigitSD2(en,k))).i
             = SubDigit2(e,1,k) by FINSEQ_1:58
            .= (DigitSD2(e,k))/.1 by A14,Def2
            .= DigitSD2(e,k).1 by A57,A58,FINSEQ_4:def 4;
          hence thesis by A58;
          end;
          suppose A59:i<>1;
            1-1 <= i-1 by A54,XREAL_1:11;
            then reconsider i1 = i-1 as Element of NAT by INT_1:16;
            1<i by A54,A59,REAL_1:def 5;
            then 1+1<=i by INT_1:20;
            then A60: 1+1-1<=i-1 by XREAL_1:11;
       A61: i-1<=n+1-1 by A55,XREAL_1:11;
            then A62: i1 in Seg n by A60,FINSEQ_1:3;
            A63: i1 in dom rD by A46,A60,A61,FINSEQ_1:3;
            then reconsider rs = rD.(i-1) as Real by FINSEQ_2:13;
            reconsider rs2 = DigitSD2(en,k).(i-1) as Element of NAT
                     by A45,A46,A63,FINSEQ_2:13;
               1 < i by A54,A59,REAL_1:def 5;
            then (<*SubDigit2(e,1,k)*> ^ (Radix(k)*DigitSD2(en,k))).i
                  =(Radix(k)*DigitSD2(en,k)).(i - 1) by A51,A52,A55,FINSEQ_1:37
                 .=(r2*rD).(i-1) by A44,A45,A46,FINSEQ_1:17
                 .=r2*rs by A62,RVSUM_1:67
                 .=Radix(k)*rs2 by A44,A45,A46,FINSEQ_1:17
                 .=Radix(k)*((DigitSD2(en,k))/.i1)
                                          by A45,A46,A63,FINSEQ_4:def 4
                 .=Radix(k)*SubDigit2(en,i1,k) by A62,Def2
                 .=Radix(k)*((Radix(k) |^ (i1-'1))*(en.i1))
                 .=Radix(k)*(Radix(k) |^ (i1-'1))*(en.i1)
                 .=(Radix(k) |^ (i1-'1+1))*(en.i1) by NEWTON:11
                 .=(Radix(k) |^ i1)*(en.i1) by A60,BINARITH:53
                 .=(Radix(k) |^ i1)*(e.(i1+1)) by A13,A62
                 .=(Radix(k) |^ (i-'1))*(e.i) by A54,BINARITH:50
                 .=SubDigit2(e,i,k)
                 .=(DigitSD2(e,k))/.i by A56,Def2;
          hence thesis by A57,FINSEQ_4:def 4;
        end;
        end;
        hence thesis by A53,FINSEQ_1:18;
      end;
         dom e = Seg (len e) by FINSEQ_1:def 3;
      then A64: 1 in dom e by A14,FINSEQ_2:109;
         ie = SDDec2(e,k) by A9,A10,A11,Th15
        .= Sum DigitSD2(e,k)
        .= SubDigit2(e,1,k) + Sum(Radix(k) * DigitSD2(en,k)) by A48,RVSUM_1:106
        .= SubDigit2(e,1,k) + Sum(r2 * rD) by A44,A45,A46,FINSEQ_1:17
        .= SubDigit2(e,1,k) + r2 * Sum(rD) by RVSUM_1:117
        .= SubDigit2(e,1,k) + Radix(k) * Sum(DigitSD2(en,k))
                                         by A44,A45,A46,FINSEQ_1:17
        .= SubDigit2(e,1,k) + Radix(k) * SDDec2(en,k)
        .= (Radix(k) |^ (1 -' 1))*(e.1) + Radix(k) * ien
        .= (Radix(k) |^ 0)*(e.1) + Radix(k) * ien by A47,BINARITH:def 3
        .= 1*(e.1) + Radix(k) * ien by NEWTON:9;
      hence thesis by A64,FINSEQ_4:def 4;
    end;
    then A65: ie >= ien * Radix(k) by INT_1:19;
    A66: Radix(k) > 0 by Th6;
       ie < (Radix(k) |^ (n+1)) by A10,RADIX_1:def 12;
    then ien * Radix(k) < (Radix(k) |^ (n+1)) by A65,XXREAL_0:2;
    then ien * Radix(k) < (Radix(k) |^ n)* Radix(k) by NEWTON:11;
    then ien < (Radix(k) |^ n) by XREAL_1:66;
    then A67: ien is_represented_by n,k by RADIX_1:def 12;
    A68: en = DecSD2(ien,n,k)
    proof
      A69:len en = len DecSD2(ien,n,k) by A12,FINSEQ_2:109;
      for i be Element of NAT st 1 <= i & i <= len en
          holds en.i=DecSD2(ien,n,k).i
      proof
        let i be Element of NAT;
        assume A70: 1 <= i & i <= len en;
        then A71: i in Seg n by A12,FINSEQ_1:3;
        A72:i <= i+1 by XREAL_1:31;
        then 1 <= (i+1) & (i+1) <= (n+1) by A12,A70,XXREAL_0:2,XREAL_1:8;
        then A73: (i+1) in Seg (n+1) by FINSEQ_1:3;
           e.1 = DigitDC2(ie,1,k) by A11,A14,Def5
           .= (ie mod (Radix(k) |^ 1)) div (Radix(k) |^ (1 -' 1))
           .= (ie mod (Radix(k) |^ 1)) div (Radix(k) |^ 0) by BINARITH:51
           .= (ie mod (Radix(k) |^ 1)) div 1 by NEWTON:9
           .= ie mod (Radix(k) |^ 1) by NAT_2:6
           .= ie mod Radix(k) by NEWTON:10;
        then A74: e.1 < Radix(k) by A66,NAT_1:46;
           dom e = Seg (len e) by FINSEQ_1:def 3;
        then A75:dom e = Seg (n+1) by FINSEQ_2:109;
        A76:1 <= i+1 & 0 < Radix(k) by A70,A72,Th6,XXREAL_0:2;
        A77:Radix(k) <> 0 & i <> 0 by A70,Th6;
        reconsider a = e.1 as Integer;
        reconsider b = ien as Integer;
        reconsider G = a + b*Radix(k) as Integer;
        A78:(e.1 + ien*Radix(k)) div Radix(k)
             = G div Radix(k) by NEWTON:101
            .= [\(e.1 + ien*Radix(k))/Radix(k)/] by INT_1:def 7
            .= [\e.1/Radix(k) + ien/] by A76,XCMPLX_1:114
            .= [\e.1/Radix(k)/] + ien by INT_1:51
            .= a div Radix(k) + ien by INT_1:def 7
            .= (e.1) div Radix(k) + ien by NEWTON:101
            .= 0 + ien by A74,NAT_1:80;
           en.i
         = e.(i+1) by A13,A71
        .= DigitDC2(ie,(i+1),k) by A11,A73,Def5
        .= (ie mod (Radix(k) |^ (i+1))) div (Radix(k) |^ ((i+1) -'1))
        .= ((ien*Radix(k) + (e/.1)) div (Radix(k) |^ ((i+1)-'1)))
                                                mod Radix(k) by A42,A76,Th4
        .= ((ien*Radix(k) + e.1) div (Radix(k) |^ ((i+1)-'1)))
                                                mod Radix(k)
                                                    by A14,A75,FINSEQ_4:def 4
        .= ((ien*Radix(k) + e.1) div (Radix(k) |^ i))
                                                mod Radix(k) by BINARITH:39
        .= ((ien*Radix(k) + e.1) div (Radix(k)*(Radix(k) |^ (i -'1))))
                                                mod Radix(k) by A77,PEPIN:27
        .= (((e.1 + ien*Radix(k)) div Radix(k)) div (Radix(k) |^ (i -'1)))
                                                mod Radix(k) by NAT_2:29
        .= (ien mod (Radix(k) |^ i)) div (Radix(k) |^ (i -'1)) by A70,A76,A78,
Th4
        .= DigitDC2(ien,i,k);
        hence thesis by A71,Def5;
      end;
      hence thesis by A69,FINSEQ_1:18;
    end;
    A79: n <= (n+1) - 1;
       n+1 >= 1 by NAT_1:29;
    then ex I1,I2 be Element of NAT
     st I1=Pow_mod(m,e,f,k).n & I2=Pow_mod(m,e,f,k).(n+1)
&
      I2 = (((I1 |^ Radix(k)) mod f)*
                                Table2(m,e,f,(n+1)-'n)) mod f by A8,A79,Def9;
    then Pow_mod(m,e,f,k).(n+1)
          = ((((Pow_mod(m,en,f,k).n) |^ Radix(k)) mod f)
                                  *Table2(m,e,f,(n+1)-'n)) mod f by A17,A41
         .= (((((m |^ ien) mod f) |^ Radix(k)) mod f)
                            *Table2(m,e,f,(n+1)-'n)) mod f by A8,A10,A67,A68
         .= ((((m |^ ien) |^ Radix(k)) mod f)
                            *Table2(m,e,f,(n+1)-'n)) mod f by PEPIN:12
         .= (((m |^ ien) |^ Radix(k))*Table2(m,e,f,(n+1)-'n)) mod f
                                                           by EULER_2:10
         .= (m |^ (ien*Radix(k))*Table2(m,e,f,(n+1)-'n)) mod f by NEWTON:14
         .= (m |^ (ien*Radix(k))*Table2(m,e,f,1)) mod f by BINARITH:39
         .= (m |^ (ien*Radix(k))*((m |^ (e/.1)) mod f)) mod f
         .= (m |^ (ien*Radix(k))*(m |^ (e/.1))) mod f by EULER_2:9
         .= (m |^ (ien*Radix(k) + (e/.1))) mod f by NEWTON:13;
    hence thesis by A42;
  end;
  for n be Element of NAT st n >= 1 holds PP[n] from NAT_1:sch 9(A1,A7);
  hence thesis;
end;

