:: The Lattice of Natural Numbers and The Sublattice of it.
:: The Set of Prime Numbers
::  by Marek Chmur
::
:: Received April 26, 1991
:: Copyright (c) 1991 Association of Mizar Users

environ

 vocabularies ARYTM_3, QC_LANG1, BINOP_1, FUNCT_1, LATTICES, ARYTM, RELAT_1,
      BOOLE, NAT_LAT, REALSET1, ORDINAL2, XREAL_0, NAT_1;
 notations TARSKI, XBOOLE_0, ZFMISC_1, SUBSET_1, NUMBERS, ORDINAL1, XREAL_0,
      REALSET1, STRUCT_0, NAT_1, NAT_D, LATTICES, BINOP_1, RELAT_1, FUNCT_1,
      XXREAL_0;
 constructors PARTFUN1, BINOP_1, FINSET_1, XXREAL_0, NAT_D, MEMBERED, REALSET1,
      LATTICES;
 registrations XBOOLE_0, ORDINAL1, RELSET_1, FINSET_1, XREAL_0, MEMBERED,
      STRUCT_0, LATTICES;
 requirements REAL, NUMERALS, SUBSET, BOOLE;
 definitions TARSKI, XBOOLE_0, LATTICES, BINOP_1, REALSET1, ORDINAL1;
 theorems NEWTON, ZFMISC_1, LATTICES, FUNCT_1, FUNCT_2, XBOOLE_1, RELAT_1,
      ORDINAL1, BINOP_1;
 schemes BINOP_1, BINOP_2, SUBSET_1;

begin :: Auxiliary Theorems

 reserve n,m for Nat;

definition
 canceled 2;

 func hcflat-> BinOp of NAT means
 :Def3: it.(m,n)=m hcf n;
 existence proof
   deffunc O(Nat,Nat)= $1 hcf $2;
   consider o being BinOp of NAT such that
A1: for a,b being Element of NAT holds o.(a,b) = O(a,b) from BINOP_1:sch 4;
    take o;
    let m,n;
    m in NAT & n in NAT by ORDINAL1:def 13;
   hence thesis by A1;
 end;
 uniqueness proof
    let f1,f2 be BinOp of NAT such that
A2: f1.(m,n)=m hcf n and
A3: f2.(m,n)=m hcf n;
    now let m,n be Element of NAT;
      thus f1.(m,n) = m hcf n by A2 .= f2.(m,n) by A3;
    end;
  hence thesis by BINOP_1:2;
 end;

 func lcmlat -> BinOp of NAT means
 :Def4: it.(m,n)=m lcm n;
 existence proof
   deffunc O(Nat,Nat)= $1 lcm $2;
   consider o being BinOp of NAT such that
A4: for a,b being Element of NAT holds o.(a,b) = O(a,b) from BINOP_1:sch 4;
    take o;
    let m,n;
    m in NAT & n in NAT by ORDINAL1:def 13;
   hence thesis by A4;
 end;
 uniqueness proof
    let f1,f2 be BinOp of NAT such that
A5: f1.(m,n)=m lcm n and
A6: f2.(m,n)=m lcm n;
    now let m,n be Element of NAT;
      thus f1.(m,n) = m lcm n by A5 .= f2.(m,n) by A6;
    end;
  hence thesis by BINOP_1:2;
 end;
end;

definition
 func Nat_Lattice -> strict non empty LattStr
  equals LattStr(# NAT, lcmlat, hcflat #);
 coherence;
end;

registration
 cluster -> natural Element of Nat_Lattice;
 coherence
  proof let e be Element of Nat_Lattice;
   thus e in NAT;
  end;
end;

 reserve p,q,r for Element of Nat_Lattice;

registration let p,q;
 identify p"\/"q with p lcm q;
 compatibility by Def4;
 identify p"/\"q with p hcf q;
 compatibility by Def3;
end;

canceled 47;

theorem
 p"\/"q =p lcm q;

theorem
 p"/\"q = p hcf q;

canceled 2;

theorem
  for a,b being Element of Nat_Lattice st
    a[=b holds a divides b
proof
  let a,b be Element of Nat_Lattice;
  assume a[=b;
  then a"\/"b=b by LATTICES:def 3;
  then a lcm b = b;
  then a lcm b = b;
  hence thesis by NEWTON:57;
end;

definition
  func 0_NN -> Element of Nat_Lattice equals
    1;
  coherence;

  func 1_NN -> Element of Nat_Lattice equals
    0;
  coherence;
end;

canceled 2;

theorem
  0_NN=1;

 Lm1:
  for a being Element of Nat_Lattice holds
    0_NN"/\"a = 0_NN & a"/\"0_NN = 0_NN by NEWTON:64;

registration
 cluster Nat_Lattice -> Lattice-like;
  coherence
  proof
   thus (for p,q holds p"\/"q = q"\/"p) &
    (for p,q,r holds p"\/"(q"\/"r) = (p"\/"q)"\/"r) &
    (for p,q holds (p"/\"q)"\/"q = q) &
    (for p,q holds p"/\"q = q"/\"p) &
    (for p,q,r holds p"/\"(q"/\"r) = (p"/\"q)"/\"r) &
    (for p,q holds p"/\"(p"\/"q) = p) by NEWTON:61,56,66,67;
  end;
end;

registration
  cluster Nat_Lattice -> strict;
  coherence;
end;

 reserve p,q,r for Element of Nat_Lattice;

registration
  cluster Nat_Lattice -> lower-bounded;
  coherence by Lm1,LATTICES:def 13;
end;

canceled 5;

theorem Th61:
  lcmlat.(p,q)=lcmlat.(q,p)
proof
  thus lcmlat.(p,q)=q"\/"p by LATTICES:def 1
                  .=lcmlat.(q,p);
end;

theorem Th62:
  hcflat.(q,p)=hcflat.(p,q)
proof
  thus hcflat.(q,p)=p"/\"q by LATTICES:def 2
                  .=hcflat.(p,q);
end;

theorem Th63:
  lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(p,q),r)
proof
 set s=q"\/"r;
 thus lcmlat.(p,lcmlat.(q,r))=p"\/"s
                       .=(p"\/"q)"\/"r by NEWTON:56
                       .=lcmlat.(lcmlat.(p,q),r);
end;

theorem
  lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(q,p),r) &
  lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(p,r),q) &
  lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(r,q),p) &
  lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(r,p),q)
proof
set s=r"\/"q;
thus lcmlat.(p,lcmlat.(q,r)) =lcmlat.(lcmlat.(p,q),r) by Th63
                       .= lcmlat.(lcmlat.(q,p),r) by Th61;
thus A1:lcmlat.(p,lcmlat.(q,r)) = lcmlat.(p,lcmlat.(r,q)) by Th61
                       .=lcmlat.(lcmlat.(p,r),q) by Th63;
thus lcmlat.(p,lcmlat.(q,r)) = lcmlat.(p,s) by LATTICES:def 1
                       .=lcmlat.(lcmlat.(r,q),p) by Th61;
thus lcmlat.(p,lcmlat.(q,r)) = lcmlat.(lcmlat.(r,p),q) by A1,Th61;
end;

theorem Th65:
  hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(p,q),r)
proof
 set s=q"/\"r;
 thus hcflat.(p,hcflat.(q,r))=p"/\"s
                       .=(p"/\"q)"/\"r by NEWTON:61
                       .=hcflat.(hcflat.(p,q),r);
end;

theorem
  hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(q,p),r) &
  hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(p,r),q) &
  hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(r,q),p) &
  hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(r,p),q)
proof
set s=r"/\"q;
thus hcflat.(p,hcflat.(q,r)) =hcflat.(hcflat.(p,q),r) by Th65
                       .= hcflat.(hcflat.(q,p),r) by Th62;
thus A1:hcflat.(p,hcflat.(q,r)) = hcflat.(p,hcflat.(r,q)) by Th62
                       .=hcflat.(hcflat.(p,r),q) by Th65;
thus hcflat.(p,hcflat.(q,r)) = hcflat.(p,s) by LATTICES:def 2
                       .=hcflat.(hcflat.(r,q),p) by Th62;
thus hcflat.(p,hcflat.(q,r)) = hcflat.(hcflat.(r,p),q) by A1,Th62;
end;

theorem
  hcflat.(q,lcmlat.(q,p))=q & hcflat.(lcmlat.(p,q),q)=q &
  hcflat.(q,lcmlat.(p,q))=q & hcflat.(lcmlat.(q,p),q)=q
 proof
 set s=q"\/"p;
 thus A1:hcflat.(q,lcmlat.(q,p))=q"/\"s
                              .=q by NEWTON:67;
 thus A2:hcflat.(lcmlat.(p,q),q)=hcflat.(p"\/"q,q)
                              .=q"/\"(q"\/"p) by LATTICES:def 2
                              .=q by NEWTON:67;
 thus hcflat.(q,lcmlat.(p,q))=q by A1,Th61;
 thus hcflat.(lcmlat.(q,p),q)=q by A2,Th61;
end;

theorem
  lcmlat.(q,hcflat.(q,p))=q & lcmlat.(hcflat.(p,q),q)=q &
  lcmlat.(q,hcflat.(p,q))=q & lcmlat.(hcflat.(q,p),q)=q
 proof
 set r=p"/\"q;
 thus A1:lcmlat.(q,hcflat.(q,p))=lcmlat.(q,q"/\"p)
                              .=(p"/\"q)"\/"q by LATTICES:def 1
                              .=q by NEWTON:66;
 thus A2:lcmlat.(hcflat.(p,q),q)=r"\/"q
                              .=q by NEWTON:66;
 thus lcmlat.(q,hcflat.(p,q))=q by A1,Th62;
 thus lcmlat.(hcflat.(q,p),q)=q by A2,Th62;
end;

:: NATPLUS

definition
 canceled;

  func NATPLUS -> Subset of NAT means
:Def9: for n being Nat holds n in it iff 0 < n;
existence
 proof
  defpred P[Nat] means 0 < $1;
  consider X being Subset of NAT such that
A1: for n being Element of NAT holds n in X iff P[n] from SUBSET_1:sch 3;
  take X;
  let n be Nat;
  thus n in X implies 0 < n by A1;
  n in NAT by ORDINAL1:def 13;
  hence thesis by A1;
  end;
uniqueness proof
let X, Y be Subset of NAT such that
A2: for n being Nat holds n in X iff 0 < n and
A3: for n being Nat holds n in Y iff 0 < n;
    thus X c= Y
    proof
      let x be set;assume
A4:   x in X;
      then reconsider x as Nat by ORDINAL1:def 13;
      0 < x by A2,A4;
      hence thesis by A3;
    end;
    let x be set; assume
A5: x in Y;
    then reconsider x as Nat by ORDINAL1:def 13;
    0 < x by A3,A5;
    hence thesis by A2;
  end;
end;

registration
  cluster NATPLUS -> non empty;
  coherence
 proof
   0 < 1;
   hence thesis by Def9;
  end;
end;

definition let D be non empty set, S be non empty Subset of D,
               N be non empty Subset of S;
  redefine mode Element of N -> Element of S;
 coherence
  proof let x be Element of N;
  thus thesis;
  end;
end;

registration let D be Subset of REAL;
  cluster -> real Element of D;
  coherence;
end;

registration let D be Subset of NAT;
  cluster -> real Element of D;
  coherence;
end;

definition
  mode NatPlus is Element of NATPLUS;
end;

:: LATTICE of NATURAL NUMBERS > 0

definition
  let k be Nat such that
  A1: k>0;
  func @k->Element of NATPLUS equals
  :Def10: k;
  coherence by A1,Def9;
end;

definition
  let k be Element of NATPLUS;
  func @k -> NatPlus equals
    k;
  coherence;
end;

registration
  cluster -> natural non zero Element of NATPLUS;
coherence
proof
  let x be Element of NATPLUS;
  thus x is natural;
  thus thesis by Def9;
end;
end;

 reserve m,n for NatPlus;

definition
  func hcflatplus -> BinOp of NATPLUS means
 :Def12: it.(m,n) = m hcf n;
 existence
  proof
  deffunc O(Element of NATPLUS,Element of NATPLUS)= @($1 hcf $2);
  consider f being BinOp of NATPLUS such that
  A1: for m,n being Element of NATPLUS holds
  f.(m,n)=O(m,n) from BINOP_1:sch 4;
  take f;
  let m,n be Element of NATPLUS;
  A2: n>0 by Def9;
  A3: f.(m,n)=@(m hcf n) by A1;
      m hcf n >0 by A2,NEWTON:71;
  hence thesis by A3,Def10;
  end;
 uniqueness proof deffunc O(Element of NATPLUS,Element of NATPLUS)= $1 hcf $2;
  thus for o1,o2 being BinOp of NATPLUS st
    (for a,b being Element of NATPLUS holds o1.(a,b) = O(a,b)) &
    (for a,b being Element of NATPLUS holds o2.(a,b) = O(a,b))
  holds o1 = o2 from BINOP_2:sch 2;
  end;

  func lcmlatplus-> BinOp of NATPLUS means :Def13:
    it.(m,n)=m lcm n;
  existence
  proof
  deffunc O(Element of NATPLUS,Element of NATPLUS)= @(@$1 lcm @$2);
  consider f being BinOp of NATPLUS such that
  A4: for m,n being Element of NATPLUS holds
  f.(m,n)=O(m,n) from BINOP_1:sch 4;
  take f;
  let m,n be Element of NATPLUS;
  A5: m>0 by Def9;
  A6: n>0 by Def9;
  A7: @n = n;
  @m = m ;
  then A8: f.(m,n)=@(m lcm n) by A4,A7;
  m lcm n >0 by A5,A6,NEWTON:73;
  hence thesis by A8,Def10;
  end;
 uniqueness proof deffunc O(Element of NATPLUS,Element of NATPLUS)= $1 lcm $2;
  thus for o1,o2 being BinOp of NATPLUS st
    (for a,b being Element of NATPLUS holds o1.(a,b) = O(a,b)) &
    (for a,b being Element of NATPLUS holds o2.(a,b) = O(a,b))
  holds o1 = o2 from BINOP_2:sch 2;
  end;
end;

definition
  func NatPlus_Lattice -> strict LattStr equals
   LattStr (# NATPLUS, lcmlatplus, hcflatplus #);
  coherence;
end;

registration
  cluster NatPlus_Lattice -> non empty;
  coherence;
end;

definition let m be Element of NatPlus_Lattice;
  func @m -> NatPlus equals
    m;
  coherence;
end;

registration
  cluster -> natural non zero Element of NatPlus_Lattice;
coherence
proof
  let x be Element of NatPlus_Lattice;
   x is Element of NATPLUS;
  hence x is natural;
  thus thesis by Def9;
end;
end;

 reserve p,q for Element of NatPlus_Lattice;

registration let p,q be Element of NatPlus_Lattice;
 identify p"\/"q with p lcm q;
 compatibility by Def13;
 identify p"/\"q with p hcf q;
 compatibility  by Def12;
end;

theorem
 p"\/"q =@p lcm @q;

theorem
 p"/\"q = @p hcf @q;

Lm2:
 for a,b being Element of NatPlus_Lattice holds a"\/"b = b"\/"a
proof
  let a,b be Element of NatPlus_Lattice;
  thus a"\/"b = b"\/"a;
end;

Lm3:
 for a,b,c being Element of NatPlus_Lattice
      holds a"\/"(b"\/"c) = (a"\/"b)"\/"c
 proof
  let a,b,c be Element of NatPlus_Lattice;
  set l=b"\/"c;
  set k=a"\/"b;
  thus a"\/"(b"\/"c) = @a lcm (@b lcm @c)
                .= (a"\/"b)"\/"c by NEWTON:56;
 end;

Lm4:
 for a,b being Element of NatPlus_Lattice holds (a"/\"b)"\/"b = b
 proof
 let a,b be Element of NatPlus_Lattice;
  set k=a"/\"b;
 thus (a"/\"b)"\/"b = (@a hcf @b) lcm @b
               .= b by NEWTON:66;
end;

Lm5:
 for a,b being Element of NatPlus_Lattice holds a"/\"b = b"/\"a
 proof
  let a,b be Element of NatPlus_Lattice;
  thus a"/\"b = b"/\"a;
 end;

Lm6:
 for a,b,c being Element of NatPlus_Lattice
      holds a"/\"(b"/\"c) = (a"/\"b)"/\"c
 proof
  let a,b,c be Element of NatPlus_Lattice;
  set l=b"/\"c;
  set k=a"/\"b;
  thus a"/\"(b"/\"c) = @a hcf (@b hcf @c)
                .= (a"/\"b)"/\"c by NEWTON:61;
 end;

Lm7:
 for a,b being Element of NatPlus_Lattice holds a"/\"(a"\/"b) = a
 proof
  let a,b be Element of NatPlus_Lattice;
  set l=a"\/"b;
  thus a"/\"(a"\/"b) = @a hcf (@a lcm @b)
                .= a by NEWTON:67;
 end;

registration
  cluster NatPlus_Lattice -> join-commutative join-associative
    meet-commutative meet-associative join-absorbing meet-absorbing;
  coherence by Lm2,Lm3,Lm4,Lm5,Lm6,Lm7,
    LATTICES:def 4,def 5,def 6,def 7,def 8,def 9;
end;

Lm8: now let L be Lattice;
 thus the L_join of L = (the L_join of L)||the carrier of L
  proof
   [:the carrier of L, the carrier of L:]
     = dom (the L_join of L) by FUNCT_2:def 1;
   hence thesis by RELAT_1:97;
  end;
  thus the L_meet of L = (the L_meet of L)||the carrier of L
   proof
    [:the carrier of L, the carrier of L:]
     = dom (the L_meet of L) by FUNCT_2:def 1;
    hence thesis by RELAT_1:97;
   end;
end;

definition let L be Lattice;
  mode SubLattice of L -> Lattice means
 :Def16: the carrier of it c= the carrier of L &
   the L_join of it = (the L_join of L)||the carrier of it &
   the L_meet of it = (the L_meet of L)||the carrier of it;
 existence proof take L; thus thesis by Lm8; end;
end;

registration let L be Lattice;
  cluster strict SubLattice of L;
  existence
   proof set S =
     LattStr(#the carrier of L, the L_join of L, the L_meet of L#);
A1:  for a,b be Element of S,
         a',b' be Element of L st a = a' & b = b'
      holds a"\/"b = a'"\/"b' & a"/\"b = a'"/\"b';
A2:  now let a,b be Element of S;
      reconsider a' = a, b' = b as Element of L;
      thus a"\/"b = b'"\/"a' by A1
        .= b"\/"a;
     end;
A3:  now let a,b,c be Element of S;
       reconsider a' = a, b' = b, c' = c as Element of L;
      thus a"\/"(b"\/"c) = a'"\/"(b'"\/"c')
        .= (a'"\/"b')"\/"c' by LATTICES:def 5
        .= (a"\/"b)"\/"c;
     end;
A4:  now let a,b be Element of S;
       reconsider a' = a, b' = b as Element of L;
       thus (a"/\"b)"\/"b = (a'"/\"b')"\/"b'
         .= b by LATTICES:def 8;
     end;
A5:  now let a,b be Element of S;
      reconsider a' = a, b' = b as Element of L;
      thus a"/\"b = b'"/\"a' by A1
          .= b"/\"a;
     end;
A6:  now let a,b,c be Element of S;
       reconsider a' = a, b' = b, c' = c as Element of L;
       thus a"/\"(b"/\"c) = a'"/\"(b'"/\"c')
          .= (a'"/\"b')"/\"c' by LATTICES:def 7
          .= (a"/\"b)"/\"c;
     end;
     now let a,b be Element of S;
      reconsider a' = a, b' = b as Element of L;
      thus a"/\"(a"\/"b) = a'"/\"(a'"\/"b')
          .=a by LATTICES:def 9;
     end;
     then S is join-commutative join-associative meet-absorbing
        meet-commutative meet-associative join-absorbing
     by A2,A3,A4,A5,A6,LATTICES:def 4,def 5,def 6,def 7,def 8,def 9;
     then reconsider S as Lattice by LATTICES:def 10;
     the L_join of S = (the L_join of L)||the carrier of S &
     the L_meet of S = (the L_meet of L)||the carrier of S by FUNCT_2:40;
     then S is SubLattice of L by Def16;
    hence thesis;
   end;
end;

canceled 4;

theorem
  for L being Lattice holds L is SubLattice of L
proof let L be Lattice;
  thus the carrier of L c= the carrier of L;
  thus thesis by Lm8;
end;

theorem
  NatPlus_Lattice is SubLattice of Nat_Lattice
proof
A1: lcmlatplus = lcmlat||NATPLUS
  proof
A2: dom lcmlatplus = dom lcmlat /\ [:NATPLUS,NATPLUS:]
    proof
A3:  dom lcmlatplus = [:NATPLUS,NATPLUS:] by FUNCT_2:def 1;
A4:  dom lcmlat = [:NAT,NAT:] by FUNCT_2:def 1;
        [:NATPLUS,NATPLUS:] c= [:NAT,NAT:] by ZFMISC_1:119;
     hence thesis by A3,A4,XBOOLE_1:28;
    end;
    for x being set st x in dom lcmlatplus holds lcmlatplus.x = lcmlat.x
    proof let x be set;
    assume x in dom lcmlatplus;
    then A5: x in [:NATPLUS,NATPLUS:] by FUNCT_2:def 1;
    then consider y1,y2 being set such that A6: [y1,y2]=x by ZFMISC_1:102;
    y1 in NATPLUS & y2 in NATPLUS by A5,A6,ZFMISC_1:106;
    then reconsider n=y1,k=y2 as Nat by ORDINAL1:def 13;
    A7: lcmlat.(n,k) = n lcm k by Def4;
    reconsider n=y1,k=y2 as NatPlus by A5,A6,ZFMISC_1:106;
    lcmlatplus.(n,k)= lcmlat.(n,k) by A7,Def13;
    hence thesis by A6;
   end;
   hence thesis by A2,FUNCT_1:68;
  end;
  hcflatplus = hcflat||NATPLUS
  proof
   A8: dom hcflatplus = dom hcflat /\ [:NATPLUS,NATPLUS:]
    proof
A9:  dom hcflatplus = [:NATPLUS,NATPLUS:] by FUNCT_2:def 1;
A10: dom hcflat = [:NAT,NAT:] by FUNCT_2:def 1;
     [:NATPLUS,NATPLUS:] c= [:NAT,NAT:] by ZFMISC_1:119;
     hence thesis by A9,A10,XBOOLE_1:28;
    end;
    for x being set st x in dom hcflatplus holds hcflatplus.x = hcflat.x
    proof let x be set;
    assume x in dom hcflatplus;
    then A11: x in [:NATPLUS,NATPLUS:] by FUNCT_2:def 1;
    then consider y1,y2 being set such that A12: [y1,y2]=x by ZFMISC_1:102;
    y1 in NATPLUS & y2 in NATPLUS by A11,A12,ZFMISC_1:106;
    then reconsider n=y1,k=y2 as Nat by ORDINAL1:def 13;
    A13: hcflat.(n,k) = n hcf k by Def3;
    reconsider n=y1,k=y2 as NatPlus by A11,A12,ZFMISC_1:106;
    hcflatplus.(n,k)= hcflat.(n,k) by A13,Def12;
    hence thesis by A12;
   end;
   hence thesis by A8,FUNCT_1:68;
  end;
 hence thesis by A1,Def16;
end;

