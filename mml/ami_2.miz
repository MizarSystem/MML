:: On a Mathematical Model of Programs
::  by Yatsuka Nakamura and Andrzej Trybulec
::
:: Received December 29, 1992
:: Copyright (c) 1992 Association of Mizar Users

environ

 vocabularies NUMBERS, SUBSET_1, XBOOLE_0, CARD_1, ZFMISC_1, FINSEQ_1, FUNCT_1,
      CARD_3, RELAT_1, AMI_1, NAT_1, FUNCT_4, FUNCOP_1, INT_1, MCART_1,
      PARTFUN1, ORDINAL1, ARYTM_3, ARYTM_1, XXREAL_0, FUNCT_2, FUNCT_5, TARSKI,
      AMI_2, GROUP_9, FINSET_1, RECDEF_2;
 notations TARSKI, XBOOLE_0, ENUMSET1, ZFMISC_1, SUBSET_1, ORDINAL1, NUMBERS,
      XCMPLX_0, CARD_1, FINSET_1, CARD_3, RELAT_1, FUNCT_1, PARTFUN1, FUNCT_2,
      XXREAL_0, BINOP_1, MCART_1, DOMAIN_1, INT_1, NAT_1, FUNCOP_1, FUNCT_4,
      CAT_2, FINSEQ_1, FINSEQ_4, RECDEF_2;
 constructors DOMAIN_1, XXREAL_0, NAT_D, FINSEQ_4, CAT_2, CARD_3, ABIAN,
      SETFAM_1, RELSET_1, FINSEQ_2, RECDEF_2;
 registrations XBOOLE_0, SETFAM_1, ORDINAL1, FUNCOP_1, NUMBERS, XXREAL_0,
      XREAL_0, INT_1, FINSEQ_1, CARD_3, RELAT_1, FINSET_1, ORDINAL2, CARD_1,
      FUNCT_1, CARD_2;
 requirements NUMERALS, REAL, SUBSET, BOOLE;
 definitions TARSKI, FUNCOP_1, CARD_1, FINSEQ_1, MCART_1;
 theorems ZFMISC_1, FUNCT_2, TARSKI, CAT_2, FUNCOP_1, ENUMSET1, INT_1, CARD_3,
      FINSEQ_4, MCART_1, FUNCT_4, XBOOLE_0, XBOOLE_1, ORDINAL1, RELAT_1,
      NUMBERS, NAT_1, DOMAIN_1, FINSEQ_1, FUNCT_7, RECDEF_2;
 schemes FUNCT_2, BINOP_1;

begin :: A small concrete machine

reserve x,y,z for set;


notation
  synonym SCM-Halt for {};
end;

definition
  redefine func SCM-Halt -> Element of Segm 9;
  correctness by NAT_1:45;
end;

definition
  func SCM-Data-Loc equals
  [:{1},NAT:];
  coherence;
end;

definition
  canceled;
  func SCM-Memory equals
  {NAT} \/ SCM-Data-Loc \/ NAT;
  coherence;
end;

registration
  cluster SCM-Memory -> non empty;
  coherence;
end;

definition
  redefine func SCM-Data-Loc -> Subset of SCM-Memory;
  coherence
  proof
    SCM-Memory = {NAT} \/ NAT \/ SCM-Data-Loc by XBOOLE_1:4;
    hence thesis by XBOOLE_1:7;
  end;
  redefine func NAT -> Subset of SCM-Memory;
  coherence by XBOOLE_1:7;
end;

registration
  cluster SCM-Data-Loc -> non empty;
  coherence;
end;

reserve I,J,K for Element of Segm 9,
  a,a1,a2 for Element of NAT,
  b,b1,b2,c,c1 for Element of SCM-Data-Loc;

definition
  func SCM-Instr -> non empty set equals
  {[SCM-Halt,{},{}] } \/ { [J,<*a*>,{}] : J = 6 }
   \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } }
   \/ { [I,{},<*b,c*>] : I in { 1,2,3,4,5} };
  coherence;
end;

canceled;

theorem
  [0,{},{}] in SCM-Instr
proof
  [0,{},{}] in { [SCM-Halt,{},{}] } by TARSKI:def 1;
  then [0,{},{}] in { [SCM-Halt,{},{}] }
   \/ { [J,<*a*>,{}] : J = 6 } by XBOOLE_0:def 3;
  then
  [0,{},{}] in { [SCM-Halt,{},{}] } \/ { [J,<*a*>,{}] : J = 6 }
   \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } } by XBOOLE_0:def 3;
  hence thesis by XBOOLE_0:def 3;
end;

registration
  cluster SCM-Instr -> non empty;
  coherence;
end;

theorem
  [6,<*a2*>,{}] in SCM-Instr
proof
  reconsider x = 6 as Element of Segm 9 by NAT_1:45;
  [x,<*a2*>,{}] in { [J,<*a*>,{}] : J = 6 };
  then [x,<*a2*>,{}] in { [SCM-Halt,{},{}] } \/ { [J,<*a*>,{}] : J = 6 }
   by XBOOLE_0:def 3;
  then
  [x,<*a2*>,{}] in { [SCM-Halt,{},{}] } \/ { [J,<*a*>,{}] : J = 6 }
   \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } } by XBOOLE_0:def 3;
  hence thesis by XBOOLE_0:def 3;
end;

theorem
  x in { 7, 8 } implies [x,<*a2*>,<*b2*>] in SCM-Instr
proof
  assume
A1: x in { 7, 8 };
  then x = 7 or x = 8 by TARSKI:def 2;
  then reconsider x as Element of Segm 9 by NAT_1:45;
  [x,<*a2*>,<*b2*>] in { [K,<*a1*>,<*b1*>] : K in { 7,8 } } by A1;
  then
  [x,<*a2*>,<*b2*>] in { [SCM-Halt,{},{}] } \/ { [J,<*a*>,{}] : J = 6 }
   \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } } by XBOOLE_0:def 3;
  hence thesis by XBOOLE_0:def 3;
end;

theorem
  x in { 1,2,3,4,5} implies [x,{},<*b1,c1*>] in SCM-Instr
proof
  assume
A1: x in { 1,2,3,4,5};
  then x=1 or x=2 or x=3 or x=4 or x=5 by ENUMSET1:def 3;
  then reconsider x as Element of Segm 9 by NAT_1:45;
  [x,{},<*b1,c1*>] in { [J,{},<*b,c*>] : J in { 1,2,3,4,5 } } by A1;
  hence thesis by XBOOLE_0:def 3;
end;

Lm1: now
  let k be Element of SCM-Memory;
  k in {NAT} \/ SCM-Data-Loc or k in NAT by XBOOLE_0:def 3;
  then k in {NAT} or k in SCM-Data-Loc or k in NAT by XBOOLE_0:def 3;
  hence k = NAT or k in SCM-Data-Loc or k in NAT by TARSKI:def 1;
end;

Lm2: not NAT in SCM-Data-Loc
proof
  assume NAT in SCM-Data-Loc;
  then ex x,y st NAT = [x,y] by RELAT_1:def 1;
  hence contradiction;
end;

Lm3: SCM-Data-Loc misses NAT
proof
  assume SCM-Data-Loc meets NAT;
  then consider x such that
A1: x in SCM-Data-Loc and
A2: x in NAT by XBOOLE_0:3;
  ex y,z st x = [y,z] by A1,RELAT_1:def 1;
  hence contradiction by A2;
end;

definition
  func SCM-OK -> Function of SCM-Memory, {INT} \/ { SCM-Instr, NAT } means
  :
  Def5: for
 k being Element of SCM-Memory holds (k = NAT implies it.k = NAT) & (k
  in SCM-Data-Loc implies it.k = INT) & (k in NAT implies it.k = SCM-Instr);
  existence
  proof
    defpred P[set,set] means $1 = NAT & $2 = NAT or $1 in SCM-Data-Loc & $2 =
    INT or $1 in NAT & $2 = SCM-Instr;
A1: now
      let k be Element of SCM-Memory;
A2:   {INT} \/ { SCM-Instr, NAT } = {INT, SCM-Instr, NAT} by ENUMSET1:42;
      then
A3:   NAT in {INT} \/ { SCM-Instr, NAT } by ENUMSET1:def 1;
A4:   P[k,NAT] or P[k,INT] or P[k,SCM-Instr]by Lm1;
      INT in {INT} \/ { SCM-Instr, NAT } & SCM-Instrin {INT} \/ {
      SCM-Instr, NAT } by A2,ENUMSET1:def 1;
      hence ex b being Element of {INT} \/ { SCM-Instr, NAT } st P[k,b] by A3
,A4;
    end;
    consider h being Function of SCM-Memory, {INT} \/ { SCM-Instr, NAT } such
    that
A5: for a being Element of SCM-Memory holds P[a,h.a] from FUNCT_2:sch
    3(A1);
    take h;
    let k be Element of SCM-Memory;
A6: P[k,h.k] by A5;
    hence k = NAT implies h.k = NAT by Lm2;
    thus k in SCM-Data-Loc implies h.k = INT by A6,Lm2,Lm3,XBOOLE_0:3;
    thus thesis by A6,Lm3,XBOOLE_0:3;
  end;
  uniqueness
  proof
    let f,g be Function of SCM-Memory, {INT} \/ { SCM-Instr, NAT } such that
A7: for k being Element of SCM-Memory holds (k = NAT implies f.k = NAT
) & (k in SCM-Data-Loc implies f.k = INT) & (k in NAT implies f.k = SCM-Instr)
    and
A8: for k being Element of SCM-Memory holds (k = NAT implies g.k = NAT
) & (k in SCM-Data-Loc implies g.k = INT) & (k in NAT implies g.k = SCM-Instr);
    now
      let k be Element of SCM-Memory;
      now
        per cases by Lm1;
        suppose
A9:       k = NAT;
          hence f.k = NAT by A7
            .= g.k by A8,A9;
        end;
        suppose
A10:      k in SCM-Data-Loc;
          hence f.k = INT by A7
            .= g.k by A8,A10;
        end;
        suppose
A11:      k in NAT;
          hence f.k = SCM-Instr by A7
            .= g.k by A8,A11;
        end;
      end;
      hence f.k = g.k;
    end;
    hence thesis by FUNCT_2:113;
  end;
end;

registration let x,y,z be set;
 cluster [x,y,z] -> finite;
 coherence;
end;

registration let x,y,z be set;
 cluster [x,y,z] -> non natural;
 coherence;
end;

theorem Th6:
  SCM-Instr <> INT & NAT <> SCM-Instr
proof
  now
    assume 2 in SCM-Instr;
    then
    2 in { [SCM-Halt,{},{}] } \/ { [J,<*a2*>,{}] : J = 6 }
     \/ { [K,<*a1*>,<*b1*>] : K
    in { 7,8 } } or 2 in { [I,{},<*b,c*>] : I in { 1,2,3,4,5}
     } by XBOOLE_0:def 3;
    then
    2 in { [SCM-Halt,{},{}] } \/ { [J,<*a2*>,{}] : J = 6 }
     or 2 in { [K,<*a1*>,<*b1*>
    ] : K in { 7,8 } } or 2 in { [I,{},<*b,c*>] : I in { 1,2,3,4,5} } by
XBOOLE_0:def 3;
    then
    2 in { [SCM-Halt,{},{}] } or 2 in { [J,<*a2*>,{}] : J = 6 } or
    2 in { [K,<*a1*>,<*b1*>] : K in { 7,8 } } or
    2 in { [I,{},<*b,c*>] : I in { 1,2,3,4,5} } by XBOOLE_0:def 3;
    then
    2 = [SCM-Halt,{},{}] or (ex J,a st 2 = [J,<*a*>,{}] & J = 6) or
    (ex K,a1,b1 st 2 = [K,<*a1*>,<*b1*>] & K in { 7,8 }) or
     ex I,b,c st 2 = [I,{},<*b,c*>] & I in { 1,2,3,4,5} by TARSKI:def 1;
    hence contradiction;
  end;
  hence thesis by INT_1:def 2;
end;

theorem Th7:
  for i being Element of SCM-Memory holds SCM-OK.i = NAT iff i = NAT
proof
  let i be Element of SCM-Memory;
  thus SCM-OK.i = NAT implies i = NAT
  proof
    assume
A1: SCM-OK.i = NAT;
    assume i <> NAT;
    then i in SCM-Data-Loc or i in NAT by Lm1;
    hence contradiction by A1,Def5,Th6,NUMBERS:27;
  end;
  thus thesis by Def5;
end;

theorem Th8:
  for i being Element of SCM-Memory holds SCM-OK.i = INT iff i in SCM-Data-Loc
proof
  let i be Element of SCM-Memory;
  thus SCM-OK.i = INT implies i in SCM-Data-Loc
  proof
    assume
A1: SCM-OK.i = INT;
    assume not i in SCM-Data-Loc;
    then i = NAT or i in NAT by Lm1;
    hence contradiction by A1,Def5,Th6,NUMBERS:27;
  end;
  thus thesis by Def5;
end;

theorem Th9:
  for i being Element of SCM-Memory holds SCM-OK.i = SCM-Instr iff i in NAT
proof
  let i be Element of SCM-Memory;
  thus SCM-OK.i = SCM-Instr implies i in NAT
  proof
    assume
A1: SCM-OK.i = SCM-Instr;
    assume not i in NAT;
    then i = NAT or i in SCM-Data-Loc by Lm1;
    hence contradiction by A1,Def5,Th6;
  end;
  thus thesis by Def5;
end;

definition
  mode SCM-State is Element of product SCM-OK;
end;

theorem
  for a being Element of SCM-Data-Loc holds SCM-OK.a = INT by Th8;

theorem
  for a being Element of NAT holds SCM-OK.a = SCM-Instr by Th9;

theorem
  for a being Element of NAT, t being Element of SCM-Data-Loc holds a <> t
proof
  let a be Element of NAT, t be Element of SCM-Data-Loc;
  SCM-OK.a = SCM-Instr by Th9;
  hence thesis by Th6,Th8;
end;

Lm4: NAT in SCM-Memory
proof
  NAT in {NAT} by TARSKI:def 1;
  then NAT in {NAT} \/ SCM-Data-Loc by XBOOLE_0:def 3;
  hence thesis by XBOOLE_0:def 3;
end;

theorem Th13:
  pi(product SCM-OK,NAT) = NAT
proof
  dom SCM-OK = SCM-Memory by FUNCT_2:def 1;
  hence pi(product SCM-OK,NAT) = SCM-OK.NAT by Lm4,CARD_3:22
    .= NAT by Lm4,Th7;
end;

theorem Th14:
  for a being Element of SCM-Data-Loc holds pi(product SCM-OK,a) = INT
proof
  let a be Element of SCM-Data-Loc;
  dom SCM-OK = SCM-Memory by FUNCT_2:def 1;
  hence pi(product SCM-OK,a) = SCM-OK.a by CARD_3:22
    .= INT by Th8;
end;

theorem
  for a being Element of NAT holds pi(product SCM-OK,a) = SCM-Instr
proof
  let a be Element of NAT;
  dom SCM-OK = SCM-Memory by FUNCT_2:def 1;
  hence pi(product SCM-OK,a) = SCM-OK.a by CARD_3:22
    .= SCM-Instr by Th9;
end;

definition
  let s be SCM-State;
  func IC(s) -> Element of NAT equals
  s.NAT;
  coherence by Th13,CARD_3:def 6;
end;

definition
  let s be SCM-State, u be Nat;
  func SCM-Chg(s,u) -> SCM-State equals
  s +* (NAT .--> u);
  coherence
  proof
A1: now
      let x be set;
      assume
A2:   x in dom(SCM-OK);
      now
        per cases;
        suppose
A3:       x = NAT;
          {NAT} = dom(NAT .--> u) by FUNCOP_1:19;
          then NAT in dom(NAT .--> u) by TARSKI:def 1;
          then (s +* (NAT .--> u)).NAT = (NAT .--> u).NAT by FUNCT_4:14
            .= u by FUNCOP_1:87;
          then (s +* (NAT .--> u)).NAT in NAT by ORDINAL1:def 13;
          hence (s +* (NAT .--> u)).x in SCM-OK.x by A3,Lm4,Th7;
        end;
        suppose
A4:       x <> NAT;
          {NAT} = dom(NAT .--> u) by FUNCOP_1:19;
          then not x in dom(NAT .--> u) by A4,TARSKI:def 1;
          then (s +* (NAT .--> u)).x = s.x by FUNCT_4:12;
          hence (s +* (NAT .--> u)).x in SCM-OK.x by A2,CARD_3:18;
        end;
      end;
      hence (s +* (NAT .--> u)).x in SCM-OK.x;
    end;
A5: dom(SCM-OK) = SCM-Memory by FUNCT_2:def 1;
    then dom s = SCM-Memory by CARD_3:18;
    then dom(s +* (NAT .--> u)) = SCM-Memory \/ dom(NAT .--> u) by
FUNCT_4:def 1
      .= SCM-Memory \/ {NAT} by FUNCOP_1:19
      .= dom(SCM-OK) by A5,Lm4,ZFMISC_1:46;
    hence thesis by A1,CARD_3:18;
  end;
end;

theorem
  for s being SCM-State, u being Nat holds SCM-Chg(s,u).NAT = u
proof
  let s be SCM-State, u be Nat;
  {NAT} = dom(NAT .--> u) by FUNCOP_1:19;
  then NAT in dom(NAT .--> u) by TARSKI:def 1;
  hence SCM-Chg(s,u).NAT = (NAT .--> u).NAT by FUNCT_4:14
    .= u by FUNCOP_1:87;
end;

theorem
  for s being SCM-State, u being Nat, mk being Element of SCM-Data-Loc
  holds SCM-Chg(s,u).mk = s.mk
proof
  let s be SCM-State, u be Nat, mk be Element of SCM-Data-Loc;
A1: {NAT} = dom(NAT .--> u) by FUNCOP_1:19;
  SCM-OK.NAT = NAT & SCM-OK.mk = INT by Lm4,Th7,Th8;
  then not mk in dom(NAT .--> u) by A1,NUMBERS:27,TARSKI:def 1;
  hence thesis by FUNCT_4:12;
end;

theorem
  for s being SCM-State, u,v being Nat holds SCM-Chg(s,u).v = s.v
proof
  let s be SCM-State, u,v be Nat;
  {NAT} = dom(NAT .--> u) by FUNCOP_1:19;
  then not v in dom(NAT .--> u) by TARSKI:def 1;
  hence thesis by FUNCT_4:12;
end;

definition
  let s be SCM-State, t be Element of SCM-Data-Loc, u be Integer;
  func SCM-Chg(s,t,u) -> SCM-State equals
  s +* (t .--> u);
  coherence
  proof
A1: now
      let x be set;
      assume
A2:   x in dom(SCM-OK);
      now
        per cases;
        suppose
A3:       x = t;
          {t} = dom(t .--> u) by FUNCOP_1:19;
          then t in dom(t .--> u) by TARSKI:def 1;
          then (s +* (t .--> u)).t = (t .--> u).t by FUNCT_4:14
            .= u by FUNCOP_1:87;
          then (s +* (t .--> u)).t in INT by INT_1:def 2;
          hence (s +* (t .--> u)).x in SCM-OK.x by A3,Th8;
        end;
        suppose
A4:       x <> t;
          {t} = dom(t .--> u) by FUNCOP_1:19;
          then not x in dom(t .--> u) by A4,TARSKI:def 1;
          then (s +* (t .--> u)).x = s.x by FUNCT_4:12;
          hence (s +* (t .--> u)).x in SCM-OK.x by A2,CARD_3:18;
        end;
      end;
      hence (s +* (t .--> u)).x in SCM-OK.x;
    end;
A5: dom(SCM-OK) = SCM-Memory by FUNCT_2:def 1;
    then dom s = SCM-Memory by CARD_3:18;
    then dom(s +* (t .--> u)) = SCM-Memory \/ dom(t .--> u) by FUNCT_4:def 1
      .= SCM-Memory \/ {t} by FUNCOP_1:19
      .= dom(SCM-OK) by A5,ZFMISC_1:46;
    hence thesis by A1,CARD_3:18;
  end;
end;

theorem
  for s being SCM-State, t being Element of SCM-Data-Loc, u being
  Integer holds SCM-Chg(s,t,u).NAT = s.NAT
proof
  let s be SCM-State, t be Element of SCM-Data-Loc, u be Integer;
A1: {t} = dom(t .--> u) by FUNCOP_1:19;
  SCM-OK.NAT = NAT & SCM-OK.t = INT by Lm4,Th7,Th8;
  then not NAT in dom(t .--> u) by A1,NUMBERS:27,TARSKI:def 1;
  hence thesis by FUNCT_4:12;
end;

theorem
  for s being SCM-State, t being Element of SCM-Data-Loc, u being
  Integer holds SCM-Chg(s,t,u).t = u
proof
  let s be SCM-State, t be Element of SCM-Data-Loc, u be Integer;
  {t} = dom(t .--> u) by FUNCOP_1:19;
  then t in dom(t .--> u) by TARSKI:def 1;
  hence SCM-Chg(s,t,u).t = (t .--> u).t by FUNCT_4:14
    .= u by FUNCOP_1:87;
end;

theorem
  for s being SCM-State, t being Element of SCM-Data-Loc, u being
Integer, mk being Element of SCM-Data-Loc st mk <> t holds SCM-Chg(s,t,u).mk =
  s.mk
proof
  let s be SCM-State, t be Element of SCM-Data-Loc, u be Integer, mk be
  Element of SCM-Data-Loc such that
A1: mk <> t;
  {t} = dom(t .--> u) by FUNCOP_1:19;
  then not mk in dom(t .--> u) by A1,TARSKI:def 1;
  hence thesis by FUNCT_4:12;
end;

theorem
  for s being SCM-State, t being Element of SCM-Data-Loc, u being
  Integer, v being Element of NAT holds SCM-Chg(s,t,u).v = s.v
proof
  let s be SCM-State, t be Element of SCM-Data-Loc, u be Integer, v be Element
  of NAT;
  SCM-OK.v = SCM-Instr & {t} = dom(t .--> u) by Th9,FUNCOP_1:19;
  then not v in dom(t .--> u) by Th6,Th8;
  hence thesis by FUNCT_4:12;
end;

definition
  let x be Element of SCM-Instr;
  given mk, ml being Element of SCM-Data-Loc, I such that
A1: x = [ I, {}, <*mk, ml*>];
  func x address_1 -> Element of SCM-Data-Loc means
  :Def9:
  ex f being FinSequence of SCM-Data-Loc st f = x`3_3 & it = f/.1;
  existence
  proof
    take mk,<*mk, ml*>;
    thus thesis by A1,FINSEQ_4:26,RECDEF_2:def 3;
  end;
  uniqueness;
  func x address_2 -> Element of SCM-Data-Loc means
  :Def10:
  ex f being FinSequence of SCM-Data-Loc st f = x`3_3 & it = f/.2;
  existence
  proof
    take ml,<*mk, ml*>;
    thus thesis by A1,FINSEQ_4:26,RECDEF_2:def 3;
  end;
  correctness;
end;

theorem
  for x being Element of SCM-Instr, mk, ml being Element of SCM-Data-Loc, I
   st x = [ I, {}, <*mk, ml*>] holds x address_1 = mk & x address_2 = ml
proof
  let x be Element of SCM-Instr, mk,ml be Element of SCM-Data-Loc, I;
  assume
A1: x = [ I, {}, <*mk,ml*>];
  then consider f being FinSequence of SCM-Data-Loc such that
A2: f = x`3_3 and
A3: x address_1 = f/.1 by Def9;
  f = <*mk,ml*> by A1,A2,RECDEF_2:def 3;
  hence x address_1 = mk by A3,FINSEQ_4:26;
  consider f being FinSequence of SCM-Data-Loc such that
A4: f = x`3_3 and
A5: x address_2 = f/.2 by A1,Def10;
  f = <*mk,ml*> by A1,A4,RECDEF_2:def 3;
  hence thesis by A5,FINSEQ_4:26;
end;

definition
  let x be Element of SCM-Instr;
  given mk being Element of NAT, I such that
A1: x = [ I, <*mk*>, {}];
  func x jump_address -> Element of NAT means
:Def11: ex f being FinSequence of NAT st f = x`2_3 & it = f/.1;
  existence
  proof
    take mk,<*mk*>;
    thus thesis by A1,FINSEQ_4:25,RECDEF_2:def 2;
  end;
  correctness;
end;

theorem
  for x being Element of SCM-Instr, mk being Element of NAT, I st x = [
  I, <*mk*>, {}] holds x jump_address = mk
proof
  let x be Element of SCM-Instr, mk be Element of NAT, I;
  assume
A1: x = [ I, <*mk*>, {}];
  then consider f being FinSequence of NAT such that
A2: f = x`2_3 and
A3: x jump_address = f/.1 by Def11;
  f = <*mk*> by A1,A2,RECDEF_2:def 2;
  hence thesis by A3,FINSEQ_4:25;
end;

definition
  let x be Element of SCM-Instr;
  given mk being Element of NAT, ml being Element of SCM-Data-Loc, I such that
A1: x = [ I, <*mk*>, <*ml*>];
  func x cjump_address -> Element of NAT means
  :Def12:
  ex mk being Element of NAT st <*mk*> = x`2_3 & it = <*mk*>/.1;
  existence
  proof
    take mk,mk;
    thus thesis by A1,FINSEQ_4:25,RECDEF_2:def 2;
  end;
  correctness;
  func x cond_address -> Element of SCM-Data-Loc means
  :Def13:
  ex ml being Element of SCM-Data-Loc st <*ml*> = x`3_3 & it = <*ml*>/.1;
  existence
  proof
    take ml,ml;
    thus thesis by A1,FINSEQ_4:25,RECDEF_2:def 3;
  end;
  correctness;
end;

theorem
  for x being Element of SCM-Instr, mk being Element of NAT, ml being
Element of SCM-Data-Loc, I
 st x = [ I, <*mk*>, <*ml*>] holds x cjump_address = mk &
  x cond_address = ml
proof
  let x be Element of SCM-Instr, mk be Element of NAT, ml be Element of
  SCM-Data-Loc, I;
  assume
A1: x = [ I, <*mk*>, <*ml*>];
  then consider
  mk9 being Element of NAT such
  that
A2: <*mk9*> = x`2_3 and
A3: x cjump_address = <*mk9*>/.1 by Def12;
  <*mk9*> = <*mk*> by A1,A2,RECDEF_2:def 2;
  hence x cjump_address = mk by A3,FINSEQ_4:25;
  consider ml9 being Element of SCM-Data-Loc such
  that
A4: <*ml9*> = x`3_3 and
A5: x cond_address = <*ml9*>/.1 by A1,Def13;
  <*ml9*> = <*ml*> by A1,A4,RECDEF_2:def 3;
  hence thesis by A5,FINSEQ_4:25;
end;

registration
  let s be SCM-State, a be Element of SCM-Data-Loc;
  cluster s.a -> integer;
  coherence
  proof
    s.a in pi(product SCM-OK,a) by CARD_3:def 6;
    then s.a in INT by Th14;
    hence thesis;
  end;
end;

definition
  canceled 2;
  let x be Element of SCM-Instr, s be SCM-State;
  func SCM-Exec-Res(x,s) -> SCM-State equals
  SCM-Chg(SCM-Chg(s, x address_1,s.(x address_2)), succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [1, {}, <*mk, ml*>],
  SCM-Chg(SCM-Chg(s,x address_1, s.(x address_1)+s.(x address_2)),succ IC s)
   if ex mk, ml being Element of SCM-Data-Loc st x = [ 2, {}, <*mk, ml*>],
  SCM-Chg(SCM-Chg(s,x address_1, s.(x address_1)-s.(x address_2)),succ IC s)
  if ex mk, ml being Element of SCM-Data-Loc st x = [ 3, {}, <*mk, ml*>],
  SCM-Chg(SCM-Chg(s,x address_1, s.(x address_1)*s.(x address_2)),succ IC s)
  if ex mk, ml being Element of SCM-Data-Loc st x = [ 4, {}, <*mk, ml*>],
  SCM-Chg(SCM-Chg( SCM-Chg(s,
    x address_1, s.(x address_1) div s.(x address_2)),
    x address_2, s.(x address_1) mod s.(x address_2)),succ IC s)
  if ex mk, ml being Element of SCM-Data-Loc st x = [ 5, {}, <*mk, ml*>],
  SCM-Chg(s,x jump_address)
  if ex mk being Element of NAT st x = [ 6, <*mk*>, {}],
  SCM-Chg(s,IFEQ(s.(x cond_address),0,x cjump_address,succ IC s))
  if ex mk being Element of NAT, ml being Element of SCM-Data-Loc st
   x = [7, <*mk*>, <*ml*>],
  SCM-Chg(s,IFGT(s.(x cond_address),0,x cjump_address,succ IC s))
  if ex mk being Element of NAT, ml being Element of SCM-Data-Loc st
   x = [ 8, <*mk*>, <*ml*>]
  otherwise s;
  consistency by MCART_1:28;
  coherence;
end;

definition
  let A be set, B be non empty set;
  mode Action of A,B is Function of A, Funcs(B,B);
end;

definition
  func SCM-Exec -> Action of SCM-Instr, product SCM-OK means
  for x being Element of SCM-Instr, y being SCM-State holds (it.x).y =
  SCM-Exec-Res(x,y);
  existence
  proof
    consider f being Function of [:SCM-Instr,product SCM-OK:], product SCM-OK
    such that
A1: for x being Element of SCM-Instr, y being SCM-State holds f.(x,y)
    = SCM-Exec-Res(x,y) from BINOP_1:sch 4;
    take curry f;
    let x be Element of SCM-Instr, y be SCM-State;
    thus (curry f).x.y = f.(x,y) by CAT_2:3
      .= SCM-Exec-Res(x,y) by A1;
  end;
  uniqueness
  proof
    let f,g be Action of SCM-Instr, product SCM-OK such that
A2: for x being Element of SCM-Instr, y being SCM-State holds (f.x).y
    = SCM-Exec-Res(x,y) and
A3: for x being Element of SCM-Instr, y being SCM-State holds (g.x).y
    = SCM-Exec-Res(x,y);
    now
      let x be Element of SCM-Instr;
      reconsider gx=g.x, fx=f.x as Function of product SCM-OK, product SCM-OK;
      now
        let y be SCM-State;
        thus fx.y = SCM-Exec-Res(x,y) by A2
          .= gx.y by A3;
      end;
      hence f.x = g.x by FUNCT_2:113;
    end;
    hence f = g by FUNCT_2:113;
  end;
end;

begin :: Addenda
:: missing, 2007.07.27, A.T.

canceled;

theorem
  not NAT in SCM-Data-Loc by Lm2;

canceled;

theorem
  SCM-Data-Loc misses NAT by Lm3;

theorem
  NAT in SCM-Memory by Lm4;

canceled;

theorem
  x in SCM-Data-Loc implies ex k being Element of NAT st x = [1,k]
proof
  assume x in SCM-Data-Loc;
  then consider y,z such that
A1: y in {1} and
A2: z in NAT and
A3: x = [y,z] by ZFMISC_1:103;
  reconsider k = z as Element of NAT by A2;
  take k;
  thus thesis by A1,A3,TARSKI:def 1;
end;

theorem
  for k being natural number holds [1,k] in SCM-Data-Loc
proof
  let k be natural number;
  1 in {1} & k in NAT by ORDINAL1:def 13,TARSKI:def 1;
  hence thesis by ZFMISC_1:106;
end;

theorem
 SCM-Instr c= [:NAT,NAT*,proj2 SCM-Instr:]
proof
 let x;
 assume
Z:  x in SCM-Instr;
 per cases by Z,XBOOLE_0:def 3;
 suppose
S: x in {[SCM-Halt,{},{}] }
  \/ { [J,<*a2*>,{}] : J = 6 } \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } };
 per cases by S,XBOOLE_0:def 3;
 suppose
S: x in {[SCM-Halt,{},{}] } \/ { [J,<*a2*>,{}] : J = 6 };
 per cases by S,XBOOLE_0:def 3;
 suppose x in {[SCM-Halt,{},{}] };
  then
W: x = [SCM-Halt,{},{}] by TARSKI:def 1;
  then SCM-Halt in NAT & {} in NAT* &
   {} in proj2 SCM-Instr by Z,RELAT_1:def 5,FINSEQ_1:66;
 hence x in [:NAT,NAT*,proj2 SCM-Instr:] by W,DOMAIN_1:15;
 end;
 suppose x in { [J,<*a2*>,{}] : J = 6 };
  then consider J,a such that
W: x = [J,<*a*>,{}] & J = 6;
  J in NAT & <*a*> in NAT* & {} in proj2 SCM-Instr
   by Z,W,RELAT_1:def 5,FUNCT_7:20;
 hence x in [:NAT,NAT*,proj2 SCM-Instr:] by W,DOMAIN_1:15;
 end;
 end;
 suppose x in { [K,<*a1*>,<*b1*>] : K in { 7,8 }};
  then consider K,a1,b1 such that
W: x = [K,<*a1*>,<*b1*>] & K in { 7,8 };
  K in NAT & <*a1*> in NAT* &
  <*b1*> in proj2 SCM-Instr by Z,W,RELAT_1:def 5,FUNCT_7:20;
 hence x in [:NAT,NAT*,proj2 SCM-Instr:] by W,DOMAIN_1:15;
 end;
 end;
 suppose x in { [I,{},<*b,c*>] : I in { 1,2,3,4,5} };
  then consider I,b,c such that
W: x = [I,{},<*b,c*>] & I in { 1,2,3,4,5};
  I in NAT & {} in NAT* &
   <*b,c*> in proj2 SCM-Instr by Z,W,RELAT_1:def 5,FINSEQ_1:66;
 hence x in [:NAT,NAT*,proj2 SCM-Instr:] by W,DOMAIN_1:15;
 end;
end;

registration
 cluster proj2 SCM-Instr -> FinSequence-membered;
 coherence
  proof let f be set;
   assume f in proj2 SCM-Instr;
    then consider y being set such that
Z:   [y,f] in SCM-Instr by RELAT_1:def 5;
    set x = [y,f];
 per cases by Z,XBOOLE_0:def 3;
 suppose
S: x in {[SCM-Halt,{},{}] }
  \/ { [J,<*a2*>,{}] : J = 6 } \/ { [K,<*a1*>,<*b1*>] : K in { 7,8 } };
 per cases by S,XBOOLE_0:def 3;
 suppose
S: x in {[SCM-Halt,{},{}] } \/ { [J,<*a2*>,{}] : J = 6 };
 per cases by S,XBOOLE_0:def 3;
 suppose x in {[SCM-Halt,{},{}] };
  then x = [SCM-Halt,{},{}] by TARSKI:def 1;
  then f = {} by ZFMISC_1:33;
 hence f is FinSequence;
 end;
 suppose x in { [J,<*a2*>,{}] : J = 6 };
  then consider J,a such that
W: x = [J,<*a*>,{}] & J = 6;
  f = {} by W,ZFMISC_1:33;
 hence f is FinSequence;
 end;
 end;
 suppose x in { [K,<*a1*>,<*b1*>] : K in { 7,8 }};
  then consider K,a1,b1 such that
W: x = [K,<*a1*>,<*b1*>] & K in { 7,8 };
  f = <*b1*> by W,ZFMISC_1:33;
 hence f is FinSequence;
 end;
 end;
 suppose x in { [I,{},<*b,c*>] : I in { 1,2,3,4,5} };
  then consider I,b,c such that
W: x = [I,{},<*b,c*>] & I in { 1,2,3,4,5};
  f = <*b,c*> by W,ZFMISC_1:33;
 hence f is FinSequence;
 end;
  end;
end;
